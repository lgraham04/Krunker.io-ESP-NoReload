!function(t) {
    var e = {};
    function n(i) {
        if (e[i])
            return e[i].exports;
        var r = e[i] = {
            i: i,
            l: !1,
            exports: {}
        };
        return t[i].call(r.exports, r, r.exports, n),
        r.l = !0,
        r.exports
    }
    n.m = t,
    n.c = e,
    n.d = function(t, e, i) {
        n.o(t, e) || Object.defineProperty(t, e, {
            configurable: !1,
            enumerable: !0,
            get: i
        })
    }
    ,
    n.r = function(t) {
        Object.defineProperty(t, "__esModule", {
            value: !0
        })
    }
    ,
    n.n = function(t) {
        var e = t && t.__esModule ? function() {
            return t.default
        }
        : function() {
            return t
        }
        ;
        return n.d(e, "a", e),
        e
    }
    ,
    n.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    ,
    n.p = "",
    n(n.s = 79)
}([function(t, e, n) {
    var i = e.global = n(48)
      , r = e.hasBuffer = i && !!i.isBuffer
      , s = e.hasArrayBuffer = "undefined" != typeof ArrayBuffer
      , o = e.isArray = n(5);
    e.isArrayBuffer = s ? function(t) {
        return t instanceof ArrayBuffer || f(t)
    }
    : g;
    var a = e.isBuffer = r ? i.isBuffer : g
      , c = e.isView = s ? ArrayBuffer.isView || v("ArrayBuffer", "buffer") : g;
    e.alloc = d,
    e.concat = function(t, n) {
        n || (n = 0,
        Array.prototype.forEach.call(t, function(t) {
            n += t.length
        }));
        var i = this !== e && this || t[0]
          , r = d.call(i, n)
          , s = 0;
        return Array.prototype.forEach.call(t, function(t) {
            s += u.copy.call(t, r, s)
        }),
        r
    }
    ,
    e.from = function(t) {
        return "string" == typeof t ? function(t) {
            var e = 3 * t.length
              , n = d.call(this, e)
              , i = u.write.call(n, t);
            return e !== i && (n = u.slice.call(n, 0, i)),
            n
        }
        .call(this, t) : m(this).from(t)
    }
    ;
    var l = e.Array = n(46)
      , h = e.Buffer = n(45)
      , p = e.Uint8Array = n(44)
      , u = e.prototype = n(11);
    function d(t) {
        return m(this).alloc(t)
    }
    var f = v("ArrayBuffer");
    function m(t) {
        return a(t) ? h : c(t) ? p : o(t) ? l : r ? h : s ? p : l
    }
    function g() {
        return !1
    }
    function v(t, e) {
        return t = "[object " + t + "]",
        function(n) {
            return null != n && {}.toString.call(e ? n[e] : n) === t
        }
    }
}
, function(t, e, n) {
    (function(e) {
        t.exports.isProd = void 0 !== e && !!e.env.IS_PROD || "undefined" != typeof location && "127.0.0.1" !== location.hostname && "localhost" !== location.hostname && !location.hostname.startsWith("192.168."),
        t.exports.enableHttps = t.exports.isProd,
        t.exports.serverTickRate = 1e3 / 30,
        t.exports.serverSendRate = 100,
        t.exports.clientSendRate = 1e3 / 30,
        t.exports.dltMx = Math.round(1e3 / 30),
        t.exports.maxPlayers = 8,
        t.exports.serverSpread = 3,
        t.exports.minServerSpace = 3,
        t.exports.gamesPerServer = 5,
        t.exports.serverBrowserRate = 1e4,
        t.exports.maxPlayersTotal = t.exports.maxPlayers * t.exports.gamesPerServer + 50,
        t.exports.kickTimer = 9e4,
        t.exports.endTimer = 2e4,
        t.exports.endAnim = 5e3,
        t.exports.serverConfig = [{
            name: "Players",
            varN: "maxPlayers",
            def: 2,
            max: 10,
            maxF: 16,
            min: 1,
            step: 1
        }, {
            name: "Minutes",
            varN: "gameTime",
            def: 4,
            max: 60,
            min: 0,
            step: 1
        }, {
            name: "Gravity",
            varN: "gravMlt",
            dontChange: !0,
            def: 1,
            max: 2,
            min: .1,
            step: .1
        }, {
            name: "Jump Force",
            varN: "jumpMlt",
            dontChange: !0,
            def: 1,
            max: 3,
            min: .1,
            step: .1
        }, {
            name: "Time Scale",
            varN: "deltaMlt",
            dontChange: !0,
            def: 1,
            max: 1.5,
            min: .1,
            step: .1
        }, {
            name: "Strafe Speed",
            varN: "strafeSpd",
            dontChange: !0,
            def: 1.2,
            max: 2,
            min: 1,
            step: .1
        }, {
            name: "Health Multiplier",
            varN: "healthMlt",
            dontChange: !0,
            def: 1,
            max: 3,
            min: .1,
            step: .1
        }, {
            name: "Auto Jump",
            varN: "autoJump",
            bool: !0
        }, {
            name: "Hide Nametags",
            varN: "nameTags",
            bool: !0
        }],
        t.exports.prefabIDS = ["CUBE", "CRATE", "BARREL", "LADDER", "PLANE", "SPAWN_POINT", "CAMERA_POSITION", "VEHICLE", "STACK", "RAMP", "SCORE_ZONE", "BILLBOARD", "DEATH_ZONE", "PARTICLES", "OBJECTIVE"],
        t.exports.textureIDS = ["WALL", "DIRT", "FLOOR", "GRID", "GREY", "DEFAULT", "ROOF", "FLAG"],
        t.exports.objectLimit = 3500,
        t.exports.objectLimitF = 6e3,
        t.exports.spawnLimit = 20,
        t.exports.gravity = 15e-5,
        t.exports.deathY = -100,
        t.exports.skyScale = 18e3,
        t.exports.shadowDst = 1200,
        t.exports.shadowRes = 1024,
        t.exports.shadowOff = .004,
        t.exports.lightDistance = 500,
        t.exports.cornerPad = 1,
        t.exports.cornerScl = 2.5,
        t.exports.cornerH = 7,
        t.exports.wallH = 5,
        t.exports.wallW = .8,
        t.exports.crateScale = 6,
        t.exports.stackScale = 6,
        t.exports.barrelScale = 4,
        t.exports.vehicleScale = 20,
        t.exports.barrelMlt = 1.5,
        t.exports.ladderWidth = 3.2,
        t.exports.ladderScale = .5,
        t.exports.terrainGrid = 8,
        t.exports.otherSoundMlt = .55,
        t.exports.maxParticles = 100,
        t.exports.explosionRange = 200,
        t.exports.chatMaxLength = 70,
        t.exports.chatInterval = 800,
        t.exports.voiceChatInterval = 2e3,
        t.exports.voiceChatMaxLength = 5,
        t.exports.movDirs = [];
        for (var n = 0; n < 8; ++n)
            t.exports.movDirs.push(-Math.PI + (n + 1) * Math.PI / 4);
        t.exports.interpolation = 1.1,
        t.exports.stateHistory = 1e3,
        t.exports.syncFreq = 800,
        t.exports.pingCount = 10,
        t.exports.mouseSens = .0024,
        t.exports.camChaseTrn = .0022,
        t.exports.camChaseSpd = .0012,
        t.exports.camChaseSen = .2,
        t.exports.camChaseDst = 24,
        t.exports.menuCamDist = 200,
        t.exports.menuCamAngle = -.5,
        t.exports.menuCamSpeed = .1,
        t.exports.animMult = 1.2,
        t.exports.leanPull = .99,
        t.exports.leanSens = .04,
        t.exports.leanMax = .16,
        t.exports.leanPullZ = .99,
        t.exports.leanMltZ = .02,
        t.exports.bobMltY = .03,
        t.exports.bobMltZ = .05,
        t.exports.bobPullY = .985,
        t.exports.bobPullZ = .99,
        t.exports.landPull = .994,
        t.exports.landPullV = .985,
        t.exports.aimAnimMlt = .18,
        t.exports.aimSlow = .55,
        t.exports.aimJumpSlow = .85,
        t.exports.stepAnim = .075,
        t.exports.stepMlt = .25,
        t.exports.stepPull = .995,
        t.exports.maxHealth = 100,
        t.exports.passiveInc = 500,
        t.exports.cameraHeight = 1.5,
        t.exports.playerSpeed = 42e-5,
        t.exports.ladderSpeed = .035,
        t.exports.ladderDecel = .97,
        t.exports.groundDecel = .99,
        t.exports.airSpeed = 47e-6,
        t.exports.airDecel = .9996,
        t.exports.jumpVel = .072,
        t.exports.jumpPush = .1,
        t.exports.decelMin = 1e-4,
        t.exports.climbHeight = 3,
        t.exports.wpnSpin = .018,
        t.exports.materialDens = {
            flesh: .2,
            default: .5
        },
        t.exports.propGlows = {
            vehicle: !0
        },
        t.exports.nameOffset = .6,
        t.exports.nameOffsetHat = .8,
        t.exports.maxNameLength = 14,
        t.exports.maxPassLength = 16,
        t.exports.playerHeight = 11,
        t.exports.chestWidth = 2.6,
        t.exports.chestScale = 1.3,
        t.exports.armScale = 1.3,
        t.exports.legScale = 1.3,
        t.exports.uArmLength = 2.7,
        t.exports.armInset = -.1,
        t.exports.lArmLength = 2.7,
        t.exports.headScale = 2,
        t.exports.armOff = -.8,
        t.exports.legHeight = 4.2,
        t.exports.playerScale = (2 * t.exports.armScale + t.exports.chestWidth + t.exports.armInset) / 2,
        t.exports.hitBoxPad = 1,
        t.exports.tracerMinDst = 20,
        t.exports.tracerMaxDst = 500,
        t.exports.tracerChance = 1,
        t.exports.crouchLean = -.1 * Math.PI,
        t.exports.crouchDst = 2.5,
        t.exports.crouchSlow = .3,
        t.exports.crouchSpeed = .007,
        t.exports.crouchJump = .25,
        t.exports.crouchSpread = .4,
        t.exports.crouchAnim = 8e-4,
        t.exports.crouchAnimMlt = .5,
        t.exports.spreadMove = 30,
        t.exports.spreadFall = 35,
        t.exports.spreadRecover = .985,
        t.exports.spreadAdj = 63e-5,
        t.exports.spreadMlt = 400,
        t.exports.recoilMlt = .3,
        t.exports.maxLevel = 102,
        t.exports.assistTime = 5e3,
        t.exports.assistScore = 25,
        t.exports.assistMin = 20,
        t.exports.medalAnim = 1e3,
        t.exports.medalDelay = 900,
        t.exports.scoreStreak = 2e3,
        t.exports.feedTimer = 1500,
        t.exports.spinTimer = 1800,
        t.exports.endStats = ["sid", "name", "score", "kills", "deaths", "reward"],
        t.exports.endForm = {
            reward: function(t, e, n) {
                return t + "KR"
            },
            time: function(t, e, n) {
                return n.timer || "DNF"
            },
            infected: function(t, e, n) {
                return n.convs
            },
            found: function(t, e, n) {
                return n.convs
            }
        },
        t.exports.hitLife = 2e3,
        t.exports.regenDelay = 5e3,
        t.exports.regenVal = .1,
        t.exports.sprayTimer = 1e3,
        t.exports.sprayRange = 25,
        t.exports.sprayScale = 15,
        t.exports.deathDelay = 2800,
        t.exports.deathFollowD = 100,
        t.exports.suicides = ["suicide", "uninstall life", "toaster bath", "alt f4", "not alive", "neck rope", "sudoku", "scooter ankle", "death.exe"],
        t.exports.fov = 70,
        t.exports.viewDist = 2e3,
        t.exports.nameVisRate = 200,
        t.exports.worldUV = 60,
        t.exports.ambientVal = .3,
        t.exports.ambD = 2,
        t.exports.ambMlt = 15,
        t.exports.ambOff = .1,
        t.exports.ambScale = 10,
        t.exports.ambBleed = 0,
        t.exports.boosterSpd = .002,
        t.exports.rankVar = .03,
        t.exports.newDataInterval = 6e4,
        t.exports.socials = ["leaders", "profile", "maps"],
        t.exports.leaderQueries = ["score", "kills", "wins", "timeplayed", "funds", "clan"],
        t.exports.leaderCal = {
            player_score: function(e) {
                var n = Math.max(1, Math.floor(t.exports.rankVar * Math.sqrt(e)));
                return "<span class='floatR'><img src='./img/levels/" + Math.max(Math.min(t.exports.maxLevel - 2, n.roundToNearest(3) - 2), 0) + ".png' class='rnkIcon'>" + n + "</span>"
            },
            player_kills: function(t) {
                return t + "<span class='lName'> kills</span>"
            },
            player_wins: function(t) {
                return t + "<span class='lName'> wins</span>"
            },
            player_funds: function(t) {
                return t + " KR"
            },
            player_timeplayed: function(t) {
                var e = t / 1e3 / 60
                  , n = parseInt(e % 60);
                e /= 60;
                var i = parseInt(e % 24);
                e /= 24;
                var r = parseInt(e);
                return (r ? r + "d " : "") + (i ? i + "h " : "") + (n || 0) + "m "
            }
        }
    }
    ).call(this, n(15))
}
, function(t, e, n) {
    "use strict";
    function i() {}
    n.r(e),
    n.d(e, "WebGLRenderTargetCube", function() {
        return Xe
    }),
    n.d(e, "WebGLRenderTarget", function() {
        return qe
    }),
    n.d(e, "WebGLRenderer", function() {
        return nr
    }),
    n.d(e, "ShaderLib", function() {
        return on
    }),
    n.d(e, "UniformsLib", function() {
        return sn
    }),
    n.d(e, "UniformsUtils", function() {
        return en
    }),
    n.d(e, "ShaderChunk", function() {
        return tn
    }),
    n.d(e, "FogExp2", function() {
        return ir
    }),
    n.d(e, "Fog", function() {
        return rr
    }),
    n.d(e, "Scene", function() {
        return sr
    }),
    n.d(e, "Sprite", function() {
        return lr
    }),
    n.d(e, "LOD", function() {
        return hr
    }),
    n.d(e, "SkinnedMesh", function() {
        return dr
    }),
    n.d(e, "Skeleton", function() {
        return pr
    }),
    n.d(e, "Bone", function() {
        return ur
    }),
    n.d(e, "Mesh", function() {
        return Hn
    }),
    n.d(e, "LineSegments", function() {
        return gr
    }),
    n.d(e, "LineLoop", function() {
        return vr
    }),
    n.d(e, "Line", function() {
        return mr
    }),
    n.d(e, "Points", function() {
        return xr
    }),
    n.d(e, "Group", function() {
        return Qi
    }),
    n.d(e, "VideoTexture", function() {
        return wr
    }),
    n.d(e, "DataTexture", function() {
        return Ze
    }),
    n.d(e, "CompressedTexture", function() {
        return br
    }),
    n.d(e, "CubeTexture", function() {
        return jn
    }),
    n.d(e, "CanvasTexture", function() {
        return Mr
    }),
    n.d(e, "DepthTexture", function() {
        return _r
    }),
    n.d(e, "Texture", function() {
        return We
    }),
    n.d(e, "CompressedTextureLoader", function() {
        return Js
    }),
    n.d(e, "DataTextureLoader", function() {
        return Qs
    }),
    n.d(e, "CubeTextureLoader", function() {
        return to
    }),
    n.d(e, "TextureLoader", function() {
        return eo
    }),
    n.d(e, "ObjectLoader", function() {
        return ia
    }),
    n.d(e, "MaterialLoader", function() {
        return Jo
    }),
    n.d(e, "BufferGeometryLoader", function() {
        return Qo
    }),
    n.d(e, "DefaultLoadingManager", function() {
        return Xs
    }),
    n.d(e, "LoadingManager", function() {
        return qs
    }),
    n.d(e, "JSONLoader", function() {
        return na
    }),
    n.d(e, "ImageLoader", function() {
        return $s
    }),
    n.d(e, "ImageBitmapLoader", function() {
        return ca
    }),
    n.d(e, "FontLoader", function() {
        return ua
    }),
    n.d(e, "FileLoader", function() {
        return Ks
    }),
    n.d(e, "Loader", function() {
        return ta
    }),
    n.d(e, "LoaderUtils", function() {
        return ea
    }),
    n.d(e, "Cache", function() {
        return Ys
    }),
    n.d(e, "AudioLoader", function() {
        return ga
    }),
    n.d(e, "SpotLightShadow", function() {
        return Ro
    }),
    n.d(e, "SpotLight", function() {
        return Po
    }),
    n.d(e, "PointLight", function() {
        return Co
    }),
    n.d(e, "RectAreaLight", function() {
        return ko
    }),
    n.d(e, "HemisphereLight", function() {
        return Ao
    }),
    n.d(e, "DirectionalLightShadow", function() {
        return Io
    }),
    n.d(e, "DirectionalLight", function() {
        return Oo
    }),
    n.d(e, "AmbientLight", function() {
        return Do
    }),
    n.d(e, "LightShadow", function() {
        return Lo
    }),
    n.d(e, "Light", function() {
        return To
    }),
    n.d(e, "StereoCamera", function() {
        return va
    }),
    n.d(e, "PerspectiveCamera", function() {
        return $i
    }),
    n.d(e, "OrthographicCamera", function() {
        return dn
    }),
    n.d(e, "CubeCamera", function() {
        return ya
    }),
    n.d(e, "ArrayCamera", function() {
        return tr
    }),
    n.d(e, "Camera", function() {
        return un
    }),
    n.d(e, "AudioListener", function() {
        return xa
    }),
    n.d(e, "PositionalAudio", function() {
        return ba
    }),
    n.d(e, "AudioContext", function() {
        return ma
    }),
    n.d(e, "AudioAnalyser", function() {
        return Ma
    }),
    n.d(e, "Audio", function() {
        return wa
    }),
    n.d(e, "VectorKeyframeTrack", function() {
        return Xo
    }),
    n.d(e, "StringKeyframeTrack", function() {
        return qo
    }),
    n.d(e, "QuaternionKeyframeTrack", function() {
        return Yo
    }),
    n.d(e, "NumberKeyframeTrack", function() {
        return Vo
    }),
    n.d(e, "ColorKeyframeTrack", function() {
        return jo
    }),
    n.d(e, "BooleanKeyframeTrack", function() {
        return Go
    }),
    n.d(e, "PropertyMixer", function() {
        return _a
    }),
    n.d(e, "PropertyBinding", function() {
        return Ea
    }),
    n.d(e, "KeyframeTrack", function() {
        return Ho
    }),
    n.d(e, "AnimationUtils", function() {
        return Bo
    }),
    n.d(e, "AnimationObjectGroup", function() {
        return Ta
    }),
    n.d(e, "AnimationMixer", function() {
        return La
    }),
    n.d(e, "AnimationClip", function() {
        return Zo
    }),
    n.d(e, "Uniform", function() {
        return Ra
    }),
    n.d(e, "InstancedBufferGeometry", function() {
        return Pa
    }),
    n.d(e, "BufferGeometry", function() {
        return Pn
    }),
    n.d(e, "Geometry", function() {
        return gn
    }),
    n.d(e, "InterleavedBufferAttribute", function() {
        return ar
    }),
    n.d(e, "InstancedInterleavedBuffer", function() {
        return Ca
    }),
    n.d(e, "InterleavedBuffer", function() {
        return or
    }),
    n.d(e, "InstancedBufferAttribute", function() {
        return Ia
    }),
    n.d(e, "Face3", function() {
        return fn
    }),
    n.d(e, "Object3D", function() {
        return pn
    }),
    n.d(e, "Raycaster", function() {
        return Oa
    }),
    n.d(e, "Layers", function() {
        return ln
    }),
    n.d(e, "EventDispatcher", function() {
        return i
    }),
    n.d(e, "Clock", function() {
        return Ba
    }),
    n.d(e, "QuaternionLinearInterpolant", function() {
        return Wo
    }),
    n.d(e, "LinearInterpolant", function() {
        return zo
    }),
    n.d(e, "DiscreteInterpolant", function() {
        return Fo
    }),
    n.d(e, "CubicInterpolant", function() {
        return Uo
    }),
    n.d(e, "Interpolant", function() {
        return No
    }),
    n.d(e, "Triangle", function() {
        return Fn
    }),
    n.d(e, "Math", function() {
        return Ne
    }),
    n.d(e, "Spherical", function() {
        return Na
    }),
    n.d(e, "Cylindrical", function() {
        return Ua
    }),
    n.d(e, "Plane", function() {
        return Qe
    }),
    n.d(e, "Frustum", function() {
        return $e
    }),
    n.d(e, "Sphere", function() {
        return Je
    }),
    n.d(e, "Ray", function() {
        return zn
    }),
    n.d(e, "Matrix4", function() {
        return ze
    }),
    n.d(e, "Matrix3", function() {
        return Ge
    }),
    n.d(e, "Box3", function() {
        return Ke
    }),
    n.d(e, "Box2", function() {
        return za
    }),
    n.d(e, "Line3", function() {
        return Fa
    }),
    n.d(e, "Euler", function() {
        return cn
    }),
    n.d(e, "Vector4", function() {
        return Ye
    }),
    n.d(e, "Vector3", function() {
        return He
    }),
    n.d(e, "Vector2", function() {
        return Ue
    }),
    n.d(e, "Quaternion", function() {
        return Fe
    }),
    n.d(e, "Color", function() {
        return rn
    }),
    n.d(e, "ImmediateRenderObject", function() {
        return Ha
    }),
    n.d(e, "VertexNormalsHelper", function() {
        return Ga
    }),
    n.d(e, "SpotLightHelper", function() {
        return ja
    }),
    n.d(e, "SkeletonHelper", function() {
        return Va
    }),
    n.d(e, "PointLightHelper", function() {
        return Wa
    }),
    n.d(e, "RectAreaLightHelper", function() {
        return Ya
    }),
    n.d(e, "HemisphereLightHelper", function() {
        return qa
    }),
    n.d(e, "GridHelper", function() {
        return Xa
    }),
    n.d(e, "PolarGridHelper", function() {
        return Za
    }),
    n.d(e, "FaceNormalsHelper", function() {
        return Ka
    }),
    n.d(e, "DirectionalLightHelper", function() {
        return Ja
    }),
    n.d(e, "CameraHelper", function() {
        return Qa
    }),
    n.d(e, "BoxHelper", function() {
        return $a
    }),
    n.d(e, "Box3Helper", function() {
        return tc
    }),
    n.d(e, "PlaneHelper", function() {
        return ec
    }),
    n.d(e, "ArrowHelper", function() {
        return nc
    }),
    n.d(e, "AxesHelper", function() {
        return ic
    }),
    n.d(e, "Shape", function() {
        return Eo
    }),
    n.d(e, "Path", function() {
        return So
    }),
    n.d(e, "ShapePath", function() {
        return la
    }),
    n.d(e, "Font", function() {
        return ha
    }),
    n.d(e, "CurvePath", function() {
        return _o
    }),
    n.d(e, "Curve", function() {
        return no
    }),
    n.d(e, "ImageUtils", function() {
        return je
    }),
    n.d(e, "ShapeUtils", function() {
        return hs
    }),
    n.d(e, "WebGLUtils", function() {
        return Ji
    }),
    n.d(e, "WireframeGeometry", function() {
        return Sr
    }),
    n.d(e, "ParametricGeometry", function() {
        return Er
    }),
    n.d(e, "ParametricBufferGeometry", function() {
        return Tr
    }),
    n.d(e, "TetrahedronGeometry", function() {
        return Rr
    }),
    n.d(e, "TetrahedronBufferGeometry", function() {
        return Pr
    }),
    n.d(e, "OctahedronGeometry", function() {
        return Cr
    }),
    n.d(e, "OctahedronBufferGeometry", function() {
        return Ir
    }),
    n.d(e, "IcosahedronGeometry", function() {
        return Or
    }),
    n.d(e, "IcosahedronBufferGeometry", function() {
        return Dr
    }),
    n.d(e, "DodecahedronGeometry", function() {
        return kr
    }),
    n.d(e, "DodecahedronBufferGeometry", function() {
        return Br
    }),
    n.d(e, "PolyhedronGeometry", function() {
        return Ar
    }),
    n.d(e, "PolyhedronBufferGeometry", function() {
        return Lr
    }),
    n.d(e, "TubeGeometry", function() {
        return Nr
    }),
    n.d(e, "TubeBufferGeometry", function() {
        return Ur
    }),
    n.d(e, "TorusKnotGeometry", function() {
        return zr
    }),
    n.d(e, "TorusKnotBufferGeometry", function() {
        return Fr
    }),
    n.d(e, "TorusGeometry", function() {
        return Hr
    }),
    n.d(e, "TorusBufferGeometry", function() {
        return Gr
    }),
    n.d(e, "TextGeometry", function() {
        return vs
    }),
    n.d(e, "TextBufferGeometry", function() {
        return ys
    }),
    n.d(e, "SphereGeometry", function() {
        return xs
    }),
    n.d(e, "SphereBufferGeometry", function() {
        return ws
    }),
    n.d(e, "RingGeometry", function() {
        return bs
    }),
    n.d(e, "RingBufferGeometry", function() {
        return Ms
    }),
    n.d(e, "PlaneGeometry", function() {
        return On
    }),
    n.d(e, "PlaneBufferGeometry", function() {
        return Dn
    }),
    n.d(e, "LatheGeometry", function() {
        return _s
    }),
    n.d(e, "LatheBufferGeometry", function() {
        return Ss
    }),
    n.d(e, "ShapeGeometry", function() {
        return Es
    }),
    n.d(e, "ShapeBufferGeometry", function() {
        return Ts
    }),
    n.d(e, "ExtrudeGeometry", function() {
        return ds
    }),
    n.d(e, "ExtrudeBufferGeometry", function() {
        return fs
    }),
    n.d(e, "EdgesGeometry", function() {
        return Ls
    }),
    n.d(e, "ConeGeometry", function() {
        return Cs
    }),
    n.d(e, "ConeBufferGeometry", function() {
        return Is
    }),
    n.d(e, "CylinderGeometry", function() {
        return Rs
    }),
    n.d(e, "CylinderBufferGeometry", function() {
        return Ps
    }),
    n.d(e, "CircleGeometry", function() {
        return Os
    }),
    n.d(e, "CircleBufferGeometry", function() {
        return Ds
    }),
    n.d(e, "BoxGeometry", function() {
        return Cn
    }),
    n.d(e, "BoxBufferGeometry", function() {
        return In
    }),
    n.d(e, "ShadowMaterial", function() {
        return Bs
    }),
    n.d(e, "SpriteMaterial", function() {
        return cr
    }),
    n.d(e, "RawShaderMaterial", function() {
        return Ns
    }),
    n.d(e, "ShaderMaterial", function() {
        return Un
    }),
    n.d(e, "PointsMaterial", function() {
        return yr
    }),
    n.d(e, "MeshPhysicalMaterial", function() {
        return zs
    }),
    n.d(e, "MeshStandardMaterial", function() {
        return Us
    }),
    n.d(e, "MeshPhongMaterial", function() {
        return Fs
    }),
    n.d(e, "MeshToonMaterial", function() {
        return Hs
    }),
    n.d(e, "MeshNormalMaterial", function() {
        return Gs
    }),
    n.d(e, "MeshLambertMaterial", function() {
        return js
    }),
    n.d(e, "MeshDepthMaterial", function() {
        return qi
    }),
    n.d(e, "MeshDistanceMaterial", function() {
        return Xi
    }),
    n.d(e, "MeshBasicMaterial", function() {
        return Nn
    }),
    n.d(e, "LineDashedMaterial", function() {
        return Vs
    }),
    n.d(e, "LineBasicMaterial", function() {
        return fr
    }),
    n.d(e, "Material", function() {
        return Bn
    }),
    n.d(e, "Float64BufferAttribute", function() {
        return Tn
    }),
    n.d(e, "Float32BufferAttribute", function() {
        return En
    }),
    n.d(e, "Uint32BufferAttribute", function() {
        return Sn
    }),
    n.d(e, "Int32BufferAttribute", function() {
        return _n
    }),
    n.d(e, "Uint16BufferAttribute", function() {
        return Mn
    }),
    n.d(e, "Int16BufferAttribute", function() {
        return bn
    }),
    n.d(e, "Uint8ClampedBufferAttribute", function() {
        return wn
    }),
    n.d(e, "Uint8BufferAttribute", function() {
        return xn
    }),
    n.d(e, "Int8BufferAttribute", function() {
        return yn
    }),
    n.d(e, "BufferAttribute", function() {
        return vn
    }),
    n.d(e, "ArcCurve", function() {
        return ro
    }),
    n.d(e, "CatmullRomCurve3", function() {
        return ho
    }),
    n.d(e, "CubicBezierCurve", function() {
        return mo
    }),
    n.d(e, "CubicBezierCurve3", function() {
        return go
    }),
    n.d(e, "EllipseCurve", function() {
        return io
    }),
    n.d(e, "LineCurve", function() {
        return vo
    }),
    n.d(e, "LineCurve3", function() {
        return yo
    }),
    n.d(e, "QuadraticBezierCurve", function() {
        return xo
    }),
    n.d(e, "QuadraticBezierCurve3", function() {
        return wo
    }),
    n.d(e, "SplineCurve", function() {
        return bo
    }),
    n.d(e, "REVISION", function() {
        return r
    }),
    n.d(e, "MOUSE", function() {
        return s
    }),
    n.d(e, "CullFaceNone", function() {
        return o
    }),
    n.d(e, "CullFaceBack", function() {
        return a
    }),
    n.d(e, "CullFaceFront", function() {
        return c
    }),
    n.d(e, "CullFaceFrontBack", function() {
        return l
    }),
    n.d(e, "FrontFaceDirectionCW", function() {
        return h
    }),
    n.d(e, "FrontFaceDirectionCCW", function() {
        return p
    }),
    n.d(e, "BasicShadowMap", function() {
        return u
    }),
    n.d(e, "PCFShadowMap", function() {
        return d
    }),
    n.d(e, "PCFSoftShadowMap", function() {
        return f
    }),
    n.d(e, "FrontSide", function() {
        return m
    }),
    n.d(e, "BackSide", function() {
        return g
    }),
    n.d(e, "DoubleSide", function() {
        return v
    }),
    n.d(e, "FlatShading", function() {
        return y
    }),
    n.d(e, "SmoothShading", function() {
        return x
    }),
    n.d(e, "NoColors", function() {
        return w
    }),
    n.d(e, "FaceColors", function() {
        return b
    }),
    n.d(e, "VertexColors", function() {
        return M
    }),
    n.d(e, "NoBlending", function() {
        return _
    }),
    n.d(e, "NormalBlending", function() {
        return S
    }),
    n.d(e, "AdditiveBlending", function() {
        return E
    }),
    n.d(e, "SubtractiveBlending", function() {
        return T
    }),
    n.d(e, "MultiplyBlending", function() {
        return A
    }),
    n.d(e, "CustomBlending", function() {
        return L
    }),
    n.d(e, "AddEquation", function() {
        return R
    }),
    n.d(e, "SubtractEquation", function() {
        return P
    }),
    n.d(e, "ReverseSubtractEquation", function() {
        return C
    }),
    n.d(e, "MinEquation", function() {
        return I
    }),
    n.d(e, "MaxEquation", function() {
        return O
    }),
    n.d(e, "ZeroFactor", function() {
        return D
    }),
    n.d(e, "OneFactor", function() {
        return k
    }),
    n.d(e, "SrcColorFactor", function() {
        return B
    }),
    n.d(e, "OneMinusSrcColorFactor", function() {
        return N
    }),
    n.d(e, "SrcAlphaFactor", function() {
        return U
    }),
    n.d(e, "OneMinusSrcAlphaFactor", function() {
        return z
    }),
    n.d(e, "DstAlphaFactor", function() {
        return F
    }),
    n.d(e, "OneMinusDstAlphaFactor", function() {
        return H
    }),
    n.d(e, "DstColorFactor", function() {
        return G
    }),
    n.d(e, "OneMinusDstColorFactor", function() {
        return j
    }),
    n.d(e, "SrcAlphaSaturateFactor", function() {
        return V
    }),
    n.d(e, "NeverDepth", function() {
        return W
    }),
    n.d(e, "AlwaysDepth", function() {
        return Y
    }),
    n.d(e, "LessDepth", function() {
        return q
    }),
    n.d(e, "LessEqualDepth", function() {
        return X
    }),
    n.d(e, "EqualDepth", function() {
        return Z
    }),
    n.d(e, "GreaterEqualDepth", function() {
        return K
    }),
    n.d(e, "GreaterDepth", function() {
        return J
    }),
    n.d(e, "NotEqualDepth", function() {
        return Q
    }),
    n.d(e, "MultiplyOperation", function() {
        return $
    }),
    n.d(e, "MixOperation", function() {
        return tt
    }),
    n.d(e, "AddOperation", function() {
        return et
    }),
    n.d(e, "NoToneMapping", function() {
        return nt
    }),
    n.d(e, "LinearToneMapping", function() {
        return it
    }),
    n.d(e, "ReinhardToneMapping", function() {
        return rt
    }),
    n.d(e, "Uncharted2ToneMapping", function() {
        return st
    }),
    n.d(e, "CineonToneMapping", function() {
        return ot
    }),
    n.d(e, "UVMapping", function() {
        return at
    }),
    n.d(e, "CubeReflectionMapping", function() {
        return ct
    }),
    n.d(e, "CubeRefractionMapping", function() {
        return lt
    }),
    n.d(e, "EquirectangularReflectionMapping", function() {
        return ht
    }),
    n.d(e, "EquirectangularRefractionMapping", function() {
        return pt
    }),
    n.d(e, "SphericalReflectionMapping", function() {
        return ut
    }),
    n.d(e, "CubeUVReflectionMapping", function() {
        return dt
    }),
    n.d(e, "CubeUVRefractionMapping", function() {
        return ft
    }),
    n.d(e, "RepeatWrapping", function() {
        return mt
    }),
    n.d(e, "ClampToEdgeWrapping", function() {
        return gt
    }),
    n.d(e, "MirroredRepeatWrapping", function() {
        return vt
    }),
    n.d(e, "NearestFilter", function() {
        return yt
    }),
    n.d(e, "NearestMipMapNearestFilter", function() {
        return xt
    }),
    n.d(e, "NearestMipMapLinearFilter", function() {
        return wt
    }),
    n.d(e, "LinearFilter", function() {
        return bt
    }),
    n.d(e, "LinearMipMapNearestFilter", function() {
        return Mt
    }),
    n.d(e, "LinearMipMapLinearFilter", function() {
        return _t
    }),
    n.d(e, "UnsignedByteType", function() {
        return St
    }),
    n.d(e, "ByteType", function() {
        return Et
    }),
    n.d(e, "ShortType", function() {
        return Tt
    }),
    n.d(e, "UnsignedShortType", function() {
        return At
    }),
    n.d(e, "IntType", function() {
        return Lt
    }),
    n.d(e, "UnsignedIntType", function() {
        return Rt
    }),
    n.d(e, "FloatType", function() {
        return Pt
    }),
    n.d(e, "HalfFloatType", function() {
        return Ct
    }),
    n.d(e, "UnsignedShort4444Type", function() {
        return It
    }),
    n.d(e, "UnsignedShort5551Type", function() {
        return Ot
    }),
    n.d(e, "UnsignedShort565Type", function() {
        return Dt
    }),
    n.d(e, "UnsignedInt248Type", function() {
        return kt
    }),
    n.d(e, "AlphaFormat", function() {
        return Bt
    }),
    n.d(e, "RGBFormat", function() {
        return Nt
    }),
    n.d(e, "RGBAFormat", function() {
        return Ut
    }),
    n.d(e, "LuminanceFormat", function() {
        return zt
    }),
    n.d(e, "LuminanceAlphaFormat", function() {
        return Ft
    }),
    n.d(e, "RGBEFormat", function() {
        return Ht
    }),
    n.d(e, "DepthFormat", function() {
        return Gt
    }),
    n.d(e, "DepthStencilFormat", function() {
        return jt
    }),
    n.d(e, "RGB_S3TC_DXT1_Format", function() {
        return Vt
    }),
    n.d(e, "RGBA_S3TC_DXT1_Format", function() {
        return Wt
    }),
    n.d(e, "RGBA_S3TC_DXT3_Format", function() {
        return Yt
    }),
    n.d(e, "RGBA_S3TC_DXT5_Format", function() {
        return qt
    }),
    n.d(e, "RGB_PVRTC_4BPPV1_Format", function() {
        return Xt
    }),
    n.d(e, "RGB_PVRTC_2BPPV1_Format", function() {
        return Zt
    }),
    n.d(e, "RGBA_PVRTC_4BPPV1_Format", function() {
        return Kt
    }),
    n.d(e, "RGBA_PVRTC_2BPPV1_Format", function() {
        return Jt
    }),
    n.d(e, "RGB_ETC1_Format", function() {
        return Qt
    }),
    n.d(e, "RGBA_ASTC_4x4_Format", function() {
        return $t
    }),
    n.d(e, "RGBA_ASTC_5x4_Format", function() {
        return te
    }),
    n.d(e, "RGBA_ASTC_5x5_Format", function() {
        return ee
    }),
    n.d(e, "RGBA_ASTC_6x5_Format", function() {
        return ne
    }),
    n.d(e, "RGBA_ASTC_6x6_Format", function() {
        return ie
    }),
    n.d(e, "RGBA_ASTC_8x5_Format", function() {
        return re
    }),
    n.d(e, "RGBA_ASTC_8x6_Format", function() {
        return se
    }),
    n.d(e, "RGBA_ASTC_8x8_Format", function() {
        return oe
    }),
    n.d(e, "RGBA_ASTC_10x5_Format", function() {
        return ae
    }),
    n.d(e, "RGBA_ASTC_10x6_Format", function() {
        return ce
    }),
    n.d(e, "RGBA_ASTC_10x8_Format", function() {
        return le
    }),
    n.d(e, "RGBA_ASTC_10x10_Format", function() {
        return he
    }),
    n.d(e, "RGBA_ASTC_12x10_Format", function() {
        return pe
    }),
    n.d(e, "RGBA_ASTC_12x12_Format", function() {
        return ue
    }),
    n.d(e, "LoopOnce", function() {
        return de
    }),
    n.d(e, "LoopRepeat", function() {
        return fe
    }),
    n.d(e, "LoopPingPong", function() {
        return me
    }),
    n.d(e, "InterpolateDiscrete", function() {
        return ge
    }),
    n.d(e, "InterpolateLinear", function() {
        return ve
    }),
    n.d(e, "InterpolateSmooth", function() {
        return ye
    }),
    n.d(e, "ZeroCurvatureEnding", function() {
        return xe
    }),
    n.d(e, "ZeroSlopeEnding", function() {
        return we
    }),
    n.d(e, "WrapAroundEnding", function() {
        return be
    }),
    n.d(e, "TrianglesDrawMode", function() {
        return Me
    }),
    n.d(e, "TriangleStripDrawMode", function() {
        return _e
    }),
    n.d(e, "TriangleFanDrawMode", function() {
        return Se
    }),
    n.d(e, "LinearEncoding", function() {
        return Ee
    }),
    n.d(e, "sRGBEncoding", function() {
        return Te
    }),
    n.d(e, "GammaEncoding", function() {
        return Ae
    }),
    n.d(e, "RGBEEncoding", function() {
        return Le
    }),
    n.d(e, "LogLuvEncoding", function() {
        return Re
    }),
    n.d(e, "RGBM7Encoding", function() {
        return Pe
    }),
    n.d(e, "RGBM16Encoding", function() {
        return Ce
    }),
    n.d(e, "RGBDEncoding", function() {
        return Ie
    }),
    n.d(e, "BasicDepthPacking", function() {
        return Oe
    }),
    n.d(e, "RGBADepthPacking", function() {
        return De
    }),
    n.d(e, "TangentSpaceNormalMap", function() {
        return ke
    }),
    n.d(e, "ObjectSpaceNormalMap", function() {
        return Be
    }),
    n.d(e, "CubeGeometry", function() {
        return Cn
    }),
    n.d(e, "Face4", function() {
        return rc
    }),
    n.d(e, "LineStrip", function() {
        return sc
    }),
    n.d(e, "LinePieces", function() {
        return oc
    }),
    n.d(e, "MeshFaceMaterial", function() {
        return ac
    }),
    n.d(e, "MultiMaterial", function() {
        return cc
    }),
    n.d(e, "PointCloud", function() {
        return lc
    }),
    n.d(e, "Particle", function() {
        return hc
    }),
    n.d(e, "ParticleSystem", function() {
        return pc
    }),
    n.d(e, "PointCloudMaterial", function() {
        return uc
    }),
    n.d(e, "ParticleBasicMaterial", function() {
        return dc
    }),
    n.d(e, "ParticleSystemMaterial", function() {
        return fc
    }),
    n.d(e, "Vertex", function() {
        return mc
    }),
    n.d(e, "DynamicBufferAttribute", function() {
        return gc
    }),
    n.d(e, "Int8Attribute", function() {
        return vc
    }),
    n.d(e, "Uint8Attribute", function() {
        return yc
    }),
    n.d(e, "Uint8ClampedAttribute", function() {
        return xc
    }),
    n.d(e, "Int16Attribute", function() {
        return wc
    }),
    n.d(e, "Uint16Attribute", function() {
        return bc
    }),
    n.d(e, "Int32Attribute", function() {
        return Mc
    }),
    n.d(e, "Uint32Attribute", function() {
        return _c
    }),
    n.d(e, "Float32Attribute", function() {
        return Sc
    }),
    n.d(e, "Float64Attribute", function() {
        return Ec
    }),
    n.d(e, "ClosedSplineCurve3", function() {
        return Tc
    }),
    n.d(e, "SplineCurve3", function() {
        return Ac
    }),
    n.d(e, "Spline", function() {
        return Lc
    }),
    n.d(e, "AxisHelper", function() {
        return Rc
    }),
    n.d(e, "BoundingBoxHelper", function() {
        return Pc
    }),
    n.d(e, "EdgesHelper", function() {
        return Cc
    }),
    n.d(e, "WireframeHelper", function() {
        return Ic
    }),
    n.d(e, "XHRLoader", function() {
        return Oc
    }),
    n.d(e, "BinaryTextureLoader", function() {
        return Dc
    }),
    n.d(e, "GeometryUtils", function() {
        return kc
    }),
    n.d(e, "Projector", function() {
        return Bc
    }),
    n.d(e, "CanvasRenderer", function() {
        return Nc
    }),
    n.d(e, "SceneUtils", function() {
        return Uc
    }),
    n.d(e, "LensFlare", function() {
        return zc
    }),
    void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)),
    void 0 === Number.isInteger && (Number.isInteger = function(t) {
        return "number" == typeof t && isFinite(t) && Math.floor(t) === t
    }
    ),
    void 0 === Math.sign && (Math.sign = function(t) {
        return t < 0 ? -1 : t > 0 ? 1 : +t
    }
    ),
    "name"in Function.prototype == 0 && Object.defineProperty(Function.prototype, "name", {
        get: function() {
            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
        }
    }),
    void 0 === Object.assign && (Object.assign = function(t) {
        if (void 0 === t || null === t)
            throw new TypeError("Cannot convert undefined or null to object");
        for (var e = Object(t), n = 1; n < arguments.length; n++) {
            var i = arguments[n];
            if (void 0 !== i && null !== i)
                for (var r in i)
                    Object.prototype.hasOwnProperty.call(i, r) && (e[r] = i[r])
        }
        return e
    }
    ),
    Object.assign(i.prototype, {
        addEventListener: function(t, e) {
            void 0 === this._listeners && (this._listeners = {});
            var n = this._listeners;
            void 0 === n[t] && (n[t] = []),
            -1 === n[t].indexOf(e) && n[t].push(e)
        },
        hasEventListener: function(t, e) {
            if (void 0 === this._listeners)
                return !1;
            var n = this._listeners;
            return void 0 !== n[t] && -1 !== n[t].indexOf(e)
        },
        removeEventListener: function(t, e) {
            if (void 0 !== this._listeners) {
                var n = this._listeners[t];
                if (void 0 !== n) {
                    var i = n.indexOf(e);
                    -1 !== i && n.splice(i, 1)
                }
            }
        },
        dispatchEvent: function(t) {
            if (void 0 !== this._listeners) {
                var e = this._listeners[t.type];
                if (void 0 !== e) {
                    t.target = this;
                    for (var n = e.slice(0), i = 0, r = n.length; i < r; i++)
                        n[i].call(this, t)
                }
            }
        }
    });
    var r = "95"
      , s = {
        LEFT: 0,
        MIDDLE: 1,
        RIGHT: 2
    }
      , o = 0
      , a = 1
      , c = 2
      , l = 3
      , h = 0
      , p = 1
      , u = 0
      , d = 1
      , f = 2
      , m = 0
      , g = 1
      , v = 2
      , y = 1
      , x = 2
      , w = 0
      , b = 1
      , M = 2
      , _ = 0
      , S = 1
      , E = 2
      , T = 3
      , A = 4
      , L = 5
      , R = 100
      , P = 101
      , C = 102
      , I = 103
      , O = 104
      , D = 200
      , k = 201
      , B = 202
      , N = 203
      , U = 204
      , z = 205
      , F = 206
      , H = 207
      , G = 208
      , j = 209
      , V = 210
      , W = 0
      , Y = 1
      , q = 2
      , X = 3
      , Z = 4
      , K = 5
      , J = 6
      , Q = 7
      , $ = 0
      , tt = 1
      , et = 2
      , nt = 0
      , it = 1
      , rt = 2
      , st = 3
      , ot = 4
      , at = 300
      , ct = 301
      , lt = 302
      , ht = 303
      , pt = 304
      , ut = 305
      , dt = 306
      , ft = 307
      , mt = 1e3
      , gt = 1001
      , vt = 1002
      , yt = 1003
      , xt = 1004
      , wt = 1005
      , bt = 1006
      , Mt = 1007
      , _t = 1008
      , St = 1009
      , Et = 1010
      , Tt = 1011
      , At = 1012
      , Lt = 1013
      , Rt = 1014
      , Pt = 1015
      , Ct = 1016
      , It = 1017
      , Ot = 1018
      , Dt = 1019
      , kt = 1020
      , Bt = 1021
      , Nt = 1022
      , Ut = 1023
      , zt = 1024
      , Ft = 1025
      , Ht = Ut
      , Gt = 1026
      , jt = 1027
      , Vt = 33776
      , Wt = 33777
      , Yt = 33778
      , qt = 33779
      , Xt = 35840
      , Zt = 35841
      , Kt = 35842
      , Jt = 35843
      , Qt = 36196
      , $t = 37808
      , te = 37809
      , ee = 37810
      , ne = 37811
      , ie = 37812
      , re = 37813
      , se = 37814
      , oe = 37815
      , ae = 37816
      , ce = 37817
      , le = 37818
      , he = 37819
      , pe = 37820
      , ue = 37821
      , de = 2200
      , fe = 2201
      , me = 2202
      , ge = 2300
      , ve = 2301
      , ye = 2302
      , xe = 2400
      , we = 2401
      , be = 2402
      , Me = 0
      , _e = 1
      , Se = 2
      , Ee = 3e3
      , Te = 3001
      , Ae = 3007
      , Le = 3002
      , Re = 3003
      , Pe = 3004
      , Ce = 3005
      , Ie = 3006
      , Oe = 3200
      , De = 3201
      , ke = 0
      , Be = 1
      , Ne = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            for (var t = [], e = 0; e < 256; e++)
                t[e] = (e < 16 ? "0" : "") + e.toString(16);
            return function() {
                var e = 4294967295 * Math.random() | 0
                  , n = 4294967295 * Math.random() | 0
                  , i = 4294967295 * Math.random() | 0
                  , r = 4294967295 * Math.random() | 0;
                return (t[255 & e] + t[e >> 8 & 255] + t[e >> 16 & 255] + t[e >> 24 & 255] + "-" + t[255 & n] + t[n >> 8 & 255] + "-" + t[n >> 16 & 15 | 64] + t[n >> 24 & 255] + "-" + t[63 & i | 128] + t[i >> 8 & 255] + "-" + t[i >> 16 & 255] + t[i >> 24 & 255] + t[255 & r] + t[r >> 8 & 255] + t[r >> 16 & 255] + t[r >> 24 & 255]).toUpperCase()
            }
        }(),
        clamp: function(t, e, n) {
            return Math.max(e, Math.min(n, t))
        },
        euclideanModulo: function(t, e) {
            return (t % e + e) % e
        },
        mapLinear: function(t, e, n, i, r) {
            return i + (t - e) * (r - i) / (n - e)
        },
        lerp: function(t, e, n) {
            return (1 - n) * t + n * e
        },
        smoothstep: function(t, e, n) {
            return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t)
        },
        smootherstep: function(t, e, n) {
            return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * t * (t * (6 * t - 15) + 10)
        },
        randInt: function(t, e) {
            return t + Math.floor(Math.random() * (e - t + 1))
        },
        randFloat: function(t, e) {
            return t + Math.random() * (e - t)
        },
        randFloatSpread: function(t) {
            return t * (.5 - Math.random())
        },
        degToRad: function(t) {
            return t * Ne.DEG2RAD
        },
        radToDeg: function(t) {
            return t * Ne.RAD2DEG
        },
        isPowerOfTwo: function(t) {
            return 0 == (t & t - 1) && 0 !== t
        },
        ceilPowerOfTwo: function(t) {
            return Math.pow(2, Math.ceil(Math.log(t) / Math.LN2))
        },
        floorPowerOfTwo: function(t) {
            return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
        }
    };
    function Ue(t, e) {
        this.x = t || 0,
        this.y = e || 0
    }
    function ze() {
        this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
        arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
    }
    function Fe(t, e, n, i) {
        this._x = t || 0,
        this._y = e || 0,
        this._z = n || 0,
        this._w = void 0 !== i ? i : 1
    }
    function He(t, e, n) {
        this.x = t || 0,
        this.y = e || 0,
        this.z = n || 0
    }
    function Ge() {
        this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1],
        arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
    }
    Object.defineProperties(Ue.prototype, {
        width: {
            get: function() {
                return this.x
            },
            set: function(t) {
                this.x = t
            }
        },
        height: {
            get: function() {
                return this.y
            },
            set: function(t) {
                this.y = t
            }
        }
    }),
    Object.assign(Ue.prototype, {
        isVector2: !0,
        set: function(t, e) {
            return this.x = t,
            this.y = e,
            this
        },
        setScalar: function(t) {
            return this.x = t,
            this.y = t,
            this
        },
        setX: function(t) {
            return this.x = t,
            this
        },
        setY: function(t) {
            return this.y = t,
            this
        },
        setComponent: function(t, e) {
            switch (t) {
            case 0:
                this.x = e;
                break;
            case 1:
                this.y = e;
                break;
            default:
                throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x,this.y)
        },
        copy: function(t) {
            return this.x = t.x,
            this.y = t.y,
            this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
            this.addVectors(t, e)) : (this.x += t.x,
            this.y += t.y,
            this)
        },
        addScalar: function(t) {
            return this.x += t,
            this.y += t,
            this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e,
            this.y += t.y * e,
            this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
            this.subVectors(t, e)) : (this.x -= t.x,
            this.y -= t.y,
            this)
        },
        subScalar: function(t) {
            return this.x -= t,
            this.y -= t,
            this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this
        },
        multiply: function(t) {
            return this.x *= t.x,
            this.y *= t.y,
            this
        },
        multiplyScalar: function(t) {
            return this.x *= t,
            this.y *= t,
            this
        },
        divide: function(t) {
            return this.x /= t.x,
            this.y /= t.y,
            this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        applyMatrix3: function(t) {
            var e = this.x
              , n = this.y
              , i = t.elements;
            return this.x = i[0] * e + i[3] * n + i[6],
            this.y = i[1] * e + i[4] * n + i[7],
            this
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x),
            this.y = Math.min(this.y, t.y),
            this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x),
            this.y = Math.max(this.y, t.y),
            this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)),
            this.y = Math.max(t.y, Math.min(e.y, this.y)),
            this
        },
        clampScalar: function() {
            var t = new Ue
              , e = new Ue;
            return function(n, i) {
                return t.set(n, n),
                e.set(i, i),
                this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this
        },
        round: function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
            this
        },
        negate: function() {
            return this.x = -this.x,
            this.y = -this.y,
            this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y
        },
        cross: function(t) {
            return this.x * t.y - this.y * t.x
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        angle: function() {
            var t = Math.atan2(this.y, this.x);
            return t < 0 && (t += 2 * Math.PI),
            t
        },
        distanceTo: function(t) {
            return Math.sqrt(this.distanceToSquared(t))
        },
        distanceToSquared: function(t) {
            var e = this.x - t.x
              , n = this.y - t.y;
            return e * e + n * n
        },
        manhattanDistanceTo: function(t) {
            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e,
            this.y += (t.y - this.y) * e,
            this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0),
            this.x = t[e],
            this.y = t[e + 1],
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this.x,
            t[e + 1] = this.y,
            t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
            this.x = t.getX(e),
            this.y = t.getY(e),
            this
        },
        rotateAround: function(t, e) {
            var n = Math.cos(e)
              , i = Math.sin(e)
              , r = this.x - t.x
              , s = this.y - t.y;
            return this.x = r * n - s * i + t.x,
            this.y = r * i + s * n + t.y,
            this
        }
    }),
    Object.assign(ze.prototype, {
        isMatrix4: !0,
        set: function(t, e, n, i, r, s, o, a, c, l, h, p, u, d, f, m) {
            var g = this.elements;
            return g[0] = t,
            g[4] = e,
            g[8] = n,
            g[12] = i,
            g[1] = r,
            g[5] = s,
            g[9] = o,
            g[13] = a,
            g[2] = c,
            g[6] = l,
            g[10] = h,
            g[14] = p,
            g[3] = u,
            g[7] = d,
            g[11] = f,
            g[15] = m,
            this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        clone: function() {
            return (new ze).fromArray(this.elements)
        },
        copy: function(t) {
            var e = this.elements
              , n = t.elements;
            return e[0] = n[0],
            e[1] = n[1],
            e[2] = n[2],
            e[3] = n[3],
            e[4] = n[4],
            e[5] = n[5],
            e[6] = n[6],
            e[7] = n[7],
            e[8] = n[8],
            e[9] = n[9],
            e[10] = n[10],
            e[11] = n[11],
            e[12] = n[12],
            e[13] = n[13],
            e[14] = n[14],
            e[15] = n[15],
            this
        },
        copyPosition: function(t) {
            var e = this.elements
              , n = t.elements;
            return e[12] = n[12],
            e[13] = n[13],
            e[14] = n[14],
            this
        },
        extractBasis: function(t, e, n) {
            return t.setFromMatrixColumn(this, 0),
            e.setFromMatrixColumn(this, 1),
            n.setFromMatrixColumn(this, 2),
            this
        },
        makeBasis: function(t, e, n) {
            return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1),
            this
        },
        extractRotation: function() {
            var t = new He;
            return function(e) {
                var n = this.elements
                  , i = e.elements
                  , r = 1 / t.setFromMatrixColumn(e, 0).length()
                  , s = 1 / t.setFromMatrixColumn(e, 1).length()
                  , o = 1 / t.setFromMatrixColumn(e, 2).length();
                return n[0] = i[0] * r,
                n[1] = i[1] * r,
                n[2] = i[2] * r,
                n[3] = 0,
                n[4] = i[4] * s,
                n[5] = i[5] * s,
                n[6] = i[6] * s,
                n[7] = 0,
                n[8] = i[8] * o,
                n[9] = i[9] * o,
                n[10] = i[10] * o,
                n[11] = 0,
                n[12] = 0,
                n[13] = 0,
                n[14] = 0,
                n[15] = 1,
                this
            }
        }(),
        makeRotationFromEuler: function(t) {
            t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
            var e = this.elements
              , n = t.x
              , i = t.y
              , r = t.z
              , s = Math.cos(n)
              , o = Math.sin(n)
              , a = Math.cos(i)
              , c = Math.sin(i)
              , l = Math.cos(r)
              , h = Math.sin(r);
            if ("XYZ" === t.order) {
                var p = s * l
                  , u = s * h
                  , d = o * l
                  , f = o * h;
                e[0] = a * l,
                e[4] = -a * h,
                e[8] = c,
                e[1] = u + d * c,
                e[5] = p - f * c,
                e[9] = -o * a,
                e[2] = f - p * c,
                e[6] = d + u * c,
                e[10] = s * a
            } else if ("YXZ" === t.order) {
                var m = a * l
                  , g = a * h
                  , v = c * l
                  , y = c * h;
                e[0] = m + y * o,
                e[4] = v * o - g,
                e[8] = s * c,
                e[1] = s * h,
                e[5] = s * l,
                e[9] = -o,
                e[2] = g * o - v,
                e[6] = y + m * o,
                e[10] = s * a
            } else if ("ZXY" === t.order)
                m = a * l,
                g = a * h,
                v = c * l,
                y = c * h,
                e[0] = m - y * o,
                e[4] = -s * h,
                e[8] = v + g * o,
                e[1] = g + v * o,
                e[5] = s * l,
                e[9] = y - m * o,
                e[2] = -s * c,
                e[6] = o,
                e[10] = s * a;
            else if ("ZYX" === t.order)
                p = s * l,
                u = s * h,
                d = o * l,
                f = o * h,
                e[0] = a * l,
                e[4] = d * c - u,
                e[8] = p * c + f,
                e[1] = a * h,
                e[5] = f * c + p,
                e[9] = u * c - d,
                e[2] = -c,
                e[6] = o * a,
                e[10] = s * a;
            else if ("YZX" === t.order) {
                var x = s * a
                  , w = s * c
                  , b = o * a
                  , M = o * c;
                e[0] = a * l,
                e[4] = M - x * h,
                e[8] = b * h + w,
                e[1] = h,
                e[5] = s * l,
                e[9] = -o * l,
                e[2] = -c * l,
                e[6] = w * h + b,
                e[10] = x - M * h
            } else
                "XZY" === t.order && (x = s * a,
                w = s * c,
                b = o * a,
                M = o * c,
                e[0] = a * l,
                e[4] = -h,
                e[8] = c * l,
                e[1] = x * h + M,
                e[5] = s * l,
                e[9] = w * h - b,
                e[2] = b * h - w,
                e[6] = o * l,
                e[10] = M * h + x);
            return e[3] = 0,
            e[7] = 0,
            e[11] = 0,
            e[12] = 0,
            e[13] = 0,
            e[14] = 0,
            e[15] = 1,
            this
        },
        makeRotationFromQuaternion: function() {
            var t = new He(0,0,0)
              , e = new He(1,1,1);
            return function(n) {
                return this.compose(t, n, e)
            }
        }(),
        lookAt: function() {
            var t = new He
              , e = new He
              , n = new He;
            return function(i, r, s) {
                var o = this.elements;
                return n.subVectors(i, r),
                0 === n.lengthSq() && (n.z = 1),
                n.normalize(),
                t.crossVectors(s, n),
                0 === t.lengthSq() && (1 === Math.abs(s.z) ? n.x += 1e-4 : n.z += 1e-4,
                n.normalize(),
                t.crossVectors(s, n)),
                t.normalize(),
                e.crossVectors(n, t),
                o[0] = t.x,
                o[4] = e.x,
                o[8] = n.x,
                o[1] = t.y,
                o[5] = e.y,
                o[9] = n.y,
                o[2] = t.z,
                o[6] = e.z,
                o[10] = n.z,
                this
            }
        }(),
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
            this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t)
        },
        premultiply: function(t) {
            return this.multiplyMatrices(t, this)
        },
        multiplyMatrices: function(t, e) {
            var n = t.elements
              , i = e.elements
              , r = this.elements
              , s = n[0]
              , o = n[4]
              , a = n[8]
              , c = n[12]
              , l = n[1]
              , h = n[5]
              , p = n[9]
              , u = n[13]
              , d = n[2]
              , f = n[6]
              , m = n[10]
              , g = n[14]
              , v = n[3]
              , y = n[7]
              , x = n[11]
              , w = n[15]
              , b = i[0]
              , M = i[4]
              , _ = i[8]
              , S = i[12]
              , E = i[1]
              , T = i[5]
              , A = i[9]
              , L = i[13]
              , R = i[2]
              , P = i[6]
              , C = i[10]
              , I = i[14]
              , O = i[3]
              , D = i[7]
              , k = i[11]
              , B = i[15];
            return r[0] = s * b + o * E + a * R + c * O,
            r[4] = s * M + o * T + a * P + c * D,
            r[8] = s * _ + o * A + a * C + c * k,
            r[12] = s * S + o * L + a * I + c * B,
            r[1] = l * b + h * E + p * R + u * O,
            r[5] = l * M + h * T + p * P + u * D,
            r[9] = l * _ + h * A + p * C + u * k,
            r[13] = l * S + h * L + p * I + u * B,
            r[2] = d * b + f * E + m * R + g * O,
            r[6] = d * M + f * T + m * P + g * D,
            r[10] = d * _ + f * A + m * C + g * k,
            r[14] = d * S + f * L + m * I + g * B,
            r[3] = v * b + y * E + x * R + w * O,
            r[7] = v * M + y * T + x * P + w * D,
            r[11] = v * _ + y * A + x * C + w * k,
            r[15] = v * S + y * L + x * I + w * B,
            this
        },
        multiplyScalar: function(t) {
            var e = this.elements;
            return e[0] *= t,
            e[4] *= t,
            e[8] *= t,
            e[12] *= t,
            e[1] *= t,
            e[5] *= t,
            e[9] *= t,
            e[13] *= t,
            e[2] *= t,
            e[6] *= t,
            e[10] *= t,
            e[14] *= t,
            e[3] *= t,
            e[7] *= t,
            e[11] *= t,
            e[15] *= t,
            this
        },
        applyToBufferAttribute: function() {
            var t = new He;
            return function(e) {
                for (var n = 0, i = e.count; n < i; n++)
                    t.x = e.getX(n),
                    t.y = e.getY(n),
                    t.z = e.getZ(n),
                    t.applyMatrix4(this),
                    e.setXYZ(n, t.x, t.y, t.z);
                return e
            }
        }(),
        determinant: function() {
            var t = this.elements
              , e = t[0]
              , n = t[4]
              , i = t[8]
              , r = t[12]
              , s = t[1]
              , o = t[5]
              , a = t[9]
              , c = t[13]
              , l = t[2]
              , h = t[6]
              , p = t[10]
              , u = t[14];
            return t[3] * (+r * a * h - i * c * h - r * o * p + n * c * p + i * o * u - n * a * u) + t[7] * (+e * a * u - e * c * p + r * s * p - i * s * u + i * c * l - r * a * l) + t[11] * (+e * c * h - e * o * u - r * s * h + n * s * u + r * o * l - n * c * l) + t[15] * (-i * o * l - e * a * h + e * o * p + i * s * h - n * s * p + n * a * l)
        },
        transpose: function() {
            var t, e = this.elements;
            return t = e[1],
            e[1] = e[4],
            e[4] = t,
            t = e[2],
            e[2] = e[8],
            e[8] = t,
            t = e[6],
            e[6] = e[9],
            e[9] = t,
            t = e[3],
            e[3] = e[12],
            e[12] = t,
            t = e[7],
            e[7] = e[13],
            e[13] = t,
            t = e[11],
            e[11] = e[14],
            e[14] = t,
            this
        },
        setPosition: function(t) {
            var e = this.elements;
            return e[12] = t.x,
            e[13] = t.y,
            e[14] = t.z,
            this
        },
        getInverse: function(t, e) {
            var n = this.elements
              , i = t.elements
              , r = i[0]
              , s = i[1]
              , o = i[2]
              , a = i[3]
              , c = i[4]
              , l = i[5]
              , h = i[6]
              , p = i[7]
              , u = i[8]
              , d = i[9]
              , f = i[10]
              , m = i[11]
              , g = i[12]
              , v = i[13]
              , y = i[14]
              , x = i[15]
              , w = d * y * p - v * f * p + v * h * m - l * y * m - d * h * x + l * f * x
              , b = g * f * p - u * y * p - g * h * m + c * y * m + u * h * x - c * f * x
              , M = u * v * p - g * d * p + g * l * m - c * v * m - u * l * x + c * d * x
              , _ = g * d * h - u * v * h - g * l * f + c * v * f + u * l * y - c * d * y
              , S = r * w + s * b + o * M + a * _;
            if (0 === S) {
                var E = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === e)
                    throw new Error(E);
                return console.warn(E),
                this.identity()
            }
            var T = 1 / S;
            return n[0] = w * T,
            n[1] = (v * f * a - d * y * a - v * o * m + s * y * m + d * o * x - s * f * x) * T,
            n[2] = (l * y * a - v * h * a + v * o * p - s * y * p - l * o * x + s * h * x) * T,
            n[3] = (d * h * a - l * f * a - d * o * p + s * f * p + l * o * m - s * h * m) * T,
            n[4] = b * T,
            n[5] = (u * y * a - g * f * a + g * o * m - r * y * m - u * o * x + r * f * x) * T,
            n[6] = (g * h * a - c * y * a - g * o * p + r * y * p + c * o * x - r * h * x) * T,
            n[7] = (c * f * a - u * h * a + u * o * p - r * f * p - c * o * m + r * h * m) * T,
            n[8] = M * T,
            n[9] = (g * d * a - u * v * a - g * s * m + r * v * m + u * s * x - r * d * x) * T,
            n[10] = (c * v * a - g * l * a + g * s * p - r * v * p - c * s * x + r * l * x) * T,
            n[11] = (u * l * a - c * d * a - u * s * p + r * d * p + c * s * m - r * l * m) * T,
            n[12] = _ * T,
            n[13] = (u * v * o - g * d * o + g * s * f - r * v * f - u * s * y + r * d * y) * T,
            n[14] = (g * l * o - c * v * o - g * s * h + r * v * h + c * s * y - r * l * y) * T,
            n[15] = (c * d * o - u * l * o + u * s * h - r * d * h - c * s * f + r * l * f) * T,
            this
        },
        scale: function(t) {
            var e = this.elements
              , n = t.x
              , i = t.y
              , r = t.z;
            return e[0] *= n,
            e[4] *= i,
            e[8] *= r,
            e[1] *= n,
            e[5] *= i,
            e[9] *= r,
            e[2] *= n,
            e[6] *= i,
            e[10] *= r,
            e[3] *= n,
            e[7] *= i,
            e[11] *= r,
            this
        },
        getMaxScaleOnAxis: function() {
            var t = this.elements
              , e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2]
              , n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6]
              , i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
            return Math.sqrt(Math.max(e, n, i))
        },
        makeTranslation: function(t, e, n) {
            return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1),
            this
        },
        makeRotationX: function(t) {
            var e = Math.cos(t)
              , n = Math.sin(t);
            return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1),
            this
        },
        makeRotationY: function(t) {
            var e = Math.cos(t)
              , n = Math.sin(t);
            return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1),
            this
        },
        makeRotationZ: function(t) {
            var e = Math.cos(t)
              , n = Math.sin(t);
            return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
            this
        },
        makeRotationAxis: function(t, e) {
            var n = Math.cos(e)
              , i = Math.sin(e)
              , r = 1 - n
              , s = t.x
              , o = t.y
              , a = t.z
              , c = r * s
              , l = r * o;
            return this.set(c * s + n, c * o - i * a, c * a + i * o, 0, c * o + i * a, l * o + n, l * a - i * s, 0, c * a - i * o, l * a + i * s, r * a * a + n, 0, 0, 0, 0, 1),
            this
        },
        makeScale: function(t, e, n) {
            return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1),
            this
        },
        makeShear: function(t, e, n) {
            return this.set(1, e, n, 0, t, 1, n, 0, t, e, 1, 0, 0, 0, 0, 1),
            this
        },
        compose: function(t, e, n) {
            var i = this.elements
              , r = e._x
              , s = e._y
              , o = e._z
              , a = e._w
              , c = r + r
              , l = s + s
              , h = o + o
              , p = r * c
              , u = r * l
              , d = r * h
              , f = s * l
              , m = s * h
              , g = o * h
              , v = a * c
              , y = a * l
              , x = a * h
              , w = n.x
              , b = n.y
              , M = n.z;
            return i[0] = (1 - (f + g)) * w,
            i[1] = (u + x) * w,
            i[2] = (d - y) * w,
            i[3] = 0,
            i[4] = (u - x) * b,
            i[5] = (1 - (p + g)) * b,
            i[6] = (m + v) * b,
            i[7] = 0,
            i[8] = (d + y) * M,
            i[9] = (m - v) * M,
            i[10] = (1 - (p + f)) * M,
            i[11] = 0,
            i[12] = t.x,
            i[13] = t.y,
            i[14] = t.z,
            i[15] = 1,
            this
        },
        decompose: function() {
            var t = new He
              , e = new ze;
            return function(n, i, r) {
                var s = this.elements
                  , o = t.set(s[0], s[1], s[2]).length()
                  , a = t.set(s[4], s[5], s[6]).length()
                  , c = t.set(s[8], s[9], s[10]).length();
                this.determinant() < 0 && (o = -o),
                n.x = s[12],
                n.y = s[13],
                n.z = s[14],
                e.copy(this);
                var l = 1 / o
                  , h = 1 / a
                  , p = 1 / c;
                return e.elements[0] *= l,
                e.elements[1] *= l,
                e.elements[2] *= l,
                e.elements[4] *= h,
                e.elements[5] *= h,
                e.elements[6] *= h,
                e.elements[8] *= p,
                e.elements[9] *= p,
                e.elements[10] *= p,
                i.setFromRotationMatrix(e),
                r.x = o,
                r.y = a,
                r.z = c,
                this
            }
        }(),
        makePerspective: function(t, e, n, i, r, s) {
            void 0 === s && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
            var o = this.elements
              , a = 2 * r / (e - t)
              , c = 2 * r / (n - i)
              , l = (e + t) / (e - t)
              , h = (n + i) / (n - i)
              , p = -(s + r) / (s - r)
              , u = -2 * s * r / (s - r);
            return o[0] = a,
            o[4] = 0,
            o[8] = l,
            o[12] = 0,
            o[1] = 0,
            o[5] = c,
            o[9] = h,
            o[13] = 0,
            o[2] = 0,
            o[6] = 0,
            o[10] = p,
            o[14] = u,
            o[3] = 0,
            o[7] = 0,
            o[11] = -1,
            o[15] = 0,
            this
        },
        makeOrthographic: function(t, e, n, i, r, s) {
            var o = this.elements
              , a = 1 / (e - t)
              , c = 1 / (n - i)
              , l = 1 / (s - r)
              , h = (e + t) * a
              , p = (n + i) * c
              , u = (s + r) * l;
            return o[0] = 2 * a,
            o[4] = 0,
            o[8] = 0,
            o[12] = -h,
            o[1] = 0,
            o[5] = 2 * c,
            o[9] = 0,
            o[13] = -p,
            o[2] = 0,
            o[6] = 0,
            o[10] = -2 * l,
            o[14] = -u,
            o[3] = 0,
            o[7] = 0,
            o[11] = 0,
            o[15] = 1,
            this
        },
        equals: function(t) {
            for (var e = this.elements, n = t.elements, i = 0; i < 16; i++)
                if (e[i] !== n[i])
                    return !1;
            return !0
        },
        fromArray: function(t, e) {
            void 0 === e && (e = 0);
            for (var n = 0; n < 16; n++)
                this.elements[n] = t[n + e];
            return this
        },
        toArray: function(t, e) {
            void 0 === t && (t = []),
            void 0 === e && (e = 0);
            var n = this.elements;
            return t[e] = n[0],
            t[e + 1] = n[1],
            t[e + 2] = n[2],
            t[e + 3] = n[3],
            t[e + 4] = n[4],
            t[e + 5] = n[5],
            t[e + 6] = n[6],
            t[e + 7] = n[7],
            t[e + 8] = n[8],
            t[e + 9] = n[9],
            t[e + 10] = n[10],
            t[e + 11] = n[11],
            t[e + 12] = n[12],
            t[e + 13] = n[13],
            t[e + 14] = n[14],
            t[e + 15] = n[15],
            t
        }
    }),
    Object.assign(Fe, {
        slerp: function(t, e, n, i) {
            return n.copy(t).slerp(e, i)
        },
        slerpFlat: function(t, e, n, i, r, s, o) {
            var a = n[i + 0]
              , c = n[i + 1]
              , l = n[i + 2]
              , h = n[i + 3]
              , p = r[s + 0]
              , u = r[s + 1]
              , d = r[s + 2]
              , f = r[s + 3];
            if (h !== f || a !== p || c !== u || l !== d) {
                var m = 1 - o
                  , g = a * p + c * u + l * d + h * f
                  , v = g >= 0 ? 1 : -1
                  , y = 1 - g * g;
                if (y > Number.EPSILON) {
                    var x = Math.sqrt(y)
                      , w = Math.atan2(x, g * v);
                    m = Math.sin(m * w) / x,
                    o = Math.sin(o * w) / x
                }
                var b = o * v;
                if (a = a * m + p * b,
                c = c * m + u * b,
                l = l * m + d * b,
                h = h * m + f * b,
                m === 1 - o) {
                    var M = 1 / Math.sqrt(a * a + c * c + l * l + h * h);
                    a *= M,
                    c *= M,
                    l *= M,
                    h *= M
                }
            }
            t[e] = a,
            t[e + 1] = c,
            t[e + 2] = l,
            t[e + 3] = h
        }
    }),
    Object.defineProperties(Fe.prototype, {
        x: {
            get: function() {
                return this._x
            },
            set: function(t) {
                this._x = t,
                this.onChangeCallback()
            }
        },
        y: {
            get: function() {
                return this._y
            },
            set: function(t) {
                this._y = t,
                this.onChangeCallback()
            }
        },
        z: {
            get: function() {
                return this._z
            },
            set: function(t) {
                this._z = t,
                this.onChangeCallback()
            }
        },
        w: {
            get: function() {
                return this._w
            },
            set: function(t) {
                this._w = t,
                this.onChangeCallback()
            }
        }
    }),
    Object.assign(Fe.prototype, {
        set: function(t, e, n, i) {
            return this._x = t,
            this._y = e,
            this._z = n,
            this._w = i,
            this.onChangeCallback(),
            this
        },
        clone: function() {
            return new this.constructor(this._x,this._y,this._z,this._w)
        },
        copy: function(t) {
            return this._x = t.x,
            this._y = t.y,
            this._z = t.z,
            this._w = t.w,
            this.onChangeCallback(),
            this
        },
        setFromEuler: function(t, e) {
            if (!t || !t.isEuler)
                throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
            var n = t._x
              , i = t._y
              , r = t._z
              , s = t.order
              , o = Math.cos
              , a = Math.sin
              , c = o(n / 2)
              , l = o(i / 2)
              , h = o(r / 2)
              , p = a(n / 2)
              , u = a(i / 2)
              , d = a(r / 2);
            return "XYZ" === s ? (this._x = p * l * h + c * u * d,
            this._y = c * u * h - p * l * d,
            this._z = c * l * d + p * u * h,
            this._w = c * l * h - p * u * d) : "YXZ" === s ? (this._x = p * l * h + c * u * d,
            this._y = c * u * h - p * l * d,
            this._z = c * l * d - p * u * h,
            this._w = c * l * h + p * u * d) : "ZXY" === s ? (this._x = p * l * h - c * u * d,
            this._y = c * u * h + p * l * d,
            this._z = c * l * d + p * u * h,
            this._w = c * l * h - p * u * d) : "ZYX" === s ? (this._x = p * l * h - c * u * d,
            this._y = c * u * h + p * l * d,
            this._z = c * l * d - p * u * h,
            this._w = c * l * h + p * u * d) : "YZX" === s ? (this._x = p * l * h + c * u * d,
            this._y = c * u * h + p * l * d,
            this._z = c * l * d - p * u * h,
            this._w = c * l * h - p * u * d) : "XZY" === s && (this._x = p * l * h - c * u * d,
            this._y = c * u * h - p * l * d,
            this._z = c * l * d + p * u * h,
            this._w = c * l * h + p * u * d),
            !1 !== e && this.onChangeCallback(),
            this
        },
        setFromAxisAngle: function(t, e) {
            var n = e / 2
              , i = Math.sin(n);
            return this._x = t.x * i,
            this._y = t.y * i,
            this._z = t.z * i,
            this._w = Math.cos(n),
            this.onChangeCallback(),
            this
        },
        setFromRotationMatrix: function(t) {
            var e, n = t.elements, i = n[0], r = n[4], s = n[8], o = n[1], a = n[5], c = n[9], l = n[2], h = n[6], p = n[10], u = i + a + p;
            return u > 0 ? (e = .5 / Math.sqrt(u + 1),
            this._w = .25 / e,
            this._x = (h - c) * e,
            this._y = (s - l) * e,
            this._z = (o - r) * e) : i > a && i > p ? (e = 2 * Math.sqrt(1 + i - a - p),
            this._w = (h - c) / e,
            this._x = .25 * e,
            this._y = (r + o) / e,
            this._z = (s + l) / e) : a > p ? (e = 2 * Math.sqrt(1 + a - i - p),
            this._w = (s - l) / e,
            this._x = (r + o) / e,
            this._y = .25 * e,
            this._z = (c + h) / e) : (e = 2 * Math.sqrt(1 + p - i - a),
            this._w = (o - r) / e,
            this._x = (s + l) / e,
            this._y = (c + h) / e,
            this._z = .25 * e),
            this.onChangeCallback(),
            this
        },
        setFromUnitVectors: function() {
            var t, e = new He;
            return function(n, i) {
                return void 0 === e && (e = new He),
                (t = n.dot(i) + 1) < 1e-6 ? (t = 0,
                Math.abs(n.x) > Math.abs(n.z) ? e.set(-n.y, n.x, 0) : e.set(0, -n.z, n.y)) : e.crossVectors(n, i),
                this._x = e.x,
                this._y = e.y,
                this._z = e.z,
                this._w = t,
                this.normalize()
            }
        }(),
        angleTo: function(t) {
            return 2 * Math.acos(Math.abs(Ne.clamp(this.dot(t), -1, 1)))
        },
        rotateTowards: function(t, e) {
            var n = this.angleTo(t);
            if (0 === n)
                return this;
            var i = Math.min(1, e / n);
            return this.slerp(t, i),
            this
        },
        inverse: function() {
            return this.conjugate()
        },
        conjugate: function() {
            return this._x *= -1,
            this._y *= -1,
            this._z *= -1,
            this.onChangeCallback(),
            this
        },
        dot: function(t) {
            return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
        },
        lengthSq: function() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
        },
        length: function() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
        },
        normalize: function() {
            var t = this.length();
            return 0 === t ? (this._x = 0,
            this._y = 0,
            this._z = 0,
            this._w = 1) : (t = 1 / t,
            this._x = this._x * t,
            this._y = this._y * t,
            this._z = this._z * t,
            this._w = this._w * t),
            this.onChangeCallback(),
            this
        },
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
            this.multiplyQuaternions(t, e)) : this.multiplyQuaternions(this, t)
        },
        premultiply: function(t) {
            return this.multiplyQuaternions(t, this)
        },
        multiplyQuaternions: function(t, e) {
            var n = t._x
              , i = t._y
              , r = t._z
              , s = t._w
              , o = e._x
              , a = e._y
              , c = e._z
              , l = e._w;
            return this._x = n * l + s * o + i * c - r * a,
            this._y = i * l + s * a + r * o - n * c,
            this._z = r * l + s * c + n * a - i * o,
            this._w = s * l - n * o - i * a - r * c,
            this.onChangeCallback(),
            this
        },
        slerp: function(t, e) {
            if (0 === e)
                return this;
            if (1 === e)
                return this.copy(t);
            var n = this._x
              , i = this._y
              , r = this._z
              , s = this._w
              , o = s * t._w + n * t._x + i * t._y + r * t._z;
            if (o < 0 ? (this._w = -t._w,
            this._x = -t._x,
            this._y = -t._y,
            this._z = -t._z,
            o = -o) : this.copy(t),
            o >= 1)
                return this._w = s,
                this._x = n,
                this._y = i,
                this._z = r,
                this;
            var a = 1 - o * o;
            if (a <= Number.EPSILON) {
                var c = 1 - e;
                return this._w = c * s + e * this._w,
                this._x = c * n + e * this._x,
                this._y = c * i + e * this._y,
                this._z = c * r + e * this._z,
                this.normalize()
            }
            var l = Math.sqrt(a)
              , h = Math.atan2(l, o)
              , p = Math.sin((1 - e) * h) / l
              , u = Math.sin(e * h) / l;
            return this._w = s * p + this._w * u,
            this._x = n * p + this._x * u,
            this._y = i * p + this._y * u,
            this._z = r * p + this._z * u,
            this.onChangeCallback(),
            this
        },
        equals: function(t) {
            return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0),
            this._x = t[e],
            this._y = t[e + 1],
            this._z = t[e + 2],
            this._w = t[e + 3],
            this.onChangeCallback(),
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this._x,
            t[e + 1] = this._y,
            t[e + 2] = this._z,
            t[e + 3] = this._w,
            t
        },
        onChange: function(t) {
            return this.onChangeCallback = t,
            this
        },
        onChangeCallback: function() {}
    }),
    Object.assign(He.prototype, {
        isVector3: !0,
        set: function(t, e, n) {
            return this.x = t,
            this.y = e,
            this.z = n,
            this
        },
        setScalar: function(t) {
            return this.x = t,
            this.y = t,
            this.z = t,
            this
        },
        setX: function(t) {
            return this.x = t,
            this
        },
        setY: function(t) {
            return this.y = t,
            this
        },
        setZ: function(t) {
            return this.z = t,
            this
        },
        setComponent: function(t, e) {
            switch (t) {
            case 0:
                this.x = e;
                break;
            case 1:
                this.y = e;
                break;
            case 2:
                this.z = e;
                break;
            default:
                throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x,this.y,this.z)
        },
        copy: function(t) {
            return this.x = t.x,
            this.y = t.y,
            this.z = t.z,
            this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
            this.addVectors(t, e)) : (this.x += t.x,
            this.y += t.y,
            this.z += t.z,
            this)
        },
        addScalar: function(t) {
            return this.x += t,
            this.y += t,
            this.z += t,
            this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this.z = t.z + e.z,
            this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e,
            this.y += t.y * e,
            this.z += t.z * e,
            this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
            this.subVectors(t, e)) : (this.x -= t.x,
            this.y -= t.y,
            this.z -= t.z,
            this)
        },
        subScalar: function(t) {
            return this.x -= t,
            this.y -= t,
            this.z -= t,
            this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this.z = t.z - e.z,
            this
        },
        multiply: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
            this.multiplyVectors(t, e)) : (this.x *= t.x,
            this.y *= t.y,
            this.z *= t.z,
            this)
        },
        multiplyScalar: function(t) {
            return this.x *= t,
            this.y *= t,
            this.z *= t,
            this
        },
        multiplyVectors: function(t, e) {
            return this.x = t.x * e.x,
            this.y = t.y * e.y,
            this.z = t.z * e.z,
            this
        },
        applyEuler: function() {
            var t = new Fe;
            return function(e) {
                return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                this.applyQuaternion(t.setFromEuler(e))
            }
        }(),
        applyAxisAngle: function() {
            var t = new Fe;
            return function(e, n) {
                return this.applyQuaternion(t.setFromAxisAngle(e, n))
            }
        }(),
        applyMatrix3: function(t) {
            var e = this.x
              , n = this.y
              , i = this.z
              , r = t.elements;
            return this.x = r[0] * e + r[3] * n + r[6] * i,
            this.y = r[1] * e + r[4] * n + r[7] * i,
            this.z = r[2] * e + r[5] * n + r[8] * i,
            this
        },
        applyMatrix4: function(t) {
            var e = this.x
              , n = this.y
              , i = this.z
              , r = t.elements
              , s = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]);
            return this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * s,
            this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * s,
            this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * s,
            this
        },
        applyQuaternion: function(t) {
            var e = this.x
              , n = this.y
              , i = this.z
              , r = t.x
              , s = t.y
              , o = t.z
              , a = t.w
              , c = a * e + s * i - o * n
              , l = a * n + o * e - r * i
              , h = a * i + r * n - s * e
              , p = -r * e - s * n - o * i;
            return this.x = c * a + p * -r + l * -o - h * -s,
            this.y = l * a + p * -s + h * -r - c * -o,
            this.z = h * a + p * -o + c * -s - l * -r,
            this
        },
        project: function() {
            var t = new ze;
            return function(e) {
                return t.multiplyMatrices(e.projectionMatrix, t.getInverse(e.matrixWorld)),
                this.applyMatrix4(t)
            }
        }(),
        unproject: function() {
            var t = new ze;
            return function(e) {
                return t.multiplyMatrices(e.matrixWorld, t.getInverse(e.projectionMatrix)),
                this.applyMatrix4(t)
            }
        }(),
        transformDirection: function(t) {
            var e = this.x
              , n = this.y
              , i = this.z
              , r = t.elements;
            return this.x = r[0] * e + r[4] * n + r[8] * i,
            this.y = r[1] * e + r[5] * n + r[9] * i,
            this.z = r[2] * e + r[6] * n + r[10] * i,
            this.normalize()
        },
        divide: function(t) {
            return this.x /= t.x,
            this.y /= t.y,
            this.z /= t.z,
            this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x),
            this.y = Math.min(this.y, t.y),
            this.z = Math.min(this.z, t.z),
            this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x),
            this.y = Math.max(this.y, t.y),
            this.z = Math.max(this.z, t.z),
            this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)),
            this.y = Math.max(t.y, Math.min(e.y, this.y)),
            this.z = Math.max(t.z, Math.min(e.z, this.z)),
            this
        },
        clampScalar: function() {
            var t = new He
              , e = new He;
            return function(n, i) {
                return t.set(n, n, n),
                e.set(i, i, i),
                this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this.z = Math.floor(this.z),
            this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this.z = Math.ceil(this.z),
            this
        },
        round: function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this.z = Math.round(this.z),
            this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
            this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
            this
        },
        negate: function() {
            return this.x = -this.x,
            this.y = -this.y,
            this.z = -this.z,
            this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e,
            this.y += (t.y - this.y) * e,
            this.z += (t.z - this.z) * e,
            this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        cross: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
            this.crossVectors(t, e)) : this.crossVectors(this, t)
        },
        crossVectors: function(t, e) {
            var n = t.x
              , i = t.y
              , r = t.z
              , s = e.x
              , o = e.y
              , a = e.z;
            return this.x = i * a - r * o,
            this.y = r * s - n * a,
            this.z = n * o - i * s,
            this
        },
        projectOnVector: function(t) {
            var e = t.dot(this) / t.lengthSq();
            return this.copy(t).multiplyScalar(e)
        },
        projectOnPlane: function() {
            var t = new He;
            return function(e) {
                return t.copy(this).projectOnVector(e),
                this.sub(t)
            }
        }(),
        reflect: function() {
            var t = new He;
            return function(e) {
                return this.sub(t.copy(e).multiplyScalar(2 * this.dot(e)))
            }
        }(),
        angleTo: function(t) {
            var e = this.dot(t) / Math.sqrt(this.lengthSq() * t.lengthSq());
            return Math.acos(Ne.clamp(e, -1, 1))
        },
        distanceTo: function(t) {
            return Math.sqrt(this.distanceToSquared(t))
        },
        distanceToSquared: function(t) {
            var e = this.x - t.x
              , n = this.y - t.y
              , i = this.z - t.z;
            return e * e + n * n + i * i
        },
        manhattanDistanceTo: function(t) {
            return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
        },
        setFromSpherical: function(t) {
            var e = Math.sin(t.phi) * t.radius;
            return this.x = e * Math.sin(t.theta),
            this.y = Math.cos(t.phi) * t.radius,
            this.z = e * Math.cos(t.theta),
            this
        },
        setFromCylindrical: function(t) {
            return this.x = t.radius * Math.sin(t.theta),
            this.y = t.y,
            this.z = t.radius * Math.cos(t.theta),
            this
        },
        setFromMatrixPosition: function(t) {
            var e = t.elements;
            return this.x = e[12],
            this.y = e[13],
            this.z = e[14],
            this
        },
        setFromMatrixScale: function(t) {
            var e = this.setFromMatrixColumn(t, 0).length()
              , n = this.setFromMatrixColumn(t, 1).length()
              , i = this.setFromMatrixColumn(t, 2).length();
            return this.x = e,
            this.y = n,
            this.z = i,
            this
        },
        setFromMatrixColumn: function(t, e) {
            return this.fromArray(t.elements, 4 * e)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y && t.z === this.z
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0),
            this.x = t[e],
            this.y = t[e + 1],
            this.z = t[e + 2],
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this.x,
            t[e + 1] = this.y,
            t[e + 2] = this.z,
            t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
            this.x = t.getX(e),
            this.y = t.getY(e),
            this.z = t.getZ(e),
            this
        }
    }),
    Object.assign(Ge.prototype, {
        isMatrix3: !0,
        set: function(t, e, n, i, r, s, o, a, c) {
            var l = this.elements;
            return l[0] = t,
            l[1] = i,
            l[2] = o,
            l[3] = e,
            l[4] = r,
            l[5] = a,
            l[6] = n,
            l[7] = s,
            l[8] = c,
            this
        },
        identity: function() {
            return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
            this
        },
        clone: function() {
            return (new this.constructor).fromArray(this.elements)
        },
        copy: function(t) {
            var e = this.elements
              , n = t.elements;
            return e[0] = n[0],
            e[1] = n[1],
            e[2] = n[2],
            e[3] = n[3],
            e[4] = n[4],
            e[5] = n[5],
            e[6] = n[6],
            e[7] = n[7],
            e[8] = n[8],
            this
        },
        setFromMatrix4: function(t) {
            var e = t.elements;
            return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]),
            this
        },
        applyToBufferAttribute: function() {
            var t = new He;
            return function(e) {
                for (var n = 0, i = e.count; n < i; n++)
                    t.x = e.getX(n),
                    t.y = e.getY(n),
                    t.z = e.getZ(n),
                    t.applyMatrix3(this),
                    e.setXYZ(n, t.x, t.y, t.z);
                return e
            }
        }(),
        multiply: function(t) {
            return this.multiplyMatrices(this, t)
        },
        premultiply: function(t) {
            return this.multiplyMatrices(t, this)
        },
        multiplyMatrices: function(t, e) {
            var n = t.elements
              , i = e.elements
              , r = this.elements
              , s = n[0]
              , o = n[3]
              , a = n[6]
              , c = n[1]
              , l = n[4]
              , h = n[7]
              , p = n[2]
              , u = n[5]
              , d = n[8]
              , f = i[0]
              , m = i[3]
              , g = i[6]
              , v = i[1]
              , y = i[4]
              , x = i[7]
              , w = i[2]
              , b = i[5]
              , M = i[8];
            return r[0] = s * f + o * v + a * w,
            r[3] = s * m + o * y + a * b,
            r[6] = s * g + o * x + a * M,
            r[1] = c * f + l * v + h * w,
            r[4] = c * m + l * y + h * b,
            r[7] = c * g + l * x + h * M,
            r[2] = p * f + u * v + d * w,
            r[5] = p * m + u * y + d * b,
            r[8] = p * g + u * x + d * M,
            this
        },
        multiplyScalar: function(t) {
            var e = this.elements;
            return e[0] *= t,
            e[3] *= t,
            e[6] *= t,
            e[1] *= t,
            e[4] *= t,
            e[7] *= t,
            e[2] *= t,
            e[5] *= t,
            e[8] *= t,
            this
        },
        determinant: function() {
            var t = this.elements
              , e = t[0]
              , n = t[1]
              , i = t[2]
              , r = t[3]
              , s = t[4]
              , o = t[5]
              , a = t[6]
              , c = t[7]
              , l = t[8];
            return e * s * l - e * o * c - n * r * l + n * o * a + i * r * c - i * s * a
        },
        getInverse: function(t, e) {
            t && t.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
            var n = t.elements
              , i = this.elements
              , r = n[0]
              , s = n[1]
              , o = n[2]
              , a = n[3]
              , c = n[4]
              , l = n[5]
              , h = n[6]
              , p = n[7]
              , u = n[8]
              , d = u * c - l * p
              , f = l * h - u * a
              , m = p * a - c * h
              , g = r * d + s * f + o * m;
            if (0 === g) {
                var v = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                if (!0 === e)
                    throw new Error(v);
                return console.warn(v),
                this.identity()
            }
            var y = 1 / g;
            return i[0] = d * y,
            i[1] = (o * p - u * s) * y,
            i[2] = (l * s - o * c) * y,
            i[3] = f * y,
            i[4] = (u * r - o * h) * y,
            i[5] = (o * a - l * r) * y,
            i[6] = m * y,
            i[7] = (s * h - p * r) * y,
            i[8] = (c * r - s * a) * y,
            this
        },
        transpose: function() {
            var t, e = this.elements;
            return t = e[1],
            e[1] = e[3],
            e[3] = t,
            t = e[2],
            e[2] = e[6],
            e[6] = t,
            t = e[5],
            e[5] = e[7],
            e[7] = t,
            this
        },
        getNormalMatrix: function(t) {
            return this.setFromMatrix4(t).getInverse(this).transpose()
        },
        transposeIntoArray: function(t) {
            var e = this.elements;
            return t[0] = e[0],
            t[1] = e[3],
            t[2] = e[6],
            t[3] = e[1],
            t[4] = e[4],
            t[5] = e[7],
            t[6] = e[2],
            t[7] = e[5],
            t[8] = e[8],
            this
        },
        setUvTransform: function(t, e, n, i, r, s, o) {
            var a = Math.cos(r)
              , c = Math.sin(r);
            this.set(n * a, n * c, -n * (a * s + c * o) + s + t, -i * c, i * a, -i * (-c * s + a * o) + o + e, 0, 0, 1)
        },
        scale: function(t, e) {
            var n = this.elements;
            return n[0] *= t,
            n[3] *= t,
            n[6] *= t,
            n[1] *= e,
            n[4] *= e,
            n[7] *= e,
            this
        },
        rotate: function(t) {
            var e = Math.cos(t)
              , n = Math.sin(t)
              , i = this.elements
              , r = i[0]
              , s = i[3]
              , o = i[6]
              , a = i[1]
              , c = i[4]
              , l = i[7];
            return i[0] = e * r + n * a,
            i[3] = e * s + n * c,
            i[6] = e * o + n * l,
            i[1] = -n * r + e * a,
            i[4] = -n * s + e * c,
            i[7] = -n * o + e * l,
            this
        },
        translate: function(t, e) {
            var n = this.elements;
            return n[0] += t * n[2],
            n[3] += t * n[5],
            n[6] += t * n[8],
            n[1] += e * n[2],
            n[4] += e * n[5],
            n[7] += e * n[8],
            this
        },
        equals: function(t) {
            for (var e = this.elements, n = t.elements, i = 0; i < 9; i++)
                if (e[i] !== n[i])
                    return !1;
            return !0
        },
        fromArray: function(t, e) {
            void 0 === e && (e = 0);
            for (var n = 0; n < 9; n++)
                this.elements[n] = t[n + e];
            return this
        },
        toArray: function(t, e) {
            void 0 === t && (t = []),
            void 0 === e && (e = 0);
            var n = this.elements;
            return t[e] = n[0],
            t[e + 1] = n[1],
            t[e + 2] = n[2],
            t[e + 3] = n[3],
            t[e + 4] = n[4],
            t[e + 5] = n[5],
            t[e + 6] = n[6],
            t[e + 7] = n[7],
            t[e + 8] = n[8],
            t
        }
    });
    var je = {
        getDataURL: function(t) {
            var e;
            if (t instanceof HTMLCanvasElement)
                e = t;
            else {
                "undefined" != typeof OffscreenCanvas ? e = new OffscreenCanvas(t.width,t.height) : ((e = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")).width = t.width,
                e.height = t.height);
                var n = e.getContext("2d");
                t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height)
            }
            return e.width > 2048 || e.height > 2048 ? e.toDataURL("image/jpeg", .6) : e.toDataURL("image/png")
        }
    }
      , Ve = 0;
    function We(t, e, n, i, r, s, o, a, c, l) {
        Object.defineProperty(this, "id", {
            value: Ve++
        }),
        this.uuid = Ne.generateUUID(),
        this.name = "",
        this.image = void 0 !== t ? t : We.DEFAULT_IMAGE,
        this.mipmaps = [],
        this.mapping = void 0 !== e ? e : We.DEFAULT_MAPPING,
        this.wrapS = void 0 !== n ? n : gt,
        this.wrapT = void 0 !== i ? i : gt,
        this.magFilter = void 0 !== r ? r : bt,
        this.minFilter = void 0 !== s ? s : _t,
        this.anisotropy = void 0 !== c ? c : 1,
        this.format = void 0 !== o ? o : Ut,
        this.type = void 0 !== a ? a : St,
        this.offset = new Ue(0,0),
        this.repeat = new Ue(1,1),
        this.center = new Ue(0,0),
        this.rotation = 0,
        this.matrixAutoUpdate = !0,
        this.matrix = new Ge,
        this.generateMipmaps = !0,
        this.premultiplyAlpha = !1,
        this.flipY = !0,
        this.unpackAlignment = 4,
        this.encoding = void 0 !== l ? l : Ee,
        this.version = 0,
        this.onUpdate = null
    }
    function Ye(t, e, n, i) {
        this.x = t || 0,
        this.y = e || 0,
        this.z = n || 0,
        this.w = void 0 !== i ? i : 1
    }
    function qe(t, e, n) {
        this.width = t,
        this.height = e,
        this.scissor = new Ye(0,0,t,e),
        this.scissorTest = !1,
        this.viewport = new Ye(0,0,t,e),
        void 0 === (n = n || {}).minFilter && (n.minFilter = bt),
        this.texture = new We(void 0,void 0,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),
        this.texture.generateMipmaps = void 0 === n.generateMipmaps || n.generateMipmaps,
        this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer,
        this.stencilBuffer = void 0 === n.stencilBuffer || n.stencilBuffer,
        this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null
    }
    function Xe(t, e, n) {
        qe.call(this, t, e, n),
        this.activeCubeFace = 0,
        this.activeMipMapLevel = 0
    }
    function Ze(t, e, n, i, r, s, o, a, c, l, h, p) {
        We.call(this, null, s, o, a, c, l, i, r, h, p),
        this.image = {
            data: t,
            width: e,
            height: n
        },
        this.magFilter = void 0 !== c ? c : yt,
        this.minFilter = void 0 !== l ? l : yt,
        this.generateMipmaps = !1,
        this.flipY = !1,
        this.unpackAlignment = 1
    }
    function Ke(t, e) {
        this.min = void 0 !== t ? t : new He(1 / 0,1 / 0,1 / 0),
        this.max = void 0 !== e ? e : new He(-1 / 0,-1 / 0,-1 / 0)
    }
    function Je(t, e) {
        this.center = void 0 !== t ? t : new He,
        this.radius = void 0 !== e ? e : 0
    }
    function Qe(t, e) {
        this.normal = void 0 !== t ? t : new He(1,0,0),
        this.constant = void 0 !== e ? e : 0
    }
    function $e(t, e, n, i, r, s) {
        this.planes = [void 0 !== t ? t : new Qe, void 0 !== e ? e : new Qe, void 0 !== n ? n : new Qe, void 0 !== i ? i : new Qe, void 0 !== r ? r : new Qe, void 0 !== s ? s : new Qe]
    }
    We.DEFAULT_IMAGE = void 0,
    We.DEFAULT_MAPPING = at,
    We.prototype = Object.assign(Object.create(i.prototype), {
        constructor: We,
        isTexture: !0,
        updateMatrix: function() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.name = t.name,
            this.image = t.image,
            this.mipmaps = t.mipmaps.slice(0),
            this.mapping = t.mapping,
            this.wrapS = t.wrapS,
            this.wrapT = t.wrapT,
            this.magFilter = t.magFilter,
            this.minFilter = t.minFilter,
            this.anisotropy = t.anisotropy,
            this.format = t.format,
            this.type = t.type,
            this.offset.copy(t.offset),
            this.repeat.copy(t.repeat),
            this.center.copy(t.center),
            this.rotation = t.rotation,
            this.matrixAutoUpdate = t.matrixAutoUpdate,
            this.matrix.copy(t.matrix),
            this.generateMipmaps = t.generateMipmaps,
            this.premultiplyAlpha = t.premultiplyAlpha,
            this.flipY = t.flipY,
            this.unpackAlignment = t.unpackAlignment,
            this.encoding = t.encoding,
            this
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t;
            if (!e && void 0 !== t.textures[this.uuid])
                return t.textures[this.uuid];
            var n = {
                metadata: {
                    version: 4.5,
                    type: "Texture",
                    generator: "Texture.toJSON"
                },
                uuid: this.uuid,
                name: this.name,
                mapping: this.mapping,
                repeat: [this.repeat.x, this.repeat.y],
                offset: [this.offset.x, this.offset.y],
                center: [this.center.x, this.center.y],
                rotation: this.rotation,
                wrap: [this.wrapS, this.wrapT],
                format: this.format,
                minFilter: this.minFilter,
                magFilter: this.magFilter,
                anisotropy: this.anisotropy,
                flipY: this.flipY
            };
            if (void 0 !== this.image) {
                var i = this.image;
                if (void 0 === i.uuid && (i.uuid = Ne.generateUUID()),
                !e && void 0 === t.images[i.uuid]) {
                    var r;
                    if (Array.isArray(i)) {
                        r = [];
                        for (var s = 0, o = i.length; s < o; s++)
                            r.push(je.getDataURL(i[s]))
                    } else
                        r = je.getDataURL(i);
                    t.images[i.uuid] = {
                        uuid: i.uuid,
                        url: r
                    }
                }
                n.image = i.uuid
            }
            return e || (t.textures[this.uuid] = n),
            n
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        },
        transformUv: function(t) {
            if (this.mapping === at) {
                if (t.applyMatrix3(this.matrix),
                t.x < 0 || t.x > 1)
                    switch (this.wrapS) {
                    case mt:
                        t.x = t.x - Math.floor(t.x);
                        break;
                    case gt:
                        t.x = t.x < 0 ? 0 : 1;
                        break;
                    case vt:
                        1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                    }
                if (t.y < 0 || t.y > 1)
                    switch (this.wrapT) {
                    case mt:
                        t.y = t.y - Math.floor(t.y);
                        break;
                    case gt:
                        t.y = t.y < 0 ? 0 : 1;
                        break;
                    case vt:
                        1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                    }
                this.flipY && (t.y = 1 - t.y)
            }
        }
    }),
    Object.defineProperty(We.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }),
    Object.assign(Ye.prototype, {
        isVector4: !0,
        set: function(t, e, n, i) {
            return this.x = t,
            this.y = e,
            this.z = n,
            this.w = i,
            this
        },
        setScalar: function(t) {
            return this.x = t,
            this.y = t,
            this.z = t,
            this.w = t,
            this
        },
        setX: function(t) {
            return this.x = t,
            this
        },
        setY: function(t) {
            return this.y = t,
            this
        },
        setZ: function(t) {
            return this.z = t,
            this
        },
        setW: function(t) {
            return this.w = t,
            this
        },
        setComponent: function(t, e) {
            switch (t) {
            case 0:
                this.x = e;
                break;
            case 1:
                this.y = e;
                break;
            case 2:
                this.z = e;
                break;
            case 3:
                this.w = e;
                break;
            default:
                throw new Error("index is out of range: " + t)
            }
            return this
        },
        getComponent: function(t) {
            switch (t) {
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error("index is out of range: " + t)
            }
        },
        clone: function() {
            return new this.constructor(this.x,this.y,this.z,this.w)
        },
        copy: function(t) {
            return this.x = t.x,
            this.y = t.y,
            this.z = t.z,
            this.w = void 0 !== t.w ? t.w : 1,
            this
        },
        add: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
            this.addVectors(t, e)) : (this.x += t.x,
            this.y += t.y,
            this.z += t.z,
            this.w += t.w,
            this)
        },
        addScalar: function(t) {
            return this.x += t,
            this.y += t,
            this.z += t,
            this.w += t,
            this
        },
        addVectors: function(t, e) {
            return this.x = t.x + e.x,
            this.y = t.y + e.y,
            this.z = t.z + e.z,
            this.w = t.w + e.w,
            this
        },
        addScaledVector: function(t, e) {
            return this.x += t.x * e,
            this.y += t.y * e,
            this.z += t.z * e,
            this.w += t.w * e,
            this
        },
        sub: function(t, e) {
            return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
            this.subVectors(t, e)) : (this.x -= t.x,
            this.y -= t.y,
            this.z -= t.z,
            this.w -= t.w,
            this)
        },
        subScalar: function(t) {
            return this.x -= t,
            this.y -= t,
            this.z -= t,
            this.w -= t,
            this
        },
        subVectors: function(t, e) {
            return this.x = t.x - e.x,
            this.y = t.y - e.y,
            this.z = t.z - e.z,
            this.w = t.w - e.w,
            this
        },
        multiplyScalar: function(t) {
            return this.x *= t,
            this.y *= t,
            this.z *= t,
            this.w *= t,
            this
        },
        applyMatrix4: function(t) {
            var e = this.x
              , n = this.y
              , i = this.z
              , r = this.w
              , s = t.elements;
            return this.x = s[0] * e + s[4] * n + s[8] * i + s[12] * r,
            this.y = s[1] * e + s[5] * n + s[9] * i + s[13] * r,
            this.z = s[2] * e + s[6] * n + s[10] * i + s[14] * r,
            this.w = s[3] * e + s[7] * n + s[11] * i + s[15] * r,
            this
        },
        divideScalar: function(t) {
            return this.multiplyScalar(1 / t)
        },
        setAxisAngleFromQuaternion: function(t) {
            this.w = 2 * Math.acos(t.w);
            var e = Math.sqrt(1 - t.w * t.w);
            return e < 1e-4 ? (this.x = 1,
            this.y = 0,
            this.z = 0) : (this.x = t.x / e,
            this.y = t.y / e,
            this.z = t.z / e),
            this
        },
        setAxisAngleFromRotationMatrix: function(t) {
            var e, n, i, r, s = t.elements, o = s[0], a = s[4], c = s[8], l = s[1], h = s[5], p = s[9], u = s[2], d = s[6], f = s[10];
            if (Math.abs(a - l) < .01 && Math.abs(c - u) < .01 && Math.abs(p - d) < .01) {
                if (Math.abs(a + l) < .1 && Math.abs(c + u) < .1 && Math.abs(p + d) < .1 && Math.abs(o + h + f - 3) < .1)
                    return this.set(1, 0, 0, 0),
                    this;
                e = Math.PI;
                var m = (o + 1) / 2
                  , g = (h + 1) / 2
                  , v = (f + 1) / 2
                  , y = (a + l) / 4
                  , x = (c + u) / 4
                  , w = (p + d) / 4;
                return m > g && m > v ? m < .01 ? (n = 0,
                i = .707106781,
                r = .707106781) : (i = y / (n = Math.sqrt(m)),
                r = x / n) : g > v ? g < .01 ? (n = .707106781,
                i = 0,
                r = .707106781) : (n = y / (i = Math.sqrt(g)),
                r = w / i) : v < .01 ? (n = .707106781,
                i = .707106781,
                r = 0) : (n = x / (r = Math.sqrt(v)),
                i = w / r),
                this.set(n, i, r, e),
                this
            }
            var b = Math.sqrt((d - p) * (d - p) + (c - u) * (c - u) + (l - a) * (l - a));
            return Math.abs(b) < .001 && (b = 1),
            this.x = (d - p) / b,
            this.y = (c - u) / b,
            this.z = (l - a) / b,
            this.w = Math.acos((o + h + f - 1) / 2),
            this
        },
        min: function(t) {
            return this.x = Math.min(this.x, t.x),
            this.y = Math.min(this.y, t.y),
            this.z = Math.min(this.z, t.z),
            this.w = Math.min(this.w, t.w),
            this
        },
        max: function(t) {
            return this.x = Math.max(this.x, t.x),
            this.y = Math.max(this.y, t.y),
            this.z = Math.max(this.z, t.z),
            this.w = Math.max(this.w, t.w),
            this
        },
        clamp: function(t, e) {
            return this.x = Math.max(t.x, Math.min(e.x, this.x)),
            this.y = Math.max(t.y, Math.min(e.y, this.y)),
            this.z = Math.max(t.z, Math.min(e.z, this.z)),
            this.w = Math.max(t.w, Math.min(e.w, this.w)),
            this
        },
        clampScalar: function() {
            var t, e;
            return function(n, i) {
                return void 0 === t && (t = new Ye,
                e = new Ye),
                t.set(n, n, n, n),
                e.set(i, i, i, i),
                this.clamp(t, e)
            }
        }(),
        clampLength: function(t, e) {
            var n = this.length();
            return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
        },
        floor: function() {
            return this.x = Math.floor(this.x),
            this.y = Math.floor(this.y),
            this.z = Math.floor(this.z),
            this.w = Math.floor(this.w),
            this
        },
        ceil: function() {
            return this.x = Math.ceil(this.x),
            this.y = Math.ceil(this.y),
            this.z = Math.ceil(this.z),
            this.w = Math.ceil(this.w),
            this
        },
        round: function() {
            return this.x = Math.round(this.x),
            this.y = Math.round(this.y),
            this.z = Math.round(this.z),
            this.w = Math.round(this.w),
            this
        },
        roundToZero: function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
            this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
            this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
            this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w),
            this
        },
        negate: function() {
            return this.x = -this.x,
            this.y = -this.y,
            this.z = -this.z,
            this.w = -this.w,
            this
        },
        dot: function(t) {
            return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
        },
        lengthSq: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
        },
        manhattanLength: function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
        },
        normalize: function() {
            return this.divideScalar(this.length() || 1)
        },
        setLength: function(t) {
            return this.normalize().multiplyScalar(t)
        },
        lerp: function(t, e) {
            return this.x += (t.x - this.x) * e,
            this.y += (t.y - this.y) * e,
            this.z += (t.z - this.z) * e,
            this.w += (t.w - this.w) * e,
            this
        },
        lerpVectors: function(t, e, n) {
            return this.subVectors(e, t).multiplyScalar(n).add(t)
        },
        equals: function(t) {
            return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0),
            this.x = t[e],
            this.y = t[e + 1],
            this.z = t[e + 2],
            this.w = t[e + 3],
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this.x,
            t[e + 1] = this.y,
            t[e + 2] = this.z,
            t[e + 3] = this.w,
            t
        },
        fromBufferAttribute: function(t, e, n) {
            return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),
            this.x = t.getX(e),
            this.y = t.getY(e),
            this.z = t.getZ(e),
            this.w = t.getW(e),
            this
        }
    }),
    qe.prototype = Object.assign(Object.create(i.prototype), {
        constructor: qe,
        isWebGLRenderTarget: !0,
        setSize: function(t, e) {
            this.width === t && this.height === e || (this.width = t,
            this.height = e,
            this.dispose()),
            this.viewport.set(0, 0, t, e),
            this.scissor.set(0, 0, t, e)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.width = t.width,
            this.height = t.height,
            this.viewport.copy(t.viewport),
            this.texture = t.texture.clone(),
            this.depthBuffer = t.depthBuffer,
            this.stencilBuffer = t.stencilBuffer,
            this.depthTexture = t.depthTexture,
            this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
    Xe.prototype = Object.create(qe.prototype),
    Xe.prototype.constructor = Xe,
    Xe.prototype.isWebGLRenderTargetCube = !0,
    Ze.prototype = Object.create(We.prototype),
    Ze.prototype.constructor = Ze,
    Ze.prototype.isDataTexture = !0,
    Object.assign(Ke.prototype, {
        isBox3: !0,
        set: function(t, e) {
            return this.min.copy(t),
            this.max.copy(e),
            this
        },
        setFromArray: function(t) {
            for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, s = -1 / 0, o = -1 / 0, a = 0, c = t.length; a < c; a += 3) {
                var l = t[a]
                  , h = t[a + 1]
                  , p = t[a + 2];
                l < e && (e = l),
                h < n && (n = h),
                p < i && (i = p),
                l > r && (r = l),
                h > s && (s = h),
                p > o && (o = p)
            }
            return this.min.set(e, n, i),
            this.max.set(r, s, o),
            this
        },
        setFromBufferAttribute: function(t) {
            for (var e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, s = -1 / 0, o = -1 / 0, a = 0, c = t.count; a < c; a++) {
                var l = t.getX(a)
                  , h = t.getY(a)
                  , p = t.getZ(a);
                l < e && (e = l),
                h < n && (n = h),
                p < i && (i = p),
                l > r && (r = l),
                h > s && (s = h),
                p > o && (o = p)
            }
            return this.min.set(e, n, i),
            this.max.set(r, s, o),
            this
        },
        setFromPoints: function(t) {
            this.makeEmpty();
            for (var e = 0, n = t.length; e < n; e++)
                this.expandByPoint(t[e]);
            return this
        },
        setFromCenterAndSize: function() {
            var t = new He;
            return function(e, n) {
                var i = t.copy(n).multiplyScalar(.5);
                return this.min.copy(e).sub(i),
                this.max.copy(e).add(i),
                this
            }
        }(),
        setFromObject: function(t) {
            return this.makeEmpty(),
            this.expandByObject(t)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.min.copy(t.min),
            this.max.copy(t.max),
            this
        },
        makeEmpty: function() {
            return this.min.x = this.min.y = this.min.z = 1 / 0,
            this.max.x = this.max.y = this.max.z = -1 / 0,
            this
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Box3: .getCenter() target is now required"),
            t = new He),
            this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
        },
        getSize: function(t) {
            return void 0 === t && (console.warn("THREE.Box3: .getSize() target is now required"),
            t = new He),
            this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
        },
        expandByPoint: function(t) {
            return this.min.min(t),
            this.max.max(t),
            this
        },
        expandByVector: function(t) {
            return this.min.sub(t),
            this.max.add(t),
            this
        },
        expandByScalar: function(t) {
            return this.min.addScalar(-t),
            this.max.addScalar(t),
            this
        },
        expandByObject: function() {
            var t, e, n, i = new He;
            function r(r) {
                var s = r.geometry;
                if (void 0 !== s)
                    if (s.isGeometry) {
                        var o = s.vertices;
                        for (e = 0,
                        n = o.length; e < n; e++)
                            i.copy(o[e]),
                            i.applyMatrix4(r.matrixWorld),
                            t.expandByPoint(i)
                    } else if (s.isBufferGeometry) {
                        var a = s.attributes.position;
                        if (void 0 !== a)
                            for (e = 0,
                            n = a.count; e < n; e++)
                                i.fromBufferAttribute(a, e).applyMatrix4(r.matrixWorld),
                                t.expandByPoint(i)
                    }
            }
            return function(e) {
                return t = this,
                e.updateMatrixWorld(!0),
                e.traverse(r),
                this
            }
        }(),
        containsPoint: function(t) {
            return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
        },
        containsBox: function(t) {
            return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
        },
        getParameter: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box3: .getParameter() target is now required"),
            e = new He),
            e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
        },
        intersectsBox: function(t) {
            return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
        },
        intersectsSphere: function() {
            var t = new He;
            return function(e) {
                return this.clampPoint(e.center, t),
                t.distanceToSquared(e.center) <= e.radius * e.radius
            }
        }(),
        intersectsPlane: function(t) {
            var e, n;
            return t.normal.x > 0 ? (e = t.normal.x * this.min.x,
            n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x,
            n = t.normal.x * this.min.x),
            t.normal.y > 0 ? (e += t.normal.y * this.min.y,
            n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y,
            n += t.normal.y * this.min.y),
            t.normal.z > 0 ? (e += t.normal.z * this.min.z,
            n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z,
            n += t.normal.z * this.min.z),
            e <= t.constant && n >= t.constant
        },
        intersectsTriangle: function() {
            var t = new He
              , e = new He
              , n = new He
              , i = new He
              , r = new He
              , s = new He
              , o = new He
              , a = new He
              , c = new He
              , l = new He;
            function h(i) {
                var r, s;
                for (r = 0,
                s = i.length - 3; r <= s; r += 3) {
                    o.fromArray(i, r);
                    var a = c.x * Math.abs(o.x) + c.y * Math.abs(o.y) + c.z * Math.abs(o.z)
                      , l = t.dot(o)
                      , h = e.dot(o)
                      , p = n.dot(o);
                    if (Math.max(-Math.max(l, h, p), Math.min(l, h, p)) > a)
                        return !1
                }
                return !0
            }
            return function(o) {
                if (this.isEmpty())
                    return !1;
                this.getCenter(a),
                c.subVectors(this.max, a),
                t.subVectors(o.a, a),
                e.subVectors(o.b, a),
                n.subVectors(o.c, a),
                i.subVectors(e, t),
                r.subVectors(n, e),
                s.subVectors(t, n);
                var p = [0, -i.z, i.y, 0, -r.z, r.y, 0, -s.z, s.y, i.z, 0, -i.x, r.z, 0, -r.x, s.z, 0, -s.x, -i.y, i.x, 0, -r.y, r.x, 0, -s.y, s.x, 0];
                return !!h(p) && !!h(p = [1, 0, 0, 0, 1, 0, 0, 0, 1]) && (l.crossVectors(i, r),
                h(p = [l.x, l.y, l.z]))
            }
        }(),
        clampPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box3: .clampPoint() target is now required"),
            e = new He),
            e.copy(t).clamp(this.min, this.max)
        },
        distanceToPoint: function() {
            var t = new He;
            return function(e) {
                return t.copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }(),
        getBoundingSphere: function() {
            var t = new He;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"),
                e = new Je),
                this.getCenter(e.center),
                e.radius = .5 * this.getSize(t).length(),
                e
            }
        }(),
        intersect: function(t) {
            return this.min.max(t.min),
            this.max.min(t.max),
            this.isEmpty() && this.makeEmpty(),
            this
        },
        union: function(t) {
            return this.min.min(t.min),
            this.max.max(t.max),
            this
        },
        applyMatrix4: function(t) {
            if (this.isEmpty())
                return this;
            var e = t.elements
              , n = e[0] * this.min.x
              , i = e[1] * this.min.x
              , r = e[2] * this.min.x
              , s = e[0] * this.max.x
              , o = e[1] * this.max.x
              , a = e[2] * this.max.x
              , c = e[4] * this.min.y
              , l = e[5] * this.min.y
              , h = e[6] * this.min.y
              , p = e[4] * this.max.y
              , u = e[5] * this.max.y
              , d = e[6] * this.max.y
              , f = e[8] * this.min.z
              , m = e[9] * this.min.z
              , g = e[10] * this.min.z
              , v = e[8] * this.max.z
              , y = e[9] * this.max.z
              , x = e[10] * this.max.z;
            return this.min.x = Math.min(n, s) + Math.min(c, p) + Math.min(f, v) + e[12],
            this.min.y = Math.min(i, o) + Math.min(l, u) + Math.min(m, y) + e[13],
            this.min.z = Math.min(r, a) + Math.min(h, d) + Math.min(g, x) + e[14],
            this.max.x = Math.max(n, s) + Math.max(c, p) + Math.max(f, v) + e[12],
            this.max.y = Math.max(i, o) + Math.max(l, u) + Math.max(m, y) + e[13],
            this.max.z = Math.max(r, a) + Math.max(h, d) + Math.max(g, x) + e[14],
            this
        },
        translate: function(t) {
            return this.min.add(t),
            this.max.add(t),
            this
        },
        equals: function(t) {
            return t.min.equals(this.min) && t.max.equals(this.max)
        }
    }),
    Object.assign(Je.prototype, {
        set: function(t, e) {
            return this.center.copy(t),
            this.radius = e,
            this
        },
        setFromPoints: function() {
            var t = new Ke;
            return function(e, n) {
                var i = this.center;
                void 0 !== n ? i.copy(n) : t.setFromPoints(e).getCenter(i);
                for (var r = 0, s = 0, o = e.length; s < o; s++)
                    r = Math.max(r, i.distanceToSquared(e[s]));
                return this.radius = Math.sqrt(r),
                this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.center.copy(t.center),
            this.radius = t.radius,
            this
        },
        empty: function() {
            return this.radius <= 0
        },
        containsPoint: function(t) {
            return t.distanceToSquared(this.center) <= this.radius * this.radius
        },
        distanceToPoint: function(t) {
            return t.distanceTo(this.center) - this.radius
        },
        intersectsSphere: function(t) {
            var e = this.radius + t.radius;
            return t.center.distanceToSquared(this.center) <= e * e
        },
        intersectsBox: function(t) {
            return t.intersectsSphere(this)
        },
        intersectsPlane: function(t) {
            return Math.abs(t.distanceToPoint(this.center)) <= this.radius
        },
        clampPoint: function(t, e) {
            var n = this.center.distanceToSquared(t);
            return void 0 === e && (console.warn("THREE.Sphere: .clampPoint() target is now required"),
            e = new He),
            e.copy(t),
            n > this.radius * this.radius && (e.sub(this.center).normalize(),
            e.multiplyScalar(this.radius).add(this.center)),
            e
        },
        getBoundingBox: function(t) {
            return void 0 === t && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"),
            t = new Ke),
            t.set(this.center, this.center),
            t.expandByScalar(this.radius),
            t
        },
        applyMatrix4: function(t) {
            return this.center.applyMatrix4(t),
            this.radius = this.radius * t.getMaxScaleOnAxis(),
            this
        },
        translate: function(t) {
            return this.center.add(t),
            this
        },
        equals: function(t) {
            return t.center.equals(this.center) && t.radius === this.radius
        }
    }),
    Object.assign(Qe.prototype, {
        set: function(t, e) {
            return this.normal.copy(t),
            this.constant = e,
            this
        },
        setComponents: function(t, e, n, i) {
            return this.normal.set(t, e, n),
            this.constant = i,
            this
        },
        setFromNormalAndCoplanarPoint: function(t, e) {
            return this.normal.copy(t),
            this.constant = -e.dot(this.normal),
            this
        },
        setFromCoplanarPoints: function() {
            var t = new He
              , e = new He;
            return function(n, i, r) {
                var s = t.subVectors(r, i).cross(e.subVectors(n, i)).normalize();
                return this.setFromNormalAndCoplanarPoint(s, n),
                this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.normal.copy(t.normal),
            this.constant = t.constant,
            this
        },
        normalize: function() {
            var t = 1 / this.normal.length();
            return this.normal.multiplyScalar(t),
            this.constant *= t,
            this
        },
        negate: function() {
            return this.constant *= -1,
            this.normal.negate(),
            this
        },
        distanceToPoint: function(t) {
            return this.normal.dot(t) + this.constant
        },
        distanceToSphere: function(t) {
            return this.distanceToPoint(t.center) - t.radius
        },
        projectPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Plane: .projectPoint() target is now required"),
            e = new He),
            e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
        },
        intersectLine: function() {
            var t = new He;
            return function(e, n) {
                void 0 === n && (console.warn("THREE.Plane: .intersectLine() target is now required"),
                n = new He);
                var i = e.delta(t)
                  , r = this.normal.dot(i);
                if (0 === r)
                    return 0 === this.distanceToPoint(e.start) ? n.copy(e.start) : void 0;
                var s = -(e.start.dot(this.normal) + this.constant) / r;
                return s < 0 || s > 1 ? void 0 : n.copy(i).multiplyScalar(s).add(e.start)
            }
        }(),
        intersectsLine: function(t) {
            var e = this.distanceToPoint(t.start)
              , n = this.distanceToPoint(t.end);
            return e < 0 && n > 0 || n < 0 && e > 0
        },
        intersectsBox: function(t) {
            return t.intersectsPlane(this)
        },
        intersectsSphere: function(t) {
            return t.intersectsPlane(this)
        },
        coplanarPoint: function(t) {
            return void 0 === t && (console.warn("THREE.Plane: .coplanarPoint() target is now required"),
            t = new He),
            t.copy(this.normal).multiplyScalar(-this.constant)
        },
        applyMatrix4: function() {
            var t = new He
              , e = new Ge;
            return function(n, i) {
                var r = i || e.getNormalMatrix(n)
                  , s = this.coplanarPoint(t).applyMatrix4(n)
                  , o = this.normal.applyMatrix3(r).normalize();
                return this.constant = -s.dot(o),
                this
            }
        }(),
        translate: function(t) {
            return this.constant -= t.dot(this.normal),
            this
        },
        equals: function(t) {
            return t.normal.equals(this.normal) && t.constant === this.constant
        }
    }),
    Object.assign($e.prototype, {
        set: function(t, e, n, i, r, s) {
            var o = this.planes;
            return o[0].copy(t),
            o[1].copy(e),
            o[2].copy(n),
            o[3].copy(i),
            o[4].copy(r),
            o[5].copy(s),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            for (var e = this.planes, n = 0; n < 6; n++)
                e[n].copy(t.planes[n]);
            return this
        },
        setFromMatrix: function(t) {
            var e = this.planes
              , n = t.elements
              , i = n[0]
              , r = n[1]
              , s = n[2]
              , o = n[3]
              , a = n[4]
              , c = n[5]
              , l = n[6]
              , h = n[7]
              , p = n[8]
              , u = n[9]
              , d = n[10]
              , f = n[11]
              , m = n[12]
              , g = n[13]
              , v = n[14]
              , y = n[15];
            return e[0].setComponents(o - i, h - a, f - p, y - m).normalize(),
            e[1].setComponents(o + i, h + a, f + p, y + m).normalize(),
            e[2].setComponents(o + r, h + c, f + u, y + g).normalize(),
            e[3].setComponents(o - r, h - c, f - u, y - g).normalize(),
            e[4].setComponents(o - s, h - l, f - d, y - v).normalize(),
            e[5].setComponents(o + s, h + l, f + d, y + v).normalize(),
            this
        },
        intersectsObject: function() {
            var t = new Je;
            return function(e) {
                var n = e.geometry;
                return null === n.boundingSphere && n.computeBoundingSphere(),
                t.copy(n.boundingSphere).applyMatrix4(e.matrixWorld),
                this.intersectsSphere(t)
            }
        }(),
        intersectsSprite: function() {
            var t = new Je;
            return function(e) {
                return t.center.set(0, 0, 0),
                t.radius = .7071067811865476,
                t.applyMatrix4(e.matrixWorld),
                this.intersectsSphere(t)
            }
        }(),
        intersectsSphere: function(t) {
            for (var e = this.planes, n = t.center, i = -t.radius, r = 0; r < 6; r++)
                if (e[r].distanceToPoint(n) < i)
                    return !1;
            return !0
        },
        intersectsBox: function() {
            var t = new He;
            return function(e) {
                for (var n = this.planes, i = 0; i < 6; i++) {
                    var r = n[i];
                    if (t.x = r.normal.x > 0 ? e.max.x : e.min.x,
                    t.y = r.normal.y > 0 ? e.max.y : e.min.y,
                    t.z = r.normal.z > 0 ? e.max.z : e.min.z,
                    r.distanceToPoint(t) < 0)
                        return !1
                }
                return !0
            }
        }(),
        containsPoint: function(t) {
            for (var e = this.planes, n = 0; n < 6; n++)
                if (e[n].distanceToPoint(t) < 0)
                    return !1;
            return !0
        }
    });
    var tn = {
        alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",
        alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
        alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",
        aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
        aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
        begin_vertex: "\nvec3 transformed = vec3( position );\n",
        beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n",
        bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
        bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
        clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif\n",
        clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",
        clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",
        clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
        color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
        color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",
        color_pars_vertex: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
        color_vertex: "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",
        common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
        cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
        defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",
        displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",
        displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
        emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",
        emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",
        encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",
        encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",
        envmap_fragment: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
        envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
        envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",
        envmap_physical_pars_fragment: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
        envmap_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
        fog_vertex: "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",
        fog_pars_vertex: "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",
        fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",
        fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
        gradientmap_pars_fragment: "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",
        lightmap_fragment: "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
        lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
        lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
        lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n",
        lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
        lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
        lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
        lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
        lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n",
        lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n\t#ifndef STANDARD\n\t\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n\t#endif\n#endif\n",
        lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
        logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
        logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",
        logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",
        logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
        map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",
        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",
        map_particle_fragment: "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",
        map_particle_pars_fragment: "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
        metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",
        metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
        morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
        morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
        morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
        normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n",
        normal_fragment_maps: "#ifdef USE_NORMALMAP\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t#ifdef FLIP_SIDED\n\t\t\tnormal = - normal;\n\t\t#endif\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tnormal = normalize( normalMatrix * normal );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
        normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\t#ifdef OBJECTSPACE_NORMALMAP\n\t\tuniform mat3 normalMatrix;\n\t#else\n\t\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\t\tvec2 st0 = dFdx( vUv.st );\n\t\t\tvec2 st1 = dFdy( vUv.st );\n\t\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\t\tvec3 N = normalize( surf_norm );\n\t\t\tmat3 tsn = mat3( S, T, N );\n\t\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\t\tmapN.xy *= normalScale;\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\treturn normalize( tsn * mapN );\n\t\t}\n\t#endif\n#endif\n",
        packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
        premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",
        project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",
        dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",
        dithering_pars_fragment: "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
        roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",
        roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
        shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
        shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
        shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
        shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
        skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
        skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
        skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",
        skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
        specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
        specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
        tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",
        tonemapping_pars_fragment: "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
        uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",
        uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
        uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
        uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
        uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
        uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",
        worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",
        cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
        cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",
        depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
        depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
        distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
        distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
        equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",
        equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
        linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
        linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
        meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
        meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
        meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
        meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
        meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
        meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
        meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
        meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
        normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
        normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
        points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
        points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}\n",
        shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",
        shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
        sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
        sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"
    }
      , en = {
        merge: function(t) {
            for (var e = {}, n = 0; n < t.length; n++) {
                var i = this.clone(t[n]);
                for (var r in i)
                    e[r] = i[r]
            }
            return e
        },
        clone: function(t) {
            var e = {};
            for (var n in t)
                for (var i in e[n] = {},
                t[n]) {
                    var r = t[n][i];
                    r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture) ? e[n][i] = r.clone() : Array.isArray(r) ? e[n][i] = r.slice() : e[n][i] = r
                }
            return e
        }
    }
      , nn = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    };
    function rn(t, e, n) {
        return void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n)
    }
    Object.assign(rn.prototype, {
        isColor: !0,
        r: 1,
        g: 1,
        b: 1,
        set: function(t) {
            return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t),
            this
        },
        setScalar: function(t) {
            return this.r = t,
            this.g = t,
            this.b = t,
            this
        },
        setHex: function(t) {
            return t = Math.floor(t),
            this.r = (t >> 16 & 255) / 255,
            this.g = (t >> 8 & 255) / 255,
            this.b = (255 & t) / 255,
            this
        },
        setRGB: function(t, e, n) {
            return this.r = t,
            this.g = e,
            this.b = n,
            this
        },
        setHSL: function() {
            function t(t, e, n) {
                return n < 0 && (n += 1),
                n > 1 && (n -= 1),
                n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t
            }
            return function(e, n, i) {
                if (e = Ne.euclideanModulo(e, 1),
                n = Ne.clamp(n, 0, 1),
                i = Ne.clamp(i, 0, 1),
                0 === n)
                    this.r = this.g = this.b = i;
                else {
                    var r = i <= .5 ? i * (1 + n) : i + n - i * n
                      , s = 2 * i - r;
                    this.r = t(s, r, e + 1 / 3),
                    this.g = t(s, r, e),
                    this.b = t(s, r, e - 1 / 3)
                }
                return this
            }
        }(),
        setStyle: function(t) {
            function e(e) {
                void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.")
            }
            var n;
            if (n = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)) {
                var i, r = n[1], s = n[2];
                switch (r) {
                case "rgb":
                case "rgba":
                    if (i = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(s))
                        return this.r = Math.min(255, parseInt(i[1], 10)) / 255,
                        this.g = Math.min(255, parseInt(i[2], 10)) / 255,
                        this.b = Math.min(255, parseInt(i[3], 10)) / 255,
                        e(i[5]),
                        this;
                    if (i = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(s))
                        return this.r = Math.min(100, parseInt(i[1], 10)) / 100,
                        this.g = Math.min(100, parseInt(i[2], 10)) / 100,
                        this.b = Math.min(100, parseInt(i[3], 10)) / 100,
                        e(i[5]),
                        this;
                    break;
                case "hsl":
                case "hsla":
                    if (i = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(s)) {
                        var o = parseFloat(i[1]) / 360
                          , a = parseInt(i[2], 10) / 100
                          , c = parseInt(i[3], 10) / 100;
                        return e(i[5]),
                        this.setHSL(o, a, c)
                    }
                }
            } else if (n = /^\#([A-Fa-f0-9]+)$/.exec(t)) {
                var l, h = (l = n[1]).length;
                if (3 === h)
                    return this.r = parseInt(l.charAt(0) + l.charAt(0), 16) / 255,
                    this.g = parseInt(l.charAt(1) + l.charAt(1), 16) / 255,
                    this.b = parseInt(l.charAt(2) + l.charAt(2), 16) / 255,
                    this;
                if (6 === h)
                    return this.r = parseInt(l.charAt(0) + l.charAt(1), 16) / 255,
                    this.g = parseInt(l.charAt(2) + l.charAt(3), 16) / 255,
                    this.b = parseInt(l.charAt(4) + l.charAt(5), 16) / 255,
                    this
            }
            return t && t.length > 0 && (void 0 !== (l = nn[t]) ? this.setHex(l) : console.warn("THREE.Color: Unknown color " + t)),
            this
        },
        clone: function() {
            return new this.constructor(this.r,this.g,this.b)
        },
        copy: function(t) {
            return this.r = t.r,
            this.g = t.g,
            this.b = t.b,
            this
        },
        copyGammaToLinear: function(t, e) {
            return void 0 === e && (e = 2),
            this.r = Math.pow(t.r, e),
            this.g = Math.pow(t.g, e),
            this.b = Math.pow(t.b, e),
            this
        },
        copyLinearToGamma: function(t, e) {
            void 0 === e && (e = 2);
            var n = e > 0 ? 1 / e : 1;
            return this.r = Math.pow(t.r, n),
            this.g = Math.pow(t.g, n),
            this.b = Math.pow(t.b, n),
            this
        },
        convertGammaToLinear: function(t) {
            return this.copyGammaToLinear(this, t),
            this
        },
        convertLinearToGamma: function(t) {
            return this.copyLinearToGamma(this, t),
            this
        },
        copySRGBToLinear: function() {
            function t(t) {
                return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4)
            }
            return function(e) {
                return this.r = t(e.r),
                this.g = t(e.g),
                this.b = t(e.b),
                this
            }
        }(),
        copyLinearToSRGB: function() {
            function t(t) {
                return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055
            }
            return function(e) {
                return this.r = t(e.r),
                this.g = t(e.g),
                this.b = t(e.b),
                this
            }
        }(),
        convertSRGBToLinear: function() {
            return this.copySRGBToLinear(this),
            this
        },
        convertLinearToSRGB: function() {
            return this.copyLinearToSRGB(this),
            this
        },
        getHex: function() {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
        },
        getHexString: function() {
            return ("000000" + this.getHex().toString(16)).slice(-6)
        },
        getHSL: function(t) {
            void 0 === t && (console.warn("THREE.Color: .getHSL() target is now required"),
            t = {
                h: 0,
                s: 0,
                l: 0
            });
            var e, n, i = this.r, r = this.g, s = this.b, o = Math.max(i, r, s), a = Math.min(i, r, s), c = (a + o) / 2;
            if (a === o)
                e = 0,
                n = 0;
            else {
                var l = o - a;
                switch (n = c <= .5 ? l / (o + a) : l / (2 - o - a),
                o) {
                case i:
                    e = (r - s) / l + (r < s ? 6 : 0);
                    break;
                case r:
                    e = (s - i) / l + 2;
                    break;
                case s:
                    e = (i - r) / l + 4
                }
                e /= 6
            }
            return t.h = e,
            t.s = n,
            t.l = c,
            t
        },
        getStyle: function() {
            return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
        },
        offsetHSL: function() {
            var t = {};
            return function(e, n, i) {
                return this.getHSL(t),
                t.h += e,
                t.s += n,
                t.l += i,
                this.setHSL(t.h, t.s, t.l),
                this
            }
        }(),
        add: function(t) {
            return this.r += t.r,
            this.g += t.g,
            this.b += t.b,
            this
        },
        addColors: function(t, e) {
            return this.r = t.r + e.r,
            this.g = t.g + e.g,
            this.b = t.b + e.b,
            this
        },
        addScalar: function(t) {
            return this.r += t,
            this.g += t,
            this.b += t,
            this
        },
        sub: function(t) {
            return this.r = Math.max(0, this.r - t.r),
            this.g = Math.max(0, this.g - t.g),
            this.b = Math.max(0, this.b - t.b),
            this
        },
        multiply: function(t) {
            return this.r *= t.r,
            this.g *= t.g,
            this.b *= t.b,
            this
        },
        multiplyScalar: function(t) {
            return this.r *= t,
            this.g *= t,
            this.b *= t,
            this
        },
        lerp: function(t, e) {
            return this.r += (t.r - this.r) * e,
            this.g += (t.g - this.g) * e,
            this.b += (t.b - this.b) * e,
            this
        },
        equals: function(t) {
            return t.r === this.r && t.g === this.g && t.b === this.b
        },
        fromArray: function(t, e) {
            return void 0 === e && (e = 0),
            this.r = t[e],
            this.g = t[e + 1],
            this.b = t[e + 2],
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this.r,
            t[e + 1] = this.g,
            t[e + 2] = this.b,
            t
        },
        toJSON: function() {
            return this.getHex()
        }
    });
    var sn = {
        common: {
            diffuse: {
                value: new rn(15658734)
            },
            opacity: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new Ge
            },
            alphaMap: {
                value: null
            }
        },
        specularmap: {
            specularMap: {
                value: null
            }
        },
        envmap: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            reflectivity: {
                value: 1
            },
            refractionRatio: {
                value: .98
            },
            maxMipLevel: {
                value: 0
            }
        },
        aomap: {
            aoMap: {
                value: null
            },
            aoMapIntensity: {
                value: 1
            }
        },
        lightmap: {
            lightMap: {
                value: null
            },
            lightMapIntensity: {
                value: 1
            }
        },
        emissivemap: {
            emissiveMap: {
                value: null
            }
        },
        bumpmap: {
            bumpMap: {
                value: null
            },
            bumpScale: {
                value: 1
            }
        },
        normalmap: {
            normalMap: {
                value: null
            },
            normalScale: {
                value: new Ue(1,1)
            }
        },
        displacementmap: {
            displacementMap: {
                value: null
            },
            displacementScale: {
                value: 1
            },
            displacementBias: {
                value: 0
            }
        },
        roughnessmap: {
            roughnessMap: {
                value: null
            }
        },
        metalnessmap: {
            metalnessMap: {
                value: null
            }
        },
        gradientmap: {
            gradientMap: {
                value: null
            }
        },
        fog: {
            fogDensity: {
                value: 25e-5
            },
            fogNear: {
                value: 1
            },
            fogFar: {
                value: 2e3
            },
            fogColor: {
                value: new rn(16777215)
            }
        },
        lights: {
            ambientLightColor: {
                value: []
            },
            directionalLights: {
                value: [],
                properties: {
                    direction: {},
                    color: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            directionalShadowMap: {
                value: []
            },
            directionalShadowMatrix: {
                value: []
            },
            spotLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    direction: {},
                    distance: {},
                    coneCos: {},
                    penumbraCos: {},
                    decay: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            spotShadowMap: {
                value: []
            },
            spotShadowMatrix: {
                value: []
            },
            pointLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    decay: {},
                    distance: {},
                    shadow: {},
                    shadowBias: {},
                    shadowRadius: {},
                    shadowMapSize: {},
                    shadowCameraNear: {},
                    shadowCameraFar: {}
                }
            },
            pointShadowMap: {
                value: []
            },
            pointShadowMatrix: {
                value: []
            },
            hemisphereLights: {
                value: [],
                properties: {
                    direction: {},
                    skyColor: {},
                    groundColor: {}
                }
            },
            rectAreaLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    width: {},
                    height: {}
                }
            }
        },
        points: {
            diffuse: {
                value: new rn(15658734)
            },
            opacity: {
                value: 1
            },
            size: {
                value: 1
            },
            scale: {
                value: 1
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new Ge
            }
        },
        sprite: {
            diffuse: {
                value: new rn(15658734)
            },
            opacity: {
                value: 1
            },
            center: {
                value: new Ue(.5,.5)
            },
            rotation: {
                value: 0
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new Ge
            }
        }
    }
      , on = {
        basic: {
            uniforms: en.merge([sn.common, sn.specularmap, sn.envmap, sn.aomap, sn.lightmap, sn.fog]),
            vertexShader: tn.meshbasic_vert,
            fragmentShader: tn.meshbasic_frag
        },
        lambert: {
            uniforms: en.merge([sn.common, sn.specularmap, sn.envmap, sn.aomap, sn.lightmap, sn.emissivemap, sn.fog, sn.lights, {
                emissive: {
                    value: new rn(0)
                }
            }]),
            vertexShader: tn.meshlambert_vert,
            fragmentShader: tn.meshlambert_frag
        },
        phong: {
            uniforms: en.merge([sn.common, sn.specularmap, sn.envmap, sn.aomap, sn.lightmap, sn.emissivemap, sn.bumpmap, sn.normalmap, sn.displacementmap, sn.gradientmap, sn.fog, sn.lights, {
                emissive: {
                    value: new rn(0)
                },
                specular: {
                    value: new rn(1118481)
                },
                shininess: {
                    value: 30
                }
            }]),
            vertexShader: tn.meshphong_vert,
            fragmentShader: tn.meshphong_frag
        },
        standard: {
            uniforms: en.merge([sn.common, sn.envmap, sn.aomap, sn.lightmap, sn.emissivemap, sn.bumpmap, sn.normalmap, sn.displacementmap, sn.roughnessmap, sn.metalnessmap, sn.fog, sn.lights, {
                emissive: {
                    value: new rn(0)
                },
                roughness: {
                    value: .5
                },
                metalness: {
                    value: .5
                },
                envMapIntensity: {
                    value: 1
                }
            }]),
            vertexShader: tn.meshphysical_vert,
            fragmentShader: tn.meshphysical_frag
        },
        points: {
            uniforms: en.merge([sn.points, sn.fog]),
            vertexShader: tn.points_vert,
            fragmentShader: tn.points_frag
        },
        dashed: {
            uniforms: en.merge([sn.common, sn.fog, {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }]),
            vertexShader: tn.linedashed_vert,
            fragmentShader: tn.linedashed_frag
        },
        depth: {
            uniforms: en.merge([sn.common, sn.displacementmap]),
            vertexShader: tn.depth_vert,
            fragmentShader: tn.depth_frag
        },
        normal: {
            uniforms: en.merge([sn.common, sn.bumpmap, sn.normalmap, sn.displacementmap, {
                opacity: {
                    value: 1
                }
            }]),
            vertexShader: tn.normal_vert,
            fragmentShader: tn.normal_frag
        },
        sprite: {
            uniforms: en.merge([sn.sprite, sn.fog]),
            vertexShader: tn.sprite_vert,
            fragmentShader: tn.sprite_frag
        },
        cube: {
            uniforms: {
                tCube: {
                    value: null
                },
                tFlip: {
                    value: -1
                },
                opacity: {
                    value: 1
                }
            },
            vertexShader: tn.cube_vert,
            fragmentShader: tn.cube_frag
        },
        equirect: {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: tn.equirect_vert,
            fragmentShader: tn.equirect_frag
        },
        distanceRGBA: {
            uniforms: en.merge([sn.common, sn.displacementmap, {
                referencePosition: {
                    value: new He
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1e3
                }
            }]),
            vertexShader: tn.distanceRGBA_vert,
            fragmentShader: tn.distanceRGBA_frag
        },
        shadow: {
            uniforms: en.merge([sn.lights, sn.fog, {
                color: {
                    value: new rn(0)
                },
                opacity: {
                    value: 1
                }
            }]),
            vertexShader: tn.shadow_vert,
            fragmentShader: tn.shadow_frag
        }
    };
    function an() {
        var t = null
          , e = !1
          , n = null;
        function i(r, s) {
            !1 !== e && (n(r, s),
            t.requestAnimationFrame(i))
        }
        return {
            start: function() {
                !0 !== e && null !== n && (t.requestAnimationFrame(i),
                e = !0)
            },
            stop: function() {
                e = !1
            },
            setAnimationLoop: function(t) {
                n = t
            },
            setContext: function(e) {
                t = e
            }
        }
    }
    function cn(t, e, n, i) {
        this._x = t || 0,
        this._y = e || 0,
        this._z = n || 0,
        this._order = i || cn.DefaultOrder
    }
    function ln() {
        this.mask = 1
    }
    on.physical = {
        uniforms: en.merge([on.standard.uniforms, {
            clearCoat: {
                value: 0
            },
            clearCoatRoughness: {
                value: 0
            }
        }]),
        vertexShader: tn.meshphysical_vert,
        fragmentShader: tn.meshphysical_frag
    },
    cn.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"],
    cn.DefaultOrder = "XYZ",
    Object.defineProperties(cn.prototype, {
        x: {
            get: function() {
                return this._x
            },
            set: function(t) {
                this._x = t,
                this.onChangeCallback()
            }
        },
        y: {
            get: function() {
                return this._y
            },
            set: function(t) {
                this._y = t,
                this.onChangeCallback()
            }
        },
        z: {
            get: function() {
                return this._z
            },
            set: function(t) {
                this._z = t,
                this.onChangeCallback()
            }
        },
        order: {
            get: function() {
                return this._order
            },
            set: function(t) {
                this._order = t,
                this.onChangeCallback()
            }
        }
    }),
    Object.assign(cn.prototype, {
        isEuler: !0,
        set: function(t, e, n, i) {
            return this._x = t,
            this._y = e,
            this._z = n,
            this._order = i || this._order,
            this.onChangeCallback(),
            this
        },
        clone: function() {
            return new this.constructor(this._x,this._y,this._z,this._order)
        },
        copy: function(t) {
            return this._x = t._x,
            this._y = t._y,
            this._z = t._z,
            this._order = t._order,
            this.onChangeCallback(),
            this
        },
        setFromRotationMatrix: function(t, e, n) {
            var i = Ne.clamp
              , r = t.elements
              , s = r[0]
              , o = r[4]
              , a = r[8]
              , c = r[1]
              , l = r[5]
              , h = r[9]
              , p = r[2]
              , u = r[6]
              , d = r[10];
            return "XYZ" === (e = e || this._order) ? (this._y = Math.asin(i(a, -1, 1)),
            Math.abs(a) < .99999 ? (this._x = Math.atan2(-h, d),
            this._z = Math.atan2(-o, s)) : (this._x = Math.atan2(u, l),
            this._z = 0)) : "YXZ" === e ? (this._x = Math.asin(-i(h, -1, 1)),
            Math.abs(h) < .99999 ? (this._y = Math.atan2(a, d),
            this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-p, s),
            this._z = 0)) : "ZXY" === e ? (this._x = Math.asin(i(u, -1, 1)),
            Math.abs(u) < .99999 ? (this._y = Math.atan2(-p, d),
            this._z = Math.atan2(-o, l)) : (this._y = 0,
            this._z = Math.atan2(c, s))) : "ZYX" === e ? (this._y = Math.asin(-i(p, -1, 1)),
            Math.abs(p) < .99999 ? (this._x = Math.atan2(u, d),
            this._z = Math.atan2(c, s)) : (this._x = 0,
            this._z = Math.atan2(-o, l))) : "YZX" === e ? (this._z = Math.asin(i(c, -1, 1)),
            Math.abs(c) < .99999 ? (this._x = Math.atan2(-h, l),
            this._y = Math.atan2(-p, s)) : (this._x = 0,
            this._y = Math.atan2(a, d))) : "XZY" === e ? (this._z = Math.asin(-i(o, -1, 1)),
            Math.abs(o) < .99999 ? (this._x = Math.atan2(u, l),
            this._y = Math.atan2(a, s)) : (this._x = Math.atan2(-h, d),
            this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + e),
            this._order = e,
            !1 !== n && this.onChangeCallback(),
            this
        },
        setFromQuaternion: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeRotationFromQuaternion(e),
                this.setFromRotationMatrix(t, n, i)
            }
        }(),
        setFromVector3: function(t, e) {
            return this.set(t.x, t.y, t.z, e || this._order)
        },
        reorder: function() {
            var t = new Fe;
            return function(e) {
                return t.setFromEuler(this),
                this.setFromQuaternion(t, e)
            }
        }(),
        equals: function(t) {
            return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
        },
        fromArray: function(t) {
            return this._x = t[0],
            this._y = t[1],
            this._z = t[2],
            void 0 !== t[3] && (this._order = t[3]),
            this.onChangeCallback(),
            this
        },
        toArray: function(t, e) {
            return void 0 === t && (t = []),
            void 0 === e && (e = 0),
            t[e] = this._x,
            t[e + 1] = this._y,
            t[e + 2] = this._z,
            t[e + 3] = this._order,
            t
        },
        toVector3: function(t) {
            return t ? t.set(this._x, this._y, this._z) : new He(this._x,this._y,this._z)
        },
        onChange: function(t) {
            return this.onChangeCallback = t,
            this
        },
        onChangeCallback: function() {}
    }),
    Object.assign(ln.prototype, {
        set: function(t) {
            this.mask = 1 << t | 0
        },
        enable: function(t) {
            this.mask |= 1 << t | 0
        },
        toggle: function(t) {
            this.mask ^= 1 << t | 0
        },
        disable: function(t) {
            this.mask &= ~(1 << t | 0)
        },
        test: function(t) {
            return 0 != (this.mask & t.mask)
        }
    });
    var hn = 0;
    function pn() {
        Object.defineProperty(this, "id", {
            value: hn++
        }),
        this.uuid = Ne.generateUUID(),
        this.name = "",
        this.type = "Object3D",
        this.parent = null,
        this.children = [],
        this.up = pn.DefaultUp.clone();
        var t = new He
          , e = new cn
          , n = new Fe
          , i = new He(1,1,1);
        e.onChange(function() {
            n.setFromEuler(e, !1)
        }),
        n.onChange(function() {
            e.setFromQuaternion(n, void 0, !1)
        }),
        Object.defineProperties(this, {
            position: {
                enumerable: !0,
                value: t
            },
            rotation: {
                enumerable: !0,
                value: e
            },
            quaternion: {
                enumerable: !0,
                value: n
            },
            scale: {
                enumerable: !0,
                value: i
            },
            modelViewMatrix: {
                value: new ze
            },
            normalMatrix: {
                value: new Ge
            }
        }),
        this.matrix = new ze,
        this.matrixWorld = new ze,
        this.matrixAutoUpdate = pn.DefaultMatrixAutoUpdate,
        this.matrixWorldNeedsUpdate = !1,
        this.layers = new ln,
        this.visible = !0,
        this.castShadow = !1,
        this.receiveShadow = !1,
        this.frustumCulled = !0,
        this.renderOrder = 0,
        this.userData = {}
    }
    function un() {
        pn.call(this),
        this.type = "Camera",
        this.matrixWorldInverse = new ze,
        this.projectionMatrix = new ze
    }
    function dn(t, e, n, i, r, s) {
        un.call(this),
        this.type = "OrthographicCamera",
        this.zoom = 1,
        this.view = null,
        this.left = t,
        this.right = e,
        this.top = n,
        this.bottom = i,
        this.near = void 0 !== r ? r : .1,
        this.far = void 0 !== s ? s : 2e3,
        this.updateProjectionMatrix()
    }
    function fn(t, e, n, i, r, s) {
        this.a = t,
        this.b = e,
        this.c = n,
        this.normal = i && i.isVector3 ? i : new He,
        this.vertexNormals = Array.isArray(i) ? i : [],
        this.color = r && r.isColor ? r : new rn,
        this.vertexColors = Array.isArray(r) ? r : [],
        this.materialIndex = void 0 !== s ? s : 0
    }
    pn.DefaultUp = new He(0,1,0),
    pn.DefaultMatrixAutoUpdate = !0,
    pn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: pn,
        isObject3D: !0,
        onBeforeRender: function() {},
        onAfterRender: function() {},
        applyMatrix: function(t) {
            this.matrix.multiplyMatrices(t, this.matrix),
            this.matrix.decompose(this.position, this.quaternion, this.scale)
        },
        applyQuaternion: function(t) {
            return this.quaternion.premultiply(t),
            this
        },
        setRotationFromAxisAngle: function(t, e) {
            this.quaternion.setFromAxisAngle(t, e)
        },
        setRotationFromEuler: function(t) {
            this.quaternion.setFromEuler(t, !0)
        },
        setRotationFromMatrix: function(t) {
            this.quaternion.setFromRotationMatrix(t)
        },
        setRotationFromQuaternion: function(t) {
            this.quaternion.copy(t)
        },
        rotateOnAxis: function() {
            var t = new Fe;
            return function(e, n) {
                return t.setFromAxisAngle(e, n),
                this.quaternion.multiply(t),
                this
            }
        }(),
        rotateOnWorldAxis: function() {
            var t = new Fe;
            return function(e, n) {
                return t.setFromAxisAngle(e, n),
                this.quaternion.premultiply(t),
                this
            }
        }(),
        rotateX: function() {
            var t = new He(1,0,0);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        rotateY: function() {
            var t = new He(0,1,0);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        rotateZ: function() {
            var t = new He(0,0,1);
            return function(e) {
                return this.rotateOnAxis(t, e)
            }
        }(),
        translateOnAxis: function() {
            var t = new He;
            return function(e, n) {
                return t.copy(e).applyQuaternion(this.quaternion),
                this.position.add(t.multiplyScalar(n)),
                this
            }
        }(),
        translateX: function() {
            var t = new He(1,0,0);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        translateY: function() {
            var t = new He(0,1,0);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        translateZ: function() {
            var t = new He(0,0,1);
            return function(e) {
                return this.translateOnAxis(t, e)
            }
        }(),
        localToWorld: function(t) {
            return t.applyMatrix4(this.matrixWorld)
        },
        worldToLocal: function() {
            var t = new ze;
            return function(e) {
                return e.applyMatrix4(t.getInverse(this.matrixWorld))
            }
        }(),
        lookAt: function() {
            var t = new ze
              , e = new He;
            return function(n, i, r) {
                n.isVector3 ? e.copy(n) : e.set(n, i, r),
                this.isCamera ? t.lookAt(this.position, e, this.up) : t.lookAt(e, this.position, this.up),
                this.quaternion.setFromRotationMatrix(t)
            }
        }(),
        add: function(t) {
            if (arguments.length > 1) {
                for (var e = 0; e < arguments.length; e++)
                    this.add(arguments[e]);
                return this
            }
            return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t),
            this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t),
            t.parent = this,
            t.dispatchEvent({
                type: "added"
            }),
            this.children.push(t)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t),
            this)
        },
        remove: function(t) {
            if (arguments.length > 1) {
                for (var e = 0; e < arguments.length; e++)
                    this.remove(arguments[e]);
                return this
            }
            var n = this.children.indexOf(t);
            return -1 !== n && (t.parent = null,
            t.dispatchEvent({
                type: "removed"
            }),
            this.children.splice(n, 1)),
            this
        },
        getObjectById: function(t) {
            return this.getObjectByProperty("id", t)
        },
        getObjectByName: function(t) {
            return this.getObjectByProperty("name", t)
        },
        getObjectByProperty: function(t, e) {
            if (this[t] === e)
                return this;
            for (var n = 0, i = this.children.length; n < i; n++) {
                var r = this.children[n].getObjectByProperty(t, e);
                if (void 0 !== r)
                    return r
            }
        },
        getWorldPosition: function(t) {
            return void 0 === t && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"),
            t = new He),
            this.updateMatrixWorld(!0),
            t.setFromMatrixPosition(this.matrixWorld)
        },
        getWorldQuaternion: function() {
            var t = new He
              , e = new He;
            return function(n) {
                return void 0 === n && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),
                n = new Fe),
                this.updateMatrixWorld(!0),
                this.matrixWorld.decompose(t, n, e),
                n
            }
        }(),
        getWorldScale: function() {
            var t = new He
              , e = new Fe;
            return function(n) {
                return void 0 === n && (console.warn("THREE.Object3D: .getWorldScale() target is now required"),
                n = new He),
                this.updateMatrixWorld(!0),
                this.matrixWorld.decompose(t, e, n),
                n
            }
        }(),
        getWorldDirection: function() {
            var t = new Fe;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"),
                e = new He),
                this.getWorldQuaternion(t),
                e.set(0, 0, 1).applyQuaternion(t)
            }
        }(),
        raycast: function() {},
        traverse: function(t) {
            t(this);
            for (var e = this.children, n = 0, i = e.length; n < i; n++)
                e[n].traverse(t)
        },
        traverseVisible: function(t) {
            if (!1 !== this.visible) {
                t(this);
                for (var e = this.children, n = 0, i = e.length; n < i; n++)
                    e[n].traverseVisible(t)
            }
        },
        traverseAncestors: function(t) {
            var e = this.parent;
            null !== e && (t(e),
            e.traverseAncestors(t))
        },
        updateMatrix: function() {
            this.matrix.compose(this.position, this.quaternion, this.scale),
            this.matrixWorldNeedsUpdate = !0
        },
        updateMatrixWorld: function(t) {
            this.matrixAutoUpdate && this.updateMatrix(),
            (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
            this.matrixWorldNeedsUpdate = !1,
            t = !0);
            for (var e = this.children, n = 0, i = e.length; n < i; n++)
                e[n].updateMatrixWorld(t)
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t
              , n = {};
            e && (t = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {}
            },
            n.metadata = {
                version: 4.5,
                type: "Object",
                generator: "Object3D.toJSON"
            });
            var i = {};
            function r(e, n) {
                return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)),
                n.uuid
            }
            if (i.uuid = this.uuid,
            i.type = this.type,
            "" !== this.name && (i.name = this.name),
            !0 === this.castShadow && (i.castShadow = !0),
            !0 === this.receiveShadow && (i.receiveShadow = !0),
            !1 === this.visible && (i.visible = !1),
            !1 === this.frustumCulled && (i.frustumCulled = !1),
            0 !== this.renderOrder && (i.renderOrder = this.renderOrder),
            "{}" !== JSON.stringify(this.userData) && (i.userData = this.userData),
            i.layers = this.layers.mask,
            i.matrix = this.matrix.toArray(),
            !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1),
            this.isMesh || this.isLine || this.isPoints) {
                i.geometry = r(t.geometries, this.geometry);
                var s = this.geometry.parameters;
                if (void 0 !== s && void 0 !== s.shapes) {
                    var o = s.shapes;
                    if (Array.isArray(o))
                        for (var a = 0, c = o.length; a < c; a++) {
                            var l = o[a];
                            r(t.shapes, l)
                        }
                    else
                        r(t.shapes, o)
                }
            }
            if (void 0 !== this.material)
                if (Array.isArray(this.material)) {
                    var h = [];
                    for (a = 0,
                    c = this.material.length; a < c; a++)
                        h.push(r(t.materials, this.material[a]));
                    i.material = h
                } else
                    i.material = r(t.materials, this.material);
            if (this.children.length > 0)
                for (i.children = [],
                a = 0; a < this.children.length; a++)
                    i.children.push(this.children[a].toJSON(t).object);
            if (e) {
                var p = m(t.geometries)
                  , u = m(t.materials)
                  , d = m(t.textures)
                  , f = m(t.images);
                o = m(t.shapes),
                p.length > 0 && (n.geometries = p),
                u.length > 0 && (n.materials = u),
                d.length > 0 && (n.textures = d),
                f.length > 0 && (n.images = f),
                o.length > 0 && (n.shapes = o)
            }
            return n.object = i,
            n;
            function m(t) {
                var e = [];
                for (var n in t) {
                    var i = t[n];
                    delete i.metadata,
                    e.push(i)
                }
                return e
            }
        },
        clone: function(t) {
            return (new this.constructor).copy(this, t)
        },
        copy: function(t, e) {
            if (void 0 === e && (e = !0),
            this.name = t.name,
            this.up.copy(t.up),
            this.position.copy(t.position),
            this.quaternion.copy(t.quaternion),
            this.scale.copy(t.scale),
            this.matrix.copy(t.matrix),
            this.matrixWorld.copy(t.matrixWorld),
            this.matrixAutoUpdate = t.matrixAutoUpdate,
            this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate,
            this.layers.mask = t.layers.mask,
            this.visible = t.visible,
            this.castShadow = t.castShadow,
            this.receiveShadow = t.receiveShadow,
            this.frustumCulled = t.frustumCulled,
            this.renderOrder = t.renderOrder,
            this.userData = JSON.parse(JSON.stringify(t.userData)),
            !0 === e)
                for (var n = 0; n < t.children.length; n++) {
                    var i = t.children[n];
                    this.add(i.clone())
                }
            return this
        }
    }),
    un.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: un,
        isCamera: !0,
        copy: function(t, e) {
            return pn.prototype.copy.call(this, t, e),
            this.matrixWorldInverse.copy(t.matrixWorldInverse),
            this.projectionMatrix.copy(t.projectionMatrix),
            this
        },
        getWorldDirection: function() {
            var t = new Fe;
            return function(e) {
                return void 0 === e && (console.warn("THREE.Camera: .getWorldDirection() target is now required"),
                e = new He),
                this.getWorldQuaternion(t),
                e.set(0, 0, -1).applyQuaternion(t)
            }
        }(),
        updateMatrixWorld: function(t) {
            pn.prototype.updateMatrixWorld.call(this, t),
            this.matrixWorldInverse.getInverse(this.matrixWorld)
        },
        clone: function() {
            return (new this.constructor).copy(this)
        }
    }),
    dn.prototype = Object.assign(Object.create(un.prototype), {
        constructor: dn,
        isOrthographicCamera: !0,
        copy: function(t, e) {
            return un.prototype.copy.call(this, t, e),
            this.left = t.left,
            this.right = t.right,
            this.top = t.top,
            this.bottom = t.bottom,
            this.near = t.near,
            this.far = t.far,
            this.zoom = t.zoom,
            this.view = null === t.view ? null : Object.assign({}, t.view),
            this
        },
        setViewOffset: function(t, e, n, i, r, s) {
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }),
            this.view.enabled = !0,
            this.view.fullWidth = t,
            this.view.fullHeight = e,
            this.view.offsetX = n,
            this.view.offsetY = i,
            this.view.width = r,
            this.view.height = s,
            this.updateProjectionMatrix()
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix()
        },
        updateProjectionMatrix: function() {
            var t = (this.right - this.left) / (2 * this.zoom)
              , e = (this.top - this.bottom) / (2 * this.zoom)
              , n = (this.right + this.left) / 2
              , i = (this.top + this.bottom) / 2
              , r = n - t
              , s = n + t
              , o = i + e
              , a = i - e;
            if (null !== this.view && this.view.enabled) {
                var c = this.zoom / (this.view.width / this.view.fullWidth)
                  , l = this.zoom / (this.view.height / this.view.fullHeight)
                  , h = (this.right - this.left) / this.view.width
                  , p = (this.top - this.bottom) / this.view.height;
                s = (r += h * (this.view.offsetX / c)) + h * (this.view.width / c),
                a = (o -= p * (this.view.offsetY / l)) - p * (this.view.height / l)
            }
            this.projectionMatrix.makeOrthographic(r, s, o, a, this.near, this.far)
        },
        toJSON: function(t) {
            var e = pn.prototype.toJSON.call(this, t);
            return e.object.zoom = this.zoom,
            e.object.left = this.left,
            e.object.right = this.right,
            e.object.top = this.top,
            e.object.bottom = this.bottom,
            e.object.near = this.near,
            e.object.far = this.far,
            null !== this.view && (e.object.view = Object.assign({}, this.view)),
            e
        }
    }),
    Object.assign(fn.prototype, {
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            this.a = t.a,
            this.b = t.b,
            this.c = t.c,
            this.normal.copy(t.normal),
            this.color.copy(t.color),
            this.materialIndex = t.materialIndex;
            for (var e = 0, n = t.vertexNormals.length; e < n; e++)
                this.vertexNormals[e] = t.vertexNormals[e].clone();
            for (e = 0,
            n = t.vertexColors.length; e < n; e++)
                this.vertexColors[e] = t.vertexColors[e].clone();
            return this
        }
    });
    var mn = 0;
    function gn() {
        Object.defineProperty(this, "id", {
            value: mn += 2
        }),
        this.uuid = Ne.generateUUID(),
        this.name = "",
        this.type = "Geometry",
        this.vertices = [],
        this.colors = [],
        this.faces = [],
        this.faceVertexUvs = [[]],
        this.morphTargets = [],
        this.morphNormals = [],
        this.skinWeights = [],
        this.skinIndices = [],
        this.lineDistances = [],
        this.boundingBox = null,
        this.boundingSphere = null,
        this.elementsNeedUpdate = !1,
        this.verticesNeedUpdate = !1,
        this.uvsNeedUpdate = !1,
        this.normalsNeedUpdate = !1,
        this.colorsNeedUpdate = !1,
        this.lineDistancesNeedUpdate = !1,
        this.groupsNeedUpdate = !1
    }
    function vn(t, e, n) {
        if (Array.isArray(t))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
        this.name = "",
        this.array = t,
        this.itemSize = e,
        this.count = void 0 !== t ? t.length / e : 0,
        this.normalized = !0 === n,
        this.dynamic = !1,
        this.updateRange = {
            offset: 0,
            count: -1
        },
        this.version = 0
    }
    function yn(t, e, n) {
        vn.call(this, new Int8Array(t), e, n)
    }
    function xn(t, e, n) {
        vn.call(this, new Uint8Array(t), e, n)
    }
    function wn(t, e, n) {
        vn.call(this, new Uint8ClampedArray(t), e, n)
    }
    function bn(t, e, n) {
        vn.call(this, new Int16Array(t), e, n)
    }
    function Mn(t, e, n) {
        vn.call(this, new Uint16Array(t), e, n)
    }
    function _n(t, e, n) {
        vn.call(this, new Int32Array(t), e, n)
    }
    function Sn(t, e, n) {
        vn.call(this, new Uint32Array(t), e, n)
    }
    function En(t, e, n) {
        vn.call(this, new Float32Array(t), e, n)
    }
    function Tn(t, e, n) {
        vn.call(this, new Float64Array(t), e, n)
    }
    function An() {
        this.vertices = [],
        this.normals = [],
        this.colors = [],
        this.uvs = [],
        this.uvs2 = [],
        this.groups = [],
        this.morphTargets = {},
        this.skinWeights = [],
        this.skinIndices = [],
        this.boundingBox = null,
        this.boundingSphere = null,
        this.verticesNeedUpdate = !1,
        this.normalsNeedUpdate = !1,
        this.colorsNeedUpdate = !1,
        this.uvsNeedUpdate = !1,
        this.groupsNeedUpdate = !1
    }
    function Ln(t) {
        if (0 === t.length)
            return -1 / 0;
        for (var e = t[0], n = 1, i = t.length; n < i; ++n)
            t[n] > e && (e = t[n]);
        return e
    }
    gn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: gn,
        isGeometry: !0,
        applyMatrix: function(t) {
            for (var e = (new Ge).getNormalMatrix(t), n = 0, i = this.vertices.length; n < i; n++)
                this.vertices[n].applyMatrix4(t);
            for (n = 0,
            i = this.faces.length; n < i; n++) {
                var r = this.faces[n];
                r.normal.applyMatrix3(e).normalize();
                for (var s = 0, o = r.vertexNormals.length; s < o; s++)
                    r.vertexNormals[s].applyMatrix3(e).normalize()
            }
            return null !== this.boundingBox && this.computeBoundingBox(),
            null !== this.boundingSphere && this.computeBoundingSphere(),
            this.verticesNeedUpdate = !0,
            this.normalsNeedUpdate = !0,
            this
        },
        rotateX: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationX(e),
                this.applyMatrix(t),
                this
            }
        }(),
        rotateY: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationY(e),
                this.applyMatrix(t),
                this
            }
        }(),
        rotateZ: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationZ(e),
                this.applyMatrix(t),
                this
            }
        }(),
        translate: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeTranslation(e, n, i),
                this.applyMatrix(t),
                this
            }
        }(),
        scale: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeScale(e, n, i),
                this.applyMatrix(t),
                this
            }
        }(),
        lookAt: function() {
            var t = new pn;
            return function(e) {
                t.lookAt(e),
                t.updateMatrix(),
                this.applyMatrix(t.matrix)
            }
        }(),
        fromBufferGeometry: function(t) {
            var e = this
              , n = null !== t.index ? t.index.array : void 0
              , i = t.attributes
              , r = i.position.array
              , s = void 0 !== i.normal ? i.normal.array : void 0
              , o = void 0 !== i.color ? i.color.array : void 0
              , a = void 0 !== i.uv ? i.uv.array : void 0
              , c = void 0 !== i.uv2 ? i.uv2.array : void 0;
            void 0 !== c && (this.faceVertexUvs[1] = []);
            for (var l = [], h = [], p = [], u = 0, d = 0; u < r.length; u += 3,
            d += 2)
                e.vertices.push(new He(r[u],r[u + 1],r[u + 2])),
                void 0 !== s && l.push(new He(s[u],s[u + 1],s[u + 2])),
                void 0 !== o && e.colors.push(new rn(o[u],o[u + 1],o[u + 2])),
                void 0 !== a && h.push(new Ue(a[d],a[d + 1])),
                void 0 !== c && p.push(new Ue(c[d],c[d + 1]));
            function f(t, n, i, r) {
                var u = new fn(t,n,i,void 0 !== s ? [l[t].clone(), l[n].clone(), l[i].clone()] : [],void 0 !== o ? [e.colors[t].clone(), e.colors[n].clone(), e.colors[i].clone()] : [],r);
                e.faces.push(u),
                void 0 !== a && e.faceVertexUvs[0].push([h[t].clone(), h[n].clone(), h[i].clone()]),
                void 0 !== c && e.faceVertexUvs[1].push([p[t].clone(), p[n].clone(), p[i].clone()])
            }
            var m = t.groups;
            if (m.length > 0)
                for (u = 0; u < m.length; u++)
                    for (var g = m[u], v = g.start, y = (d = v,
                    v + g.count); d < y; d += 3)
                        void 0 !== n ? f(n[d], n[d + 1], n[d + 2], g.materialIndex) : f(d, d + 1, d + 2, g.materialIndex);
            else if (void 0 !== n)
                for (u = 0; u < n.length; u += 3)
                    f(n[u], n[u + 1], n[u + 2]);
            else
                for (u = 0; u < r.length / 3; u += 3)
                    f(u, u + 1, u + 2);
            return this.computeFaceNormals(),
            null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()),
            null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()),
            this
        },
        center: function() {
            var t = new He;
            return function() {
                return this.computeBoundingBox(),
                this.boundingBox.getCenter(t).negate(),
                this.translate(t.x, t.y, t.z),
                this
            }
        }(),
        normalize: function() {
            this.computeBoundingSphere();
            var t = this.boundingSphere.center
              , e = this.boundingSphere.radius
              , n = 0 === e ? 1 : 1 / e
              , i = new ze;
            return i.set(n, 0, 0, -n * t.x, 0, n, 0, -n * t.y, 0, 0, n, -n * t.z, 0, 0, 0, 1),
            this.applyMatrix(i),
            this
        },
        computeFaceNormals: function() {
            for (var t = new He, e = new He, n = 0, i = this.faces.length; n < i; n++) {
                var r = this.faces[n]
                  , s = this.vertices[r.a]
                  , o = this.vertices[r.b]
                  , a = this.vertices[r.c];
                t.subVectors(a, o),
                e.subVectors(s, o),
                t.cross(e),
                t.normalize(),
                r.normal.copy(t)
            }
        },
        computeVertexNormals: function(t) {
            var e, n, i, r, s, o;
            for (void 0 === t && (t = !0),
            o = new Array(this.vertices.length),
            e = 0,
            n = this.vertices.length; e < n; e++)
                o[e] = new He;
            if (t) {
                var a, c, l, h = new He, p = new He;
                for (i = 0,
                r = this.faces.length; i < r; i++)
                    s = this.faces[i],
                    a = this.vertices[s.a],
                    c = this.vertices[s.b],
                    l = this.vertices[s.c],
                    h.subVectors(l, c),
                    p.subVectors(a, c),
                    h.cross(p),
                    o[s.a].add(h),
                    o[s.b].add(h),
                    o[s.c].add(h)
            } else
                for (this.computeFaceNormals(),
                i = 0,
                r = this.faces.length; i < r; i++)
                    o[(s = this.faces[i]).a].add(s.normal),
                    o[s.b].add(s.normal),
                    o[s.c].add(s.normal);
            for (e = 0,
            n = this.vertices.length; e < n; e++)
                o[e].normalize();
            for (i = 0,
            r = this.faces.length; i < r; i++) {
                var u = (s = this.faces[i]).vertexNormals;
                3 === u.length ? (u[0].copy(o[s.a]),
                u[1].copy(o[s.b]),
                u[2].copy(o[s.c])) : (u[0] = o[s.a].clone(),
                u[1] = o[s.b].clone(),
                u[2] = o[s.c].clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeFlatVertexNormals: function() {
            var t, e, n;
            for (this.computeFaceNormals(),
            t = 0,
            e = this.faces.length; t < e; t++) {
                var i = (n = this.faces[t]).vertexNormals;
                3 === i.length ? (i[0].copy(n.normal),
                i[1].copy(n.normal),
                i[2].copy(n.normal)) : (i[0] = n.normal.clone(),
                i[1] = n.normal.clone(),
                i[2] = n.normal.clone())
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0)
        },
        computeMorphNormals: function() {
            var t, e, n, i, r;
            for (n = 0,
            i = this.faces.length; n < i; n++)
                for ((r = this.faces[n]).__originalFaceNormal ? r.__originalFaceNormal.copy(r.normal) : r.__originalFaceNormal = r.normal.clone(),
                r.__originalVertexNormals || (r.__originalVertexNormals = []),
                t = 0,
                e = r.vertexNormals.length; t < e; t++)
                    r.__originalVertexNormals[t] ? r.__originalVertexNormals[t].copy(r.vertexNormals[t]) : r.__originalVertexNormals[t] = r.vertexNormals[t].clone();
            var s = new gn;
            for (s.faces = this.faces,
            t = 0,
            e = this.morphTargets.length; t < e; t++) {
                if (!this.morphNormals[t]) {
                    this.morphNormals[t] = {},
                    this.morphNormals[t].faceNormals = [],
                    this.morphNormals[t].vertexNormals = [];
                    var o = this.morphNormals[t].faceNormals
                      , a = this.morphNormals[t].vertexNormals;
                    for (n = 0,
                    i = this.faces.length; n < i; n++)
                        c = new He,
                        l = {
                            a: new He,
                            b: new He,
                            c: new He
                        },
                        o.push(c),
                        a.push(l)
                }
                var c, l, h = this.morphNormals[t];
                for (s.vertices = this.morphTargets[t].vertices,
                s.computeFaceNormals(),
                s.computeVertexNormals(),
                n = 0,
                i = this.faces.length; n < i; n++)
                    r = this.faces[n],
                    c = h.faceNormals[n],
                    l = h.vertexNormals[n],
                    c.copy(r.normal),
                    l.a.copy(r.vertexNormals[0]),
                    l.b.copy(r.vertexNormals[1]),
                    l.c.copy(r.vertexNormals[2])
            }
            for (n = 0,
            i = this.faces.length; n < i; n++)
                (r = this.faces[n]).normal = r.__originalFaceNormal,
                r.vertexNormals = r.__originalVertexNormals
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Ke),
            this.boundingBox.setFromPoints(this.vertices)
        },
        computeBoundingSphere: function() {
            null === this.boundingSphere && (this.boundingSphere = new Je),
            this.boundingSphere.setFromPoints(this.vertices)
        },
        merge: function(t, e, n) {
            if (t && t.isGeometry) {
                var i, r = this.vertices.length, s = this.vertices, o = t.vertices, a = this.faces, c = t.faces, l = this.faceVertexUvs[0], h = t.faceVertexUvs[0], p = this.colors, u = t.colors;
                void 0 === n && (n = 0),
                void 0 !== e && (i = (new Ge).getNormalMatrix(e));
                for (var d = 0, f = o.length; d < f; d++) {
                    var m = o[d].clone();
                    void 0 !== e && m.applyMatrix4(e),
                    s.push(m)
                }
                for (d = 0,
                f = u.length; d < f; d++)
                    p.push(u[d].clone());
                for (d = 0,
                f = c.length; d < f; d++) {
                    var g, v, y, x = c[d], w = x.vertexNormals, b = x.vertexColors;
                    (g = new fn(x.a + r,x.b + r,x.c + r)).normal.copy(x.normal),
                    void 0 !== i && g.normal.applyMatrix3(i).normalize();
                    for (var M = 0, _ = w.length; M < _; M++)
                        v = w[M].clone(),
                        void 0 !== i && v.applyMatrix3(i).normalize(),
                        g.vertexNormals.push(v);
                    for (g.color.copy(x.color),
                    M = 0,
                    _ = b.length; M < _; M++)
                        y = b[M],
                        g.vertexColors.push(y.clone());
                    g.materialIndex = x.materialIndex + n,
                    a.push(g)
                }
                for (d = 0,
                f = h.length; d < f; d++) {
                    var S = h[d]
                      , E = [];
                    if (void 0 !== S) {
                        for (M = 0,
                        _ = S.length; M < _; M++)
                            E.push(S[M].clone());
                        l.push(E)
                    }
                }
            } else
                console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", t)
        },
        mergeMesh: function(t) {
            t && t.isMesh ? (t.matrixAutoUpdate && t.updateMatrix(),
            this.merge(t.geometry, t.matrix)) : console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", t)
        },
        mergeVertices: function() {
            var t, e, n, i, r, s, o, a, c = {}, l = [], h = [], p = Math.pow(10, 4);
            for (n = 0,
            i = this.vertices.length; n < i; n++)
                t = this.vertices[n],
                void 0 === c[e = Math.round(t.x * p) + "_" + Math.round(t.y * p) + "_" + Math.round(t.z * p)] ? (c[e] = n,
                l.push(this.vertices[n]),
                h[n] = l.length - 1) : h[n] = h[c[e]];
            var u = [];
            for (n = 0,
            i = this.faces.length; n < i; n++) {
                (r = this.faces[n]).a = h[r.a],
                r.b = h[r.b],
                r.c = h[r.c],
                s = [r.a, r.b, r.c];
                for (var d = 0; d < 3; d++)
                    if (s[d] === s[(d + 1) % 3]) {
                        u.push(n);
                        break
                    }
            }
            for (n = u.length - 1; n >= 0; n--) {
                var f = u[n];
                for (this.faces.splice(f, 1),
                o = 0,
                a = this.faceVertexUvs.length; o < a; o++)
                    this.faceVertexUvs[o].splice(f, 1)
            }
            var m = this.vertices.length - l.length;
            return this.vertices = l,
            m
        },
        setFromPoints: function(t) {
            this.vertices = [];
            for (var e = 0, n = t.length; e < n; e++) {
                var i = t[e];
                this.vertices.push(new He(i.x,i.y,i.z || 0))
            }
            return this
        },
        sortFacesByMaterialIndex: function() {
            for (var t = this.faces, e = t.length, n = 0; n < e; n++)
                t[n]._id = n;
            t.sort(function(t, e) {
                return t.materialIndex - e.materialIndex
            });
            var i, r, s = this.faceVertexUvs[0], o = this.faceVertexUvs[1];
            for (s && s.length === e && (i = []),
            o && o.length === e && (r = []),
            n = 0; n < e; n++) {
                var a = t[n]._id;
                i && i.push(s[a]),
                r && r.push(o[a])
            }
            i && (this.faceVertexUvs[0] = i),
            r && (this.faceVertexUvs[1] = r)
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "Geometry",
                    generator: "Geometry.toJSON"
                }
            };
            if (t.uuid = this.uuid,
            t.type = this.type,
            "" !== this.name && (t.name = this.name),
            void 0 !== this.parameters) {
                var e = this.parameters;
                for (var n in e)
                    void 0 !== e[n] && (t[n] = e[n]);
                return t
            }
            for (var i = [], r = 0; r < this.vertices.length; r++) {
                var s = this.vertices[r];
                i.push(s.x, s.y, s.z)
            }
            var o = []
              , a = []
              , c = {}
              , l = []
              , h = {}
              , p = []
              , u = {};
            for (r = 0; r < this.faces.length; r++) {
                var d = this.faces[r]
                  , f = void 0 !== this.faceVertexUvs[0][r]
                  , m = d.normal.length() > 0
                  , g = d.vertexNormals.length > 0
                  , v = 1 !== d.color.r || 1 !== d.color.g || 1 !== d.color.b
                  , y = d.vertexColors.length > 0
                  , x = 0;
                if (x = _(x = _(x = _(x = _(x = _(x = _(x = _(x = _(x, 0, 0), 1, !0), 2, !1), 3, f), 4, m), 5, g), 6, v), 7, y),
                o.push(x),
                o.push(d.a, d.b, d.c),
                o.push(d.materialIndex),
                f) {
                    var w = this.faceVertexUvs[0][r];
                    o.push(T(w[0]), T(w[1]), T(w[2]))
                }
                if (m && o.push(S(d.normal)),
                g) {
                    var b = d.vertexNormals;
                    o.push(S(b[0]), S(b[1]), S(b[2]))
                }
                if (v && o.push(E(d.color)),
                y) {
                    var M = d.vertexColors;
                    o.push(E(M[0]), E(M[1]), E(M[2]))
                }
            }
            function _(t, e, n) {
                return n ? t | 1 << e : t & ~(1 << e)
            }
            function S(t) {
                var e = t.x.toString() + t.y.toString() + t.z.toString();
                return void 0 !== c[e] ? c[e] : (c[e] = a.length / 3,
                a.push(t.x, t.y, t.z),
                c[e])
            }
            function E(t) {
                var e = t.r.toString() + t.g.toString() + t.b.toString();
                return void 0 !== h[e] ? h[e] : (h[e] = l.length,
                l.push(t.getHex()),
                h[e])
            }
            function T(t) {
                var e = t.x.toString() + t.y.toString();
                return void 0 !== u[e] ? u[e] : (u[e] = p.length / 2,
                p.push(t.x, t.y),
                u[e])
            }
            return t.data = {},
            t.data.vertices = i,
            t.data.normals = a,
            l.length > 0 && (t.data.colors = l),
            p.length > 0 && (t.data.uvs = [p]),
            t.data.faces = o,
            t
        },
        clone: function() {
            return (new gn).copy(this)
        },
        copy: function(t) {
            var e, n, i, r, s, o;
            this.vertices = [],
            this.colors = [],
            this.faces = [],
            this.faceVertexUvs = [[]],
            this.morphTargets = [],
            this.morphNormals = [],
            this.skinWeights = [],
            this.skinIndices = [],
            this.lineDistances = [],
            this.boundingBox = null,
            this.boundingSphere = null,
            this.name = t.name;
            var a = t.vertices;
            for (e = 0,
            n = a.length; e < n; e++)
                this.vertices.push(a[e].clone());
            var c = t.colors;
            for (e = 0,
            n = c.length; e < n; e++)
                this.colors.push(c[e].clone());
            var l = t.faces;
            for (e = 0,
            n = l.length; e < n; e++)
                this.faces.push(l[e].clone());
            for (e = 0,
            n = t.faceVertexUvs.length; e < n; e++) {
                var h = t.faceVertexUvs[e];
                for (void 0 === this.faceVertexUvs[e] && (this.faceVertexUvs[e] = []),
                i = 0,
                r = h.length; i < r; i++) {
                    var p = h[i]
                      , u = [];
                    for (s = 0,
                    o = p.length; s < o; s++) {
                        var d = p[s];
                        u.push(d.clone())
                    }
                    this.faceVertexUvs[e].push(u)
                }
            }
            var f = t.morphTargets;
            for (e = 0,
            n = f.length; e < n; e++) {
                var m = {};
                if (m.name = f[e].name,
                void 0 !== f[e].vertices)
                    for (m.vertices = [],
                    i = 0,
                    r = f[e].vertices.length; i < r; i++)
                        m.vertices.push(f[e].vertices[i].clone());
                if (void 0 !== f[e].normals)
                    for (m.normals = [],
                    i = 0,
                    r = f[e].normals.length; i < r; i++)
                        m.normals.push(f[e].normals[i].clone());
                this.morphTargets.push(m)
            }
            var g = t.morphNormals;
            for (e = 0,
            n = g.length; e < n; e++) {
                var v = {};
                if (void 0 !== g[e].vertexNormals)
                    for (v.vertexNormals = [],
                    i = 0,
                    r = g[e].vertexNormals.length; i < r; i++) {
                        var y = g[e].vertexNormals[i]
                          , x = {};
                        x.a = y.a.clone(),
                        x.b = y.b.clone(),
                        x.c = y.c.clone(),
                        v.vertexNormals.push(x)
                    }
                if (void 0 !== g[e].faceNormals)
                    for (v.faceNormals = [],
                    i = 0,
                    r = g[e].faceNormals.length; i < r; i++)
                        v.faceNormals.push(g[e].faceNormals[i].clone());
                this.morphNormals.push(v)
            }
            var w = t.skinWeights;
            for (e = 0,
            n = w.length; e < n; e++)
                this.skinWeights.push(w[e].clone());
            var b = t.skinIndices;
            for (e = 0,
            n = b.length; e < n; e++)
                this.skinIndices.push(b[e].clone());
            var M = t.lineDistances;
            for (e = 0,
            n = M.length; e < n; e++)
                this.lineDistances.push(M[e]);
            var _ = t.boundingBox;
            null !== _ && (this.boundingBox = _.clone());
            var S = t.boundingSphere;
            return null !== S && (this.boundingSphere = S.clone()),
            this.elementsNeedUpdate = t.elementsNeedUpdate,
            this.verticesNeedUpdate = t.verticesNeedUpdate,
            this.uvsNeedUpdate = t.uvsNeedUpdate,
            this.normalsNeedUpdate = t.normalsNeedUpdate,
            this.colorsNeedUpdate = t.colorsNeedUpdate,
            this.lineDistancesNeedUpdate = t.lineDistancesNeedUpdate,
            this.groupsNeedUpdate = t.groupsNeedUpdate,
            this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
    Object.defineProperty(vn.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }),
    Object.assign(vn.prototype, {
        isBufferAttribute: !0,
        onUploadCallback: function() {},
        setArray: function(t) {
            if (Array.isArray(t))
                throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            return this.count = void 0 !== t ? t.length / this.itemSize : 0,
            this.array = t,
            this
        },
        setDynamic: function(t) {
            return this.dynamic = t,
            this
        },
        copy: function(t) {
            return this.name = t.name,
            this.array = new t.array.constructor(t.array),
            this.itemSize = t.itemSize,
            this.count = t.count,
            this.normalized = t.normalized,
            this.dynamic = t.dynamic,
            this
        },
        copyAt: function(t, e, n) {
            t *= this.itemSize,
            n *= e.itemSize;
            for (var i = 0, r = this.itemSize; i < r; i++)
                this.array[t + i] = e.array[n + i];
            return this
        },
        copyArray: function(t) {
            return this.array.set(t),
            this
        },
        copyColorsArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var s = t[i];
                void 0 === s && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i),
                s = new rn),
                e[n++] = s.r,
                e[n++] = s.g,
                e[n++] = s.b
            }
            return this
        },
        copyVector2sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var s = t[i];
                void 0 === s && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i),
                s = new Ue),
                e[n++] = s.x,
                e[n++] = s.y
            }
            return this
        },
        copyVector3sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var s = t[i];
                void 0 === s && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i),
                s = new He),
                e[n++] = s.x,
                e[n++] = s.y,
                e[n++] = s.z
            }
            return this
        },
        copyVector4sArray: function(t) {
            for (var e = this.array, n = 0, i = 0, r = t.length; i < r; i++) {
                var s = t[i];
                void 0 === s && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i),
                s = new Ye),
                e[n++] = s.x,
                e[n++] = s.y,
                e[n++] = s.z,
                e[n++] = s.w
            }
            return this
        },
        set: function(t, e) {
            return void 0 === e && (e = 0),
            this.array.set(t, e),
            this
        },
        getX: function(t) {
            return this.array[t * this.itemSize]
        },
        setX: function(t, e) {
            return this.array[t * this.itemSize] = e,
            this
        },
        getY: function(t) {
            return this.array[t * this.itemSize + 1]
        },
        setY: function(t, e) {
            return this.array[t * this.itemSize + 1] = e,
            this
        },
        getZ: function(t) {
            return this.array[t * this.itemSize + 2]
        },
        setZ: function(t, e) {
            return this.array[t * this.itemSize + 2] = e,
            this
        },
        getW: function(t) {
            return this.array[t * this.itemSize + 3]
        },
        setW: function(t, e) {
            return this.array[t * this.itemSize + 3] = e,
            this
        },
        setXY: function(t, e, n) {
            return t *= this.itemSize,
            this.array[t + 0] = e,
            this.array[t + 1] = n,
            this
        },
        setXYZ: function(t, e, n, i) {
            return t *= this.itemSize,
            this.array[t + 0] = e,
            this.array[t + 1] = n,
            this.array[t + 2] = i,
            this
        },
        setXYZW: function(t, e, n, i, r) {
            return t *= this.itemSize,
            this.array[t + 0] = e,
            this.array[t + 1] = n,
            this.array[t + 2] = i,
            this.array[t + 3] = r,
            this
        },
        onUpload: function(t) {
            return this.onUploadCallback = t,
            this
        },
        clone: function() {
            return new this.constructor(this.array,this.itemSize).copy(this)
        }
    }),
    yn.prototype = Object.create(vn.prototype),
    yn.prototype.constructor = yn,
    xn.prototype = Object.create(vn.prototype),
    xn.prototype.constructor = xn,
    wn.prototype = Object.create(vn.prototype),
    wn.prototype.constructor = wn,
    bn.prototype = Object.create(vn.prototype),
    bn.prototype.constructor = bn,
    Mn.prototype = Object.create(vn.prototype),
    Mn.prototype.constructor = Mn,
    _n.prototype = Object.create(vn.prototype),
    _n.prototype.constructor = _n,
    Sn.prototype = Object.create(vn.prototype),
    Sn.prototype.constructor = Sn,
    En.prototype = Object.create(vn.prototype),
    En.prototype.constructor = En,
    Tn.prototype = Object.create(vn.prototype),
    Tn.prototype.constructor = Tn,
    Object.assign(An.prototype, {
        computeGroups: function(t) {
            for (var e, n = [], i = void 0, r = t.faces, s = 0; s < r.length; s++) {
                var o = r[s];
                o.materialIndex !== i && (i = o.materialIndex,
                void 0 !== e && (e.count = 3 * s - e.start,
                n.push(e)),
                e = {
                    start: 3 * s,
                    materialIndex: i
                })
            }
            void 0 !== e && (e.count = 3 * s - e.start,
            n.push(e)),
            this.groups = n
        },
        fromGeometry: function(t) {
            var e, n = t.faces, i = t.vertices, r = t.faceVertexUvs, s = r[0] && r[0].length > 0, o = r[1] && r[1].length > 0, a = t.morphTargets, c = a.length;
            if (c > 0) {
                e = [];
                for (var l = 0; l < c; l++)
                    e[l] = [];
                this.morphTargets.position = e
            }
            var h, p = t.morphNormals, u = p.length;
            if (u > 0) {
                for (h = [],
                l = 0; l < u; l++)
                    h[l] = [];
                this.morphTargets.normal = h
            }
            var d = t.skinIndices
              , f = t.skinWeights
              , m = d.length === i.length
              , g = f.length === i.length;
            for (i.length > 0 && 0 === n.length && console.error("THREE.DirectGeometry: Faceless geometries are not supported."),
            l = 0; l < n.length; l++) {
                var v = n[l];
                this.vertices.push(i[v.a], i[v.b], i[v.c]);
                var y = v.vertexNormals;
                if (3 === y.length)
                    this.normals.push(y[0], y[1], y[2]);
                else {
                    var x = v.normal;
                    this.normals.push(x, x, x)
                }
                var w, b = v.vertexColors;
                if (3 === b.length)
                    this.colors.push(b[0], b[1], b[2]);
                else {
                    var M = v.color;
                    this.colors.push(M, M, M)
                }
                !0 === s && (void 0 !== (w = r[0][l]) ? this.uvs.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", l),
                this.uvs.push(new Ue, new Ue, new Ue))),
                !0 === o && (void 0 !== (w = r[1][l]) ? this.uvs2.push(w[0], w[1], w[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", l),
                this.uvs2.push(new Ue, new Ue, new Ue)));
                for (var _ = 0; _ < c; _++) {
                    var S = a[_].vertices;
                    e[_].push(S[v.a], S[v.b], S[v.c])
                }
                for (_ = 0; _ < u; _++) {
                    var E = p[_].vertexNormals[l];
                    h[_].push(E.a, E.b, E.c)
                }
                m && this.skinIndices.push(d[v.a], d[v.b], d[v.c]),
                g && this.skinWeights.push(f[v.a], f[v.b], f[v.c])
            }
            return this.computeGroups(t),
            this.verticesNeedUpdate = t.verticesNeedUpdate,
            this.normalsNeedUpdate = t.normalsNeedUpdate,
            this.colorsNeedUpdate = t.colorsNeedUpdate,
            this.uvsNeedUpdate = t.uvsNeedUpdate,
            this.groupsNeedUpdate = t.groupsNeedUpdate,
            this
        }
    });
    var Rn = 1;
    function Pn() {
        Object.defineProperty(this, "id", {
            value: Rn += 2
        }),
        this.uuid = Ne.generateUUID(),
        this.name = "",
        this.type = "BufferGeometry",
        this.index = null,
        this.attributes = {},
        this.morphAttributes = {},
        this.groups = [],
        this.boundingBox = null,
        this.boundingSphere = null,
        this.drawRange = {
            start: 0,
            count: 1 / 0
        },
        this.userData = {}
    }
    function Cn(t, e, n, i, r, s) {
        gn.call(this),
        this.type = "BoxGeometry",
        this.parameters = {
            width: t,
            height: e,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: s
        },
        this.fromBufferGeometry(new In(t,e,n,i,r,s)),
        this.mergeVertices()
    }
    function In(t, e, n, i, r, s) {
        Pn.call(this),
        this.type = "BoxBufferGeometry",
        this.parameters = {
            width: t,
            height: e,
            depth: n,
            widthSegments: i,
            heightSegments: r,
            depthSegments: s
        };
        var o = this;
        t = t || 1,
        e = e || 1,
        n = n || 1,
        i = Math.floor(i) || 1,
        r = Math.floor(r) || 1;
        var a = []
          , c = []
          , l = []
          , h = []
          , p = 0
          , u = 0;
        function d(t, e, n, i, r, s, d, f, m, g, v) {
            var y, x, w = s / m, b = d / g, M = s / 2, _ = d / 2, S = f / 2, E = m + 1, T = g + 1, A = 0, L = 0, R = new He;
            for (x = 0; x < T; x++) {
                var P = x * b - _;
                for (y = 0; y < E; y++) {
                    var C = y * w - M;
                    R[t] = C * i,
                    R[e] = P * r,
                    R[n] = S,
                    c.push(R.x, R.y, R.z),
                    R[t] = 0,
                    R[e] = 0,
                    R[n] = f > 0 ? 1 : -1,
                    l.push(R.x, R.y, R.z),
                    h.push(y / m),
                    h.push(1 - x / g),
                    A += 1
                }
            }
            for (x = 0; x < g; x++)
                for (y = 0; y < m; y++) {
                    var I = p + y + E * x
                      , O = p + y + E * (x + 1)
                      , D = p + (y + 1) + E * (x + 1)
                      , k = p + (y + 1) + E * x;
                    a.push(I, O, k),
                    a.push(O, D, k),
                    L += 6
                }
            o.addGroup(u, L, v),
            u += L,
            p += A
        }
        d("z", "y", "x", -1, -1, n, e, t, s = Math.floor(s) || 1, r, 0),
        d("z", "y", "x", 1, -1, n, e, -t, s, r, 1),
        d("x", "z", "y", 1, 1, t, n, e, i, s, 2),
        d("x", "z", "y", 1, -1, t, n, -e, i, s, 3),
        d("x", "y", "z", 1, -1, t, e, n, i, r, 4),
        d("x", "y", "z", -1, -1, t, e, -n, i, r, 5),
        this.setIndex(a),
        this.addAttribute("position", new En(c,3)),
        this.addAttribute("normal", new En(l,3)),
        this.addAttribute("uv", new En(h,2))
    }
    function On(t, e, n, i) {
        gn.call(this),
        this.type = "PlaneGeometry",
        this.parameters = {
            width: t,
            height: e,
            widthSegments: n,
            heightSegments: i
        },
        this.fromBufferGeometry(new Dn(t,e,n,i)),
        this.mergeVertices()
    }
    function Dn(t, e, n, i) {
        Pn.call(this),
        this.type = "PlaneBufferGeometry",
        this.parameters = {
            width: t,
            height: e,
            widthSegments: n,
            heightSegments: i
        };
        var r, s, o = (t = t || 1) / 2, a = (e = e || 1) / 2, c = Math.floor(n) || 1, l = Math.floor(i) || 1, h = c + 1, p = l + 1, u = t / c, d = e / l, f = [], m = [], g = [], v = [];
        for (s = 0; s < p; s++) {
            var y = s * d - a;
            for (r = 0; r < h; r++) {
                var x = r * u - o;
                m.push(x, -y, 0),
                g.push(0, 0, 1),
                v.push(r / c),
                v.push(1 - s / l)
            }
        }
        for (s = 0; s < l; s++)
            for (r = 0; r < c; r++) {
                var w = r + h * s
                  , b = r + h * (s + 1)
                  , M = r + 1 + h * (s + 1)
                  , _ = r + 1 + h * s;
                f.push(w, b, _),
                f.push(b, M, _)
            }
        this.setIndex(f),
        this.addAttribute("position", new En(m,3)),
        this.addAttribute("normal", new En(g,3)),
        this.addAttribute("uv", new En(v,2))
    }
    Pn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Pn,
        isBufferGeometry: !0,
        getIndex: function() {
            return this.index
        },
        setIndex: function(t) {
            Array.isArray(t) ? this.index = new (Ln(t) > 65535 ? Sn : Mn)(t,1) : this.index = t
        },
        addAttribute: function(t, e) {
            return e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
            this.setIndex(e),
            this) : (this.attributes[t] = e,
            this) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),
            this.addAttribute(t, new vn(arguments[1],arguments[2])))
        },
        getAttribute: function(t) {
            return this.attributes[t]
        },
        removeAttribute: function(t) {
            return delete this.attributes[t],
            this
        },
        addGroup: function(t, e, n) {
            this.groups.push({
                start: t,
                count: e,
                materialIndex: void 0 !== n ? n : 0
            })
        },
        clearGroups: function() {
            this.groups = []
        },
        setDrawRange: function(t, e) {
            this.drawRange.start = t,
            this.drawRange.count = e
        },
        applyMatrix: function(t) {
            var e = this.attributes.position;
            void 0 !== e && (t.applyToBufferAttribute(e),
            e.needsUpdate = !0);
            var n = this.attributes.normal;
            return void 0 !== n && ((new Ge).getNormalMatrix(t).applyToBufferAttribute(n),
            n.needsUpdate = !0),
            null !== this.boundingBox && this.computeBoundingBox(),
            null !== this.boundingSphere && this.computeBoundingSphere(),
            this
        },
        rotateX: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationX(e),
                this.applyMatrix(t),
                this
            }
        }(),
        rotateY: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationY(e),
                this.applyMatrix(t),
                this
            }
        }(),
        rotateZ: function() {
            var t = new ze;
            return function(e) {
                return t.makeRotationZ(e),
                this.applyMatrix(t),
                this
            }
        }(),
        translate: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeTranslation(e, n, i),
                this.applyMatrix(t),
                this
            }
        }(),
        scale: function() {
            var t = new ze;
            return function(e, n, i) {
                return t.makeScale(e, n, i),
                this.applyMatrix(t),
                this
            }
        }(),
        lookAt: function() {
            var t = new pn;
            return function(e) {
                t.lookAt(e),
                t.updateMatrix(),
                this.applyMatrix(t.matrix)
            }
        }(),
        center: function() {
            var t = new He;
            return function() {
                return this.computeBoundingBox(),
                this.boundingBox.getCenter(t).negate(),
                this.translate(t.x, t.y, t.z),
                this
            }
        }(),
        setFromObject: function(t) {
            var e = t.geometry;
            if (t.isPoints || t.isLine) {
                var n = new En(3 * e.vertices.length,3)
                  , i = new En(3 * e.colors.length,3);
                if (this.addAttribute("position", n.copyVector3sArray(e.vertices)),
                this.addAttribute("color", i.copyColorsArray(e.colors)),
                e.lineDistances && e.lineDistances.length === e.vertices.length) {
                    var r = new En(e.lineDistances.length,1);
                    this.addAttribute("lineDistance", r.copyArray(e.lineDistances))
                }
                null !== e.boundingSphere && (this.boundingSphere = e.boundingSphere.clone()),
                null !== e.boundingBox && (this.boundingBox = e.boundingBox.clone())
            } else
                t.isMesh && e && e.isGeometry && this.fromGeometry(e);
            return this
        },
        setFromPoints: function(t) {
            for (var e = [], n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.push(r.x, r.y, r.z || 0)
            }
            return this.addAttribute("position", new En(e,3)),
            this
        },
        updateFromObject: function(t) {
            var e, n = t.geometry;
            if (t.isMesh) {
                var i = n.__directGeometry;
                if (!0 === n.elementsNeedUpdate && (i = void 0,
                n.elementsNeedUpdate = !1),
                void 0 === i)
                    return this.fromGeometry(n);
                i.verticesNeedUpdate = n.verticesNeedUpdate,
                i.normalsNeedUpdate = n.normalsNeedUpdate,
                i.colorsNeedUpdate = n.colorsNeedUpdate,
                i.uvsNeedUpdate = n.uvsNeedUpdate,
                i.groupsNeedUpdate = n.groupsNeedUpdate,
                n.verticesNeedUpdate = !1,
                n.normalsNeedUpdate = !1,
                n.colorsNeedUpdate = !1,
                n.uvsNeedUpdate = !1,
                n.groupsNeedUpdate = !1,
                n = i
            }
            return !0 === n.verticesNeedUpdate && (void 0 !== (e = this.attributes.position) && (e.copyVector3sArray(n.vertices),
            e.needsUpdate = !0),
            n.verticesNeedUpdate = !1),
            !0 === n.normalsNeedUpdate && (void 0 !== (e = this.attributes.normal) && (e.copyVector3sArray(n.normals),
            e.needsUpdate = !0),
            n.normalsNeedUpdate = !1),
            !0 === n.colorsNeedUpdate && (void 0 !== (e = this.attributes.color) && (e.copyColorsArray(n.colors),
            e.needsUpdate = !0),
            n.colorsNeedUpdate = !1),
            n.uvsNeedUpdate && (void 0 !== (e = this.attributes.uv) && (e.copyVector2sArray(n.uvs),
            e.needsUpdate = !0),
            n.uvsNeedUpdate = !1),
            n.lineDistancesNeedUpdate && (void 0 !== (e = this.attributes.lineDistance) && (e.copyArray(n.lineDistances),
            e.needsUpdate = !0),
            n.lineDistancesNeedUpdate = !1),
            n.groupsNeedUpdate && (n.computeGroups(t.geometry),
            this.groups = n.groups,
            n.groupsNeedUpdate = !1),
            this
        },
        fromGeometry: function(t) {
            return t.__directGeometry = (new An).fromGeometry(t),
            this.fromDirectGeometry(t.__directGeometry)
        },
        fromDirectGeometry: function(t) {
            var e = new Float32Array(3 * t.vertices.length);
            if (this.addAttribute("position", new vn(e,3).copyVector3sArray(t.vertices)),
            t.normals.length > 0) {
                var n = new Float32Array(3 * t.normals.length);
                this.addAttribute("normal", new vn(n,3).copyVector3sArray(t.normals))
            }
            if (t.colors.length > 0) {
                var i = new Float32Array(3 * t.colors.length);
                this.addAttribute("color", new vn(i,3).copyColorsArray(t.colors))
            }
            if (t.uvs.length > 0) {
                var r = new Float32Array(2 * t.uvs.length);
                this.addAttribute("uv", new vn(r,2).copyVector2sArray(t.uvs))
            }
            if (t.uvs2.length > 0) {
                var s = new Float32Array(2 * t.uvs2.length);
                this.addAttribute("uv2", new vn(s,2).copyVector2sArray(t.uvs2))
            }
            for (var o in this.groups = t.groups,
            t.morphTargets) {
                for (var a = [], c = t.morphTargets[o], l = 0, h = c.length; l < h; l++) {
                    var p = c[l]
                      , u = new En(3 * p.length,3);
                    a.push(u.copyVector3sArray(p))
                }
                this.morphAttributes[o] = a
            }
            if (t.skinIndices.length > 0) {
                var d = new En(4 * t.skinIndices.length,4);
                this.addAttribute("skinIndex", d.copyVector4sArray(t.skinIndices))
            }
            if (t.skinWeights.length > 0) {
                var f = new En(4 * t.skinWeights.length,4);
                this.addAttribute("skinWeight", f.copyVector4sArray(t.skinWeights))
            }
            return null !== t.boundingSphere && (this.boundingSphere = t.boundingSphere.clone()),
            null !== t.boundingBox && (this.boundingBox = t.boundingBox.clone()),
            this
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Ke);
            var t = this.attributes.position;
            void 0 !== t ? this.boundingBox.setFromBufferAttribute(t) : this.boundingBox.makeEmpty(),
            (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
        },
        computeBoundingSphere: function() {
            var t = new Ke
              , e = new He;
            return function() {
                null === this.boundingSphere && (this.boundingSphere = new Je);
                var n = this.attributes.position;
                if (n) {
                    var i = this.boundingSphere.center;
                    t.setFromBufferAttribute(n),
                    t.getCenter(i);
                    for (var r = 0, s = 0, o = n.count; s < o; s++)
                        e.x = n.getX(s),
                        e.y = n.getY(s),
                        e.z = n.getZ(s),
                        r = Math.max(r, i.distanceToSquared(e));
                    this.boundingSphere.radius = Math.sqrt(r),
                    isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }
        }(),
        computeFaceNormals: function() {},
        computeVertexNormals: function() {
            var t = this.index
              , e = this.attributes
              , n = this.groups;
            if (e.position) {
                var i = e.position.array;
                if (void 0 === e.normal)
                    this.addAttribute("normal", new vn(new Float32Array(i.length),3));
                else
                    for (var r = e.normal.array, s = 0, o = r.length; s < o; s++)
                        r[s] = 0;
                var a, c, l, h = e.normal.array, p = new He, u = new He, d = new He, f = new He, m = new He;
                if (t) {
                    var g = t.array;
                    0 === n.length && this.addGroup(0, g.length);
                    for (var v = 0, y = n.length; v < y; ++v) {
                        var x = n[v]
                          , w = x.start;
                        for (s = w,
                        o = w + x.count; s < o; s += 3)
                            a = 3 * g[s + 0],
                            c = 3 * g[s + 1],
                            l = 3 * g[s + 2],
                            p.fromArray(i, a),
                            u.fromArray(i, c),
                            d.fromArray(i, l),
                            f.subVectors(d, u),
                            m.subVectors(p, u),
                            f.cross(m),
                            h[a] += f.x,
                            h[a + 1] += f.y,
                            h[a + 2] += f.z,
                            h[c] += f.x,
                            h[c + 1] += f.y,
                            h[c + 2] += f.z,
                            h[l] += f.x,
                            h[l + 1] += f.y,
                            h[l + 2] += f.z
                    }
                } else
                    for (s = 0,
                    o = i.length; s < o; s += 9)
                        p.fromArray(i, s),
                        u.fromArray(i, s + 3),
                        d.fromArray(i, s + 6),
                        f.subVectors(d, u),
                        m.subVectors(p, u),
                        f.cross(m),
                        h[s] = f.x,
                        h[s + 1] = f.y,
                        h[s + 2] = f.z,
                        h[s + 3] = f.x,
                        h[s + 4] = f.y,
                        h[s + 5] = f.z,
                        h[s + 6] = f.x,
                        h[s + 7] = f.y,
                        h[s + 8] = f.z;
                this.normalizeNormals(),
                e.normal.needsUpdate = !0
            }
        },
        merge: function(t, e) {
            if (t && t.isBufferGeometry) {
                void 0 === e && (e = 0,
                console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                var n = this.attributes;
                for (var i in n)
                    if (void 0 !== t.attributes[i])
                        for (var r = n[i].array, s = t.attributes[i], o = s.array, a = 0, c = s.itemSize * e; a < o.length; a++,
                        c++)
                            r[c] = o[a];
                return this
            }
            console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t)
        },
        normalizeNormals: function() {
            var t = new He;
            return function() {
                for (var e = this.attributes.normal, n = 0, i = e.count; n < i; n++)
                    t.x = e.getX(n),
                    t.y = e.getY(n),
                    t.z = e.getZ(n),
                    t.normalize(),
                    e.setXYZ(n, t.x, t.y, t.z)
            }
        }(),
        toNonIndexed: function() {
            if (null === this.index)
                return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),
                this;
            var t = new Pn
              , e = this.index.array
              , n = this.attributes;
            for (var i in n) {
                for (var r = n[i], s = r.array, o = r.itemSize, a = new s.constructor(e.length * o), c = 0, l = 0, h = 0, p = e.length; h < p; h++) {
                    c = e[h] * o;
                    for (var u = 0; u < o; u++)
                        a[l++] = s[c++]
                }
                t.addAttribute(i, new vn(a,o))
            }
            var d = this.groups;
            for (h = 0,
            p = d.length; h < p; h++) {
                var f = d[h];
                t.addGroup(f.start, f.count, f.materialIndex)
            }
            return t
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "BufferGeometry",
                    generator: "BufferGeometry.toJSON"
                }
            };
            if (t.uuid = this.uuid,
            t.type = this.type,
            "" !== this.name && (t.name = this.name),
            Object.keys(this.userData).length > 0 && (t.userData = this.userData),
            void 0 !== this.parameters) {
                var e = this.parameters;
                for (var n in e)
                    void 0 !== e[n] && (t[n] = e[n]);
                return t
            }
            t.data = {
                attributes: {}
            };
            var i = this.index;
            if (null !== i) {
                var r = Array.prototype.slice.call(i.array);
                t.data.index = {
                    type: i.array.constructor.name,
                    array: r
                }
            }
            var s = this.attributes;
            for (var n in s) {
                var o = s[n];
                r = Array.prototype.slice.call(o.array),
                t.data.attributes[n] = {
                    itemSize: o.itemSize,
                    type: o.array.constructor.name,
                    array: r,
                    normalized: o.normalized
                }
            }
            var a = this.groups;
            a.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(a)));
            var c = this.boundingSphere;
            return null !== c && (t.data.boundingSphere = {
                center: c.center.toArray(),
                radius: c.radius
            }),
            t
        },
        clone: function() {
            return (new Pn).copy(this)
        },
        copy: function(t) {
            var e, n, i;
            this.index = null,
            this.attributes = {},
            this.morphAttributes = {},
            this.groups = [],
            this.boundingBox = null,
            this.boundingSphere = null,
            this.name = t.name;
            var r = t.index;
            null !== r && this.setIndex(r.clone());
            var s = t.attributes;
            for (e in s) {
                var o = s[e];
                this.addAttribute(e, o.clone())
            }
            var a = t.morphAttributes;
            for (e in a) {
                var c = []
                  , l = a[e];
                for (n = 0,
                i = l.length; n < i; n++)
                    c.push(l[n].clone());
                this.morphAttributes[e] = c
            }
            var h = t.groups;
            for (n = 0,
            i = h.length; n < i; n++) {
                var p = h[n];
                this.addGroup(p.start, p.count, p.materialIndex)
            }
            var u = t.boundingBox;
            null !== u && (this.boundingBox = u.clone());
            var d = t.boundingSphere;
            return null !== d && (this.boundingSphere = d.clone()),
            this.drawRange.start = t.drawRange.start,
            this.drawRange.count = t.drawRange.count,
            this.userData = t.userData,
            this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
    Cn.prototype = Object.create(gn.prototype),
    Cn.prototype.constructor = Cn,
    In.prototype = Object.create(Pn.prototype),
    In.prototype.constructor = In,
    On.prototype = Object.create(gn.prototype),
    On.prototype.constructor = On,
    Dn.prototype = Object.create(Pn.prototype),
    Dn.prototype.constructor = Dn;
    var kn = 0;
    function Bn() {
        Object.defineProperty(this, "id", {
            value: kn++
        }),
        this.uuid = Ne.generateUUID(),
        this.name = "",
        this.type = "Material",
        this.fog = !0,
        this.lights = !0,
        this.blending = S,
        this.side = m,
        this.flatShading = !1,
        this.vertexColors = w,
        this.opacity = 1,
        this.transparent = !1,
        this.blendSrc = U,
        this.blendDst = z,
        this.blendEquation = R,
        this.blendSrcAlpha = null,
        this.blendDstAlpha = null,
        this.blendEquationAlpha = null,
        this.depthFunc = X,
        this.depthTest = !0,
        this.depthWrite = !0,
        this.clippingPlanes = null,
        this.clipIntersection = !1,
        this.clipShadows = !1,
        this.shadowSide = null,
        this.colorWrite = !0,
        this.precision = null,
        this.polygonOffset = !1,
        this.polygonOffsetFactor = 0,
        this.polygonOffsetUnits = 0,
        this.dithering = !1,
        this.alphaTest = 0,
        this.premultipliedAlpha = !1,
        this.overdraw = 0,
        this.visible = !0,
        this.userData = {},
        this.needsUpdate = !0
    }
    function Nn(t) {
        Bn.call(this),
        this.type = "MeshBasicMaterial",
        this.color = new rn(16777215),
        this.map = null,
        this.lightMap = null,
        this.lightMapIntensity = 1,
        this.aoMap = null,
        this.aoMapIntensity = 1,
        this.specularMap = null,
        this.alphaMap = null,
        this.envMap = null,
        this.combine = $,
        this.reflectivity = 1,
        this.refractionRatio = .98,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.wireframeLinecap = "round",
        this.wireframeLinejoin = "round",
        this.skinning = !1,
        this.morphTargets = !1,
        this.lights = !1,
        this.setValues(t)
    }
    function Un(t) {
        Bn.call(this),
        this.type = "ShaderMaterial",
        this.defines = {},
        this.uniforms = {},
        this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
        this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",
        this.linewidth = 1,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.fog = !1,
        this.lights = !1,
        this.clipping = !1,
        this.skinning = !1,
        this.morphTargets = !1,
        this.morphNormals = !1,
        this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        },
        this.defaultAttributeValues = {
            color: [1, 1, 1],
            uv: [0, 0],
            uv2: [0, 0]
        },
        this.index0AttributeName = void 0,
        this.uniformsNeedUpdate = !1,
        void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),
        this.setValues(t))
    }
    function zn(t, e) {
        this.origin = void 0 !== t ? t : new He,
        this.direction = void 0 !== e ? e : new He
    }
    function Fn(t, e, n) {
        this.a = void 0 !== t ? t : new He,
        this.b = void 0 !== e ? e : new He,
        this.c = void 0 !== n ? n : new He
    }
    function Hn(t, e) {
        pn.call(this),
        this.type = "Mesh",
        this.geometry = void 0 !== t ? t : new Pn,
        this.material = void 0 !== e ? e : new Nn({
            color: 16777215 * Math.random()
        }),
        this.drawMode = Me,
        this.updateMorphTargets()
    }
    function Gn(t, e) {
        return Math.abs(e[1]) - Math.abs(t[1])
    }
    function jn(t, e, n, i, r, s, o, a, c, l) {
        t = void 0 !== t ? t : [],
        e = void 0 !== e ? e : ct,
        We.call(this, t, e, n, i, r, s, o, a, c, l),
        this.flipY = !1
    }
    Bn.prototype = Object.assign(Object.create(i.prototype), {
        constructor: Bn,
        isMaterial: !0,
        onBeforeCompile: function() {},
        setValues: function(t) {
            if (void 0 !== t)
                for (var e in t) {
                    var n = t[e];
                    if (void 0 !== n)
                        if ("shading" !== e) {
                            var i = this[e];
                            void 0 !== i ? i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[e] = "overdraw" === e ? Number(n) : n : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.")
                        } else
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                            this.flatShading = n === y;
                    else
                        console.warn("THREE.Material: '" + e + "' parameter is undefined.")
                }
        },
        toJSON: function(t) {
            var e = void 0 === t || "string" == typeof t;
            e && (t = {
                textures: {},
                images: {}
            });
            var n = {
                metadata: {
                    version: 4.5,
                    type: "Material",
                    generator: "Material.toJSON"
                }
            };
            function i(t) {
                var e = [];
                for (var n in t) {
                    var i = t[n];
                    delete i.metadata,
                    e.push(i)
                }
                return e
            }
            if (n.uuid = this.uuid,
            n.type = this.type,
            "" !== this.name && (n.name = this.name),
            this.color && this.color.isColor && (n.color = this.color.getHex()),
            void 0 !== this.roughness && (n.roughness = this.roughness),
            void 0 !== this.metalness && (n.metalness = this.metalness),
            this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()),
            1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity),
            this.specular && this.specular.isColor && (n.specular = this.specular.getHex()),
            void 0 !== this.shininess && (n.shininess = this.shininess),
            void 0 !== this.clearCoat && (n.clearCoat = this.clearCoat),
            void 0 !== this.clearCoatRoughness && (n.clearCoatRoughness = this.clearCoatRoughness),
            this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid),
            this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid),
            this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid),
            this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid,
            n.aoMapIntensity = this.aoMapIntensity),
            this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid,
            n.bumpScale = this.bumpScale),
            this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid,
            n.normalMapType = this.normalMapType,
            n.normalScale = this.normalScale.toArray()),
            this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid,
            n.displacementScale = this.displacementScale,
            n.displacementBias = this.displacementBias),
            this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid),
            this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid),
            this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid),
            this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid),
            this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid,
            n.reflectivity = this.reflectivity),
            this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid),
            void 0 !== this.size && (n.size = this.size),
            void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation),
            this.blending !== S && (n.blending = this.blending),
            !0 === this.flatShading && (n.flatShading = this.flatShading),
            this.side !== m && (n.side = this.side),
            this.vertexColors !== w && (n.vertexColors = this.vertexColors),
            this.opacity < 1 && (n.opacity = this.opacity),
            !0 === this.transparent && (n.transparent = this.transparent),
            n.depthFunc = this.depthFunc,
            n.depthTest = this.depthTest,
            n.depthWrite = this.depthWrite,
            0 !== this.rotation && (n.rotation = this.rotation),
            1 !== this.linewidth && (n.linewidth = this.linewidth),
            void 0 !== this.dashSize && (n.dashSize = this.dashSize),
            void 0 !== this.gapSize && (n.gapSize = this.gapSize),
            void 0 !== this.scale && (n.scale = this.scale),
            !0 === this.dithering && (n.dithering = !0),
            this.alphaTest > 0 && (n.alphaTest = this.alphaTest),
            !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha),
            !0 === this.wireframe && (n.wireframe = this.wireframe),
            this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth),
            "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap),
            "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin),
            !0 === this.morphTargets && (n.morphTargets = !0),
            !0 === this.skinning && (n.skinning = !0),
            !1 === this.visible && (n.visible = !1),
            "{}" !== JSON.stringify(this.userData) && (n.userData = this.userData),
            e) {
                var r = i(t.textures)
                  , s = i(t.images);
                r.length > 0 && (n.textures = r),
                s.length > 0 && (n.images = s)
            }
            return n
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            this.name = t.name,
            this.fog = t.fog,
            this.lights = t.lights,
            this.blending = t.blending,
            this.side = t.side,
            this.flatShading = t.flatShading,
            this.vertexColors = t.vertexColors,
            this.opacity = t.opacity,
            this.transparent = t.transparent,
            this.blendSrc = t.blendSrc,
            this.blendDst = t.blendDst,
            this.blendEquation = t.blendEquation,
            this.blendSrcAlpha = t.blendSrcAlpha,
            this.blendDstAlpha = t.blendDstAlpha,
            this.blendEquationAlpha = t.blendEquationAlpha,
            this.depthFunc = t.depthFunc,
            this.depthTest = t.depthTest,
            this.depthWrite = t.depthWrite,
            this.colorWrite = t.colorWrite,
            this.precision = t.precision,
            this.polygonOffset = t.polygonOffset,
            this.polygonOffsetFactor = t.polygonOffsetFactor,
            this.polygonOffsetUnits = t.polygonOffsetUnits,
            this.dithering = t.dithering,
            this.alphaTest = t.alphaTest,
            this.premultipliedAlpha = t.premultipliedAlpha,
            this.overdraw = t.overdraw,
            this.visible = t.visible,
            this.userData = JSON.parse(JSON.stringify(t.userData)),
            this.clipShadows = t.clipShadows,
            this.clipIntersection = t.clipIntersection;
            var e = t.clippingPlanes
              , n = null;
            if (null !== e) {
                var i = e.length;
                n = new Array(i);
                for (var r = 0; r !== i; ++r)
                    n[r] = e[r].clone()
            }
            return this.clippingPlanes = n,
            this.shadowSide = t.shadowSide,
            this
        },
        dispose: function() {
            this.dispatchEvent({
                type: "dispose"
            })
        }
    }),
    Nn.prototype = Object.create(Bn.prototype),
    Nn.prototype.constructor = Nn,
    Nn.prototype.isMeshBasicMaterial = !0,
    Nn.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.map = t.map,
        this.lightMap = t.lightMap,
        this.lightMapIntensity = t.lightMapIntensity,
        this.aoMap = t.aoMap,
        this.aoMapIntensity = t.aoMapIntensity,
        this.specularMap = t.specularMap,
        this.alphaMap = t.alphaMap,
        this.envMap = t.envMap,
        this.combine = t.combine,
        this.reflectivity = t.reflectivity,
        this.refractionRatio = t.refractionRatio,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.wireframeLinecap = t.wireframeLinecap,
        this.wireframeLinejoin = t.wireframeLinejoin,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this
    }
    ,
    Un.prototype = Object.create(Bn.prototype),
    Un.prototype.constructor = Un,
    Un.prototype.isShaderMaterial = !0,
    Un.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.fragmentShader = t.fragmentShader,
        this.vertexShader = t.vertexShader,
        this.uniforms = en.clone(t.uniforms),
        this.defines = Object.assign({}, t.defines),
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.lights = t.lights,
        this.clipping = t.clipping,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.morphNormals = t.morphNormals,
        this.extensions = t.extensions,
        this
    }
    ,
    Un.prototype.toJSON = function(t) {
        var e = Bn.prototype.toJSON.call(this, t);
        return e.uniforms = this.uniforms,
        e.vertexShader = this.vertexShader,
        e.fragmentShader = this.fragmentShader,
        e
    }
    ,
    Object.assign(zn.prototype, {
        set: function(t, e) {
            return this.origin.copy(t),
            this.direction.copy(e),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.origin.copy(t.origin),
            this.direction.copy(t.direction),
            this
        },
        at: function(t, e) {
            return void 0 === e && (console.warn("THREE.Ray: .at() target is now required"),
            e = new He),
            e.copy(this.direction).multiplyScalar(t).add(this.origin)
        },
        lookAt: function(t) {
            return this.direction.copy(t).sub(this.origin).normalize(),
            this
        },
        recast: function() {
            var t = new He;
            return function(e) {
                return this.origin.copy(this.at(e, t)),
                this
            }
        }(),
        closestPointToPoint: function(t, e) {
            void 0 === e && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"),
            e = new He),
            e.subVectors(t, this.origin);
            var n = e.dot(this.direction);
            return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin)
        },
        distanceToPoint: function(t) {
            return Math.sqrt(this.distanceSqToPoint(t))
        },
        distanceSqToPoint: function() {
            var t = new He;
            return function(e) {
                var n = t.subVectors(e, this.origin).dot(this.direction);
                return n < 0 ? this.origin.distanceToSquared(e) : (t.copy(this.direction).multiplyScalar(n).add(this.origin),
                t.distanceToSquared(e))
            }
        }(),
        distanceSqToSegment: function() {
            var t = new He
              , e = new He
              , n = new He;
            return function(i, r, s, o) {
                t.copy(i).add(r).multiplyScalar(.5),
                e.copy(r).sub(i).normalize(),
                n.copy(this.origin).sub(t);
                var a, c, l, h, p = .5 * i.distanceTo(r), u = -this.direction.dot(e), d = n.dot(this.direction), f = -n.dot(e), m = n.lengthSq(), g = Math.abs(1 - u * u);
                if (g > 0)
                    if (c = u * d - f,
                    h = p * g,
                    (a = u * f - d) >= 0)
                        if (c >= -h)
                            if (c <= h) {
                                var v = 1 / g;
                                l = (a *= v) * (a + u * (c *= v) + 2 * d) + c * (u * a + c + 2 * f) + m
                            } else
                                c = p,
                                l = -(a = Math.max(0, -(u * c + d))) * a + c * (c + 2 * f) + m;
                        else
                            c = -p,
                            l = -(a = Math.max(0, -(u * c + d))) * a + c * (c + 2 * f) + m;
                    else
                        c <= -h ? l = -(a = Math.max(0, -(-u * p + d))) * a + (c = a > 0 ? -p : Math.min(Math.max(-p, -f), p)) * (c + 2 * f) + m : c <= h ? (a = 0,
                        l = (c = Math.min(Math.max(-p, -f), p)) * (c + 2 * f) + m) : l = -(a = Math.max(0, -(u * p + d))) * a + (c = a > 0 ? p : Math.min(Math.max(-p, -f), p)) * (c + 2 * f) + m;
                else
                    c = u > 0 ? -p : p,
                    l = -(a = Math.max(0, -(u * c + d))) * a + c * (c + 2 * f) + m;
                return s && s.copy(this.direction).multiplyScalar(a).add(this.origin),
                o && o.copy(e).multiplyScalar(c).add(t),
                l
            }
        }(),
        intersectSphere: function() {
            var t = new He;
            return function(e, n) {
                t.subVectors(e.center, this.origin);
                var i = t.dot(this.direction)
                  , r = t.dot(t) - i * i
                  , s = e.radius * e.radius;
                if (r > s)
                    return null;
                var o = Math.sqrt(s - r)
                  , a = i - o
                  , c = i + o;
                return a < 0 && c < 0 ? null : a < 0 ? this.at(c, n) : this.at(a, n)
            }
        }(),
        intersectsSphere: function(t) {
            return this.distanceToPoint(t.center) <= t.radius
        },
        distanceToPlane: function(t) {
            var e = t.normal.dot(this.direction);
            if (0 === e)
                return 0 === t.distanceToPoint(this.origin) ? 0 : null;
            var n = -(this.origin.dot(t.normal) + t.constant) / e;
            return n >= 0 ? n : null
        },
        intersectPlane: function(t, e) {
            var n = this.distanceToPlane(t);
            return null === n ? null : this.at(n, e)
        },
        intersectsPlane: function(t) {
            var e = t.distanceToPoint(this.origin);
            return 0 === e || t.normal.dot(this.direction) * e < 0
        },
        intersectBox: function(t, e) {
            var n, i, r, s, o, a, c = 1 / this.direction.x, l = 1 / this.direction.y, h = 1 / this.direction.z, p = this.origin;
            return c >= 0 ? (n = (t.min.x - p.x) * c,
            i = (t.max.x - p.x) * c) : (n = (t.max.x - p.x) * c,
            i = (t.min.x - p.x) * c),
            l >= 0 ? (r = (t.min.y - p.y) * l,
            s = (t.max.y - p.y) * l) : (r = (t.max.y - p.y) * l,
            s = (t.min.y - p.y) * l),
            n > s || r > i ? null : ((r > n || n != n) && (n = r),
            (s < i || i != i) && (i = s),
            h >= 0 ? (o = (t.min.z - p.z) * h,
            a = (t.max.z - p.z) * h) : (o = (t.max.z - p.z) * h,
            a = (t.min.z - p.z) * h),
            n > a || o > i ? null : ((o > n || n != n) && (n = o),
            (a < i || i != i) && (i = a),
            i < 0 ? null : this.at(n >= 0 ? n : i, e)))
        },
        intersectsBox: function() {
            var t = new He;
            return function(e) {
                return null !== this.intersectBox(e, t)
            }
        }(),
        intersectTriangle: function() {
            var t = new He
              , e = new He
              , n = new He
              , i = new He;
            return function(r, s, o, a, c) {
                e.subVectors(s, r),
                n.subVectors(o, r),
                i.crossVectors(e, n);
                var l, h = this.direction.dot(i);
                if (h > 0) {
                    if (a)
                        return null;
                    l = 1
                } else {
                    if (!(h < 0))
                        return null;
                    l = -1,
                    h = -h
                }
                t.subVectors(this.origin, r);
                var p = l * this.direction.dot(n.crossVectors(t, n));
                if (p < 0)
                    return null;
                var u = l * this.direction.dot(e.cross(t));
                if (u < 0)
                    return null;
                if (p + u > h)
                    return null;
                var d = -l * t.dot(i);
                return d < 0 ? null : this.at(d / h, c)
            }
        }(),
        applyMatrix4: function(t) {
            return this.origin.applyMatrix4(t),
            this.direction.transformDirection(t),
            this
        },
        equals: function(t) {
            return t.origin.equals(this.origin) && t.direction.equals(this.direction)
        }
    }),
    Object.assign(Fn, {
        getNormal: function() {
            var t = new He;
            return function(e, n, i, r) {
                void 0 === r && (console.warn("THREE.Triangle: .getNormal() target is now required"),
                r = new He),
                r.subVectors(i, n),
                t.subVectors(e, n),
                r.cross(t);
                var s = r.lengthSq();
                return s > 0 ? r.multiplyScalar(1 / Math.sqrt(s)) : r.set(0, 0, 0)
            }
        }(),
        getBarycoord: function() {
            var t = new He
              , e = new He
              , n = new He;
            return function(i, r, s, o, a) {
                t.subVectors(o, r),
                e.subVectors(s, r),
                n.subVectors(i, r);
                var c = t.dot(t)
                  , l = t.dot(e)
                  , h = t.dot(n)
                  , p = e.dot(e)
                  , u = e.dot(n)
                  , d = c * p - l * l;
                if (void 0 === a && (console.warn("THREE.Triangle: .getBarycoord() target is now required"),
                a = new He),
                0 === d)
                    return a.set(-2, -1, -1);
                var f = 1 / d
                  , m = (p * h - l * u) * f
                  , g = (c * u - l * h) * f;
                return a.set(1 - m - g, g, m)
            }
        }(),
        containsPoint: function() {
            var t = new He;
            return function(e, n, i, r) {
                return Fn.getBarycoord(e, n, i, r, t),
                t.x >= 0 && t.y >= 0 && t.x + t.y <= 1
            }
        }()
    }),
    Object.assign(Fn.prototype, {
        set: function(t, e, n) {
            return this.a.copy(t),
            this.b.copy(e),
            this.c.copy(n),
            this
        },
        setFromPointsAndIndices: function(t, e, n, i) {
            return this.a.copy(t[e]),
            this.b.copy(t[n]),
            this.c.copy(t[i]),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.a.copy(t.a),
            this.b.copy(t.b),
            this.c.copy(t.c),
            this
        },
        getArea: function() {
            var t = new He
              , e = new He;
            return function() {
                return t.subVectors(this.c, this.b),
                e.subVectors(this.a, this.b),
                .5 * t.cross(e).length()
            }
        }(),
        getMidpoint: function(t) {
            return void 0 === t && (console.warn("THREE.Triangle: .getMidpoint() target is now required"),
            t = new He),
            t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
        },
        getNormal: function(t) {
            return Fn.getNormal(this.a, this.b, this.c, t)
        },
        getPlane: function(t) {
            return void 0 === t && (console.warn("THREE.Triangle: .getPlane() target is now required"),
            t = new He),
            t.setFromCoplanarPoints(this.a, this.b, this.c)
        },
        getBarycoord: function(t, e) {
            return Fn.getBarycoord(t, this.a, this.b, this.c, e)
        },
        containsPoint: function(t) {
            return Fn.containsPoint(t, this.a, this.b, this.c)
        },
        intersectsBox: function(t) {
            return t.intersectsTriangle(this)
        },
        closestPointToPoint: function() {
            var t = new He
              , e = new He
              , n = new He
              , i = new He
              , r = new He
              , s = new He;
            return function(o, a) {
                void 0 === a && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),
                a = new He);
                var c, l, h = this.a, p = this.b, u = this.c;
                t.subVectors(p, h),
                e.subVectors(u, h),
                i.subVectors(o, h);
                var d = t.dot(i)
                  , f = e.dot(i);
                if (d <= 0 && f <= 0)
                    return a.copy(h);
                r.subVectors(o, p);
                var m = t.dot(r)
                  , g = e.dot(r);
                if (m >= 0 && g <= m)
                    return a.copy(p);
                var v = d * g - m * f;
                if (v <= 0 && d >= 0 && m <= 0)
                    return c = d / (d - m),
                    a.copy(h).addScaledVector(t, c);
                s.subVectors(o, u);
                var y = t.dot(s)
                  , x = e.dot(s);
                if (x >= 0 && y <= x)
                    return a.copy(u);
                var w = y * f - d * x;
                if (w <= 0 && f >= 0 && x <= 0)
                    return l = f / (f - x),
                    a.copy(h).addScaledVector(e, l);
                var b = m * x - y * g;
                if (b <= 0 && g - m >= 0 && y - x >= 0)
                    return n.subVectors(u, p),
                    l = (g - m) / (g - m + (y - x)),
                    a.copy(p).addScaledVector(n, l);
                var M = 1 / (b + w + v);
                return c = w * M,
                l = v * M,
                a.copy(h).addScaledVector(t, c).addScaledVector(e, l)
            }
        }(),
        equals: function(t) {
            return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
        }
    }),
    Hn.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: Hn,
        isMesh: !0,
        setDrawMode: function(t) {
            this.drawMode = t
        },
        copy: function(t) {
            return pn.prototype.copy.call(this, t),
            this.drawMode = t.drawMode,
            void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()),
            void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)),
            this
        },
        updateMorphTargets: function() {
            var t, e, n, i = this.geometry;
            if (i.isBufferGeometry) {
                var r = i.morphAttributes
                  , s = Object.keys(r);
                if (s.length > 0) {
                    var o = r[s[0]];
                    if (void 0 !== o)
                        for (this.morphTargetInfluences = [],
                        this.morphTargetDictionary = {},
                        t = 0,
                        e = o.length; t < e; t++)
                            n = o[t].name || String(t),
                            this.morphTargetInfluences.push(0),
                            this.morphTargetDictionary[n] = t
                }
            } else {
                var a = i.morphTargets;
                if (void 0 !== a && a.length > 0)
                    for (this.morphTargetInfluences = [],
                    this.morphTargetDictionary = {},
                    t = 0,
                    e = a.length; t < e; t++)
                        n = a[t].name || String(t),
                        this.morphTargetInfluences.push(0),
                        this.morphTargetDictionary[n] = t
            }
        },
        raycast: function() {
            var t = new ze
              , e = new zn
              , n = new Je
              , i = new He
              , r = new He
              , s = new He
              , o = new He
              , a = new He
              , c = new He
              , l = new Ue
              , h = new Ue
              , p = new Ue
              , u = new He
              , d = new He
              , f = new He;
            function m(t, e, n, i, r, s, o) {
                return Fn.getBarycoord(t, e, n, i, u),
                r.multiplyScalar(u.x),
                s.multiplyScalar(u.y),
                o.multiplyScalar(u.z),
                r.add(s).add(o),
                r.clone()
            }
            function y(t, e, n, i, r, s, o, a) {
                if (null === (e.side === g ? i.intersectTriangle(o, s, r, !0, a) : i.intersectTriangle(r, s, o, e.side !== v, a)))
                    return null;
                f.copy(a),
                f.applyMatrix4(t.matrixWorld);
                var c = n.ray.origin.distanceTo(f);
                return c < n.near || c > n.far ? null : {
                    distance: c,
                    point: f.clone(),
                    object: t
                }
            }
            function x(t, e, n, o, a, c, u, f, g) {
                i.fromBufferAttribute(a, u),
                r.fromBufferAttribute(a, f),
                s.fromBufferAttribute(a, g);
                var v = y(t, e, n, o, i, r, s, d);
                if (v) {
                    c && (l.fromBufferAttribute(c, u),
                    h.fromBufferAttribute(c, f),
                    p.fromBufferAttribute(c, g),
                    v.uv = m(d, i, r, s, l, h, p));
                    var x = new fn(u,f,g);
                    Fn.getNormal(i, r, s, x.normal),
                    v.face = x
                }
                return v
            }
            return function(u, f) {
                var g, v = this.geometry, w = this.material, b = this.matrixWorld;
                if (void 0 !== w && (null === v.boundingSphere && v.computeBoundingSphere(),
                n.copy(v.boundingSphere),
                n.applyMatrix4(b),
                !1 !== u.ray.intersectsSphere(n) && (t.getInverse(b),
                e.copy(u.ray).applyMatrix4(t),
                null === v.boundingBox || !1 !== e.intersectsBox(v.boundingBox))))
                    if (v.isBufferGeometry) {
                        var M, _, S, E, T, A, L, R, P, C = v.index, I = v.attributes.position, O = v.attributes.uv, D = v.groups, k = v.drawRange;
                        if (null !== C)
                            if (Array.isArray(w))
                                for (E = 0,
                                A = D.length; E < A; E++)
                                    for (P = w[(R = D[E]).materialIndex],
                                    T = Math.max(R.start, k.start),
                                    L = Math.min(R.start + R.count, k.start + k.count); T < L; T += 3)
                                        M = C.getX(T),
                                        _ = C.getX(T + 1),
                                        S = C.getX(T + 2),
                                        (g = x(this, P, u, e, I, O, M, _, S)) && (g.faceIndex = Math.floor(T / 3),
                                        f.push(g));
                            else
                                for (E = Math.max(0, k.start),
                                A = Math.min(C.count, k.start + k.count); E < A; E += 3)
                                    M = C.getX(E),
                                    _ = C.getX(E + 1),
                                    S = C.getX(E + 2),
                                    (g = x(this, w, u, e, I, O, M, _, S)) && (g.faceIndex = Math.floor(E / 3),
                                    f.push(g));
                        else if (void 0 !== I)
                            if (Array.isArray(w))
                                for (E = 0,
                                A = D.length; E < A; E++)
                                    for (P = w[(R = D[E]).materialIndex],
                                    T = Math.max(R.start, k.start),
                                    L = Math.min(R.start + R.count, k.start + k.count); T < L; T += 3)
                                        (g = x(this, P, u, e, I, O, M = T, _ = T + 1, S = T + 2)) && (g.faceIndex = Math.floor(T / 3),
                                        f.push(g));
                            else
                                for (E = Math.max(0, k.start),
                                A = Math.min(I.count, k.start + k.count); E < A; E += 3)
                                    (g = x(this, w, u, e, I, O, M = E, _ = E + 1, S = E + 2)) && (g.faceIndex = Math.floor(E / 3),
                                    f.push(g))
                    } else if (v.isGeometry) {
                        var B, N, U, z, F = Array.isArray(w), H = v.vertices, G = v.faces, j = v.faceVertexUvs[0];
                        j.length > 0 && (z = j);
                        for (var V = 0, W = G.length; V < W; V++) {
                            var Y = G[V]
                              , q = F ? w[Y.materialIndex] : w;
                            if (void 0 !== q) {
                                if (B = H[Y.a],
                                N = H[Y.b],
                                U = H[Y.c],
                                !0 === q.morphTargets) {
                                    var X = v.morphTargets
                                      , Z = this.morphTargetInfluences;
                                    i.set(0, 0, 0),
                                    r.set(0, 0, 0),
                                    s.set(0, 0, 0);
                                    for (var K = 0, J = X.length; K < J; K++) {
                                        var Q = Z[K];
                                        if (0 !== Q) {
                                            var $ = X[K].vertices;
                                            i.addScaledVector(o.subVectors($[Y.a], B), Q),
                                            r.addScaledVector(a.subVectors($[Y.b], N), Q),
                                            s.addScaledVector(c.subVectors($[Y.c], U), Q)
                                        }
                                    }
                                    i.add(B),
                                    r.add(N),
                                    s.add(U),
                                    B = i,
                                    N = r,
                                    U = s
                                }
                                if (g = y(this, q, u, e, B, N, U, d)) {
                                    if (z && z[V]) {
                                        var tt = z[V];
                                        l.copy(tt[0]),
                                        h.copy(tt[1]),
                                        p.copy(tt[2]),
                                        g.uv = m(d, B, N, U, l, h, p)
                                    }
                                    g.face = Y,
                                    g.faceIndex = V,
                                    f.push(g)
                                }
                            }
                        }
                    }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry,this.material).copy(this)
        }
    }),
    jn.prototype = Object.create(We.prototype),
    jn.prototype.constructor = jn,
    jn.prototype.isCubeTexture = !0,
    Object.defineProperty(jn.prototype, "images", {
        get: function() {
            return this.image
        },
        set: function(t) {
            this.image = t
        }
    });
    var Vn = new We
      , Wn = new jn;
    function Yn() {
        this.seq = [],
        this.map = {}
    }
    var qn = []
      , Xn = []
      , Zn = new Float32Array(16)
      , Kn = new Float32Array(9)
      , Jn = new Float32Array(4);
    function Qn(t, e, n) {
        var i = t[0];
        if (i <= 0 || i > 0)
            return t;
        var r = e * n
          , s = qn[r];
        if (void 0 === s && (s = new Float32Array(r),
        qn[r] = s),
        0 !== e) {
            i.toArray(s, 0);
            for (var o = 1, a = 0; o !== e; ++o)
                a += n,
                t[o].toArray(s, a)
        }
        return s
    }
    function $n(t, e) {
        if (t.length !== e.length)
            return !1;
        for (var n = 0, i = t.length; n < i; n++)
            if (t[n] !== e[n])
                return !1;
        return !0
    }
    function ti(t, e) {
        for (var n = 0, i = e.length; n < i; n++)
            t[n] = e[n]
    }
    function ei(t, e) {
        var n = Xn[e];
        void 0 === n && (n = new Int32Array(e),
        Xn[e] = n);
        for (var i = 0; i !== e; ++i)
            n[i] = t.allocTextureUnit();
        return n
    }
    function ni(t, e) {
        var n = this.cache;
        n[0] !== e && (t.uniform1f(this.addr, e),
        n[0] = e)
    }
    function ii(t, e) {
        var n = this.cache;
        n[0] !== e && (t.uniform1i(this.addr, e),
        n[0] = e)
    }
    function ri(t, e) {
        var n = this.cache;
        if (void 0 !== e.x)
            n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y),
            n[0] = e.x,
            n[1] = e.y);
        else {
            if ($n(n, e))
                return;
            t.uniform2fv(this.addr, e),
            ti(n, e)
        }
    }
    function si(t, e) {
        var n = this.cache;
        if (void 0 !== e.x)
            n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z),
            n[0] = e.x,
            n[1] = e.y,
            n[2] = e.z);
        else if (void 0 !== e.r)
            n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b),
            n[0] = e.r,
            n[1] = e.g,
            n[2] = e.b);
        else {
            if ($n(n, e))
                return;
            t.uniform3fv(this.addr, e),
            ti(n, e)
        }
    }
    function oi(t, e) {
        var n = this.cache;
        if (void 0 !== e.x)
            n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w),
            n[0] = e.x,
            n[1] = e.y,
            n[2] = e.z,
            n[3] = e.w);
        else {
            if ($n(n, e))
                return;
            t.uniform4fv(this.addr, e),
            ti(n, e)
        }
    }
    function ai(t, e) {
        var n = this.cache
          , i = e.elements;
        if (void 0 === i) {
            if ($n(n, e))
                return;
            t.uniformMatrix2fv(this.addr, !1, e),
            ti(n, e)
        } else {
            if ($n(n, i))
                return;
            Jn.set(i),
            t.uniformMatrix2fv(this.addr, !1, Jn),
            ti(n, i)
        }
    }
    function ci(t, e) {
        var n = this.cache
          , i = e.elements;
        if (void 0 === i) {
            if ($n(n, e))
                return;
            t.uniformMatrix3fv(this.addr, !1, e),
            ti(n, e)
        } else {
            if ($n(n, i))
                return;
            Kn.set(i),
            t.uniformMatrix3fv(this.addr, !1, Kn),
            ti(n, i)
        }
    }
    function li(t, e) {
        var n = this.cache
          , i = e.elements;
        if (void 0 === i) {
            if ($n(n, e))
                return;
            t.uniformMatrix4fv(this.addr, !1, e),
            ti(n, e)
        } else {
            if ($n(n, i))
                return;
            Zn.set(i),
            t.uniformMatrix4fv(this.addr, !1, Zn),
            ti(n, i)
        }
    }
    function hi(t, e, n) {
        var i = this.cache
          , r = n.allocTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r),
        i[0] = r),
        n.setTexture2D(e || Vn, r)
    }
    function pi(t, e, n) {
        var i = this.cache
          , r = n.allocTextureUnit();
        i[0] !== r && (t.uniform1i(this.addr, r),
        i[0] = r),
        n.setTextureCube(e || Wn, r)
    }
    function ui(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform2iv(this.addr, e),
        ti(n, e))
    }
    function di(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform3iv(this.addr, e),
        ti(n, e))
    }
    function fi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform4iv(this.addr, e),
        ti(n, e))
    }
    function mi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform1fv(this.addr, e),
        ti(n, e))
    }
    function gi(t, e) {
        var n = this.cache;
        $n(n, e) || (t.uniform1iv(this.addr, e),
        ti(n, e))
    }
    function vi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 2);
        $n(n, i) || (t.uniform2fv(this.addr, i),
        this.updateCache(i))
    }
    function yi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 3);
        $n(n, i) || (t.uniform3fv(this.addr, i),
        this.updateCache(i))
    }
    function xi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 4);
        $n(n, i) || (t.uniform4fv(this.addr, i),
        this.updateCache(i))
    }
    function wi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 4);
        $n(n, i) || (t.uniformMatrix2fv(this.addr, !1, i),
        this.updateCache(i))
    }
    function bi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 9);
        $n(n, i) || (t.uniformMatrix3fv(this.addr, !1, i),
        this.updateCache(i))
    }
    function Mi(t, e) {
        var n = this.cache
          , i = Qn(e, this.size, 16);
        $n(n, i) || (t.uniformMatrix4fv(this.addr, !1, i),
        this.updateCache(i))
    }
    function _i(t, e, n) {
        var i = this.cache
          , r = e.length
          , s = ei(n, r);
        !1 === $n(i, s) && (t.uniform1iv(this.addr, s),
        ti(i, s));
        for (var o = 0; o !== r; ++o)
            n.setTexture2D(e[o] || Vn, s[o])
    }
    function Si(t, e, n) {
        var i = this.cache
          , r = e.length
          , s = ei(n, r);
        !1 === $n(i, s) && (t.uniform1iv(this.addr, s),
        ti(i, s));
        for (var o = 0; o !== r; ++o)
            n.setTextureCube(e[o] || Wn, s[o])
    }
    function Ei(t, e, n) {
        this.id = t,
        this.addr = n,
        this.cache = [],
        this.setValue = function(t) {
            switch (e.type) {
            case 5126:
                return ni;
            case 35664:
                return ri;
            case 35665:
                return si;
            case 35666:
                return oi;
            case 35674:
                return ai;
            case 35675:
                return ci;
            case 35676:
                return li;
            case 35678:
            case 36198:
                return hi;
            case 35680:
                return pi;
            case 5124:
            case 35670:
                return ii;
            case 35667:
            case 35671:
                return ui;
            case 35668:
            case 35672:
                return di;
            case 35669:
            case 35673:
                return fi
            }
        }()
    }
    function Ti(t, e, n) {
        this.id = t,
        this.addr = n,
        this.cache = [],
        this.size = e.size,
        this.setValue = function(t) {
            switch (e.type) {
            case 5126:
                return mi;
            case 35664:
                return vi;
            case 35665:
                return yi;
            case 35666:
                return xi;
            case 35674:
                return wi;
            case 35675:
                return bi;
            case 35676:
                return Mi;
            case 35678:
                return _i;
            case 35680:
                return Si;
            case 5124:
            case 35670:
                return gi;
            case 35667:
            case 35671:
                return ui;
            case 35668:
            case 35672:
                return di;
            case 35669:
            case 35673:
                return fi
            }
        }()
    }
    function Ai(t) {
        this.id = t,
        Yn.call(this)
    }
    Ti.prototype.updateCache = function(t) {
        var e = this.cache;
        t instanceof Float32Array && e.length !== t.length && (this.cache = new Float32Array(t.length)),
        ti(e, t)
    }
    ,
    Ai.prototype.setValue = function(t, e, n) {
        for (var i = this.seq, r = 0, s = i.length; r !== s; ++r) {
            var o = i[r];
            o.setValue(t, e[o.id], n)
        }
    }
    ;
    var Li = /([\w\d_]+)(\])?(\[|\.)?/g;
    function Ri(t, e) {
        t.seq.push(e),
        t.map[e.id] = e
    }
    function Pi(t, e, n) {
        var i = t.name
          , r = i.length;
        for (Li.lastIndex = 0; ; ) {
            var s = Li.exec(i)
              , o = Li.lastIndex
              , a = s[1]
              , c = "]" === s[2]
              , l = s[3];
            if (c && (a |= 0),
            void 0 === l || "[" === l && o + 2 === r) {
                Ri(n, void 0 === l ? new Ei(a,t,e) : new Ti(a,t,e));
                break
            }
            var h = n.map[a];
            void 0 === h && Ri(n, h = new Ai(a)),
            n = h
        }
    }
    function Ci(t, e, n) {
        Yn.call(this),
        this.renderer = n;
        for (var i = t.getProgramParameter(e, t.ACTIVE_UNIFORMS), r = 0; r < i; ++r) {
            var s = t.getActiveUniform(e, r);
            Pi(s, t.getUniformLocation(e, s.name), this)
        }
    }
    function Ii(t, e, n) {
        var i = t.createShader(e);
        return t.shaderSource(i, n),
        t.compileShader(i),
        !1 === t.getShaderParameter(i, t.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile."),
        "" !== t.getShaderInfoLog(i) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", e === t.VERTEX_SHADER ? "vertex" : "fragment", t.getShaderInfoLog(i), function(t) {
            for (var e = t.split("\n"), n = 0; n < e.length; n++)
                e[n] = n + 1 + ": " + e[n];
            return e.join("\n")
        }(n)),
        i
    }
    Ci.prototype.setValue = function(t, e, n) {
        var i = this.map[e];
        void 0 !== i && i.setValue(t, n, this.renderer)
    }
    ,
    Ci.prototype.setOptional = function(t, e, n) {
        var i = e[n];
        void 0 !== i && this.setValue(t, n, i)
    }
    ,
    Ci.upload = function(t, e, n, i) {
        for (var r = 0, s = e.length; r !== s; ++r) {
            var o = e[r]
              , a = n[o.id];
            !1 !== a.needsUpdate && o.setValue(t, a.value, i)
        }
    }
    ,
    Ci.seqWithValue = function(t, e) {
        for (var n = [], i = 0, r = t.length; i !== r; ++i) {
            var s = t[i];
            s.id in e && n.push(s)
        }
        return n
    }
    ;
    var Oi = 0;
    function Di(t) {
        switch (t) {
        case Ee:
            return ["Linear", "( value )"];
        case Te:
            return ["sRGB", "( value )"];
        case Le:
            return ["RGBE", "( value )"];
        case Pe:
            return ["RGBM", "( value, 7.0 )"];
        case Ce:
            return ["RGBM", "( value, 16.0 )"];
        case Ie:
            return ["RGBD", "( value, 256.0 )"];
        case Ae:
            return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
        default:
            throw new Error("unsupported encoding: " + t)
        }
    }
    function ki(t, e) {
        var n = Di(e);
        return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }"
    }
    function Bi(t) {
        return "" !== t
    }
    function Ni(t, e) {
        return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights)
    }
    function Ui(t, e) {
        return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
    }
    function zi(t) {
        return t.replace(/^[ \t]*#include +<([\w\d./]+)>/gm, function(t, e) {
            var n = tn[e];
            if (void 0 === n)
                throw new Error("Can not resolve #include <" + e + ">");
            return zi(n)
        })
    }
    function Fi(t) {
        return t.replace(/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, function(t, e, n, i) {
            for (var r = "", s = parseInt(e); s < parseInt(n); s++)
                r += i.replace(/\[ i \]/g, "[ " + s + " ]");
            return r
        })
    }
    function Hi(t, e, n) {
        var i = []
          , r = {
            MeshDepthMaterial: "depth",
            MeshDistanceMaterial: "distanceRGBA",
            MeshNormalMaterial: "normal",
            MeshBasicMaterial: "basic",
            MeshLambertMaterial: "lambert",
            MeshPhongMaterial: "phong",
            MeshToonMaterial: "phong",
            MeshStandardMaterial: "physical",
            MeshPhysicalMaterial: "physical",
            LineBasicMaterial: "basic",
            LineDashedMaterial: "dashed",
            PointsMaterial: "points",
            ShadowMaterial: "shadow",
            SpriteMaterial: "sprite"
        }
          , s = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];
        function o(t, e) {
            var n;
            return t ? t.isTexture ? n = t.encoding : t.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),
            n = t.texture.encoding) : n = Ee,
            n === Ee && e && (n = Ae),
            n
        }
        this.getParameters = function(e, i, s, a, c, l, h) {
            var p = r[e.type]
              , u = h.isSkinnedMesh ? function(t) {
                var e = h.skeleton.bones;
                if (n.floatVertexTextures)
                    return 1024;
                var i = n.maxVertexUniforms
                  , r = Math.floor((i - 20) / 4)
                  , s = Math.min(r, e.length);
                return s < e.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + e.length + " bones. This GPU supports " + s + "."),
                0) : s
            }() : 0
              , d = n.precision;
            null !== e.precision && (d = n.getMaxPrecision(e.precision)) !== e.precision && console.warn("THREE.WebGLProgram.getParameters:", e.precision, "not supported, using", d, "instead.");
            var f = t.getRenderTarget();
            return {
                shaderID: p,
                precision: d,
                supportsVertexTextures: n.vertexTextures,
                outputEncoding: o(f ? f.texture : null, t.gammaOutput),
                map: !!e.map,
                mapEncoding: o(e.map, t.gammaInput),
                envMap: !!e.envMap,
                envMapMode: e.envMap && e.envMap.mapping,
                envMapEncoding: o(e.envMap, t.gammaInput),
                envMapCubeUV: !!e.envMap && (e.envMap.mapping === dt || e.envMap.mapping === ft),
                lightMap: !!e.lightMap,
                aoMap: !!e.aoMap,
                emissiveMap: !!e.emissiveMap,
                emissiveMapEncoding: o(e.emissiveMap, t.gammaInput),
                bumpMap: !!e.bumpMap,
                normalMap: !!e.normalMap,
                objectSpaceNormalMap: e.normalMapType === Be,
                displacementMap: !!e.displacementMap,
                roughnessMap: !!e.roughnessMap,
                metalnessMap: !!e.metalnessMap,
                specularMap: !!e.specularMap,
                alphaMap: !!e.alphaMap,
                gradientMap: !!e.gradientMap,
                combine: e.combine,
                vertexColors: e.vertexColors,
                fog: !!a,
                useFog: e.fog,
                fogExp: a && a.isFogExp2,
                flatShading: e.flatShading,
                sizeAttenuation: e.sizeAttenuation,
                logarithmicDepthBuffer: n.logarithmicDepthBuffer,
                skinning: e.skinning && u > 0,
                maxBones: u,
                useVertexTexture: n.floatVertexTextures,
                morphTargets: e.morphTargets,
                morphNormals: e.morphNormals,
                maxMorphTargets: t.maxMorphTargets,
                maxMorphNormals: t.maxMorphNormals,
                numDirLights: i.directional.length,
                numPointLights: i.point.length,
                numSpotLights: i.spot.length,
                numRectAreaLights: i.rectArea.length,
                numHemiLights: i.hemi.length,
                numClippingPlanes: c,
                numClipIntersection: l,
                dithering: e.dithering,
                shadowMapEnabled: t.shadowMap.enabled && h.receiveShadow && s.length > 0,
                shadowMapType: t.shadowMap.type,
                toneMapping: t.toneMapping,
                physicallyCorrectLights: t.physicallyCorrectLights,
                premultipliedAlpha: e.premultipliedAlpha,
                alphaTest: e.alphaTest,
                doubleSided: e.side === v,
                flipSided: e.side === g,
                depthPacking: void 0 !== e.depthPacking && e.depthPacking
            }
        }
        ,
        this.getProgramCode = function(e, n) {
            var i = [];
            if (n.shaderID ? i.push(n.shaderID) : (i.push(e.fragmentShader),
            i.push(e.vertexShader)),
            void 0 !== e.defines)
                for (var r in e.defines)
                    i.push(r),
                    i.push(e.defines[r]);
            for (var o = 0; o < s.length; o++)
                i.push(n[s[o]]);
            return i.push(e.onBeforeCompile.toString()),
            i.push(t.gammaOutput),
            i.join()
        }
        ,
        this.acquireProgram = function(r, s, o, a) {
            for (var c, l = 0, h = i.length; l < h; l++) {
                var p = i[l];
                if (p.code === a) {
                    ++(c = p).usedTimes;
                    break
                }
            }
            return void 0 === c && (c = new function(t, e, n, i, r, s, o) {
                var a = t.context
                  , c = i.defines
                  , l = r.vertexShader
                  , h = r.fragmentShader
                  , p = "SHADOWMAP_TYPE_BASIC";
                s.shadowMapType === d ? p = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === f && (p = "SHADOWMAP_TYPE_PCF_SOFT");
                var u = "ENVMAP_TYPE_CUBE"
                  , m = "ENVMAP_MODE_REFLECTION"
                  , g = "ENVMAP_BLENDING_MULTIPLY";
                if (s.envMap) {
                    switch (i.envMap.mapping) {
                    case ct:
                    case lt:
                        u = "ENVMAP_TYPE_CUBE";
                        break;
                    case dt:
                    case ft:
                        u = "ENVMAP_TYPE_CUBE_UV";
                        break;
                    case ht:
                    case pt:
                        u = "ENVMAP_TYPE_EQUIREC";
                        break;
                    case ut:
                        u = "ENVMAP_TYPE_SPHERE"
                    }
                    switch (i.envMap.mapping) {
                    case lt:
                    case pt:
                        m = "ENVMAP_MODE_REFRACTION"
                    }
                    switch (i.combine) {
                    case $:
                        g = "ENVMAP_BLENDING_MULTIPLY";
                        break;
                    case tt:
                        g = "ENVMAP_BLENDING_MIX";
                        break;
                    case et:
                        g = "ENVMAP_BLENDING_ADD"
                    }
                }
                var v, y, x = t.gammaFactor > 0 ? t.gammaFactor : 1, w = o.isWebGL2 ? "" : function(t, e, n) {
                    return [(t = t || {}).derivatives || e.envMapCubeUV || e.bumpMap || e.normalMap && !e.objectSpaceNormalMap || e.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (t.fragDepth || e.logarithmicDepthBuffer) && n.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", t.drawBuffers && n.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (t.shaderTextureLOD || e.envMap) && n.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Bi).join("\n")
                }(i.extensions, s, e), b = function(t) {
                    var e = [];
                    for (var n in t) {
                        var i = t[n];
                        !1 !== i && e.push("#define " + n + " " + i)
                    }
                    return e.join("\n")
                }(c), M = a.createProgram();
                if (i.isRawShaderMaterial ? ((v = [b].filter(Bi).join("\n")).length > 0 && (v += "\n"),
                (y = [w, b].filter(Bi).join("\n")).length > 0 && (y += "\n")) : (v = ["precision " + s.precision + " float;", "precision " + s.precision + " int;", "#define SHADER_NAME " + r.name, b, s.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + x, "#define MAX_BONES " + s.maxBones, s.useFog && s.fog ? "#define USE_FOG" : "", s.useFog && s.fogExp ? "#define FOG_EXP2" : "", s.map ? "#define USE_MAP" : "", s.envMap ? "#define USE_ENVMAP" : "", s.envMap ? "#define " + m : "", s.lightMap ? "#define USE_LIGHTMAP" : "", s.aoMap ? "#define USE_AOMAP" : "", s.emissiveMap ? "#define USE_EMISSIVEMAP" : "", s.bumpMap ? "#define USE_BUMPMAP" : "", s.normalMap ? "#define USE_NORMALMAP" : "", s.normalMap && s.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", s.displacementMap && s.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", s.specularMap ? "#define USE_SPECULARMAP" : "", s.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", s.metalnessMap ? "#define USE_METALNESSMAP" : "", s.alphaMap ? "#define USE_ALPHAMAP" : "", s.vertexColors ? "#define USE_COLOR" : "", s.flatShading ? "#define FLAT_SHADED" : "", s.skinning ? "#define USE_SKINNING" : "", s.useVertexTexture ? "#define BONE_TEXTURE" : "", s.morphTargets ? "#define USE_MORPHTARGETS" : "", s.morphNormals && !1 === s.flatShading ? "#define USE_MORPHNORMALS" : "", s.doubleSided ? "#define DOUBLE_SIDED" : "", s.flipSided ? "#define FLIP_SIDED" : "", s.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", s.shadowMapEnabled ? "#define " + p : "", s.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", s.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", s.logarithmicDepthBuffer && (o.isWebGL2 || e.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "\tattribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(Bi).join("\n"),
                y = [w, "precision " + s.precision + " float;", "precision " + s.precision + " int;", "#define SHADER_NAME " + r.name, b, s.alphaTest ? "#define ALPHATEST " + s.alphaTest + (s.alphaTest % 1 ? "" : ".0") : "", "#define GAMMA_FACTOR " + x, s.useFog && s.fog ? "#define USE_FOG" : "", s.useFog && s.fogExp ? "#define FOG_EXP2" : "", s.map ? "#define USE_MAP" : "", s.envMap ? "#define USE_ENVMAP" : "", s.envMap ? "#define " + u : "", s.envMap ? "#define " + m : "", s.envMap ? "#define " + g : "", s.lightMap ? "#define USE_LIGHTMAP" : "", s.aoMap ? "#define USE_AOMAP" : "", s.emissiveMap ? "#define USE_EMISSIVEMAP" : "", s.bumpMap ? "#define USE_BUMPMAP" : "", s.normalMap ? "#define USE_NORMALMAP" : "", s.normalMap && s.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", s.specularMap ? "#define USE_SPECULARMAP" : "", s.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", s.metalnessMap ? "#define USE_METALNESSMAP" : "", s.alphaMap ? "#define USE_ALPHAMAP" : "", s.vertexColors ? "#define USE_COLOR" : "", s.gradientMap ? "#define USE_GRADIENTMAP" : "", s.flatShading ? "#define FLAT_SHADED" : "", s.doubleSided ? "#define DOUBLE_SIDED" : "", s.flipSided ? "#define FLIP_SIDED" : "", s.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", s.shadowMapEnabled ? "#define " + p : "", s.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", s.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", s.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", s.logarithmicDepthBuffer && (o.isWebGL2 || e.get("EXT_frag_depth")) ? "#define USE_LOGDEPTHBUF_EXT" : "", s.envMap && (o.isWebGL2 || e.get("EXT_shader_texture_lod")) ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", s.toneMapping !== nt ? "#define TONE_MAPPING" : "", s.toneMapping !== nt ? tn.tonemapping_pars_fragment : "", s.toneMapping !== nt ? function(t, e) {
                    var n;
                    switch (e) {
                    case it:
                        n = "Linear";
                        break;
                    case rt:
                        n = "Reinhard";
                        break;
                    case st:
                        n = "Uncharted2";
                        break;
                    case ot:
                        n = "OptimizedCineon";
                        break;
                    default:
                        throw new Error("unsupported toneMapping: " + e)
                    }
                    return "vec3 toneMapping( vec3 color ) { return " + n + "ToneMapping( color ); }"
                }(0, s.toneMapping) : "", s.dithering ? "#define DITHERING" : "", s.outputEncoding || s.mapEncoding || s.envMapEncoding || s.emissiveMapEncoding ? tn.encodings_pars_fragment : "", s.mapEncoding ? ki("mapTexelToLinear", s.mapEncoding) : "", s.envMapEncoding ? ki("envMapTexelToLinear", s.envMapEncoding) : "", s.emissiveMapEncoding ? ki("emissiveMapTexelToLinear", s.emissiveMapEncoding) : "", s.outputEncoding ? function(t, e) {
                    var n = Di(s.outputEncoding);
                    return "vec4 linearToOutputTexel( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }"
                }() : "", s.depthPacking ? "#define DEPTH_PACKING " + i.depthPacking : "", "\n"].filter(Bi).join("\n")),
                l = Ui(l = Ni(l = zi(l), s), s),
                h = Ui(h = Ni(h = zi(h), s), s),
                l = Fi(l),
                h = Fi(h),
                o.isWebGL2 && !i.isRawShaderMaterial) {
                    var _ = !1
                      , S = /^\s*#version\s+300\s+es\s*\n/;
                    i.isShaderMaterial && null !== l.match(S) && null !== h.match(S) && (_ = !0,
                    l = l.replace(S, ""),
                    h = h.replace(S, "")),
                    v = ["#version 300 es\n", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + v,
                    y = ["#version 300 es\n", "#define varying in", _ ? "" : "out highp vec4 pc_fragColor;", _ ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + y
                }
                var E = v + l
                  , T = y + h
                  , A = Ii(a, a.VERTEX_SHADER, E)
                  , L = Ii(a, a.FRAGMENT_SHADER, T);
                a.attachShader(M, A),
                a.attachShader(M, L),
                void 0 !== i.index0AttributeName ? a.bindAttribLocation(M, 0, i.index0AttributeName) : !0 === s.morphTargets && a.bindAttribLocation(M, 0, "position"),
                a.linkProgram(M);
                var R, P, C = a.getProgramInfoLog(M).trim(), I = a.getShaderInfoLog(A).trim(), O = a.getShaderInfoLog(L).trim(), D = !0, k = !0;
                return !1 === a.getProgramParameter(M, a.LINK_STATUS) ? (D = !1,
                console.error("THREE.WebGLProgram: shader error: ", a.getError(), "gl.VALIDATE_STATUS", a.getProgramParameter(M, a.VALIDATE_STATUS), "gl.getProgramInfoLog", C, I, O)) : "" !== C ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", C) : "" !== I && "" !== O || (k = !1),
                k && (this.diagnostics = {
                    runnable: D,
                    material: i,
                    programLog: C,
                    vertexShader: {
                        log: I,
                        prefix: v
                    },
                    fragmentShader: {
                        log: O,
                        prefix: y
                    }
                }),
                a.deleteShader(A),
                a.deleteShader(L),
                this.getUniforms = function() {
                    return void 0 === R && (R = new Ci(a,M,t)),
                    R
                }
                ,
                this.getAttributes = function() {
                    return void 0 === P && (P = function(t, e) {
                        for (var n = {}, i = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES), r = 0; r < i; r++) {
                            var s = t.getActiveAttrib(e, r).name;
                            n[s] = t.getAttribLocation(e, s)
                        }
                        return n
                    }(a, M)),
                    P
                }
                ,
                this.destroy = function() {
                    a.deleteProgram(M),
                    this.program = void 0
                }
                ,
                Object.defineProperties(this, {
                    uniforms: {
                        get: function() {
                            return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),
                            this.getUniforms()
                        }
                    },
                    attributes: {
                        get: function() {
                            return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),
                            this.getAttributes()
                        }
                    }
                }),
                this.name = r.name,
                this.id = Oi++,
                this.code = n,
                this.usedTimes = 1,
                this.program = M,
                this.vertexShader = A,
                this.fragmentShader = L,
                this
            }
            (t,e,a,r,s,o,n),
            i.push(c)),
            c
        }
        ,
        this.releaseProgram = function(t) {
            if (0 == --t.usedTimes) {
                var e = i.indexOf(t);
                i[e] = i[i.length - 1],
                i.pop(),
                t.destroy()
            }
        }
        ,
        this.programs = i
    }
    function Gi(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.program && e.program && t.program !== e.program ? t.program.id - e.program.id : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id
    }
    function ji(t, e) {
        return t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id
    }
    var Vi, Wi = 0;
    function Yi() {
        var t = new function() {
            var t = new function() {
                var t = {};
                return {
                    get: function(e) {
                        if (void 0 !== t[e.id])
                            return t[e.id];
                        var n;
                        switch (e.type) {
                        case "DirectionalLight":
                            n = {
                                direction: new He,
                                color: new rn,
                                shadow: !1,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Ue
                            };
                            break;
                        case "SpotLight":
                            n = {
                                position: new He,
                                direction: new He,
                                color: new rn,
                                distance: 0,
                                coneCos: 0,
                                penumbraCos: 0,
                                decay: 0,
                                shadow: !1,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Ue
                            };
                            break;
                        case "PointLight":
                            n = {
                                position: new He,
                                color: new rn,
                                distance: 0,
                                decay: 0,
                                shadow: !1,
                                shadowBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new Ue,
                                shadowCameraNear: 1,
                                shadowCameraFar: 1e3
                            };
                            break;
                        case "HemisphereLight":
                            n = {
                                direction: new He,
                                skyColor: new rn,
                                groundColor: new rn
                            };
                            break;
                        case "RectAreaLight":
                            n = {
                                color: new rn,
                                position: new He,
                                halfWidth: new He,
                                halfHeight: new He
                            }
                        }
                        return t[e.id] = n,
                        n
                    }
                }
            }
              , e = {
                id: Wi++,
                hash: {
                    stateID: -1,
                    directionalLength: -1,
                    pointLength: -1,
                    spotLength: -1,
                    rectAreaLength: -1,
                    hemiLength: -1,
                    shadowsLength: -1
                },
                ambient: [0, 0, 0],
                directional: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                point: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            }
              , n = new He
              , i = new ze
              , r = new ze;
            return {
                setup: function(s, o, a) {
                    for (var c = 0, l = 0, h = 0, p = 0, u = 0, d = 0, f = 0, m = 0, g = a.matrixWorldInverse, v = 0, y = s.length; v < y; v++) {
                        var x = s[v]
                          , w = x.color
                          , b = x.intensity
                          , M = x.distance
                          , _ = x.shadow && x.shadow.map ? x.shadow.map.texture : null;
                        if (x.isAmbientLight)
                            c += w.r * b,
                            l += w.g * b,
                            h += w.b * b;
                        else if (x.isDirectionalLight) {
                            if ((E = t.get(x)).color.copy(x.color).multiplyScalar(x.intensity),
                            E.direction.setFromMatrixPosition(x.matrixWorld),
                            n.setFromMatrixPosition(x.target.matrixWorld),
                            E.direction.sub(n),
                            E.direction.transformDirection(g),
                            E.shadow = x.castShadow,
                            x.castShadow) {
                                var S = x.shadow;
                                E.shadowBias = S.bias,
                                E.shadowRadius = S.radius,
                                E.shadowMapSize = S.mapSize
                            }
                            e.directionalShadowMap[p] = _,
                            e.directionalShadowMatrix[p] = x.shadow.matrix,
                            e.directional[p] = E,
                            p++
                        } else if (x.isSpotLight)
                            (E = t.get(x)).position.setFromMatrixPosition(x.matrixWorld),
                            E.position.applyMatrix4(g),
                            E.color.copy(w).multiplyScalar(b),
                            E.distance = M,
                            E.direction.setFromMatrixPosition(x.matrixWorld),
                            n.setFromMatrixPosition(x.target.matrixWorld),
                            E.direction.sub(n),
                            E.direction.transformDirection(g),
                            E.coneCos = Math.cos(x.angle),
                            E.penumbraCos = Math.cos(x.angle * (1 - x.penumbra)),
                            E.decay = 0 === x.distance ? 0 : x.decay,
                            E.shadow = x.castShadow,
                            x.castShadow && (S = x.shadow,
                            E.shadowBias = S.bias,
                            E.shadowRadius = S.radius,
                            E.shadowMapSize = S.mapSize),
                            e.spotShadowMap[d] = _,
                            e.spotShadowMatrix[d] = x.shadow.matrix,
                            e.spot[d] = E,
                            d++;
                        else if (x.isRectAreaLight)
                            (E = t.get(x)).color.copy(w).multiplyScalar(b),
                            E.position.setFromMatrixPosition(x.matrixWorld),
                            E.position.applyMatrix4(g),
                            r.identity(),
                            i.copy(x.matrixWorld),
                            i.premultiply(g),
                            r.extractRotation(i),
                            E.halfWidth.set(.5 * x.width, 0, 0),
                            E.halfHeight.set(0, .5 * x.height, 0),
                            E.halfWidth.applyMatrix4(r),
                            E.halfHeight.applyMatrix4(r),
                            e.rectArea[f] = E,
                            f++;
                        else if (x.isPointLight)
                            (E = t.get(x)).position.setFromMatrixPosition(x.matrixWorld),
                            E.position.applyMatrix4(g),
                            E.color.copy(x.color).multiplyScalar(x.intensity),
                            E.distance = x.distance,
                            E.decay = 0 === x.distance ? 0 : x.decay,
                            E.shadow = x.castShadow,
                            x.castShadow && (S = x.shadow,
                            E.shadowBias = S.bias,
                            E.shadowRadius = S.radius,
                            E.shadowMapSize = S.mapSize,
                            E.shadowCameraNear = S.camera.near,
                            E.shadowCameraFar = S.camera.far),
                            e.pointShadowMap[u] = _,
                            e.pointShadowMatrix[u] = x.shadow.matrix,
                            e.point[u] = E,
                            u++;
                        else if (x.isHemisphereLight) {
                            var E;
                            (E = t.get(x)).direction.setFromMatrixPosition(x.matrixWorld),
                            E.direction.transformDirection(g),
                            E.direction.normalize(),
                            E.skyColor.copy(x.color).multiplyScalar(b),
                            E.groundColor.copy(x.groundColor).multiplyScalar(b),
                            e.hemi[m] = E,
                            m++
                        }
                    }
                    e.ambient[0] = c,
                    e.ambient[1] = l,
                    e.ambient[2] = h,
                    e.directional.length = p,
                    e.spot.length = d,
                    e.rectArea.length = f,
                    e.point.length = u,
                    e.hemi.length = m,
                    e.hash.stateID = e.id,
                    e.hash.directionalLength = p,
                    e.hash.pointLength = u,
                    e.hash.spotLength = d,
                    e.hash.rectAreaLength = f,
                    e.hash.hemiLength = m,
                    e.hash.shadowsLength = o.length
                },
                state: e
            }
        }
          , e = []
          , n = [];
        return {
            init: function() {
                e.length = 0,
                n.length = 0
            },
            state: {
                lightsArray: e,
                shadowsArray: n,
                lights: t
            },
            setupLights: function(i) {
                t.setup(e, n, i)
            },
            pushLight: function(t) {
                e.push(t)
            },
            pushShadow: function(t) {
                n.push(t)
            }
        }
    }
    function qi(t) {
        Bn.call(this),
        this.type = "MeshDepthMaterial",
        this.depthPacking = Oe,
        this.skinning = !1,
        this.morphTargets = !1,
        this.map = null,
        this.alphaMap = null,
        this.displacementMap = null,
        this.displacementScale = 1,
        this.displacementBias = 0,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.fog = !1,
        this.lights = !1,
        this.setValues(t)
    }
    function Xi(t) {
        Bn.call(this),
        this.type = "MeshDistanceMaterial",
        this.referencePosition = new He,
        this.nearDistance = 1,
        this.farDistance = 1e3,
        this.skinning = !1,
        this.morphTargets = !1,
        this.map = null,
        this.alphaMap = null,
        this.displacementMap = null,
        this.displacementScale = 1,
        this.displacementBias = 0,
        this.fog = !1,
        this.lights = !1,
        this.setValues(t)
    }
    function Zi(t, e, n) {
        for (var i = new $e, r = new ze, s = new Ue, o = new Ue(n,n), a = new He, c = new He, l = 1, h = 2, p = 1 + (l | h), u = new Array(p), f = new Array(p), y = {}, x = {
            0: g,
            1: m,
            2: v
        }, w = [new He(1,0,0), new He(-1,0,0), new He(0,0,1), new He(0,0,-1), new He(0,1,0), new He(0,-1,0)], b = [new He(0,1,0), new He(0,1,0), new He(0,1,0), new He(0,1,0), new He(0,0,1), new He(0,0,-1)], M = [new Ye, new Ye, new Ye, new Ye, new Ye, new Ye], _ = 0; _ !== p; ++_) {
            var S = 0 != (_ & l)
              , E = 0 != (_ & h)
              , T = new qi({
                depthPacking: De,
                morphTargets: S,
                skinning: E
            });
            u[_] = T;
            var A = new Xi({
                morphTargets: S,
                skinning: E
            });
            f[_] = A
        }
        var L = this;
        function R(e, n, i, r, s, o) {
            var a = e.geometry
              , c = null
              , p = u
              , d = e.customDepthMaterial;
            if (i && (p = f,
            d = e.customDistanceMaterial),
            d)
                c = d;
            else {
                var m = !1;
                n.morphTargets && (a && a.isBufferGeometry ? m = a.morphAttributes && a.morphAttributes.position && a.morphAttributes.position.length > 0 : a && a.isGeometry && (m = a.morphTargets && a.morphTargets.length > 0)),
                e.isSkinnedMesh && !1 === n.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", e);
                var g = e.isSkinnedMesh && n.skinning
                  , v = 0;
                m && (v |= l),
                g && (v |= h),
                c = p[v]
            }
            if (t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length) {
                var w = c.uuid
                  , b = n.uuid
                  , M = y[w];
                void 0 === M && (M = {},
                y[w] = M);
                var _ = M[b];
                void 0 === _ && (_ = c.clone(),
                M[b] = _),
                c = _
            }
            return c.visible = n.visible,
            c.wireframe = n.wireframe,
            c.side = null != n.shadowSide ? n.shadowSide : x[n.side],
            c.clipShadows = n.clipShadows,
            c.clippingPlanes = n.clippingPlanes,
            c.clipIntersection = n.clipIntersection,
            c.wireframeLinewidth = n.wireframeLinewidth,
            c.linewidth = n.linewidth,
            i && c.isMeshDistanceMaterial && (c.referencePosition.copy(r),
            c.nearDistance = s,
            c.farDistance = o),
            c
        }
        function P(n, r, s, o) {
            if (!1 !== n.visible) {
                if (n.layers.test(r.layers) && (n.isMesh || n.isLine || n.isPoints) && n.castShadow && (!n.frustumCulled || i.intersectsObject(n))) {
                    n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse, n.matrixWorld);
                    var a = e.update(n)
                      , l = n.material;
                    if (Array.isArray(l))
                        for (var h = a.groups, p = 0, u = h.length; p < u; p++) {
                            var d = h[p]
                              , f = l[d.materialIndex];
                            if (f && f.visible) {
                                var m = R(n, f, o, c, s.near, s.far);
                                t.renderBufferDirect(s, null, a, m, n, d)
                            }
                        }
                    else
                        l.visible && (m = R(n, l, o, c, s.near, s.far),
                        t.renderBufferDirect(s, null, a, m, n, null))
                }
                for (var g = n.children, v = 0, y = g.length; v < y; v++)
                    P(g[v], r, s, o)
            }
        }
        this.enabled = !1,
        this.autoUpdate = !0,
        this.needsUpdate = !1,
        this.type = d,
        this.render = function(e, n, l) {
            if (!1 !== L.enabled && (!1 !== L.autoUpdate || !1 !== L.needsUpdate) && 0 !== e.length) {
                var h, p = t.context, u = t.state;
                u.disable(p.BLEND),
                u.buffers.color.setClear(1, 1, 1, 1),
                u.buffers.depth.setTest(!0),
                u.setScissorTest(!1);
                for (var d = 0, f = e.length; d < f; d++) {
                    var m = e[d]
                      , g = m.shadow
                      , v = m && m.isPointLight;
                    if (void 0 !== g) {
                        var y = g.camera;
                        if (s.copy(g.mapSize),
                        s.min(o),
                        v) {
                            var x = s.x
                              , _ = s.y;
                            M[0].set(2 * x, _, x, _),
                            M[1].set(0, _, x, _),
                            M[2].set(3 * x, _, x, _),
                            M[3].set(x, _, x, _),
                            M[4].set(3 * x, 0, x, _),
                            M[5].set(x, 0, x, _),
                            s.x *= 4,
                            s.y *= 2
                        }
                        if (null === g.map) {
                            var S = {
                                minFilter: yt,
                                magFilter: yt,
                                format: Ut
                            };
                            g.map = new qe(s.x,s.y,S),
                            g.map.texture.name = m.name + ".shadowMap",
                            y.updateProjectionMatrix()
                        }
                        g.isSpotLightShadow && g.update(m);
                        var E = g.map
                          , T = g.matrix;
                        c.setFromMatrixPosition(m.matrixWorld),
                        y.position.copy(c),
                        v ? (h = 6,
                        T.makeTranslation(-c.x, -c.y, -c.z)) : (h = 1,
                        a.setFromMatrixPosition(m.target.matrixWorld),
                        y.lookAt(a),
                        y.updateMatrixWorld(),
                        T.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1),
                        T.multiply(y.projectionMatrix),
                        T.multiply(y.matrixWorldInverse)),
                        t.setRenderTarget(E),
                        t.clear();
                        for (var A = 0; A < h; A++) {
                            if (v) {
                                a.copy(y.position),
                                a.add(w[A]),
                                y.up.copy(b[A]),
                                y.lookAt(a),
                                y.updateMatrixWorld();
                                var R = M[A];
                                u.viewport(R)
                            }
                            r.multiplyMatrices(y.projectionMatrix, y.matrixWorldInverse),
                            i.setFromMatrix(r),
                            P(n, l, y, v)
                        }
                    } else
                        console.warn("THREE.WebGLShadowMap:", m, "has no shadow.")
                }
                L.needsUpdate = !1
            }
        }
    }
    function Ki(t, e, n, i, r, s, o) {
        var a, c = {};
        function l(t, e) {
            if (t.width > e || t.height > e) {
                if ("data"in t)
                    return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + t.width + "x" + t.height + ").");
                var n = e / Math.max(t.width, t.height)
                  , i = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
                return i.width = Math.floor(t.width * n),
                i.height = Math.floor(t.height * n),
                i.getContext("2d").drawImage(t, 0, 0, t.width, t.height, 0, 0, i.width, i.height),
                console.warn("THREE.WebGLRenderer: image is too big (" + t.width + "x" + t.height + "). Resized to " + i.width + "x" + i.height),
                i
            }
            return t
        }
        function h(t) {
            return Ne.isPowerOfTwo(t.width) && Ne.isPowerOfTwo(t.height)
        }
        function p(t, e) {
            return t.generateMipmaps && e && t.minFilter !== yt && t.minFilter !== bt
        }
        function u(e, n, r, s) {
            t.generateMipmap(e),
            i.get(n).__maxMipLevel = Math.log(Math.max(r, s)) * Math.LOG2E
        }
        function d(e, n) {
            if (!r.isWebGL2)
                return e;
            if (e === t.RGB) {
                if (n === t.FLOAT)
                    return t.RGB32F;
                if (n === t.HALF_FLOAT)
                    return t.RGB16F;
                if (n === t.UNSIGNED_BYTE)
                    return t.RGB8
            }
            if (e === t.RGBA) {
                if (n === t.FLOAT)
                    return t.RGBA32F;
                if (n === t.HALF_FLOAT)
                    return t.RGBA16F;
                if (n === t.UNSIGNED_BYTE)
                    return t.RGBA8
            }
            return e
        }
        function f(e) {
            return e === yt || e === xt || e === wt ? t.NEAREST : t.LINEAR
        }
        function m(e) {
            var n = e.target;
            n.removeEventListener("dispose", m),
            function(e) {
                var n = i.get(e);
                if (e.image && n.__image__webglTextureCube)
                    t.deleteTexture(n.__image__webglTextureCube);
                else {
                    if (void 0 === n.__webglInit)
                        return;
                    t.deleteTexture(n.__webglTexture)
                }
                i.remove(e)
            }(n),
            n.isVideoTexture && delete c[n.id],
            o.memory.textures--
        }
        function g(e) {
            var n = e.target;
            n.removeEventListener("dispose", g),
            function(e) {
                var n = i.get(e)
                  , r = i.get(e.texture);
                if (e) {
                    if (void 0 !== r.__webglTexture && t.deleteTexture(r.__webglTexture),
                    e.depthTexture && e.depthTexture.dispose(),
                    e.isWebGLRenderTargetCube)
                        for (var s = 0; s < 6; s++)
                            t.deleteFramebuffer(n.__webglFramebuffer[s]),
                            n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer[s]);
                    else
                        t.deleteFramebuffer(n.__webglFramebuffer),
                        n.__webglDepthbuffer && t.deleteRenderbuffer(n.__webglDepthbuffer);
                    i.remove(e.texture),
                    i.remove(e)
                }
            }(n),
            o.memory.textures--
        }
        function v(e, f) {
            var g = i.get(e);
            if (e.isVideoTexture && function(t) {
                var e = t.id
                  , n = o.render.frame;
                c[e] !== n && (c[e] = n,
                t.update())
            }(e),
            e.version > 0 && g.__version !== e.version) {
                var v = e.image;
                if (void 0 === v)
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                else {
                    if (!1 !== v.complete)
                        return void function(e, i, c) {
                            void 0 === e.__webglInit && (e.__webglInit = !0,
                            i.addEventListener("dispose", m),
                            e.__webglTexture = t.createTexture(),
                            o.memory.textures++),
                            n.activeTexture(t.TEXTURE0 + c),
                            n.bindTexture(t.TEXTURE_2D, e.__webglTexture),
                            t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, i.flipY),
                            t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, i.premultiplyAlpha),
                            t.pixelStorei(t.UNPACK_ALIGNMENT, i.unpackAlignment);
                            var f = l(i.image, r.maxTextureSize);
                            (function(t) {
                                return !r.isWebGL2 && (t.wrapS !== gt || t.wrapT !== gt || t.minFilter !== yt && t.minFilter !== bt)
                            }
                            )(i) && !1 === h(f) && (f = function(t) {
                                return t instanceof HTMLImageElement || t instanceof HTMLCanvasElement || t instanceof ImageBitmap ? (void 0 === a && (a = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")),
                                a.width = Ne.floorPowerOfTwo(t.width),
                                a.height = Ne.floorPowerOfTwo(t.height),
                                a.getContext("2d").drawImage(t, 0, 0, a.width, a.height),
                                console.warn("THREE.WebGLRenderer: image is not power of two (" + t.width + "x" + t.height + "). Resized to " + a.width + "x" + a.height),
                                a) : t
                            }(f));
                            var g = h(f)
                              , v = s.convert(i.format)
                              , x = s.convert(i.type)
                              , w = d(v, x);
                            y(t.TEXTURE_2D, i, g);
                            var b, M = i.mipmaps;
                            if (i.isDepthTexture) {
                                if (w = t.DEPTH_COMPONENT,
                                i.type === Pt) {
                                    if (!r.isWebGL2)
                                        throw new Error("Float Depth Texture only supported in WebGL2.0");
                                    w = t.DEPTH_COMPONENT32F
                                } else
                                    r.isWebGL2 && (w = t.DEPTH_COMPONENT16);
                                i.format === Gt && w === t.DEPTH_COMPONENT && i.type !== At && i.type !== Rt && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),
                                i.type = At,
                                x = s.convert(i.type)),
                                i.format === jt && (w = t.DEPTH_STENCIL,
                                i.type !== kt && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),
                                i.type = kt,
                                x = s.convert(i.type))),
                                n.texImage2D(t.TEXTURE_2D, 0, w, f.width, f.height, 0, v, x, null)
                            } else if (i.isDataTexture)
                                if (M.length > 0 && g) {
                                    for (var _ = 0, S = M.length; _ < S; _++)
                                        b = M[_],
                                        n.texImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, v, x, b.data);
                                    i.generateMipmaps = !1,
                                    e.__maxMipLevel = M.length - 1
                                } else
                                    n.texImage2D(t.TEXTURE_2D, 0, w, f.width, f.height, 0, v, x, f.data),
                                    e.__maxMipLevel = 0;
                            else if (i.isCompressedTexture) {
                                for (_ = 0,
                                S = M.length; _ < S; _++)
                                    b = M[_],
                                    i.format !== Ut && i.format !== Nt ? n.getCompressedTextureFormats().indexOf(v) > -1 ? n.compressedTexImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, b.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(t.TEXTURE_2D, _, w, b.width, b.height, 0, v, x, b.data);
                                e.__maxMipLevel = M.length - 1
                            } else if (M.length > 0 && g) {
                                for (_ = 0,
                                S = M.length; _ < S; _++)
                                    b = M[_],
                                    n.texImage2D(t.TEXTURE_2D, _, w, v, x, b);
                                i.generateMipmaps = !1,
                                e.__maxMipLevel = M.length - 1
                            } else
                                n.texImage2D(t.TEXTURE_2D, 0, w, v, x, f),
                                e.__maxMipLevel = 0;
                            p(i, g) && u(t.TEXTURE_2D, i, f.width, f.height),
                            e.__version = i.version,
                            i.onUpdate && i.onUpdate(i)
                        }(g, e, f);
                    console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                }
            }
            n.activeTexture(t.TEXTURE0 + f),
            n.bindTexture(t.TEXTURE_2D, g.__webglTexture)
        }
        function y(n, o, a) {
            var c;
            if (a ? (t.texParameteri(n, t.TEXTURE_WRAP_S, s.convert(o.wrapS)),
            t.texParameteri(n, t.TEXTURE_WRAP_T, s.convert(o.wrapT)),
            t.texParameteri(n, t.TEXTURE_MAG_FILTER, s.convert(o.magFilter)),
            t.texParameteri(n, t.TEXTURE_MIN_FILTER, s.convert(o.minFilter))) : (t.texParameteri(n, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
            t.texParameteri(n, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
            o.wrapS === gt && o.wrapT === gt || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),
            t.texParameteri(n, t.TEXTURE_MAG_FILTER, f(o.magFilter)),
            t.texParameteri(n, t.TEXTURE_MIN_FILTER, f(o.minFilter)),
            o.minFilter !== yt && o.minFilter !== bt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),
            c = e.get("EXT_texture_filter_anisotropic")) {
                if (o.type === Pt && null === e.get("OES_texture_float_linear"))
                    return;
                if (o.type === Ct && null === (r.isWebGL2 || e.get("OES_texture_half_float_linear")))
                    return;
                (o.anisotropy > 1 || i.get(o).__currentAnisotropy) && (t.texParameterf(n, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(o.anisotropy, r.getMaxAnisotropy())),
                i.get(o).__currentAnisotropy = o.anisotropy)
            }
        }
        function x(e, r, o, a) {
            var c = s.convert(r.texture.format)
              , l = s.convert(r.texture.type)
              , h = d(c, l);
            n.texImage2D(a, 0, h, r.width, r.height, 0, c, l, null),
            t.bindFramebuffer(t.FRAMEBUFFER, e),
            t.framebufferTexture2D(t.FRAMEBUFFER, o, a, i.get(r.texture).__webglTexture, 0),
            t.bindFramebuffer(t.FRAMEBUFFER, null)
        }
        function w(e, n) {
            t.bindRenderbuffer(t.RENDERBUFFER, e),
            n.depthBuffer && !n.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_COMPONENT16, n.width, n.height),
            t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, e)) : n.depthBuffer && n.stencilBuffer ? (t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_STENCIL, n.width, n.height),
            t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.RENDERBUFFER, e)) : t.renderbufferStorage(t.RENDERBUFFER, t.RGBA4, n.width, n.height),
            t.bindRenderbuffer(t.RENDERBUFFER, null)
        }
        this.setTexture2D = v,
        this.setTextureCube = function(e, a) {
            var c = i.get(e);
            if (6 === e.image.length)
                if (e.version > 0 && c.__version !== e.version) {
                    c.__image__webglTextureCube || (e.addEventListener("dispose", m),
                    c.__image__webglTextureCube = t.createTexture(),
                    o.memory.textures++),
                    n.activeTexture(t.TEXTURE0 + a),
                    n.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube),
                    t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, e.flipY);
                    for (var f = e && e.isCompressedTexture, g = e.image[0] && e.image[0].isDataTexture, v = [], x = 0; x < 6; x++)
                        v[x] = f || g ? g ? e.image[x].image : e.image[x] : l(e.image[x], r.maxCubemapSize);
                    var w = v[0]
                      , b = h(w)
                      , M = s.convert(e.format)
                      , _ = s.convert(e.type)
                      , S = d(M, _);
                    for (y(t.TEXTURE_CUBE_MAP, e, b),
                    x = 0; x < 6; x++)
                        if (f)
                            for (var E, T = v[x].mipmaps, A = 0, L = T.length; A < L; A++)
                                E = T[A],
                                e.format !== Ut && e.format !== Nt ? n.getCompressedTextureFormats().indexOf(M) > -1 ? n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, A, S, E.width, E.height, 0, E.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, A, S, E.width, E.height, 0, M, _, E.data);
                        else
                            g ? n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, S, v[x].width, v[x].height, 0, M, _, v[x].data) : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + x, 0, S, M, _, v[x]);
                    c.__maxMipLevel = f ? T.length - 1 : 0,
                    p(e, b) && u(t.TEXTURE_CUBE_MAP, e, w.width, w.height),
                    c.__version = e.version,
                    e.onUpdate && e.onUpdate(e)
                } else
                    n.activeTexture(t.TEXTURE0 + a),
                    n.bindTexture(t.TEXTURE_CUBE_MAP, c.__image__webglTextureCube)
        }
        ,
        this.setTextureCubeDynamic = function(e, r) {
            n.activeTexture(t.TEXTURE0 + r),
            n.bindTexture(t.TEXTURE_CUBE_MAP, i.get(e).__webglTexture)
        }
        ,
        this.setupRenderTarget = function(e) {
            var r = i.get(e)
              , s = i.get(e.texture);
            e.addEventListener("dispose", g),
            s.__webglTexture = t.createTexture(),
            o.memory.textures++;
            var a = !0 === e.isWebGLRenderTargetCube
              , c = h(e);
            if (a) {
                r.__webglFramebuffer = [];
                for (var l = 0; l < 6; l++)
                    r.__webglFramebuffer[l] = t.createFramebuffer()
            } else
                r.__webglFramebuffer = t.createFramebuffer();
            if (a) {
                for (n.bindTexture(t.TEXTURE_CUBE_MAP, s.__webglTexture),
                y(t.TEXTURE_CUBE_MAP, e.texture, c),
                l = 0; l < 6; l++)
                    x(r.__webglFramebuffer[l], e, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + l);
                p(e.texture, c) && u(t.TEXTURE_CUBE_MAP, e.texture, e.width, e.height),
                n.bindTexture(t.TEXTURE_CUBE_MAP, null)
            } else
                n.bindTexture(t.TEXTURE_2D, s.__webglTexture),
                y(t.TEXTURE_2D, e.texture, c),
                x(r.__webglFramebuffer, e, t.COLOR_ATTACHMENT0, t.TEXTURE_2D),
                p(e.texture, c) && u(t.TEXTURE_2D, e.texture, e.width, e.height),
                n.bindTexture(t.TEXTURE_2D, null);
            e.depthBuffer && function(e) {
                var n = i.get(e)
                  , r = !0 === e.isWebGLRenderTargetCube;
                if (e.depthTexture) {
                    if (r)
                        throw new Error("target.depthTexture not supported in Cube render targets");
                    !function(e, n) {
                        if (n && n.isWebGLRenderTargetCube)
                            throw new Error("Depth Texture with cube render targets is not supported");
                        if (t.bindFramebuffer(t.FRAMEBUFFER, e),
                        !n.depthTexture || !n.depthTexture.isDepthTexture)
                            throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                        i.get(n.depthTexture).__webglTexture && n.depthTexture.image.width === n.width && n.depthTexture.image.height === n.height || (n.depthTexture.image.width = n.width,
                        n.depthTexture.image.height = n.height,
                        n.depthTexture.needsUpdate = !0),
                        v(n.depthTexture, 0);
                        var r = i.get(n.depthTexture).__webglTexture;
                        if (n.depthTexture.format === Gt)
                            t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, r, 0);
                        else {
                            if (n.depthTexture.format !== jt)
                                throw new Error("Unknown depthTexture format");
                            t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, r, 0)
                        }
                    }(n.__webglFramebuffer, e)
                } else if (r) {
                    n.__webglDepthbuffer = [];
                    for (var s = 0; s < 6; s++)
                        t.bindFramebuffer(t.FRAMEBUFFER, n.__webglFramebuffer[s]),
                        n.__webglDepthbuffer[s] = t.createRenderbuffer(),
                        w(n.__webglDepthbuffer[s], e)
                } else
                    t.bindFramebuffer(t.FRAMEBUFFER, n.__webglFramebuffer),
                    n.__webglDepthbuffer = t.createRenderbuffer(),
                    w(n.__webglDepthbuffer, e);
                t.bindFramebuffer(t.FRAMEBUFFER, null)
            }(e)
        }
        ,
        this.updateRenderTargetMipmap = function(e) {
            var r = e.texture;
            if (p(r, h(e))) {
                var s = e.isWebGLRenderTargetCube ? t.TEXTURE_CUBE_MAP : t.TEXTURE_2D
                  , o = i.get(r).__webglTexture;
                n.bindTexture(s, o),
                u(s, r, e.width, e.height),
                n.bindTexture(s, null)
            }
        }
    }
    function Ji(t, e, n) {
        return {
            convert: function(i) {
                var r;
                if (i === mt)
                    return t.REPEAT;
                if (i === gt)
                    return t.CLAMP_TO_EDGE;
                if (i === vt)
                    return t.MIRRORED_REPEAT;
                if (i === yt)
                    return t.NEAREST;
                if (i === xt)
                    return t.NEAREST_MIPMAP_NEAREST;
                if (i === wt)
                    return t.NEAREST_MIPMAP_LINEAR;
                if (i === bt)
                    return t.LINEAR;
                if (i === Mt)
                    return t.LINEAR_MIPMAP_NEAREST;
                if (i === _t)
                    return t.LINEAR_MIPMAP_LINEAR;
                if (i === St)
                    return t.UNSIGNED_BYTE;
                if (i === It)
                    return t.UNSIGNED_SHORT_4_4_4_4;
                if (i === Ot)
                    return t.UNSIGNED_SHORT_5_5_5_1;
                if (i === Dt)
                    return t.UNSIGNED_SHORT_5_6_5;
                if (i === Et)
                    return t.BYTE;
                if (i === Tt)
                    return t.SHORT;
                if (i === At)
                    return t.UNSIGNED_SHORT;
                if (i === Lt)
                    return t.INT;
                if (i === Rt)
                    return t.UNSIGNED_INT;
                if (i === Pt)
                    return t.FLOAT;
                if (i === Ct) {
                    if (n.isWebGL2)
                        return t.HALF_FLOAT;
                    if (null !== (r = e.get("OES_texture_half_float")))
                        return r.HALF_FLOAT_OES
                }
                if (i === Bt)
                    return t.ALPHA;
                if (i === Nt)
                    return t.RGB;
                if (i === Ut)
                    return t.RGBA;
                if (i === zt)
                    return t.LUMINANCE;
                if (i === Ft)
                    return t.LUMINANCE_ALPHA;
                if (i === Gt)
                    return t.DEPTH_COMPONENT;
                if (i === jt)
                    return t.DEPTH_STENCIL;
                if (i === R)
                    return t.FUNC_ADD;
                if (i === P)
                    return t.FUNC_SUBTRACT;
                if (i === C)
                    return t.FUNC_REVERSE_SUBTRACT;
                if (i === D)
                    return t.ZERO;
                if (i === k)
                    return t.ONE;
                if (i === B)
                    return t.SRC_COLOR;
                if (i === N)
                    return t.ONE_MINUS_SRC_COLOR;
                if (i === U)
                    return t.SRC_ALPHA;
                if (i === z)
                    return t.ONE_MINUS_SRC_ALPHA;
                if (i === F)
                    return t.DST_ALPHA;
                if (i === H)
                    return t.ONE_MINUS_DST_ALPHA;
                if (i === G)
                    return t.DST_COLOR;
                if (i === j)
                    return t.ONE_MINUS_DST_COLOR;
                if (i === V)
                    return t.SRC_ALPHA_SATURATE;
                if ((i === Vt || i === Wt || i === Yt || i === qt) && null !== (r = e.get("WEBGL_compressed_texture_s3tc"))) {
                    if (i === Vt)
                        return r.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    if (i === Wt)
                        return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (i === Yt)
                        return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    if (i === qt)
                        return r.COMPRESSED_RGBA_S3TC_DXT5_EXT
                }
                if ((i === Xt || i === Zt || i === Kt || i === Jt) && null !== (r = e.get("WEBGL_compressed_texture_pvrtc"))) {
                    if (i === Xt)
                        return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    if (i === Zt)
                        return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    if (i === Kt)
                        return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    if (i === Jt)
                        return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                }
                if (i === Qt && null !== (r = e.get("WEBGL_compressed_texture_etc1")))
                    return r.COMPRESSED_RGB_ETC1_WEBGL;
                if ((i === $t || i === te || i === ee || i === ne || i === ie || i === re || i === se || i === oe || i === ae || i === ce || i === le || i === he || i === pe || i === ue) && null !== (r = e.get("WEBGL_compressed_texture_astc")))
                    return i;
                if (i === I || i === O) {
                    if (n.isWebGL2) {
                        if (i === I)
                            return t.MIN;
                        if (i === O)
                            return t.MAX
                    }
                    if (null !== (r = e.get("EXT_blend_minmax"))) {
                        if (i === I)
                            return r.MIN_EXT;
                        if (i === O)
                            return r.MAX_EXT
                    }
                }
                if (i === kt) {
                    if (n.isWebGL2)
                        return t.UNSIGNED_INT_24_8;
                    if (null !== (r = e.get("WEBGL_depth_texture")))
                        return r.UNSIGNED_INT_24_8_WEBGL
                }
                return 0
            }
        }
    }
    function Qi() {
        pn.call(this),
        this.type = "Group"
    }
    function $i(t, e, n, i) {
        un.call(this),
        this.type = "PerspectiveCamera",
        this.fov = void 0 !== t ? t : 50,
        this.zoom = 1,
        this.near = void 0 !== n ? n : .1,
        this.far = void 0 !== i ? i : 2e3,
        this.focus = 10,
        this.aspect = void 0 !== e ? e : 1,
        this.view = null,
        this.filmGauge = 35,
        this.filmOffset = 0,
        this.updateProjectionMatrix()
    }
    function tr(t) {
        $i.call(this),
        this.cameras = t || []
    }
    function er(t) {
        var e = this
          , n = null
          , i = null
          , r = null
          , s = []
          , o = new ze
          , a = new ze;
        "undefined" != typeof window && "VRFrameData"in window && (i = new window.VRFrameData,
        window.addEventListener("vrdisplaypresentchange", v, !1));
        var c = new ze
          , l = new Fe
          , h = new He
          , p = new $i;
        p.bounds = new Ye(0,0,.5,1),
        p.layers.enable(1);
        var u = new $i;
        u.bounds = new Ye(.5,0,.5,1),
        u.layers.enable(2);
        var d, f, m = new tr([p, u]);
        function g() {
            return null !== n && !0 === n.isPresenting
        }
        function v() {
            if (g()) {
                var i = n.getEyeParameters("left")
                  , r = i.renderWidth
                  , s = i.renderHeight;
                f = t.getPixelRatio(),
                d = t.getSize(),
                t.setDrawingBufferSize(2 * r, s, 1),
                w.start()
            } else
                e.enabled && (t.setDrawingBufferSize(d.width, d.height, f),
                w.stop())
        }
        m.layers.enable(1),
        m.layers.enable(2);
        var y = [];
        function x(t) {
            for (var e = navigator.getGamepads && navigator.getGamepads(), n = 0, i = 0, r = e.length; n < r; n++) {
                var s = e[n];
                if (s && ("Daydream Controller" === s.id || "Gear VR Controller" === s.id || "Oculus Go Controller" === s.id || "OpenVR Gamepad" === s.id || s.id.startsWith("Oculus Touch") || s.id.startsWith("Spatial Controller"))) {
                    if (i === t)
                        return s;
                    i++
                }
            }
        }
        this.enabled = !1,
        this.userHeight = 1.6,
        this.getController = function(t) {
            var e = s[t];
            return void 0 === e && ((e = new Qi).matrixAutoUpdate = !1,
            e.visible = !1,
            s[t] = e),
            e
        }
        ,
        this.getDevice = function() {
            return n
        }
        ,
        this.setDevice = function(t) {
            void 0 !== t && (n = t),
            w.setContext(t)
        }
        ,
        this.setPoseTarget = function(t) {
            void 0 !== t && (r = t)
        }
        ,
        this.getCamera = function(t) {
            if (null === n)
                return t.position.set(0, e.userHeight, 0),
                t;
            n.depthNear = t.near,
            n.depthFar = t.far,
            n.getFrameData(i);
            var d = n.stageParameters;
            d ? o.fromArray(d.sittingToStandingTransform) : o.makeTranslation(0, e.userHeight, 0);
            var f = i.pose
              , g = null !== r ? r : t;
            if (g.matrix.copy(o),
            g.matrix.decompose(g.position, g.quaternion, g.scale),
            null !== f.orientation && (l.fromArray(f.orientation),
            g.quaternion.multiply(l)),
            null !== f.position && (l.setFromRotationMatrix(o),
            h.fromArray(f.position),
            h.applyQuaternion(l),
            g.position.add(h)),
            g.updateMatrixWorld(),
            !1 === n.isPresenting)
                return t;
            p.near = t.near,
            u.near = t.near,
            p.far = t.far,
            u.far = t.far,
            m.matrixWorld.copy(t.matrixWorld),
            m.matrixWorldInverse.copy(t.matrixWorldInverse),
            p.matrixWorldInverse.fromArray(i.leftViewMatrix),
            u.matrixWorldInverse.fromArray(i.rightViewMatrix),
            a.getInverse(o),
            p.matrixWorldInverse.multiply(a),
            u.matrixWorldInverse.multiply(a);
            var v = g.parent;
            null !== v && (c.getInverse(v.matrixWorld),
            p.matrixWorldInverse.multiply(c),
            u.matrixWorldInverse.multiply(c)),
            p.matrixWorld.getInverse(p.matrixWorldInverse),
            u.matrixWorld.getInverse(u.matrixWorldInverse),
            p.projectionMatrix.fromArray(i.leftProjectionMatrix),
            u.projectionMatrix.fromArray(i.rightProjectionMatrix),
            m.projectionMatrix.copy(p.projectionMatrix);
            var w = n.getLayers();
            if (w.length) {
                var b = w[0];
                null !== b.leftBounds && 4 === b.leftBounds.length && p.bounds.fromArray(b.leftBounds),
                null !== b.rightBounds && 4 === b.rightBounds.length && u.bounds.fromArray(b.rightBounds)
            }
            return function() {
                for (var t = 0; t < s.length; t++) {
                    var e = s[t]
                      , n = x(t);
                    if (void 0 !== n && void 0 !== n.pose) {
                        if (null === n.pose)
                            return;
                        var i = n.pose;
                        !1 === i.hasPosition && e.position.set(.2, -.6, -.05),
                        null !== i.position && e.position.fromArray(i.position),
                        null !== i.orientation && e.quaternion.fromArray(i.orientation),
                        e.matrix.compose(e.position, e.quaternion, e.scale),
                        e.matrix.premultiply(o),
                        e.matrix.decompose(e.position, e.quaternion, e.scale),
                        e.matrixWorldNeedsUpdate = !0,
                        e.visible = !0;
                        var r = "Daydream Controller" === n.id ? 0 : 1;
                        y[t] !== n.buttons[r].pressed && (y[t] = n.buttons[r].pressed,
                        !0 === y[t] ? e.dispatchEvent({
                            type: "selectstart"
                        }) : (e.dispatchEvent({
                            type: "selectend"
                        }),
                        e.dispatchEvent({
                            type: "select"
                        })))
                    } else
                        e.visible = !1
                }
            }(),
            m
        }
        ,
        this.getStandingMatrix = function() {
            return o
        }
        ,
        this.isPresenting = g;
        var w = new an;
        this.setAnimationLoop = function(t) {
            w.setAnimationLoop(t)
        }
        ,
        this.submitFrame = function() {
            g() && n.submitFrame()
        }
        ,
        this.dispose = function() {
            "undefined" != typeof window && window.removeEventListener("vrdisplaypresentchange", v)
        }
    }
    function nr(t) {
        console.log("THREE.WebGLRenderer", r);
        var e = void 0 !== (t = t || {}).canvas ? t.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")
          , n = void 0 !== t.context ? t.context : null
          , i = void 0 !== t.alpha && t.alpha
          , s = void 0 === t.depth || t.depth
          , l = void 0 === t.stencil || t.stencil
          , h = void 0 !== t.antialias && t.antialias
          , p = void 0 === t.premultipliedAlpha || t.premultipliedAlpha
          , u = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer
          , d = void 0 !== t.powerPreference ? t.powerPreference : "default"
          , f = null
          , m = null;
        this.domElement = e,
        this.context = null,
        this.autoClear = !0,
        this.autoClearColor = !0,
        this.autoClearDepth = !0,
        this.autoClearStencil = !0,
        this.sortObjects = !0,
        this.clippingPlanes = [],
        this.localClippingEnabled = !1,
        this.gammaFactor = 2,
        this.gammaInput = !1,
        this.gammaOutput = !1,
        this.physicallyCorrectLights = !1,
        this.toneMapping = it,
        this.toneMappingExposure = 1,
        this.toneMappingWhitePoint = 1,
        this.maxMorphTargets = 8,
        this.maxMorphNormals = 4;
        var y, x, w, b, M, R, P, C, I, O, D, k, B, N, U, z, F, H, G = this, j = !1, V = null, $ = null, tt = null, et = -1, nt = {
            geometry: null,
            program: null,
            wireframe: !1
        }, rt = null, st = null, ot = new Ye, at = new Ye, ct = null, lt = 0, ht = e.width, pt = e.height, ut = 1, dt = new Ye(0,0,ht,pt), ft = new Ye(0,0,ht,pt), mt = !1, gt = new $e, vt = new function() {
            var t = this
              , e = null
              , n = 0
              , i = !1
              , r = !1
              , s = new Qe
              , o = new Ge
              , a = {
                value: null,
                needsUpdate: !1
            };
            function c() {
                a.value !== e && (a.value = e,
                a.needsUpdate = n > 0),
                t.numPlanes = n,
                t.numIntersection = 0
            }
            function l(e, n, i, r) {
                var c = null !== e ? e.length : 0
                  , l = null;
                if (0 !== c) {
                    if (l = a.value,
                    !0 !== r || null === l) {
                        var h = i + 4 * c
                          , p = n.matrixWorldInverse;
                        o.getNormalMatrix(p),
                        (null === l || l.length < h) && (l = new Float32Array(h));
                        for (var u = 0, d = i; u !== c; ++u,
                        d += 4)
                            s.copy(e[u]).applyMatrix4(p, o),
                            s.normal.toArray(l, d),
                            l[d + 3] = s.constant
                    }
                    a.value = l,
                    a.needsUpdate = !0
                }
                return t.numPlanes = c,
                l
            }
            this.uniform = a,
            this.numPlanes = 0,
            this.numIntersection = 0,
            this.init = function(t, r, s) {
                var o = 0 !== t.length || r || 0 !== n || i;
                return i = r,
                e = l(t, s, 0),
                n = t.length,
                o
            }
            ,
            this.beginShadows = function() {
                r = !0,
                l(null)
            }
            ,
            this.endShadows = function() {
                r = !1,
                c()
            }
            ,
            this.setState = function(t, s, o, h, p, u) {
                if (!i || null === t || 0 === t.length || r && !o)
                    r ? l(null) : c();
                else {
                    var d = r ? 0 : n
                      , f = 4 * d
                      , m = p.clippingState || null;
                    a.value = m,
                    m = l(t, h, f, u);
                    for (var g = 0; g !== f; ++g)
                        m[g] = e[g];
                    p.clippingState = m,
                    this.numIntersection = s ? this.numPlanes : 0,
                    this.numPlanes += d
                }
            }
        }
        , yt = !1, xt = !1, wt = new ze, bt = new He;
        function Mt() {
            return null === $ ? ut : 1
        }
        try {
            var _t = {
                alpha: i,
                depth: s,
                stencil: l,
                antialias: h,
                premultipliedAlpha: p,
                preserveDrawingBuffer: u,
                powerPreference: d
            };
            if (e.addEventListener("webglcontextlost", Lt, !1),
            e.addEventListener("webglcontextrestored", Rt, !1),
            null === (y = n || e.getContext("webgl", _t) || e.getContext("experimental-webgl", _t)))
                throw null !== e.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            void 0 === y.getShaderPrecisionFormat && (y.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                }
            }
            )
        } catch (t) {
            console.error("THREE.WebGLRenderer: " + t.message)
        }
        function Et() {
            x = new function(t) {
                var e = {};
                return {
                    get: function(n) {
                        if (void 0 !== e[n])
                            return e[n];
                        var i;
                        switch (n) {
                        case "WEBGL_depth_texture":
                            i = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                            break;
                        case "EXT_texture_filter_anisotropic":
                            i = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                            break;
                        case "WEBGL_compressed_texture_s3tc":
                            i = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                            break;
                        case "WEBGL_compressed_texture_pvrtc":
                            i = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                            break;
                        default:
                            i = t.getExtension(n)
                        }
                        return null === i && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."),
                        e[n] = i,
                        i
                    }
                }
            }
            (y),
            (w = new function(t, e, n) {
                var i;
                function r(e) {
                    if ("highp" === e) {
                        if (t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT).precision > 0)
                            return "highp";
                        e = "mediump"
                    }
                    return "mediump" === e && t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp"
                }
                var s = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext
                  , o = void 0 !== n.precision ? n.precision : "highp"
                  , a = r(o);
                a !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", a, "instead."),
                o = a);
                var c = !0 === n.logarithmicDepthBuffer
                  , l = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)
                  , h = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS)
                  , p = t.getParameter(t.MAX_TEXTURE_SIZE)
                  , u = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE)
                  , d = t.getParameter(t.MAX_VERTEX_ATTRIBS)
                  , f = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS)
                  , m = t.getParameter(t.MAX_VARYING_VECTORS)
                  , g = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS)
                  , v = h > 0
                  , y = s || !!e.get("OES_texture_float");
                return {
                    isWebGL2: s,
                    getMaxAnisotropy: function() {
                        if (void 0 !== i)
                            return i;
                        var n = e.get("EXT_texture_filter_anisotropic");
                        return i = null !== n ? t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0
                    },
                    getMaxPrecision: r,
                    precision: o,
                    logarithmicDepthBuffer: c,
                    maxTextures: l,
                    maxVertexTextures: h,
                    maxTextureSize: p,
                    maxCubemapSize: u,
                    maxAttributes: d,
                    maxVertexUniforms: f,
                    maxVaryings: m,
                    maxFragmentUniforms: g,
                    vertexTextures: v,
                    floatFragmentTextures: y,
                    floatVertexTextures: v && y
                }
            }
            (y,x,t)).isWebGL2 || (x.get("WEBGL_depth_texture"),
            x.get("OES_texture_float"),
            x.get("OES_texture_half_float"),
            x.get("OES_texture_half_float_linear"),
            x.get("OES_standard_derivatives"),
            x.get("OES_element_index_uint"),
            x.get("ANGLE_instanced_arrays")),
            x.get("OES_texture_float_linear"),
            H = new Ji(y,x,w),
            (b = new function(t, e, n, i) {
                var r = new function() {
                    var e = !1
                      , n = new Ye
                      , i = null
                      , r = new Ye(0,0,0,0);
                    return {
                        setMask: function(n) {
                            i === n || e || (t.colorMask(n, n, n, n),
                            i = n)
                        },
                        setLocked: function(t) {
                            e = t
                        },
                        setClear: function(e, i, s, o, a) {
                            !0 === a && (e *= o,
                            i *= o,
                            s *= o),
                            n.set(e, i, s, o),
                            !1 === r.equals(n) && (t.clearColor(e, i, s, o),
                            r.copy(n))
                        },
                        reset: function() {
                            e = !1,
                            i = null,
                            r.set(-1, 0, 0, 0)
                        }
                    }
                }
                  , s = new function() {
                    var e = !1
                      , n = null
                      , i = null
                      , r = null;
                    return {
                        setTest: function(e) {
                            e ? it(t.DEPTH_TEST) : rt(t.DEPTH_TEST)
                        },
                        setMask: function(i) {
                            n === i || e || (t.depthMask(i),
                            n = i)
                        },
                        setFunc: function(e) {
                            if (i !== e) {
                                if (e)
                                    switch (e) {
                                    case W:
                                        t.depthFunc(t.NEVER);
                                        break;
                                    case Y:
                                        t.depthFunc(t.ALWAYS);
                                        break;
                                    case q:
                                        t.depthFunc(t.LESS);
                                        break;
                                    case X:
                                        t.depthFunc(t.LEQUAL);
                                        break;
                                    case Z:
                                        t.depthFunc(t.EQUAL);
                                        break;
                                    case K:
                                        t.depthFunc(t.GEQUAL);
                                        break;
                                    case J:
                                        t.depthFunc(t.GREATER);
                                        break;
                                    case Q:
                                        t.depthFunc(t.NOTEQUAL);
                                        break;
                                    default:
                                        t.depthFunc(t.LEQUAL)
                                    }
                                else
                                    t.depthFunc(t.LEQUAL);
                                i = e
                            }
                        },
                        setLocked: function(t) {
                            e = t
                        },
                        setClear: function(e) {
                            r !== e && (t.clearDepth(e),
                            r = e)
                        },
                        reset: function() {
                            e = !1,
                            n = null,
                            i = null,
                            r = null
                        }
                    }
                }
                  , l = new function() {
                    var e = !1
                      , n = null
                      , i = null
                      , r = null
                      , s = null
                      , o = null
                      , a = null
                      , c = null
                      , l = null;
                    return {
                        setTest: function(e) {
                            e ? it(t.STENCIL_TEST) : rt(t.STENCIL_TEST)
                        },
                        setMask: function(i) {
                            n === i || e || (t.stencilMask(i),
                            n = i)
                        },
                        setFunc: function(e, n, o) {
                            i === e && r === n && s === o || (t.stencilFunc(e, n, o),
                            i = e,
                            r = n,
                            s = o)
                        },
                        setOp: function(e, n, i) {
                            o === e && a === n && c === i || (t.stencilOp(e, n, i),
                            o = e,
                            a = n,
                            c = i)
                        },
                        setLocked: function(t) {
                            e = t
                        },
                        setClear: function(e) {
                            l !== e && (t.clearStencil(e),
                            l = e)
                        },
                        reset: function() {
                            e = !1,
                            n = null,
                            i = null,
                            r = null,
                            s = null,
                            o = null,
                            a = null,
                            c = null,
                            l = null
                        }
                    }
                }
                  , h = t.getParameter(t.MAX_VERTEX_ATTRIBS)
                  , p = new Uint8Array(h)
                  , u = new Uint8Array(h)
                  , d = new Uint8Array(h)
                  , f = {}
                  , m = null
                  , y = null
                  , x = null
                  , w = null
                  , b = null
                  , M = null
                  , R = null
                  , P = null
                  , C = null
                  , I = !1
                  , O = null
                  , D = null
                  , k = null
                  , B = null
                  , N = null
                  , U = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS)
                  , z = !1
                  , F = 0
                  , H = t.getParameter(t.VERSION);
                -1 !== H.indexOf("WebGL") ? (F = parseFloat(/^WebGL\ ([0-9])/.exec(H)[1]),
                z = F >= 1) : -1 !== H.indexOf("OpenGL ES") && (F = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(H)[1]),
                z = F >= 2);
                var G = null
                  , j = {}
                  , V = new Ye
                  , $ = new Ye;
                function tt(e, n, i) {
                    var r = new Uint8Array(4)
                      , s = t.createTexture();
                    t.bindTexture(e, s),
                    t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST),
                    t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
                    for (var o = 0; o < i; o++)
                        t.texImage2D(n + o, 0, t.RGBA, 1, 1, 0, t.RGBA, t.UNSIGNED_BYTE, r);
                    return s
                }
                var et = {};
                function nt(n, r) {
                    p[n] = 1,
                    0 === u[n] && (t.enableVertexAttribArray(n),
                    u[n] = 1),
                    d[n] !== r && ((i.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[i.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, r),
                    d[n] = r)
                }
                function it(e) {
                    !0 !== f[e] && (t.enable(e),
                    f[e] = !0)
                }
                function rt(e) {
                    !1 !== f[e] && (t.disable(e),
                    f[e] = !1)
                }
                function st(e, i, r, s, o, a, c, l) {
                    if (e !== _ ? it(t.BLEND) : rt(t.BLEND),
                    e !== L) {
                        if (e !== x || l !== I)
                            switch (e) {
                            case E:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ONE, t.ONE, t.ONE, t.ONE)) : (t.blendEquation(t.FUNC_ADD),
                                t.blendFunc(t.SRC_ALPHA, t.ONE));
                                break;
                            case T:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ZERO, t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD),
                                t.blendFunc(t.ZERO, t.ONE_MINUS_SRC_COLOR));
                                break;
                            case A:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ZERO, t.SRC_COLOR, t.ZERO, t.SRC_ALPHA)) : (t.blendEquation(t.FUNC_ADD),
                                t.blendFunc(t.ZERO, t.SRC_COLOR));
                                break;
                            default:
                                l ? (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.ONE, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA)) : (t.blendEquationSeparate(t.FUNC_ADD, t.FUNC_ADD),
                                t.blendFuncSeparate(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA))
                            }
                        w = null,
                        b = null,
                        M = null,
                        R = null,
                        P = null,
                        C = null
                    } else
                        o = o || i,
                        a = a || r,
                        c = c || s,
                        i === w && o === R || (t.blendEquationSeparate(n.convert(i), n.convert(o)),
                        w = i,
                        R = o),
                        r === b && s === M && a === P && c === C || (t.blendFuncSeparate(n.convert(r), n.convert(s), n.convert(a), n.convert(c)),
                        b = r,
                        M = s,
                        P = a,
                        C = c);
                    x = e,
                    I = l
                }
                function ot(e) {
                    O !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW),
                    O = e)
                }
                function at(e) {
                    e !== o ? (it(t.CULL_FACE),
                    e !== D && (e === a ? t.cullFace(t.BACK) : e === c ? t.cullFace(t.FRONT) : t.cullFace(t.FRONT_AND_BACK))) : rt(t.CULL_FACE),
                    D = e
                }
                function ct(e, n, i) {
                    e ? (it(t.POLYGON_OFFSET_FILL),
                    B === n && N === i || (t.polygonOffset(n, i),
                    B = n,
                    N = i)) : rt(t.POLYGON_OFFSET_FILL)
                }
                function lt(e) {
                    void 0 === e && (e = t.TEXTURE0 + U - 1),
                    G !== e && (t.activeTexture(e),
                    G = e)
                }
                return et[t.TEXTURE_2D] = tt(t.TEXTURE_2D, t.TEXTURE_2D, 1),
                et[t.TEXTURE_CUBE_MAP] = tt(t.TEXTURE_CUBE_MAP, t.TEXTURE_CUBE_MAP_POSITIVE_X, 6),
                r.setClear(0, 0, 0, 1),
                s.setClear(1),
                l.setClear(0),
                it(t.DEPTH_TEST),
                s.setFunc(X),
                ot(!1),
                at(a),
                it(t.CULL_FACE),
                it(t.BLEND),
                st(S),
                {
                    buffers: {
                        color: r,
                        depth: s,
                        stencil: l
                    },
                    initAttributes: function() {
                        for (var t = 0, e = p.length; t < e; t++)
                            p[t] = 0
                    },
                    enableAttribute: function(t) {
                        nt(t, 0)
                    },
                    enableAttributeAndDivisor: nt,
                    disableUnusedAttributes: function() {
                        for (var e = 0, n = u.length; e !== n; ++e)
                            u[e] !== p[e] && (t.disableVertexAttribArray(e),
                            u[e] = 0)
                    },
                    enable: it,
                    disable: rt,
                    getCompressedTextureFormats: function() {
                        if (null === m && (m = [],
                        e.get("WEBGL_compressed_texture_pvrtc") || e.get("WEBGL_compressed_texture_s3tc") || e.get("WEBGL_compressed_texture_etc1") || e.get("WEBGL_compressed_texture_astc")))
                            for (var n = t.getParameter(t.COMPRESSED_TEXTURE_FORMATS), i = 0; i < n.length; i++)
                                m.push(n[i]);
                        return m
                    },
                    useProgram: function(e) {
                        return y !== e && (t.useProgram(e),
                        y = e,
                        !0)
                    },
                    setBlending: st,
                    setMaterial: function(e, n) {
                        e.side === v ? rt(t.CULL_FACE) : it(t.CULL_FACE);
                        var i = e.side === g;
                        n && (i = !i),
                        ot(i),
                        e.blending === S && !1 === e.transparent ? st(_) : st(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha),
                        s.setFunc(e.depthFunc),
                        s.setTest(e.depthTest),
                        s.setMask(e.depthWrite),
                        r.setMask(e.colorWrite),
                        ct(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits)
                    },
                    setFlipSided: ot,
                    setCullFace: at,
                    setLineWidth: function(e) {
                        e !== k && (z && t.lineWidth(e),
                        k = e)
                    },
                    setPolygonOffset: ct,
                    setScissorTest: function(e) {
                        e ? it(t.SCISSOR_TEST) : rt(t.SCISSOR_TEST)
                    },
                    activeTexture: lt,
                    bindTexture: function(e, n) {
                        null === G && lt();
                        var i = j[G];
                        void 0 === i && (i = {
                            type: void 0,
                            texture: void 0
                        },
                        j[G] = i),
                        i.type === e && i.texture === n || (t.bindTexture(e, n || et[e]),
                        i.type = e,
                        i.texture = n)
                    },
                    compressedTexImage2D: function() {
                        try {
                            t.compressedTexImage2D.apply(t, arguments)
                        } catch (t) {
                            console.error("THREE.WebGLState:", t)
                        }
                    },
                    texImage2D: function() {
                        try {
                            t.texImage2D.apply(t, arguments)
                        } catch (t) {
                            console.error("THREE.WebGLState:", t)
                        }
                    },
                    scissor: function(e) {
                        !1 === V.equals(e) && (t.scissor(e.x, e.y, e.z, e.w),
                        V.copy(e))
                    },
                    viewport: function(e) {
                        !1 === $.equals(e) && (t.viewport(e.x, e.y, e.z, e.w),
                        $.copy(e))
                    },
                    reset: function() {
                        for (var e = 0; e < u.length; e++)
                            1 === u[e] && (t.disableVertexAttribArray(e),
                            u[e] = 0);
                        f = {},
                        m = null,
                        G = null,
                        j = {},
                        y = null,
                        x = null,
                        O = null,
                        D = null,
                        r.reset(),
                        s.reset(),
                        l.reset()
                    }
                }
            }
            (y,x,H,w)).scissor(at.copy(ft).multiplyScalar(ut)),
            b.viewport(ot.copy(dt).multiplyScalar(ut)),
            M = new function(t) {
                var e = {
                    frame: 0,
                    calls: 0,
                    triangles: 0,
                    points: 0,
                    lines: 0
                };
                return {
                    memory: {
                        geometries: 0,
                        textures: 0
                    },
                    render: e,
                    programs: null,
                    autoReset: !0,
                    reset: function() {
                        e.frame++,
                        e.calls = 0,
                        e.triangles = 0,
                        e.points = 0,
                        e.lines = 0
                    },
                    update: function(n, i, r) {
                        switch (r = r || 1,
                        e.calls++,
                        i) {
                        case t.TRIANGLES:
                            e.triangles += r * (n / 3);
                            break;
                        case t.TRIANGLE_STRIP:
                        case t.TRIANGLE_FAN:
                            e.triangles += r * (n - 2);
                            break;
                        case t.LINES:
                            e.lines += r * (n / 2);
                            break;
                        case t.LINE_STRIP:
                            e.lines += r * (n - 1);
                            break;
                        case t.LINE_LOOP:
                            e.lines += r * n;
                            break;
                        case t.POINTS:
                            e.points += r * n;
                            break;
                        default:
                            console.error("THREE.WebGLInfo: Unknown draw mode:", i)
                        }
                    }
                }
            }
            (y),
            R = new function() {
                var t = new WeakMap;
                return {
                    get: function(e) {
                        var n = t.get(e);
                        return void 0 === n && (n = {},
                        t.set(e, n)),
                        n
                    },
                    remove: function(e) {
                        t.delete(e)
                    },
                    update: function(e, n, i) {
                        t.get(e)[n] = i
                    },
                    dispose: function() {
                        t = new WeakMap
                    }
                }
            }
            ,
            P = new Ki(y,x,b,R,w,H,M),
            C = new function(t) {
                var e = new WeakMap;
                return {
                    get: function(t) {
                        return t.isInterleavedBufferAttribute && (t = t.data),
                        e.get(t)
                    },
                    remove: function(n) {
                        n.isInterleavedBufferAttribute && (n = n.data);
                        var i = e.get(n);
                        i && (t.deleteBuffer(i.buffer),
                        e.delete(n))
                    },
                    update: function(n, i) {
                        n.isInterleavedBufferAttribute && (n = n.data);
                        var r = e.get(n);
                        void 0 === r ? e.set(n, function(e, n) {
                            var i = e.array
                              , r = e.dynamic ? t.DYNAMIC_DRAW : t.STATIC_DRAW
                              , s = t.createBuffer();
                            t.bindBuffer(n, s),
                            t.bufferData(n, i, r),
                            e.onUploadCallback();
                            var o = t.FLOAT;
                            return i instanceof Float32Array ? o = t.FLOAT : i instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : i instanceof Uint16Array ? o = t.UNSIGNED_SHORT : i instanceof Int16Array ? o = t.SHORT : i instanceof Uint32Array ? o = t.UNSIGNED_INT : i instanceof Int32Array ? o = t.INT : i instanceof Int8Array ? o = t.BYTE : i instanceof Uint8Array && (o = t.UNSIGNED_BYTE),
                            {
                                buffer: s,
                                type: o,
                                bytesPerElement: i.BYTES_PER_ELEMENT,
                                version: e.version
                            }
                        }(n, i)) : r.version < n.version && (function(e, n, i) {
                            var r = n.array
                              , s = n.updateRange;
                            t.bindBuffer(i, e),
                            !1 === n.dynamic ? t.bufferData(i, r, t.STATIC_DRAW) : -1 === s.count ? t.bufferSubData(i, 0, r) : 0 === s.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (t.bufferSubData(i, s.offset * r.BYTES_PER_ELEMENT, r.subarray(s.offset, s.offset + s.count)),
                            s.count = -1)
                        }(r.buffer, n, i),
                        r.version = n.version)
                    }
                }
            }
            (y),
            I = new function(t, e, n) {
                var i = {}
                  , r = {};
                function s(t) {
                    var o = t.target
                      , a = i[o.id];
                    for (var c in null !== a.index && e.remove(a.index),
                    a.attributes)
                        e.remove(a.attributes[c]);
                    o.removeEventListener("dispose", s),
                    delete i[o.id];
                    var l = r[a.id];
                    l && (e.remove(l),
                    delete r[a.id]),
                    n.memory.geometries--
                }
                return {
                    get: function(t, e) {
                        var r = i[e.id];
                        return r || (e.addEventListener("dispose", s),
                        e.isBufferGeometry ? r = e : e.isGeometry && (void 0 === e._bufferGeometry && (e._bufferGeometry = (new Pn).setFromObject(t)),
                        r = e._bufferGeometry),
                        i[e.id] = r,
                        n.memory.geometries++,
                        r)
                    },
                    update: function(n) {
                        var i = n.index
                          , r = n.attributes;
                        for (var s in null !== i && e.update(i, t.ELEMENT_ARRAY_BUFFER),
                        r)
                            e.update(r[s], t.ARRAY_BUFFER);
                        var o = n.morphAttributes;
                        for (var s in o)
                            for (var a = o[s], c = 0, l = a.length; c < l; c++)
                                e.update(a[c], t.ARRAY_BUFFER)
                    },
                    getWireframeAttribute: function(n) {
                        var i = r[n.id];
                        if (i)
                            return i;
                        var s, o = [], a = n.index, c = n.attributes;
                        if (null !== a)
                            for (var l = 0, h = (s = a.array).length; l < h; l += 3) {
                                var p = s[l + 0]
                                  , u = s[l + 1]
                                  , d = s[l + 2];
                                o.push(p, u, u, d, d, p)
                            }
                        else
                            for (l = 0,
                            h = (s = c.position.array).length / 3 - 1; l < h; l += 3)
                                p = l + 0,
                                u = l + 1,
                                d = l + 2,
                                o.push(p, u, u, d, d, p);
                        return i = new (Ln(o) > 65535 ? Sn : Mn)(o,1),
                        e.update(i, t.ELEMENT_ARRAY_BUFFER),
                        r[n.id] = i,
                        i
                    }
                }
            }
            (y,C,M),
            O = new function(t, e) {
                var n = {};
                return {
                    update: function(i) {
                        var r = e.render.frame
                          , s = i.geometry
                          , o = t.get(i, s);
                        return n[o.id] !== r && (s.isGeometry && o.updateFromObject(i),
                        t.update(o),
                        n[o.id] = r),
                        o
                    },
                    dispose: function() {
                        n = {}
                    }
                }
            }
            (I,M),
            U = new function(t) {
                var e = {}
                  , n = new Float32Array(8);
                return {
                    update: function(i, r, s, o) {
                        var a = i.morphTargetInfluences
                          , c = a.length
                          , l = e[r.id];
                        if (void 0 === l) {
                            l = [];
                            for (var h = 0; h < c; h++)
                                l[h] = [h, 0];
                            e[r.id] = l
                        }
                        var p = s.morphTargets && r.morphAttributes.position
                          , u = s.morphNormals && r.morphAttributes.normal;
                        for (h = 0; h < c; h++)
                            0 !== (d = l[h])[1] && (p && r.removeAttribute("morphTarget" + h),
                            u && r.removeAttribute("morphNormal" + h));
                        for (h = 0; h < c; h++)
                            (d = l[h])[0] = h,
                            d[1] = a[h];
                        for (l.sort(Gn),
                        h = 0; h < 8; h++) {
                            var d;
                            if (d = l[h]) {
                                var f = d[0]
                                  , m = d[1];
                                if (m) {
                                    p && r.addAttribute("morphTarget" + h, p[f]),
                                    u && r.addAttribute("morphNormal" + h, u[f]),
                                    n[h] = m;
                                    continue
                                }
                            }
                            n[h] = 0
                        }
                        o.getUniforms().setValue(t, "morphTargetInfluences", n)
                    }
                }
            }
            (y),
            D = new Hi(G,x,w),
            k = new function() {
                var t = {};
                return {
                    get: function(e, n) {
                        var i = e.id + "," + n.id
                          , r = t[i];
                        return void 0 === r && (r = new function() {
                            var t = []
                              , e = 0
                              , n = []
                              , i = [];
                            return {
                                opaque: n,
                                transparent: i,
                                init: function() {
                                    e = 0,
                                    n.length = 0,
                                    i.length = 0
                                },
                                push: function(r, s, o, a, c) {
                                    var l = t[e];
                                    void 0 === l ? (l = {
                                        id: r.id,
                                        object: r,
                                        geometry: s,
                                        material: o,
                                        program: o.program,
                                        renderOrder: r.renderOrder,
                                        z: a,
                                        group: c
                                    },
                                    t[e] = l) : (l.id = r.id,
                                    l.object = r,
                                    l.geometry = s,
                                    l.material = o,
                                    l.program = o.program,
                                    l.renderOrder = r.renderOrder,
                                    l.z = a,
                                    l.group = c),
                                    (!0 === o.transparent ? i : n).push(l),
                                    e++
                                },
                                sort: function() {
                                    n.length > 1 && n.sort(Gi),
                                    i.length > 1 && i.sort(ji)
                                }
                            }
                        }
                        ,
                        t[i] = r),
                        r
                    },
                    dispose: function() {
                        t = {}
                    }
                }
            }
            ,
            B = new function() {
                var t = {};
                return {
                    get: function(e, n) {
                        var i;
                        return void 0 === t[e.id] ? (i = new Yi,
                        t[e.id] = {},
                        t[e.id][n.id] = i) : void 0 === t[e.id][n.id] ? (i = new Yi,
                        t[e.id][n.id] = i) : i = t[e.id][n.id],
                        i
                    },
                    dispose: function() {
                        t = {}
                    }
                }
            }
            ,
            N = new function(t, e, n, i) {
                var r, s, o, a = new rn(0), c = 0;
                function l(t, n) {
                    e.buffers.color.setClear(t.r, t.g, t.b, n, i)
                }
                return {
                    getClearColor: function() {
                        return a
                    },
                    setClearColor: function(t, e) {
                        a.set(t),
                        l(a, c = void 0 !== e ? e : 1)
                    },
                    getClearAlpha: function() {
                        return c
                    },
                    setClearAlpha: function(t) {
                        l(a, c = t)
                    },
                    render: function(e, i, h, p) {
                        var u = i.background;
                        null === u ? l(a, c) : u && u.isColor && (l(u, 1),
                        p = !0),
                        (t.autoClear || p) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                        u && u.isCubeTexture ? (void 0 === o && ((o = new Hn(new In(1,1,1),new Un({
                            uniforms: on.cube.uniforms,
                            vertexShader: on.cube.vertexShader,
                            fragmentShader: on.cube.fragmentShader,
                            side: g,
                            depthTest: !0,
                            depthWrite: !1,
                            fog: !1
                        }))).geometry.removeAttribute("normal"),
                        o.geometry.removeAttribute("uv"),
                        o.onBeforeRender = function(t, e, n) {
                            this.matrixWorld.copyPosition(n.matrixWorld)
                        }
                        ,
                        n.update(o)),
                        o.material.uniforms.tCube.value = u,
                        e.push(o, o.geometry, o.material, 0, null)) : u && u.isTexture && (void 0 === r && (r = new dn(-1,1,1,-1,0,1),
                        s = new Hn(new Dn(2,2),new Nn({
                            depthTest: !1,
                            depthWrite: !1,
                            fog: !1
                        })),
                        n.update(s)),
                        s.material.map = u,
                        t.renderBufferDirect(r, null, s.geometry, s.material, s, null))
                    }
                }
            }
            (G,b,O,p),
            z = new function(t, e, n, i) {
                var r;
                this.setMode = function(t) {
                    r = t
                }
                ,
                this.render = function(e, i) {
                    t.drawArrays(r, e, i),
                    n.update(i, r)
                }
                ,
                this.renderInstances = function(s, o, a) {
                    var c;
                    if (i.isWebGL2)
                        c = t;
                    else if (null === (c = e.get("ANGLE_instanced_arrays")))
                        return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    c[i.isWebGL2 ? "drawArraysInstanced" : "drawArraysInstancedANGLE"](r, o, a, s.maxInstancedCount),
                    n.update(a, r, s.maxInstancedCount)
                }
            }
            (y,x,M,w),
            F = new function(t, e, n, i) {
                var r, s, o;
                this.setMode = function(t) {
                    r = t
                }
                ,
                this.setIndex = function(t) {
                    s = t.type,
                    o = t.bytesPerElement
                }
                ,
                this.render = function(e, i) {
                    t.drawElements(r, i, s, e * o),
                    n.update(i, r)
                }
                ,
                this.renderInstances = function(a, c, l) {
                    var h;
                    if (i.isWebGL2)
                        h = t;
                    else if (null === (h = e.get("ANGLE_instanced_arrays")))
                        return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                    h[i.isWebGL2 ? "drawElementsInstanced" : "drawElementsInstancedANGLE"](r, l, s, c * o, a.maxInstancedCount),
                    n.update(l, r, a.maxInstancedCount)
                }
            }
            (y,x,M,w),
            M.programs = D.programs,
            G.context = y,
            G.capabilities = w,
            G.extensions = x,
            G.properties = R,
            G.renderLists = k,
            G.state = b,
            G.info = M
        }
        Et();
        var Tt = "xr"in navigator ? new function(t) {
            var e = t.context
              , n = null
              , i = null
              , r = null
              , s = null
              , o = []
              , a = [];
            function c() {
                return null !== i && null !== r
            }
            var l = new $i;
            l.layers.enable(1),
            l.viewport = new Ye;
            var h = new $i;
            h.layers.enable(2),
            h.viewport = new Ye;
            var p = new tr([l, h]);
            function u(t) {
                var e = o[a.indexOf(t.inputSource)];
                e && e.dispatchEvent({
                    type: t.type
                })
            }
            function d() {
                t.setFramebuffer(null),
                g.stop()
            }
            function f(t, e) {
                null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
                t.matrixWorldInverse.getInverse(t.matrixWorld)
            }
            p.layers.enable(1),
            p.layers.enable(2),
            this.enabled = !1,
            this.getController = function(t) {
                var e = o[t];
                return void 0 === e && ((e = new Qi).matrixAutoUpdate = !1,
                e.visible = !1,
                o[t] = e),
                e
            }
            ,
            this.getDevice = function() {
                return n
            }
            ,
            this.setDevice = function(t) {
                void 0 !== t && (n = t),
                t instanceof XRDevice && e.setCompatibleXRDevice(t)
            }
            ,
            this.setSession = function(n, s) {
                null !== (i = n) && (i.addEventListener("select", u),
                i.addEventListener("selectstart", u),
                i.addEventListener("selectend", u),
                i.addEventListener("end", d),
                i.baseLayer = new XRWebGLLayer(i,e),
                i.requestFrameOfReference(s.frameOfReferenceType).then(function(e) {
                    r = e,
                    t.setFramebuffer(i.baseLayer.framebuffer),
                    g.setContext(i),
                    g.start()
                }),
                a = i.getInputSources(),
                i.addEventListener("inputsourceschange", function() {
                    a = i.getInputSources(),
                    console.log(a)
                }))
            }
            ,
            this.getCamera = function(t) {
                if (c()) {
                    var e = t.parent
                      , n = p.cameras;
                    f(p, e);
                    for (var i = 0; i < n.length; i++)
                        f(n[i], e);
                    t.matrixWorld.copy(p.matrixWorld);
                    for (var r = t.children, s = (i = 0,
                    r.length); i < s; i++)
                        r[i].updateMatrixWorld(!0);
                    return p
                }
                return t
            }
            ,
            this.isPresenting = c;
            var m = null
              , g = new an;
            g.setAnimationLoop(function(t, e) {
                if (null !== (s = e.getDevicePose(r)))
                    for (var n = i.baseLayer, c = e.views, l = 0; l < c.length; l++) {
                        var h = c[l]
                          , u = n.getViewport(h)
                          , d = s.getViewMatrix(h)
                          , f = p.cameras[l];
                        f.matrix.fromArray(d).getInverse(f.matrix),
                        f.projectionMatrix.fromArray(h.projectionMatrix),
                        f.viewport.set(u.x, u.y, u.width, u.height),
                        0 === l && (p.matrix.copy(f.matrix),
                        p.projectionMatrix.copy(f.projectionMatrix))
                    }
                for (l = 0; l < o.length; l++) {
                    var g = o[l]
                      , v = a[l];
                    if (v) {
                        var y = e.getInputPose(v, r);
                        if (null !== y) {
                            g.matrix.elements = y.pointerMatrix,
                            g.matrix.decompose(g.position, g.rotation, g.scale),
                            g.visible = !0;
                            continue
                        }
                    }
                    g.visible = !1
                }
                m && m(t)
            }),
            this.setAnimationLoop = function(t) {
                m = t
            }
            ,
            this.dispose = function() {}
            ,
            this.getStandingMatrix = function() {
                return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),
                new THREE.Matrix4
            }
            ,
            this.submitFrame = function() {}
        }
        (G) : new er(G);
        this.vr = Tt;
        var At = new Zi(G,O,w.maxTextureSize);
        function Lt(t) {
            t.preventDefault(),
            console.log("THREE.WebGLRenderer: Context Lost."),
            j = !0
        }
        function Rt() {
            console.log("THREE.WebGLRenderer: Context Restored."),
            j = !1,
            Et()
        }
        function It(t) {
            var e = t.target;
            e.removeEventListener("dispose", It),
            function(t) {
                Ot(t),
                R.remove(t)
            }(e)
        }
        function Ot(t) {
            var e = R.get(t).program;
            t.program = void 0,
            void 0 !== e && D.releaseProgram(e)
        }
        this.shadowMap = At,
        this.getContext = function() {
            return y
        }
        ,
        this.getContextAttributes = function() {
            return y.getContextAttributes()
        }
        ,
        this.forceContextLoss = function() {
            var t = x.get("WEBGL_lose_context");
            t && t.loseContext()
        }
        ,
        this.forceContextRestore = function() {
            var t = x.get("WEBGL_lose_context");
            t && t.restoreContext()
        }
        ,
        this.getPixelRatio = function() {
            return ut
        }
        ,
        this.setPixelRatio = function(t) {
            void 0 !== t && (ut = t,
            this.setSize(ht, pt, !1))
        }
        ,
        this.getSize = function() {
            return {
                width: ht,
                height: pt
            }
        }
        ,
        this.setSize = function(t, n, i) {
            Tt.isPresenting() ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (ht = t,
            pt = n,
            e.width = t * ut,
            e.height = n * ut,
            !1 !== i && (e.style.width = t + "px",
            e.style.height = n + "px"),
            this.setViewport(0, 0, t, n))
        }
        ,
        this.getDrawingBufferSize = function() {
            return {
                width: ht * ut,
                height: pt * ut
            }
        }
        ,
        this.setDrawingBufferSize = function(t, n, i) {
            ht = t,
            pt = n,
            ut = i,
            e.width = t * i,
            e.height = n * i,
            this.setViewport(0, 0, t, n)
        }
        ,
        this.getCurrentViewport = function() {
            return ot
        }
        ,
        this.setViewport = function(t, e, n, i) {
            dt.set(t, pt - e - i, n, i),
            b.viewport(ot.copy(dt).multiplyScalar(ut))
        }
        ,
        this.setScissor = function(t, e, n, i) {
            ft.set(t, pt - e - i, n, i),
            b.scissor(at.copy(ft).multiplyScalar(ut))
        }
        ,
        this.setScissorTest = function(t) {
            b.setScissorTest(mt = t)
        }
        ,
        this.getClearColor = function() {
            return N.getClearColor()
        }
        ,
        this.setClearColor = function() {
            N.setClearColor.apply(N, arguments)
        }
        ,
        this.getClearAlpha = function() {
            return N.getClearAlpha()
        }
        ,
        this.setClearAlpha = function() {
            N.setClearAlpha.apply(N, arguments)
        }
        ,
        this.clear = function(t, e, n) {
            var i = 0;
            (void 0 === t || t) && (i |= y.COLOR_BUFFER_BIT),
            (void 0 === e || e) && (i |= y.DEPTH_BUFFER_BIT),
            (void 0 === n || n) && (i |= y.STENCIL_BUFFER_BIT),
            y.clear(i)
        }
        ,
        this.clearColor = function() {
            this.clear(!0, !1, !1)
        }
        ,
        this.clearDepth = function() {
            this.clear(!1, !0, !1)
        }
        ,
        this.clearStencil = function() {
            this.clear(!1, !1, !0)
        }
        ,
        this.clearTarget = function(t, e, n, i) {
            this.setRenderTarget(t),
            this.clear(e, n, i)
        }
        ,
        this.dispose = function() {
            e.removeEventListener("webglcontextlost", Lt, !1),
            e.removeEventListener("webglcontextrestored", Rt, !1),
            k.dispose(),
            B.dispose(),
            R.dispose(),
            O.dispose(),
            Tt.dispose(),
            kt.stop()
        }
        ,
        this.renderBufferImmediate = function(t, e) {
            b.initAttributes();
            var n = R.get(t);
            t.hasPositions && !n.position && (n.position = y.createBuffer()),
            t.hasNormals && !n.normal && (n.normal = y.createBuffer()),
            t.hasUvs && !n.uv && (n.uv = y.createBuffer()),
            t.hasColors && !n.color && (n.color = y.createBuffer());
            var i = e.getAttributes();
            t.hasPositions && (y.bindBuffer(y.ARRAY_BUFFER, n.position),
            y.bufferData(y.ARRAY_BUFFER, t.positionArray, y.DYNAMIC_DRAW),
            b.enableAttribute(i.position),
            y.vertexAttribPointer(i.position, 3, y.FLOAT, !1, 0, 0)),
            t.hasNormals && (y.bindBuffer(y.ARRAY_BUFFER, n.normal),
            y.bufferData(y.ARRAY_BUFFER, t.normalArray, y.DYNAMIC_DRAW),
            b.enableAttribute(i.normal),
            y.vertexAttribPointer(i.normal, 3, y.FLOAT, !1, 0, 0)),
            t.hasUvs && (y.bindBuffer(y.ARRAY_BUFFER, n.uv),
            y.bufferData(y.ARRAY_BUFFER, t.uvArray, y.DYNAMIC_DRAW),
            b.enableAttribute(i.uv),
            y.vertexAttribPointer(i.uv, 2, y.FLOAT, !1, 0, 0)),
            t.hasColors && (y.bindBuffer(y.ARRAY_BUFFER, n.color),
            y.bufferData(y.ARRAY_BUFFER, t.colorArray, y.DYNAMIC_DRAW),
            b.enableAttribute(i.color),
            y.vertexAttribPointer(i.color, 3, y.FLOAT, !1, 0, 0)),
            b.disableUnusedAttributes(),
            y.drawArrays(y.TRIANGLES, 0, t.count),
            t.count = 0
        }
        ,
        this.renderBufferDirect = function(t, e, n, i, r, s) {
            var o = r.isMesh && r.normalMatrix.determinant() < 0;
            b.setMaterial(i, o);
            var a = Ft(t, e, i, r)
              , c = !1;
            nt.geometry === n.id && nt.program === a.id && nt.wireframe === (!0 === i.wireframe) || (nt.geometry = n.id,
            nt.program = a.id,
            nt.wireframe = !0 === i.wireframe,
            c = !0),
            r.morphTargetInfluences && (U.update(r, n, i, a),
            c = !0);
            var l, h = n.index, p = n.attributes.position, u = 1;
            !0 === i.wireframe && (h = I.getWireframeAttribute(n),
            u = 2);
            var d = z;
            null !== h && (l = C.get(h),
            (d = F).setIndex(l)),
            c && (function(t, e, n) {
                if (n && n.isInstancedBufferGeometry & !w.isWebGL2 && null === x.get("ANGLE_instanced_arrays"))
                    console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                else {
                    b.initAttributes();
                    var i = n.attributes
                      , r = e.getAttributes()
                      , s = t.defaultAttributeValues;
                    for (var o in r) {
                        var a = r[o];
                        if (a >= 0) {
                            var c = i[o];
                            if (void 0 !== c) {
                                var l = c.normalized
                                  , h = c.itemSize
                                  , p = C.get(c);
                                if (void 0 === p)
                                    continue;
                                var u = p.buffer
                                  , d = p.type
                                  , f = p.bytesPerElement;
                                if (c.isInterleavedBufferAttribute) {
                                    var m = c.data
                                      , g = m.stride
                                      , v = c.offset;
                                    m && m.isInstancedInterleavedBuffer ? (b.enableAttributeAndDivisor(a, m.meshPerAttribute),
                                    void 0 === n.maxInstancedCount && (n.maxInstancedCount = m.meshPerAttribute * m.count)) : b.enableAttribute(a),
                                    y.bindBuffer(y.ARRAY_BUFFER, u),
                                    y.vertexAttribPointer(a, h, d, l, g * f, v * f)
                                } else
                                    c.isInstancedBufferAttribute ? (b.enableAttributeAndDivisor(a, c.meshPerAttribute),
                                    void 0 === n.maxInstancedCount && (n.maxInstancedCount = c.meshPerAttribute * c.count)) : b.enableAttribute(a),
                                    y.bindBuffer(y.ARRAY_BUFFER, u),
                                    y.vertexAttribPointer(a, h, d, l, 0, 0)
                            } else if (void 0 !== s) {
                                var M = s[o];
                                if (void 0 !== M)
                                    switch (M.length) {
                                    case 2:
                                        y.vertexAttrib2fv(a, M);
                                        break;
                                    case 3:
                                        y.vertexAttrib3fv(a, M);
                                        break;
                                    case 4:
                                        y.vertexAttrib4fv(a, M);
                                        break;
                                    default:
                                        y.vertexAttrib1fv(a, M)
                                    }
                            }
                        }
                    }
                    b.disableUnusedAttributes()
                }
            }(i, a, n),
            null !== h && y.bindBuffer(y.ELEMENT_ARRAY_BUFFER, l.buffer));
            var f = 1 / 0;
            null !== h ? f = h.count : void 0 !== p && (f = p.count);
            var m = n.drawRange.start * u
              , g = n.drawRange.count * u
              , v = null !== s ? s.start * u : 0
              , M = null !== s ? s.count * u : 1 / 0
              , _ = Math.max(m, v)
              , S = Math.min(f, m + g, v + M) - 1
              , E = Math.max(0, S - _ + 1);
            if (0 !== E) {
                if (r.isMesh)
                    if (!0 === i.wireframe)
                        b.setLineWidth(i.wireframeLinewidth * Mt()),
                        d.setMode(y.LINES);
                    else
                        switch (r.drawMode) {
                        case Me:
                            d.setMode(y.TRIANGLES);
                            break;
                        case _e:
                            d.setMode(y.TRIANGLE_STRIP);
                            break;
                        case Se:
                            d.setMode(y.TRIANGLE_FAN)
                        }
                else if (r.isLine) {
                    var T = i.linewidth;
                    void 0 === T && (T = 1),
                    b.setLineWidth(T * Mt()),
                    r.isLineSegments ? d.setMode(y.LINES) : r.isLineLoop ? d.setMode(y.LINE_LOOP) : d.setMode(y.LINE_STRIP)
                } else
                    r.isPoints ? d.setMode(y.POINTS) : r.isSprite && d.setMode(y.TRIANGLES);
                n && n.isInstancedBufferGeometry ? n.maxInstancedCount > 0 && d.renderInstances(n, _, E) : d.render(_, E)
            }
        }
        ,
        this.compile = function(t, e) {
            (m = B.get(t, e)).init(),
            t.traverse(function(t) {
                t.isLight && (m.pushLight(t),
                t.castShadow && m.pushShadow(t))
            }),
            m.setupLights(e),
            t.traverse(function(e) {
                if (e.material)
                    if (Array.isArray(e.material))
                        for (var n = 0; n < e.material.length; n++)
                            zt(e.material[n], t.fog, e);
                    else
                        zt(e.material, t.fog, e)
            })
        }
        ;
        var Dt = null
          , kt = new an;
        function Bt(t, e, n, i) {
            for (var r = 0, s = t.length; r < s; r++) {
                var o = t[r]
                  , a = o.object
                  , c = o.geometry
                  , l = void 0 === i ? o.material : i
                  , h = o.group;
                if (n.isArrayCamera) {
                    st = n;
                    for (var p = n.cameras, u = 0, d = p.length; u < d; u++) {
                        var f = p[u];
                        if (a.layers.test(f.layers)) {
                            if ("viewport"in f)
                                b.viewport(ot.copy(f.viewport));
                            else {
                                var m = f.bounds
                                  , g = m.x * ht
                                  , v = m.y * pt
                                  , y = m.z * ht
                                  , x = m.w * pt;
                                b.viewport(ot.set(g, v, y, x).multiplyScalar(ut))
                            }
                            Nt(a, e, f, c, l, h)
                        }
                    }
                } else
                    st = null,
                    Nt(a, e, n, c, l, h)
            }
        }
        function Nt(t, e, n, i, r, s) {
            if (t.onBeforeRender(G, e, n, i, r, s),
            m = B.get(e, st || n),
            t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld),
            t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
            t.isImmediateRenderObject) {
                b.setMaterial(r);
                var o = Ft(n, e.fog, r, t);
                nt.geometry = null,
                nt.program = null,
                nt.wireframe = !1,
                function(t, e) {
                    t.render(function(t) {
                        G.renderBufferImmediate(t, e)
                    })
                }(t, o)
            } else
                G.renderBufferDirect(n, e.fog, i, r, t, s);
            t.onAfterRender(G, e, n, i, r, s),
            m = B.get(e, st || n)
        }
        function zt(t, e, n) {
            var i = R.get(t)
              , r = m.state.lights
              , s = m.state.shadowsArray
              , o = i.lightsHash
              , a = r.state.hash
              , c = D.getParameters(t, r.state, s, e, vt.numPlanes, vt.numIntersection, n)
              , l = D.getProgramCode(t, c)
              , h = i.program
              , p = !0;
            if (void 0 === h)
                t.addEventListener("dispose", It);
            else if (h.code !== l)
                Ot(t);
            else if (o.stateID !== a.stateID || o.directionalLength !== a.directionalLength || o.pointLength !== a.pointLength || o.spotLength !== a.spotLength || o.rectAreaLength !== a.rectAreaLength || o.hemiLength !== a.hemiLength || o.shadowsLength !== a.shadowsLength)
                o.stateID = a.stateID,
                o.directionalLength = a.directionalLength,
                o.pointLength = a.pointLength,
                o.spotLength = a.spotLength,
                o.rectAreaLength = a.rectAreaLength,
                o.hemiLength = a.hemiLength,
                o.shadowsLength = a.shadowsLength,
                p = !1;
            else {
                if (void 0 !== c.shaderID)
                    return;
                p = !1
            }
            if (p) {
                if (c.shaderID) {
                    var u = on[c.shaderID];
                    i.shader = {
                        name: t.type,
                        uniforms: en.clone(u.uniforms),
                        vertexShader: u.vertexShader,
                        fragmentShader: u.fragmentShader
                    }
                } else
                    i.shader = {
                        name: t.type,
                        uniforms: t.uniforms,
                        vertexShader: t.vertexShader,
                        fragmentShader: t.fragmentShader
                    };
                t.onBeforeCompile(i.shader, G),
                l = D.getProgramCode(t, c),
                h = D.acquireProgram(t, i.shader, c, l),
                i.program = h,
                t.program = h
            }
            var d = h.getAttributes();
            if (t.morphTargets) {
                t.numSupportedMorphTargets = 0;
                for (var f = 0; f < G.maxMorphTargets; f++)
                    d["morphTarget" + f] >= 0 && t.numSupportedMorphTargets++
            }
            if (t.morphNormals)
                for (t.numSupportedMorphNormals = 0,
                f = 0; f < G.maxMorphNormals; f++)
                    d["morphNormal" + f] >= 0 && t.numSupportedMorphNormals++;
            var g = i.shader.uniforms;
            (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (i.numClippingPlanes = vt.numPlanes,
            i.numIntersection = vt.numIntersection,
            g.clippingPlanes = vt.uniform),
            i.fog = e,
            void 0 === o && (i.lightsHash = o = {}),
            o.stateID = a.stateID,
            o.directionalLength = a.directionalLength,
            o.pointLength = a.pointLength,
            o.spotLength = a.spotLength,
            o.rectAreaLength = a.rectAreaLength,
            o.hemiLength = a.hemiLength,
            o.shadowsLength = a.shadowsLength,
            t.lights && (g.ambientLightColor.value = r.state.ambient,
            g.directionalLights.value = r.state.directional,
            g.spotLights.value = r.state.spot,
            g.rectAreaLights.value = r.state.rectArea,
            g.pointLights.value = r.state.point,
            g.hemisphereLights.value = r.state.hemi,
            g.directionalShadowMap.value = r.state.directionalShadowMap,
            g.directionalShadowMatrix.value = r.state.directionalShadowMatrix,
            g.spotShadowMap.value = r.state.spotShadowMap,
            g.spotShadowMatrix.value = r.state.spotShadowMatrix,
            g.pointShadowMap.value = r.state.pointShadowMap,
            g.pointShadowMatrix.value = r.state.pointShadowMatrix);
            var v = i.program.getUniforms()
              , y = Ci.seqWithValue(v.seq, g);
            i.uniformsList = y
        }
        function Ft(t, e, n, i) {
            lt = 0;
            var r = R.get(n)
              , s = m.state.lights
              , o = r.lightsHash
              , a = s.state.hash;
            if (yt && (xt || t !== rt)) {
                var c = t === rt && n.id === et;
                vt.setState(n.clippingPlanes, n.clipIntersection, n.clipShadows, t, r, c)
            }
            !1 === n.needsUpdate && (void 0 === r.program ? n.needsUpdate = !0 : n.fog && r.fog !== e ? n.needsUpdate = !0 : (!n.lights || o.stateID === a.stateID && o.directionalLength === a.directionalLength && o.pointLength === a.pointLength && o.spotLength === a.spotLength && o.rectAreaLength === a.rectAreaLength && o.hemiLength === a.hemiLength && o.shadowsLength === a.shadowsLength) && (void 0 === r.numClippingPlanes || r.numClippingPlanes === vt.numPlanes && r.numIntersection === vt.numIntersection) || (n.needsUpdate = !0)),
            n.needsUpdate && (zt(n, e, i),
            n.needsUpdate = !1);
            var l = !1
              , h = !1
              , p = !1
              , u = r.program
              , d = u.getUniforms()
              , f = r.shader.uniforms;
            if (b.useProgram(u.program) && (l = !0,
            h = !0,
            p = !0),
            n.id !== et && (et = n.id,
            h = !0),
            l || t !== rt) {
                if (d.setValue(y, "projectionMatrix", t.projectionMatrix),
                w.logarithmicDepthBuffer && d.setValue(y, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                rt !== (st || t) && (rt = st || t,
                h = !0,
                p = !0),
                n.isShaderMaterial || n.isMeshPhongMaterial || n.isMeshStandardMaterial || n.envMap) {
                    var v = d.map.cameraPosition;
                    void 0 !== v && v.setValue(y, bt.setFromMatrixPosition(t.matrixWorld))
                }
                (n.isMeshPhongMaterial || n.isMeshLambertMaterial || n.isMeshBasicMaterial || n.isMeshStandardMaterial || n.isShaderMaterial || n.skinning) && d.setValue(y, "viewMatrix", t.matrixWorldInverse)
            }
            if (n.skinning) {
                d.setOptional(y, i, "bindMatrix"),
                d.setOptional(y, i, "bindMatrixInverse");
                var x = i.skeleton;
                if (x) {
                    var M = x.bones;
                    if (w.floatVertexTextures) {
                        if (void 0 === x.boneTexture) {
                            var _ = Math.sqrt(4 * M.length);
                            _ = Ne.ceilPowerOfTwo(_),
                            _ = Math.max(_, 4);
                            var S = new Float32Array(_ * _ * 4);
                            S.set(x.boneMatrices);
                            var E = new Ze(S,_,_,Ut,Pt);
                            E.needsUpdate = !0,
                            x.boneMatrices = S,
                            x.boneTexture = E,
                            x.boneTextureSize = _
                        }
                        d.setValue(y, "boneTexture", x.boneTexture),
                        d.setValue(y, "boneTextureSize", x.boneTextureSize)
                    } else
                        d.setOptional(y, x, "boneMatrices")
                }
            }
            return h && (d.setValue(y, "toneMappingExposure", G.toneMappingExposure),
            d.setValue(y, "toneMappingWhitePoint", G.toneMappingWhitePoint),
            n.lights && function(t, e) {
                t.ambientLightColor.needsUpdate = e,
                t.directionalLights.needsUpdate = e,
                t.pointLights.needsUpdate = e,
                t.spotLights.needsUpdate = e,
                t.rectAreaLights.needsUpdate = e,
                t.hemisphereLights.needsUpdate = e
            }(f, p),
            e && n.fog && function(t, e) {
                t.fogColor.value = e.color,
                e.isFog ? (t.fogNear.value = e.near,
                t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
            }(f, e),
            n.isMeshBasicMaterial ? Ht(f, n) : n.isMeshLambertMaterial ? (Ht(f, n),
            function(t, e) {
                e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
            }(f, n)) : n.isMeshPhongMaterial ? (Ht(f, n),
            n.isMeshToonMaterial ? function(t, e) {
                Gt(t, e),
                e.gradientMap && (t.gradientMap.value = e.gradientMap)
            }(f, n) : Gt(f, n)) : n.isMeshStandardMaterial ? (Ht(f, n),
            n.isMeshPhysicalMaterial ? function(t, e) {
                jt(t, e),
                t.reflectivity.value = e.reflectivity,
                t.clearCoat.value = e.clearCoat,
                t.clearCoatRoughness.value = e.clearCoatRoughness
            }(f, n) : jt(f, n)) : n.isMeshDepthMaterial ? (Ht(f, n),
            function(t, e) {
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                t.displacementScale.value = e.displacementScale,
                t.displacementBias.value = e.displacementBias)
            }(f, n)) : n.isMeshDistanceMaterial ? (Ht(f, n),
            function(t, e) {
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                t.displacementScale.value = e.displacementScale,
                t.displacementBias.value = e.displacementBias),
                t.referencePosition.value.copy(e.referencePosition),
                t.nearDistance.value = e.nearDistance,
                t.farDistance.value = e.farDistance
            }(f, n)) : n.isMeshNormalMaterial ? (Ht(f, n),
            function(t, e) {
                e.bumpMap && (t.bumpMap.value = e.bumpMap,
                t.bumpScale.value = e.bumpScale,
                e.side === g && (t.bumpScale.value *= -1)),
                e.normalMap && (t.normalMap.value = e.normalMap,
                t.normalScale.value.copy(e.normalScale),
                e.side === g && t.normalScale.value.negate()),
                e.displacementMap && (t.displacementMap.value = e.displacementMap,
                t.displacementScale.value = e.displacementScale,
                t.displacementBias.value = e.displacementBias)
            }(f, n)) : n.isLineBasicMaterial ? (function(t, e) {
                t.diffuse.value = e.color,
                t.opacity.value = e.opacity
            }(f, n),
            n.isLineDashedMaterial && function(t, e) {
                t.dashSize.value = e.dashSize,
                t.totalSize.value = e.dashSize + e.gapSize,
                t.scale.value = e.scale
            }(f, n)) : n.isPointsMaterial ? function(t, e) {
                t.diffuse.value = e.color,
                t.opacity.value = e.opacity,
                t.size.value = e.size * ut,
                t.scale.value = .5 * pt,
                t.map.value = e.map,
                null !== e.map && (!0 === e.map.matrixAutoUpdate && e.map.updateMatrix(),
                t.uvTransform.value.copy(e.map.matrix))
            }(f, n) : n.isSpriteMaterial ? function(t, e) {
                t.diffuse.value = e.color,
                t.opacity.value = e.opacity,
                t.rotation.value = e.rotation,
                t.map.value = e.map,
                null !== e.map && (!0 === e.map.matrixAutoUpdate && e.map.updateMatrix(),
                t.uvTransform.value.copy(e.map.matrix))
            }(f, n) : n.isShadowMaterial && (f.color.value = n.color,
            f.opacity.value = n.opacity),
            void 0 !== f.ltc_1 && (f.ltc_1.value = sn.LTC_1),
            void 0 !== f.ltc_2 && (f.ltc_2.value = sn.LTC_2),
            Ci.upload(y, r.uniformsList, f, G)),
            n.isShaderMaterial && !0 === n.uniformsNeedUpdate && (Ci.upload(y, r.uniformsList, f, G),
            n.uniformsNeedUpdate = !1),
            n.isSpriteMaterial && d.setValue(y, "center", i.center),
            d.setValue(y, "modelViewMatrix", i.modelViewMatrix),
            d.setValue(y, "normalMatrix", i.normalMatrix),
            d.setValue(y, "modelMatrix", i.matrixWorld),
            u
        }
        function Ht(t, e) {
            var n;
            t.opacity.value = e.opacity,
            e.color && (t.diffuse.value = e.color),
            e.emissive && t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),
            e.map && (t.map.value = e.map),
            e.alphaMap && (t.alphaMap.value = e.alphaMap),
            e.specularMap && (t.specularMap.value = e.specularMap),
            e.envMap && (t.envMap.value = e.envMap,
            t.flipEnvMap.value = e.envMap && e.envMap.isCubeTexture ? -1 : 1,
            t.reflectivity.value = e.reflectivity,
            t.refractionRatio.value = e.refractionRatio,
            t.maxMipLevel.value = R.get(e.envMap).__maxMipLevel),
            e.lightMap && (t.lightMap.value = e.lightMap,
            t.lightMapIntensity.value = e.lightMapIntensity),
            e.aoMap && (t.aoMap.value = e.aoMap,
            t.aoMapIntensity.value = e.aoMapIntensity),
            e.map ? n = e.map : e.specularMap ? n = e.specularMap : e.displacementMap ? n = e.displacementMap : e.normalMap ? n = e.normalMap : e.bumpMap ? n = e.bumpMap : e.roughnessMap ? n = e.roughnessMap : e.metalnessMap ? n = e.metalnessMap : e.alphaMap ? n = e.alphaMap : e.emissiveMap && (n = e.emissiveMap),
            void 0 !== n && (n.isWebGLRenderTarget && (n = n.texture),
            !0 === n.matrixAutoUpdate && n.updateMatrix(),
            t.uvTransform.value.copy(n.matrix))
        }
        function Gt(t, e) {
            t.specular.value = e.specular,
            t.shininess.value = Math.max(e.shininess, 1e-4),
            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
            e.bumpMap && (t.bumpMap.value = e.bumpMap,
            t.bumpScale.value = e.bumpScale,
            e.side === g && (t.bumpScale.value *= -1)),
            e.normalMap && (t.normalMap.value = e.normalMap,
            t.normalScale.value.copy(e.normalScale),
            e.side === g && t.normalScale.value.negate()),
            e.displacementMap && (t.displacementMap.value = e.displacementMap,
            t.displacementScale.value = e.displacementScale,
            t.displacementBias.value = e.displacementBias)
        }
        function jt(t, e) {
            t.roughness.value = e.roughness,
            t.metalness.value = e.metalness,
            e.roughnessMap && (t.roughnessMap.value = e.roughnessMap),
            e.metalnessMap && (t.metalnessMap.value = e.metalnessMap),
            e.emissiveMap && (t.emissiveMap.value = e.emissiveMap),
            e.bumpMap && (t.bumpMap.value = e.bumpMap,
            t.bumpScale.value = e.bumpScale,
            e.side === g && (t.bumpScale.value *= -1)),
            e.normalMap && (t.normalMap.value = e.normalMap,
            t.normalScale.value.copy(e.normalScale),
            e.side === g && t.normalScale.value.negate()),
            e.displacementMap && (t.displacementMap.value = e.displacementMap,
            t.displacementScale.value = e.displacementScale,
            t.displacementBias.value = e.displacementBias),
            e.envMap && (t.envMapIntensity.value = e.envMapIntensity)
        }
        kt.setAnimationLoop(function(t) {
            Tt.isPresenting() || Dt && Dt(t)
        }),
        "undefined" != typeof window && kt.setContext(window),
        this.setAnimationLoop = function(t) {
            Dt = t,
            Tt.setAnimationLoop(t),
            kt.start()
        }
        ,
        this.render = function(t, e, n, i) {
            if (e && e.isCamera) {
                if (!j) {
                    nt.geometry = null,
                    nt.program = null,
                    nt.wireframe = !1,
                    et = -1,
                    rt = null,
                    !0 === t.autoUpdate && t.updateMatrixWorld(),
                    null === e.parent && e.updateMatrixWorld(),
                    Tt.enabled && (e = Tt.getCamera(e)),
                    (m = B.get(t, e)).init(),
                    t.onBeforeRender(G, t, e, n),
                    wt.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                    gt.setFromMatrix(wt),
                    xt = this.localClippingEnabled,
                    yt = vt.init(this.clippingPlanes, xt, e),
                    (f = k.get(t, e)).init(),
                    function t(e, n, i) {
                        if (!1 !== e.visible) {
                            if (e.layers.test(n.layers))
                                if (e.isLight)
                                    m.pushLight(e),
                                    e.castShadow && m.pushShadow(e);
                                else if (e.isSprite) {
                                    if (!e.frustumCulled || gt.intersectsSprite(e)) {
                                        i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt);
                                        var r = O.update(e)
                                          , s = e.material;
                                        f.push(e, r, s, bt.z, null)
                                    }
                                } else if (e.isImmediateRenderObject)
                                    i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt),
                                    f.push(e, null, e.material, bt.z, null);
                                else if ((e.isMesh || e.isLine || e.isPoints) && (e.isSkinnedMesh && e.skeleton.update(),
                                !e.frustumCulled || gt.intersectsObject(e))) {
                                    i && bt.setFromMatrixPosition(e.matrixWorld).applyMatrix4(wt);
                                    r = O.update(e),
                                    s = e.material;
                                    if (Array.isArray(s))
                                        for (var o = r.groups, a = 0, c = o.length; a < c; a++) {
                                            var l = o[a]
                                              , h = s[l.materialIndex];
                                            h && h.visible && f.push(e, r, h, bt.z, l)
                                        }
                                    else
                                        s.visible && f.push(e, r, s, bt.z, null)
                                }
                            var p = e.children;
                            for (a = 0,
                            c = p.length; a < c; a++)
                                t(p[a], n, i)
                        }
                    }(t, e, G.sortObjects),
                    !0 === G.sortObjects && f.sort(),
                    yt && vt.beginShadows();
                    var r = m.state.shadowsArray;
                    At.render(r, t, e),
                    m.setupLights(e),
                    yt && vt.endShadows(),
                    this.info.autoReset && this.info.reset(),
                    void 0 === n && (n = null),
                    this.setRenderTarget(n),
                    N.render(f, t, e, i);
                    var s = f.opaque
                      , o = f.transparent;
                    if (t.overrideMaterial) {
                        var a = t.overrideMaterial;
                        s.length && Bt(s, t, e, a),
                        o.length && Bt(o, t, e, a)
                    } else
                        s.length && Bt(s, t, e),
                        o.length && Bt(o, t, e);
                    n && P.updateRenderTargetMipmap(n),
                    b.buffers.depth.setTest(!0),
                    b.buffers.depth.setMask(!0),
                    b.buffers.color.setMask(!0),
                    b.setPolygonOffset(!1),
                    t.onAfterRender(G, t, e),
                    Tt.enabled && Tt.submitFrame(),
                    f = null,
                    m = null
                }
            } else
                console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")
        }
        ,
        this.allocTextureUnit = function() {
            var t = lt;
            return t >= w.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + t + " texture units while this GPU supports only " + w.maxTextures),
            lt += 1,
            t
        }
        ,
        this.setTexture2D = function() {
            var t = !1;
            return function(e, n) {
                e && e.isWebGLRenderTarget && (t || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),
                t = !0),
                e = e.texture),
                P.setTexture2D(e, n)
            }
        }(),
        this.setTexture = function() {
            var t = !1;
            return function(e, n) {
                t || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),
                t = !0),
                P.setTexture2D(e, n)
            }
        }(),
        this.setTextureCube = function() {
            var t = !1;
            return function(e, n) {
                e && e.isWebGLRenderTargetCube && (t || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
                t = !0),
                e = e.texture),
                e && e.isCubeTexture || Array.isArray(e.image) && 6 === e.image.length ? P.setTextureCube(e, n) : P.setTextureCubeDynamic(e, n)
            }
        }(),
        this.setFramebuffer = function(t) {
            V = t
        }
        ,
        this.getRenderTarget = function() {
            return $
        }
        ,
        this.setRenderTarget = function(t) {
            $ = t,
            t && void 0 === R.get(t).__webglFramebuffer && P.setupRenderTarget(t);
            var e = V
              , n = !1;
            if (t) {
                var i = R.get(t).__webglFramebuffer;
                t.isWebGLRenderTargetCube ? (e = i[t.activeCubeFace],
                n = !0) : e = i,
                ot.copy(t.viewport),
                at.copy(t.scissor),
                ct = t.scissorTest
            } else
                ot.copy(dt).multiplyScalar(ut),
                at.copy(ft).multiplyScalar(ut),
                ct = mt;
            if (tt !== e && (y.bindFramebuffer(y.FRAMEBUFFER, e),
            tt = e),
            b.viewport(ot),
            b.scissor(at),
            b.setScissorTest(ct),
            n) {
                var r = R.get(t.texture);
                y.framebufferTexture2D(y.FRAMEBUFFER, y.COLOR_ATTACHMENT0, y.TEXTURE_CUBE_MAP_POSITIVE_X + t.activeCubeFace, r.__webglTexture, t.activeMipMapLevel)
            }
        }
        ,
        this.readRenderTargetPixels = function(t, e, n, i, r, s) {
            if (t && t.isWebGLRenderTarget) {
                var o = R.get(t).__webglFramebuffer;
                if (o) {
                    var a = !1;
                    o !== tt && (y.bindFramebuffer(y.FRAMEBUFFER, o),
                    a = !0);
                    try {
                        var c = t.texture
                          , l = c.format
                          , h = c.type;
                        if (l !== Ut && H.convert(l) !== y.getParameter(y.IMPLEMENTATION_COLOR_READ_FORMAT))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        if (!(h === St || H.convert(h) === y.getParameter(y.IMPLEMENTATION_COLOR_READ_TYPE) || h === Pt && (w.isWebGL2 || x.get("OES_texture_float") || x.get("WEBGL_color_buffer_float")) || h === Ct && (w.isWebGL2 ? x.get("EXT_color_buffer_float") : x.get("EXT_color_buffer_half_float"))))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        y.checkFramebufferStatus(y.FRAMEBUFFER) === y.FRAMEBUFFER_COMPLETE ? e >= 0 && e <= t.width - i && n >= 0 && n <= t.height - r && y.readPixels(e, n, i, r, H.convert(l), H.convert(h), s) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                    } finally {
                        a && y.bindFramebuffer(y.FRAMEBUFFER, tt)
                    }
                }
            } else
                console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")
        }
        ,
        this.copyFramebufferToTexture = function(t, e, n) {
            var i = e.image.width
              , r = e.image.height
              , s = H.convert(e.format);
            this.setTexture2D(e, 0),
            y.copyTexImage2D(y.TEXTURE_2D, n || 0, s, t.x, t.y, i, r, 0)
        }
        ,
        this.copyTextureToTexture = function(t, e, n, i) {
            var r = e.image.width
              , s = e.image.height
              , o = H.convert(n.format)
              , a = H.convert(n.type);
            this.setTexture2D(n, 0),
            e.isDataTexture ? y.texSubImage2D(y.TEXTURE_2D, i || 0, t.x, t.y, r, s, o, a, e.image.data) : y.texSubImage2D(y.TEXTURE_2D, i || 0, t.x, t.y, o, a, e.image)
        }
    }
    function ir(t, e) {
        this.name = "",
        this.color = new rn(t),
        this.density = void 0 !== e ? e : 25e-5
    }
    function rr(t, e, n) {
        this.name = "",
        this.color = new rn(t),
        this.near = void 0 !== e ? e : 1,
        this.far = void 0 !== n ? n : 1e3
    }
    function sr() {
        pn.call(this),
        this.type = "Scene",
        this.background = null,
        this.fog = null,
        this.overrideMaterial = null,
        this.autoUpdate = !0
    }
    function or(t, e) {
        this.array = t,
        this.stride = e,
        this.count = void 0 !== t ? t.length / e : 0,
        this.dynamic = !1,
        this.updateRange = {
            offset: 0,
            count: -1
        },
        this.version = 0
    }
    function ar(t, e, n, i) {
        this.data = t,
        this.itemSize = e,
        this.offset = n,
        this.normalized = !0 === i
    }
    function cr(t) {
        Bn.call(this),
        this.type = "SpriteMaterial",
        this.color = new rn(16777215),
        this.map = null,
        this.rotation = 0,
        this.lights = !1,
        this.transparent = !0,
        this.setValues(t)
    }
    function lr(t) {
        if (pn.call(this),
        this.type = "Sprite",
        void 0 === Vi) {
            Vi = new Pn;
            var e = new or(new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]),5);
            Vi.setIndex([0, 1, 2, 0, 2, 3]),
            Vi.addAttribute("position", new ar(e,3,0,!1)),
            Vi.addAttribute("uv", new ar(e,2,3,!1))
        }
        this.geometry = Vi,
        this.material = void 0 !== t ? t : new cr,
        this.center = new Ue(.5,.5)
    }
    function hr() {
        pn.call(this),
        this.type = "LOD",
        Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            }
        })
    }
    function pr(t, e) {
        if (t = t || [],
        this.bones = t.slice(0),
        this.boneMatrices = new Float32Array(16 * this.bones.length),
        void 0 === e)
            this.calculateInverses();
        else if (this.bones.length === e.length)
            this.boneInverses = e.slice(0);
        else {
            console.warn("THREE.Skeleton boneInverses is the wrong length."),
            this.boneInverses = [];
            for (var n = 0, i = this.bones.length; n < i; n++)
                this.boneInverses.push(new ze)
        }
    }
    function ur() {
        pn.call(this),
        this.type = "Bone"
    }
    function dr(t, e) {
        Hn.call(this, t, e),
        this.type = "SkinnedMesh",
        this.bindMode = "attached",
        this.bindMatrix = new ze,
        this.bindMatrixInverse = new ze;
        var n = new pr(this.initBones());
        this.bind(n, this.matrixWorld),
        this.normalizeSkinWeights()
    }
    function fr(t) {
        Bn.call(this),
        this.type = "LineBasicMaterial",
        this.color = new rn(16777215),
        this.linewidth = 1,
        this.linecap = "round",
        this.linejoin = "round",
        this.lights = !1,
        this.setValues(t)
    }
    function mr(t, e, n) {
        1 === n && console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),
        pn.call(this),
        this.type = "Line",
        this.geometry = void 0 !== t ? t : new Pn,
        this.material = void 0 !== e ? e : new fr({
            color: 16777215 * Math.random()
        })
    }
    function gr(t, e) {
        mr.call(this, t, e),
        this.type = "LineSegments"
    }
    function vr(t, e) {
        mr.call(this, t, e),
        this.type = "LineLoop"
    }
    function yr(t) {
        Bn.call(this),
        this.type = "PointsMaterial",
        this.color = new rn(16777215),
        this.map = null,
        this.size = 1,
        this.sizeAttenuation = !0,
        this.morphTargets = !1,
        this.lights = !1,
        this.setValues(t)
    }
    function xr(t, e) {
        pn.call(this),
        this.type = "Points",
        this.geometry = void 0 !== t ? t : new Pn,
        this.material = void 0 !== e ? e : new yr({
            color: 16777215 * Math.random()
        })
    }
    function wr(t, e, n, i, r, s, o, a, c) {
        We.call(this, t, e, n, i, r, s, o, a, c),
        this.generateMipmaps = !1
    }
    function br(t, e, n, i, r, s, o, a, c, l, h, p) {
        We.call(this, null, s, o, a, c, l, i, r, h, p),
        this.image = {
            width: e,
            height: n
        },
        this.mipmaps = t,
        this.flipY = !1,
        this.generateMipmaps = !1
    }
    function Mr(t, e, n, i, r, s, o, a, c) {
        We.call(this, t, e, n, i, r, s, o, a, c),
        this.needsUpdate = !0
    }
    function _r(t, e, n, i, r, s, o, a, c, l) {
        if ((l = void 0 !== l ? l : Gt) !== Gt && l !== jt)
            throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
        void 0 === n && l === Gt && (n = At),
        void 0 === n && l === jt && (n = kt),
        We.call(this, null, i, r, s, o, a, l, n, c),
        this.image = {
            width: t,
            height: e
        },
        this.magFilter = void 0 !== o ? o : yt,
        this.minFilter = void 0 !== a ? a : yt,
        this.flipY = !1,
        this.generateMipmaps = !1
    }
    function Sr(t) {
        Pn.call(this),
        this.type = "WireframeGeometry";
        var e, n, i, r, s, o, a, c, l, h, p = [], u = [0, 0], d = {}, f = ["a", "b", "c"];
        if (t && t.isGeometry) {
            var m = t.faces;
            for (e = 0,
            i = m.length; e < i; e++) {
                var g = m[e];
                for (n = 0; n < 3; n++)
                    a = g[f[n]],
                    c = g[f[(n + 1) % 3]],
                    u[0] = Math.min(a, c),
                    u[1] = Math.max(a, c),
                    void 0 === d[l = u[0] + "," + u[1]] && (d[l] = {
                        index1: u[0],
                        index2: u[1]
                    })
            }
            for (l in d)
                o = d[l],
                h = t.vertices[o.index1],
                p.push(h.x, h.y, h.z),
                h = t.vertices[o.index2],
                p.push(h.x, h.y, h.z)
        } else if (t && t.isBufferGeometry) {
            var v, y, x, w, b, M, _;
            if (h = new He,
            null !== t.index) {
                for (v = t.attributes.position,
                y = t.index,
                0 === (x = t.groups).length && (x = [{
                    start: 0,
                    count: y.count,
                    materialIndex: 0
                }]),
                r = 0,
                s = x.length; r < s; ++r)
                    for (e = b = (w = x[r]).start,
                    i = b + w.count; e < i; e += 3)
                        for (n = 0; n < 3; n++)
                            a = y.getX(e + n),
                            c = y.getX(e + (n + 1) % 3),
                            u[0] = Math.min(a, c),
                            u[1] = Math.max(a, c),
                            void 0 === d[l = u[0] + "," + u[1]] && (d[l] = {
                                index1: u[0],
                                index2: u[1]
                            });
                for (l in d)
                    o = d[l],
                    h.fromBufferAttribute(v, o.index1),
                    p.push(h.x, h.y, h.z),
                    h.fromBufferAttribute(v, o.index2),
                    p.push(h.x, h.y, h.z)
            } else
                for (e = 0,
                i = (v = t.attributes.position).count / 3; e < i; e++)
                    for (n = 0; n < 3; n++)
                        M = 3 * e + n,
                        h.fromBufferAttribute(v, M),
                        p.push(h.x, h.y, h.z),
                        _ = 3 * e + (n + 1) % 3,
                        h.fromBufferAttribute(v, _),
                        p.push(h.x, h.y, h.z)
        }
        this.addAttribute("position", new En(p,3))
    }
    function Er(t, e, n) {
        gn.call(this),
        this.type = "ParametricGeometry",
        this.parameters = {
            func: t,
            slices: e,
            stacks: n
        },
        this.fromBufferGeometry(new Tr(t,e,n)),
        this.mergeVertices()
    }
    function Tr(t, e, n) {
        Pn.call(this),
        this.type = "ParametricBufferGeometry",
        this.parameters = {
            func: t,
            slices: e,
            stacks: n
        };
        var i, r, s = [], o = [], a = [], c = [], l = new He, h = new He, p = new He, u = new He, d = new He;
        t.length < 3 && console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
        var f = e + 1;
        for (i = 0; i <= n; i++) {
            var m = i / n;
            for (r = 0; r <= e; r++) {
                var g = r / e;
                t(g, m, h),
                o.push(h.x, h.y, h.z),
                g - 1e-5 >= 0 ? (t(g - 1e-5, m, p),
                u.subVectors(h, p)) : (t(g + 1e-5, m, p),
                u.subVectors(p, h)),
                m - 1e-5 >= 0 ? (t(g, m - 1e-5, p),
                d.subVectors(h, p)) : (t(g, m + 1e-5, p),
                d.subVectors(p, h)),
                l.crossVectors(u, d).normalize(),
                a.push(l.x, l.y, l.z),
                c.push(g, m)
            }
        }
        for (i = 0; i < n; i++)
            for (r = 0; r < e; r++) {
                var v = i * f + r
                  , y = i * f + r + 1
                  , x = (i + 1) * f + r + 1
                  , w = (i + 1) * f + r;
                s.push(v, y, w),
                s.push(y, x, w)
            }
        this.setIndex(s),
        this.addAttribute("position", new En(o,3)),
        this.addAttribute("normal", new En(a,3)),
        this.addAttribute("uv", new En(c,2))
    }
    function Ar(t, e, n, i) {
        gn.call(this),
        this.type = "PolyhedronGeometry",
        this.parameters = {
            vertices: t,
            indices: e,
            radius: n,
            detail: i
        },
        this.fromBufferGeometry(new Lr(t,e,n,i)),
        this.mergeVertices()
    }
    function Lr(t, e, n, i) {
        Pn.call(this),
        this.type = "PolyhedronBufferGeometry",
        this.parameters = {
            vertices: t,
            indices: e,
            radius: n,
            detail: i
        },
        n = n || 1;
        var r = []
          , s = [];
        function o(t, e, n, i) {
            var r, s, o = Math.pow(2, i), c = [];
            for (r = 0; r <= o; r++) {
                c[r] = [];
                var l = t.clone().lerp(n, r / o)
                  , h = e.clone().lerp(n, r / o)
                  , p = o - r;
                for (s = 0; s <= p; s++)
                    c[r][s] = 0 === s && r === o ? l : l.clone().lerp(h, s / p)
            }
            for (r = 0; r < o; r++)
                for (s = 0; s < 2 * (o - r) - 1; s++) {
                    var u = Math.floor(s / 2);
                    s % 2 == 0 ? (a(c[r][u + 1]),
                    a(c[r + 1][u]),
                    a(c[r][u])) : (a(c[r][u + 1]),
                    a(c[r + 1][u + 1]),
                    a(c[r + 1][u]))
                }
        }
        function a(t) {
            r.push(t.x, t.y, t.z)
        }
        function c(e, n) {
            var i = 3 * e;
            n.x = t[i + 0],
            n.y = t[i + 1],
            n.z = t[i + 2]
        }
        function l(t, e, n, i) {
            i < 0 && 1 === t.x && (s[e] = t.x - 1),
            0 === n.x && 0 === n.z && (s[e] = i / 2 / Math.PI + .5)
        }
        function h(t) {
            return Math.atan2(t.z, -t.x)
        }
        function p(t) {
            return Math.atan2(-t.y, Math.sqrt(t.x * t.x + t.z * t.z))
        }
        !function(t) {
            for (var n = new He, i = new He, r = new He, s = 0; s < e.length; s += 3)
                c(e[s + 0], n),
                c(e[s + 1], i),
                c(e[s + 2], r),
                o(n, i, r, t)
        }(i = i || 0),
        function(t) {
            for (var e = new He, n = 0; n < r.length; n += 3)
                e.x = r[n + 0],
                e.y = r[n + 1],
                e.z = r[n + 2],
                e.normalize().multiplyScalar(t),
                r[n + 0] = e.x,
                r[n + 1] = e.y,
                r[n + 2] = e.z
        }(n),
        function() {
            for (var t = new He, e = 0; e < r.length; e += 3) {
                t.x = r[e + 0],
                t.y = r[e + 1],
                t.z = r[e + 2];
                var n = h(t) / 2 / Math.PI + .5
                  , i = p(t) / Math.PI + .5;
                s.push(n, 1 - i)
            }
            (function() {
                for (var t = new He, e = new He, n = new He, i = new He, o = new Ue, a = new Ue, c = new Ue, p = 0, u = 0; p < r.length; p += 9,
                u += 6) {
                    t.set(r[p + 0], r[p + 1], r[p + 2]),
                    e.set(r[p + 3], r[p + 4], r[p + 5]),
                    n.set(r[p + 6], r[p + 7], r[p + 8]),
                    o.set(s[u + 0], s[u + 1]),
                    a.set(s[u + 2], s[u + 3]),
                    c.set(s[u + 4], s[u + 5]),
                    i.copy(t).add(e).add(n).divideScalar(3);
                    var d = h(i);
                    l(o, u + 0, t, d),
                    l(a, u + 2, e, d),
                    l(c, u + 4, n, d)
                }
            }
            )(),
            function() {
                for (var t = 0; t < s.length; t += 6) {
                    var e = s[t + 0]
                      , n = s[t + 2]
                      , i = s[t + 4]
                      , r = Math.max(e, n, i)
                      , o = Math.min(e, n, i);
                    r > .9 && o < .1 && (e < .2 && (s[t + 0] += 1),
                    n < .2 && (s[t + 2] += 1),
                    i < .2 && (s[t + 4] += 1))
                }
            }()
        }(),
        this.addAttribute("position", new En(r,3)),
        this.addAttribute("normal", new En(r.slice(),3)),
        this.addAttribute("uv", new En(s,2)),
        0 === i ? this.computeVertexNormals() : this.normalizeNormals()
    }
    function Rr(t, e) {
        gn.call(this),
        this.type = "TetrahedronGeometry",
        this.parameters = {
            radius: t,
            detail: e
        },
        this.fromBufferGeometry(new Pr(t,e)),
        this.mergeVertices()
    }
    function Pr(t, e) {
        Lr.call(this, [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1], t, e),
        this.type = "TetrahedronBufferGeometry",
        this.parameters = {
            radius: t,
            detail: e
        }
    }
    function Cr(t, e) {
        gn.call(this),
        this.type = "OctahedronGeometry",
        this.parameters = {
            radius: t,
            detail: e
        },
        this.fromBufferGeometry(new Ir(t,e)),
        this.mergeVertices()
    }
    function Ir(t, e) {
        Lr.call(this, [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2], t, e),
        this.type = "OctahedronBufferGeometry",
        this.parameters = {
            radius: t,
            detail: e
        }
    }
    function Or(t, e) {
        gn.call(this),
        this.type = "IcosahedronGeometry",
        this.parameters = {
            radius: t,
            detail: e
        },
        this.fromBufferGeometry(new Dr(t,e)),
        this.mergeVertices()
    }
    function Dr(t, e) {
        var n = (1 + Math.sqrt(5)) / 2
          , i = [-1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, 0, 0, -1, n, 0, 1, n, 0, -1, -n, 0, 1, -n, n, 0, -1, n, 0, 1, -n, 0, -1, -n, 0, 1];
        Lr.call(this, i, [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1], t, e),
        this.type = "IcosahedronBufferGeometry",
        this.parameters = {
            radius: t,
            detail: e
        }
    }
    function kr(t, e) {
        gn.call(this),
        this.type = "DodecahedronGeometry",
        this.parameters = {
            radius: t,
            detail: e
        },
        this.fromBufferGeometry(new Br(t,e)),
        this.mergeVertices()
    }
    function Br(t, e) {
        var n = (1 + Math.sqrt(5)) / 2
          , i = 1 / n
          , r = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, -i, -n, 0, -i, n, 0, i, -n, 0, i, n, 0, -n, 0, -i, n, 0, -i, -n, 0, i, n, 0, i];
        Lr.call(this, r, [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9], t, e),
        this.type = "DodecahedronBufferGeometry",
        this.parameters = {
            radius: t,
            detail: e
        }
    }
    function Nr(t, e, n, i, r, s) {
        gn.call(this),
        this.type = "TubeGeometry",
        this.parameters = {
            path: t,
            tubularSegments: e,
            radius: n,
            radialSegments: i,
            closed: r
        },
        void 0 !== s && console.warn("THREE.TubeGeometry: taper has been removed.");
        var o = new Ur(t,e,n,i,r);
        this.tangents = o.tangents,
        this.normals = o.normals,
        this.binormals = o.binormals,
        this.fromBufferGeometry(o),
        this.mergeVertices()
    }
    function Ur(t, e, n, i, r) {
        Pn.call(this),
        this.type = "TubeBufferGeometry",
        this.parameters = {
            path: t,
            tubularSegments: e,
            radius: n,
            radialSegments: i,
            closed: r
        },
        e = e || 64,
        n = n || 1,
        i = i || 8,
        r = r || !1;
        var s = t.computeFrenetFrames(e, r);
        this.tangents = s.tangents,
        this.normals = s.normals,
        this.binormals = s.binormals;
        var o, a, c = new He, l = new He, h = new Ue, p = new He, u = [], d = [], f = [], m = [];
        function g(r) {
            p = t.getPointAt(r / e, p);
            var o = s.normals[r]
              , h = s.binormals[r];
            for (a = 0; a <= i; a++) {
                var f = a / i * Math.PI * 2
                  , m = Math.sin(f)
                  , g = -Math.cos(f);
                l.x = g * o.x + m * h.x,
                l.y = g * o.y + m * h.y,
                l.z = g * o.z + m * h.z,
                l.normalize(),
                d.push(l.x, l.y, l.z),
                c.x = p.x + n * l.x,
                c.y = p.y + n * l.y,
                c.z = p.z + n * l.z,
                u.push(c.x, c.y, c.z)
            }
        }
        !function() {
            for (o = 0; o < e; o++)
                g(o);
            g(!1 === r ? e : 0),
            function() {
                for (o = 0; o <= e; o++)
                    for (a = 0; a <= i; a++)
                        h.x = o / e,
                        h.y = a / i,
                        f.push(h.x, h.y)
            }(),
            function() {
                for (a = 1; a <= e; a++)
                    for (o = 1; o <= i; o++) {
                        var t = (i + 1) * (a - 1) + (o - 1)
                          , n = (i + 1) * a + (o - 1)
                          , r = (i + 1) * a + o
                          , s = (i + 1) * (a - 1) + o;
                        m.push(t, n, s),
                        m.push(n, r, s)
                    }
            }()
        }(),
        this.setIndex(m),
        this.addAttribute("position", new En(u,3)),
        this.addAttribute("normal", new En(d,3)),
        this.addAttribute("uv", new En(f,2))
    }
    function zr(t, e, n, i, r, s, o) {
        gn.call(this),
        this.type = "TorusKnotGeometry",
        this.parameters = {
            radius: t,
            tube: e,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: s
        },
        void 0 !== o && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),
        this.fromBufferGeometry(new Fr(t,e,n,i,r,s)),
        this.mergeVertices()
    }
    function Fr(t, e, n, i, r, s) {
        Pn.call(this),
        this.type = "TorusKnotBufferGeometry",
        this.parameters = {
            radius: t,
            tube: e,
            tubularSegments: n,
            radialSegments: i,
            p: r,
            q: s
        },
        t = t || 1,
        e = e || .4,
        n = Math.floor(n) || 64,
        i = Math.floor(i) || 8,
        r = r || 2,
        s = s || 3;
        var o, a, c = [], l = [], h = [], p = [], u = new He, d = new He, f = new He, m = new He, g = new He, v = new He, y = new He;
        for (o = 0; o <= n; ++o) {
            var x = o / n * r * Math.PI * 2;
            for (A(x, r, s, t, f),
            A(x + .01, r, s, t, m),
            v.subVectors(m, f),
            y.addVectors(m, f),
            g.crossVectors(v, y),
            y.crossVectors(g, v),
            g.normalize(),
            y.normalize(),
            a = 0; a <= i; ++a) {
                var w = a / i * Math.PI * 2
                  , b = -e * Math.cos(w)
                  , M = e * Math.sin(w);
                u.x = f.x + (b * y.x + M * g.x),
                u.y = f.y + (b * y.y + M * g.y),
                u.z = f.z + (b * y.z + M * g.z),
                l.push(u.x, u.y, u.z),
                d.subVectors(u, f).normalize(),
                h.push(d.x, d.y, d.z),
                p.push(o / n),
                p.push(a / i)
            }
        }
        for (a = 1; a <= n; a++)
            for (o = 1; o <= i; o++) {
                var _ = (i + 1) * (a - 1) + (o - 1)
                  , S = (i + 1) * a + (o - 1)
                  , E = (i + 1) * a + o
                  , T = (i + 1) * (a - 1) + o;
                c.push(_, S, T),
                c.push(S, E, T)
            }
        function A(t, e, n, i, r) {
            var s = Math.cos(t)
              , o = Math.sin(t)
              , a = n / e * t
              , c = Math.cos(a);
            r.x = i * (2 + c) * .5 * s,
            r.y = i * (2 + c) * o * .5,
            r.z = i * Math.sin(a) * .5
        }
        this.setIndex(c),
        this.addAttribute("position", new En(l,3)),
        this.addAttribute("normal", new En(h,3)),
        this.addAttribute("uv", new En(p,2))
    }
    function Hr(t, e, n, i, r) {
        gn.call(this),
        this.type = "TorusGeometry",
        this.parameters = {
            radius: t,
            tube: e,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        },
        this.fromBufferGeometry(new Gr(t,e,n,i,r)),
        this.mergeVertices()
    }
    function Gr(t, e, n, i, r) {
        Pn.call(this),
        this.type = "TorusBufferGeometry",
        this.parameters = {
            radius: t,
            tube: e,
            radialSegments: n,
            tubularSegments: i,
            arc: r
        },
        t = t || 1,
        e = e || .4,
        n = Math.floor(n) || 8,
        i = Math.floor(i) || 6,
        r = r || 2 * Math.PI;
        var s, o, a = [], c = [], l = [], h = [], p = new He, u = new He, d = new He;
        for (s = 0; s <= n; s++)
            for (o = 0; o <= i; o++) {
                var f = o / i * r
                  , m = s / n * Math.PI * 2;
                u.x = (t + e * Math.cos(m)) * Math.cos(f),
                u.y = (t + e * Math.cos(m)) * Math.sin(f),
                u.z = e * Math.sin(m),
                c.push(u.x, u.y, u.z),
                p.x = t * Math.cos(f),
                p.y = t * Math.sin(f),
                d.subVectors(u, p).normalize(),
                l.push(d.x, d.y, d.z),
                h.push(o / i),
                h.push(s / n)
            }
        for (s = 1; s <= n; s++)
            for (o = 1; o <= i; o++) {
                var g = (i + 1) * s + o - 1
                  , v = (i + 1) * (s - 1) + o - 1
                  , y = (i + 1) * (s - 1) + o
                  , x = (i + 1) * s + o;
                a.push(g, v, x),
                a.push(v, y, x)
            }
        this.setIndex(a),
        this.addAttribute("position", new En(c,3)),
        this.addAttribute("normal", new En(l,3)),
        this.addAttribute("uv", new En(h,2))
    }
    qi.prototype = Object.create(Bn.prototype),
    qi.prototype.constructor = qi,
    qi.prototype.isMeshDepthMaterial = !0,
    qi.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.depthPacking = t.depthPacking,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.map = t.map,
        this.alphaMap = t.alphaMap,
        this.displacementMap = t.displacementMap,
        this.displacementScale = t.displacementScale,
        this.displacementBias = t.displacementBias,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this
    }
    ,
    Xi.prototype = Object.create(Bn.prototype),
    Xi.prototype.constructor = Xi,
    Xi.prototype.isMeshDistanceMaterial = !0,
    Xi.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.referencePosition.copy(t.referencePosition),
        this.nearDistance = t.nearDistance,
        this.farDistance = t.farDistance,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.map = t.map,
        this.alphaMap = t.alphaMap,
        this.displacementMap = t.displacementMap,
        this.displacementScale = t.displacementScale,
        this.displacementBias = t.displacementBias,
        this
    }
    ,
    Qi.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: Qi,
        isGroup: !0
    }),
    $i.prototype = Object.assign(Object.create(un.prototype), {
        constructor: $i,
        isPerspectiveCamera: !0,
        copy: function(t, e) {
            return un.prototype.copy.call(this, t, e),
            this.fov = t.fov,
            this.zoom = t.zoom,
            this.near = t.near,
            this.far = t.far,
            this.focus = t.focus,
            this.aspect = t.aspect,
            this.view = null === t.view ? null : Object.assign({}, t.view),
            this.filmGauge = t.filmGauge,
            this.filmOffset = t.filmOffset,
            this
        },
        setFocalLength: function(t) {
            var e = .5 * this.getFilmHeight() / t;
            this.fov = 2 * Ne.RAD2DEG * Math.atan(e),
            this.updateProjectionMatrix()
        },
        getFocalLength: function() {
            var t = Math.tan(.5 * Ne.DEG2RAD * this.fov);
            return .5 * this.getFilmHeight() / t
        },
        getEffectiveFOV: function() {
            return 2 * Ne.RAD2DEG * Math.atan(Math.tan(.5 * Ne.DEG2RAD * this.fov) / this.zoom)
        },
        getFilmWidth: function() {
            return this.filmGauge * Math.min(this.aspect, 1)
        },
        getFilmHeight: function() {
            return this.filmGauge / Math.max(this.aspect, 1)
        },
        setViewOffset: function(t, e, n, i, r, s) {
            this.aspect = t / e,
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }),
            this.view.enabled = !0,
            this.view.fullWidth = t,
            this.view.fullHeight = e,
            this.view.offsetX = n,
            this.view.offsetY = i,
            this.view.width = r,
            this.view.height = s,
            this.updateProjectionMatrix()
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1),
            this.updateProjectionMatrix()
        },
        updateProjectionMatrix: function() {
            var t = this.near
              , e = t * Math.tan(.5 * Ne.DEG2RAD * this.fov) / this.zoom
              , n = 2 * e
              , i = this.aspect * n
              , r = -.5 * i
              , s = this.view;
            if (null !== this.view && this.view.enabled) {
                var o = s.fullWidth
                  , a = s.fullHeight;
                r += s.offsetX * i / o,
                e -= s.offsetY * n / a,
                i *= s.width / o,
                n *= s.height / a
            }
            var c = this.filmOffset;
            0 !== c && (r += t * c / this.getFilmWidth()),
            this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far)
        },
        toJSON: function(t) {
            var e = pn.prototype.toJSON.call(this, t);
            return e.object.fov = this.fov,
            e.object.zoom = this.zoom,
            e.object.near = this.near,
            e.object.far = this.far,
            e.object.focus = this.focus,
            e.object.aspect = this.aspect,
            null !== this.view && (e.object.view = Object.assign({}, this.view)),
            e.object.filmGauge = this.filmGauge,
            e.object.filmOffset = this.filmOffset,
            e
        }
    }),
    tr.prototype = Object.assign(Object.create($i.prototype), {
        constructor: tr,
        isArrayCamera: !0
    }),
    ir.prototype.isFogExp2 = !0,
    ir.prototype.clone = function() {
        return new ir(this.color,this.density)
    }
    ,
    ir.prototype.toJSON = function() {
        return {
            type: "FogExp2",
            color: this.color.getHex(),
            density: this.density
        }
    }
    ,
    rr.prototype.isFog = !0,
    rr.prototype.clone = function() {
        return new rr(this.color,this.near,this.far)
    }
    ,
    rr.prototype.toJSON = function() {
        return {
            type: "Fog",
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        }
    }
    ,
    sr.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: sr,
        copy: function(t, e) {
            return pn.prototype.copy.call(this, t, e),
            null !== t.background && (this.background = t.background.clone()),
            null !== t.fog && (this.fog = t.fog.clone()),
            null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()),
            this.autoUpdate = t.autoUpdate,
            this.matrixAutoUpdate = t.matrixAutoUpdate,
            this
        },
        toJSON: function(t) {
            var e = pn.prototype.toJSON.call(this, t);
            return null !== this.background && (e.object.background = this.background.toJSON(t)),
            null !== this.fog && (e.object.fog = this.fog.toJSON()),
            e
        }
    }),
    Object.defineProperty(or.prototype, "needsUpdate", {
        set: function(t) {
            !0 === t && this.version++
        }
    }),
    Object.assign(or.prototype, {
        isInterleavedBuffer: !0,
        onUploadCallback: function() {},
        setArray: function(t) {
            if (Array.isArray(t))
                throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
            return this.count = void 0 !== t ? t.length / this.stride : 0,
            this.array = t,
            this
        },
        setDynamic: function(t) {
            return this.dynamic = t,
            this
        },
        copy: function(t) {
            return this.array = new t.array.constructor(t.array),
            this.count = t.count,
            this.stride = t.stride,
            this.dynamic = t.dynamic,
            this
        },
        copyAt: function(t, e, n) {
            t *= this.stride,
            n *= e.stride;
            for (var i = 0, r = this.stride; i < r; i++)
                this.array[t + i] = e.array[n + i];
            return this
        },
        set: function(t, e) {
            return void 0 === e && (e = 0),
            this.array.set(t, e),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        onUpload: function(t) {
            return this.onUploadCallback = t,
            this
        }
    }),
    Object.defineProperties(ar.prototype, {
        count: {
            get: function() {
                return this.data.count
            }
        },
        array: {
            get: function() {
                return this.data.array
            }
        }
    }),
    Object.assign(ar.prototype, {
        isInterleavedBufferAttribute: !0,
        setX: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset] = e,
            this
        },
        setY: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 1] = e,
            this
        },
        setZ: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 2] = e,
            this
        },
        setW: function(t, e) {
            return this.data.array[t * this.data.stride + this.offset + 3] = e,
            this
        },
        getX: function(t) {
            return this.data.array[t * this.data.stride + this.offset]
        },
        getY: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 1]
        },
        getZ: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 2]
        },
        getW: function(t) {
            return this.data.array[t * this.data.stride + this.offset + 3]
        },
        setXY: function(t, e, n) {
            return t = t * this.data.stride + this.offset,
            this.data.array[t + 0] = e,
            this.data.array[t + 1] = n,
            this
        },
        setXYZ: function(t, e, n, i) {
            return t = t * this.data.stride + this.offset,
            this.data.array[t + 0] = e,
            this.data.array[t + 1] = n,
            this.data.array[t + 2] = i,
            this
        },
        setXYZW: function(t, e, n, i, r) {
            return t = t * this.data.stride + this.offset,
            this.data.array[t + 0] = e,
            this.data.array[t + 1] = n,
            this.data.array[t + 2] = i,
            this.data.array[t + 3] = r,
            this
        }
    }),
    cr.prototype = Object.create(Bn.prototype),
    cr.prototype.constructor = cr,
    cr.prototype.isSpriteMaterial = !0,
    cr.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.map = t.map,
        this.rotation = t.rotation,
        this
    }
    ,
    lr.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: lr,
        isSprite: !0,
        raycast: function() {
            var t = new He
              , e = new He
              , n = new He
              , i = new Ue
              , r = new Ue
              , s = new ze
              , o = new He
              , a = new He
              , c = new He;
            function l(t, e, n, o, a, c) {
                i.subVectors(t, n).addScalar(.5).multiply(o),
                void 0 !== a ? (r.x = c * i.x - a * i.y,
                r.y = a * i.x + c * i.y) : r.copy(i),
                t.copy(e),
                t.x += r.x,
                t.y += r.y,
                t.applyMatrix4(s)
            }
            return function(i, r) {
                e.setFromMatrixScale(this.matrixWorld),
                s.getInverse(this.modelViewMatrix).premultiply(this.matrixWorld),
                n.setFromMatrixPosition(this.modelViewMatrix);
                var h, p, u = this.material.rotation;
                0 !== u && (p = Math.cos(u),
                h = Math.sin(u));
                var d = this.center;
                l(o.set(-.5, -.5, 0), n, d, e, h, p),
                l(a.set(.5, -.5, 0), n, d, e, h, p),
                l(c.set(.5, .5, 0), n, d, e, h, p);
                var f = i.ray.intersectTriangle(o, a, c, !1, t);
                if (null !== f || (l(a.set(-.5, .5, 0), n, d, e, h, p),
                null !== (f = i.ray.intersectTriangle(o, c, a, !1, t)))) {
                    var m = i.ray.origin.distanceTo(t);
                    m < i.near || m > i.far || r.push({
                        distance: m,
                        point: t.clone(),
                        face: null,
                        object: this
                    })
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.material).copy(this)
        },
        copy: function(t) {
            return pn.prototype.copy.call(this, t),
            void 0 !== t.center && this.center.copy(t.center),
            this
        }
    }),
    hr.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: hr,
        copy: function(t) {
            pn.prototype.copy.call(this, t, !1);
            for (var e = t.levels, n = 0, i = e.length; n < i; n++) {
                var r = e[n];
                this.addLevel(r.object.clone(), r.distance)
            }
            return this
        },
        addLevel: function(t, e) {
            void 0 === e && (e = 0),
            e = Math.abs(e);
            for (var n = this.levels, i = 0; i < n.length && !(e < n[i].distance); i++)
                ;
            n.splice(i, 0, {
                distance: e,
                object: t
            }),
            this.add(t)
        },
        getObjectForDistance: function(t) {
            for (var e = this.levels, n = 1, i = e.length; n < i && !(t < e[n].distance); n++)
                ;
            return e[n - 1].object
        },
        raycast: function() {
            var t = new He;
            return function(e, n) {
                t.setFromMatrixPosition(this.matrixWorld);
                var i = e.ray.origin.distanceTo(t);
                this.getObjectForDistance(i).raycast(e, n)
            }
        }(),
        update: function() {
            var t = new He
              , e = new He;
            return function(n) {
                var i = this.levels;
                if (i.length > 1) {
                    t.setFromMatrixPosition(n.matrixWorld),
                    e.setFromMatrixPosition(this.matrixWorld);
                    var r = t.distanceTo(e);
                    i[0].object.visible = !0;
                    for (var s = 1, o = i.length; s < o && r >= i[s].distance; s++)
                        i[s - 1].object.visible = !1,
                        i[s].object.visible = !0;
                    for (; s < o; s++)
                        i[s].object.visible = !1
                }
            }
        }(),
        toJSON: function(t) {
            var e = pn.prototype.toJSON.call(this, t);
            e.object.levels = [];
            for (var n = this.levels, i = 0, r = n.length; i < r; i++) {
                var s = n[i];
                e.object.levels.push({
                    object: s.object.uuid,
                    distance: s.distance
                })
            }
            return e
        }
    }),
    Object.assign(pr.prototype, {
        calculateInverses: function() {
            this.boneInverses = [];
            for (var t = 0, e = this.bones.length; t < e; t++) {
                var n = new ze;
                this.bones[t] && n.getInverse(this.bones[t].matrixWorld),
                this.boneInverses.push(n)
            }
        },
        pose: function() {
            var t, e, n;
            for (e = 0,
            n = this.bones.length; e < n; e++)
                (t = this.bones[e]) && t.matrixWorld.getInverse(this.boneInverses[e]);
            for (e = 0,
            n = this.bones.length; e < n; e++)
                (t = this.bones[e]) && (t.parent && t.parent.isBone ? (t.matrix.getInverse(t.parent.matrixWorld),
                t.matrix.multiply(t.matrixWorld)) : t.matrix.copy(t.matrixWorld),
                t.matrix.decompose(t.position, t.quaternion, t.scale))
        },
        update: function() {
            var t = new ze
              , e = new ze;
            return function() {
                for (var n = this.bones, i = this.boneInverses, r = this.boneMatrices, s = this.boneTexture, o = 0, a = n.length; o < a; o++) {
                    var c = n[o] ? n[o].matrixWorld : e;
                    t.multiplyMatrices(c, i[o]),
                    t.toArray(r, 16 * o)
                }
                void 0 !== s && (s.needsUpdate = !0)
            }
        }(),
        clone: function() {
            return new pr(this.bones,this.boneInverses)
        },
        getBoneByName: function(t) {
            for (var e = 0, n = this.bones.length; e < n; e++) {
                var i = this.bones[e];
                if (i.name === t)
                    return i
            }
        }
    }),
    ur.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: ur,
        isBone: !0
    }),
    dr.prototype = Object.assign(Object.create(Hn.prototype), {
        constructor: dr,
        isSkinnedMesh: !0,
        initBones: function() {
            var t, e, n, i, r = [];
            if (this.geometry && void 0 !== this.geometry.bones) {
                for (n = 0,
                i = this.geometry.bones.length; n < i; n++)
                    e = this.geometry.bones[n],
                    t = new ur,
                    r.push(t),
                    t.name = e.name,
                    t.position.fromArray(e.pos),
                    t.quaternion.fromArray(e.rotq),
                    void 0 !== e.scl && t.scale.fromArray(e.scl);
                for (n = 0,
                i = this.geometry.bones.length; n < i; n++)
                    -1 !== (e = this.geometry.bones[n]).parent && null !== e.parent && void 0 !== r[e.parent] ? r[e.parent].add(r[n]) : this.add(r[n])
            }
            return this.updateMatrixWorld(!0),
            r
        },
        bind: function(t, e) {
            this.skeleton = t,
            void 0 === e && (this.updateMatrixWorld(!0),
            this.skeleton.calculateInverses(),
            e = this.matrixWorld),
            this.bindMatrix.copy(e),
            this.bindMatrixInverse.getInverse(e)
        },
        pose: function() {
            this.skeleton.pose()
        },
        normalizeSkinWeights: function() {
            var t, e;
            if (this.geometry && this.geometry.isGeometry)
                for (e = 0; e < this.geometry.skinWeights.length; e++) {
                    var n = this.geometry.skinWeights[e];
                    (t = 1 / n.manhattanLength()) != 1 / 0 ? n.multiplyScalar(t) : n.set(1, 0, 0, 0)
                }
            else if (this.geometry && this.geometry.isBufferGeometry) {
                var i = new Ye
                  , r = this.geometry.attributes.skinWeight;
                for (e = 0; e < r.count; e++)
                    i.x = r.getX(e),
                    i.y = r.getY(e),
                    i.z = r.getZ(e),
                    i.w = r.getW(e),
                    (t = 1 / i.manhattanLength()) != 1 / 0 ? i.multiplyScalar(t) : i.set(1, 0, 0, 0),
                    r.setXYZW(e, i.x, i.y, i.z, i.w)
            }
        },
        updateMatrixWorld: function(t) {
            Hn.prototype.updateMatrixWorld.call(this, t),
            "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
        },
        clone: function() {
            return new this.constructor(this.geometry,this.material).copy(this)
        }
    }),
    fr.prototype = Object.create(Bn.prototype),
    fr.prototype.constructor = fr,
    fr.prototype.isLineBasicMaterial = !0,
    fr.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.linewidth = t.linewidth,
        this.linecap = t.linecap,
        this.linejoin = t.linejoin,
        this
    }
    ,
    mr.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: mr,
        isLine: !0,
        computeLineDistances: function() {
            var t = new He
              , e = new He;
            return function() {
                var n = this.geometry;
                if (n.isBufferGeometry)
                    if (null === n.index) {
                        for (var i = n.attributes.position, r = [0], s = 1, o = i.count; s < o; s++)
                            t.fromBufferAttribute(i, s - 1),
                            e.fromBufferAttribute(i, s),
                            r[s] = r[s - 1],
                            r[s] += t.distanceTo(e);
                        n.addAttribute("lineDistance", new En(r,1))
                    } else
                        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (n.isGeometry) {
                    var a = n.vertices;
                    for ((r = n.lineDistances)[0] = 0,
                    s = 1,
                    o = a.length; s < o; s++)
                        r[s] = r[s - 1],
                        r[s] += a[s - 1].distanceTo(a[s])
                }
                return this
            }
        }(),
        raycast: function() {
            var t = new ze
              , e = new zn
              , n = new Je;
            return function(i, r) {
                var s = i.linePrecision
                  , o = s * s
                  , a = this.geometry
                  , c = this.matrixWorld;
                if (null === a.boundingSphere && a.computeBoundingSphere(),
                n.copy(a.boundingSphere),
                n.applyMatrix4(c),
                !1 !== i.ray.intersectsSphere(n)) {
                    t.getInverse(c),
                    e.copy(i.ray).applyMatrix4(t);
                    var l = new He
                      , h = new He
                      , p = new He
                      , u = new He
                      , d = this && this.isLineSegments ? 2 : 1;
                    if (a.isBufferGeometry) {
                        var f = a.index
                          , m = a.attributes.position.array;
                        if (null !== f)
                            for (var g = f.array, v = 0, y = g.length - 1; v < y; v += d) {
                                var x = g[v]
                                  , w = g[v + 1];
                                l.fromArray(m, 3 * x),
                                h.fromArray(m, 3 * w),
                                e.distanceSqToSegment(l, h, u, p) > o || (u.applyMatrix4(this.matrixWorld),
                                (_ = i.ray.origin.distanceTo(u)) < i.near || _ > i.far || r.push({
                                    distance: _,
                                    point: p.clone().applyMatrix4(this.matrixWorld),
                                    index: v,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                }))
                            }
                        else
                            for (v = 0,
                            y = m.length / 3 - 1; v < y; v += d)
                                l.fromArray(m, 3 * v),
                                h.fromArray(m, 3 * v + 3),
                                e.distanceSqToSegment(l, h, u, p) > o || (u.applyMatrix4(this.matrixWorld),
                                (_ = i.ray.origin.distanceTo(u)) < i.near || _ > i.far || r.push({
                                    distance: _,
                                    point: p.clone().applyMatrix4(this.matrixWorld),
                                    index: v,
                                    face: null,
                                    faceIndex: null,
                                    object: this
                                }))
                    } else if (a.isGeometry) {
                        var b = a.vertices
                          , M = b.length;
                        for (v = 0; v < M - 1; v += d) {
                            var _;
                            e.distanceSqToSegment(b[v], b[v + 1], u, p) > o || (u.applyMatrix4(this.matrixWorld),
                            (_ = i.ray.origin.distanceTo(u)) < i.near || _ > i.far || r.push({
                                distance: _,
                                point: p.clone().applyMatrix4(this.matrixWorld),
                                index: v,
                                face: null,
                                faceIndex: null,
                                object: this
                            }))
                        }
                    }
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry,this.material).copy(this)
        }
    }),
    gr.prototype = Object.assign(Object.create(mr.prototype), {
        constructor: gr,
        isLineSegments: !0,
        computeLineDistances: function() {
            var t = new He
              , e = new He;
            return function() {
                var n = this.geometry;
                if (n.isBufferGeometry)
                    if (null === n.index) {
                        for (var i = n.attributes.position, r = [], s = 0, o = i.count; s < o; s += 2)
                            t.fromBufferAttribute(i, s),
                            e.fromBufferAttribute(i, s + 1),
                            r[s] = 0 === s ? 0 : r[s - 1],
                            r[s + 1] = r[s] + t.distanceTo(e);
                        n.addAttribute("lineDistance", new En(r,1))
                    } else
                        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else if (n.isGeometry) {
                    var a = n.vertices;
                    for (r = n.lineDistances,
                    s = 0,
                    o = a.length; s < o; s += 2)
                        t.copy(a[s]),
                        e.copy(a[s + 1]),
                        r[s] = 0 === s ? 0 : r[s - 1],
                        r[s + 1] = r[s] + t.distanceTo(e)
                }
                return this
            }
        }()
    }),
    vr.prototype = Object.assign(Object.create(mr.prototype), {
        constructor: vr,
        isLineLoop: !0
    }),
    yr.prototype = Object.create(Bn.prototype),
    yr.prototype.constructor = yr,
    yr.prototype.isPointsMaterial = !0,
    yr.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.map = t.map,
        this.size = t.size,
        this.sizeAttenuation = t.sizeAttenuation,
        this.morphTargets = t.morphTargets,
        this
    }
    ,
    xr.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: xr,
        isPoints: !0,
        raycast: function() {
            var t = new ze
              , e = new zn
              , n = new Je;
            return function(i, r) {
                var s = this
                  , o = this.geometry
                  , a = this.matrixWorld
                  , c = i.params.Points.threshold;
                if (null === o.boundingSphere && o.computeBoundingSphere(),
                n.copy(o.boundingSphere),
                n.applyMatrix4(a),
                n.radius += c,
                !1 !== i.ray.intersectsSphere(n)) {
                    t.getInverse(a),
                    e.copy(i.ray).applyMatrix4(t);
                    var l = c / ((this.scale.x + this.scale.y + this.scale.z) / 3)
                      , h = l * l
                      , p = new He
                      , u = new He;
                    if (o.isBufferGeometry) {
                        var d = o.index
                          , f = o.attributes.position.array;
                        if (null !== d)
                            for (var m = d.array, g = 0, v = m.length; g < v; g++) {
                                var y = m[g];
                                p.fromArray(f, 3 * y),
                                b(p, y)
                            }
                        else {
                            g = 0;
                            for (var x = f.length / 3; g < x; g++)
                                p.fromArray(f, 3 * g),
                                b(p, g)
                        }
                    } else {
                        var w = o.vertices;
                        for (g = 0,
                        x = w.length; g < x; g++)
                            b(w[g], g)
                    }
                }
                function b(t, n) {
                    var o = e.distanceSqToPoint(t);
                    if (o < h) {
                        e.closestPointToPoint(t, u),
                        u.applyMatrix4(a);
                        var c = i.ray.origin.distanceTo(u);
                        if (c < i.near || c > i.far)
                            return;
                        r.push({
                            distance: c,
                            distanceToRay: Math.sqrt(o),
                            point: u.clone(),
                            index: n,
                            face: null,
                            object: s
                        })
                    }
                }
            }
        }(),
        clone: function() {
            return new this.constructor(this.geometry,this.material).copy(this)
        }
    }),
    wr.prototype = Object.assign(Object.create(We.prototype), {
        constructor: wr,
        isVideoTexture: !0,
        update: function() {
            var t = this.image;
            t.readyState >= t.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
        }
    }),
    br.prototype = Object.create(We.prototype),
    br.prototype.constructor = br,
    br.prototype.isCompressedTexture = !0,
    Mr.prototype = Object.create(We.prototype),
    Mr.prototype.constructor = Mr,
    Mr.prototype.isCanvasTexture = !0,
    _r.prototype = Object.create(We.prototype),
    _r.prototype.constructor = _r,
    _r.prototype.isDepthTexture = !0,
    Sr.prototype = Object.create(Pn.prototype),
    Sr.prototype.constructor = Sr,
    Er.prototype = Object.create(gn.prototype),
    Er.prototype.constructor = Er,
    Tr.prototype = Object.create(Pn.prototype),
    Tr.prototype.constructor = Tr,
    Ar.prototype = Object.create(gn.prototype),
    Ar.prototype.constructor = Ar,
    Lr.prototype = Object.create(Pn.prototype),
    Lr.prototype.constructor = Lr,
    Rr.prototype = Object.create(gn.prototype),
    Rr.prototype.constructor = Rr,
    Pr.prototype = Object.create(Lr.prototype),
    Pr.prototype.constructor = Pr,
    Cr.prototype = Object.create(gn.prototype),
    Cr.prototype.constructor = Cr,
    Ir.prototype = Object.create(Lr.prototype),
    Ir.prototype.constructor = Ir,
    Or.prototype = Object.create(gn.prototype),
    Or.prototype.constructor = Or,
    Dr.prototype = Object.create(Lr.prototype),
    Dr.prototype.constructor = Dr,
    kr.prototype = Object.create(gn.prototype),
    kr.prototype.constructor = kr,
    Br.prototype = Object.create(Lr.prototype),
    Br.prototype.constructor = Br,
    Nr.prototype = Object.create(gn.prototype),
    Nr.prototype.constructor = Nr,
    Ur.prototype = Object.create(Pn.prototype),
    Ur.prototype.constructor = Ur,
    zr.prototype = Object.create(gn.prototype),
    zr.prototype.constructor = zr,
    Fr.prototype = Object.create(Pn.prototype),
    Fr.prototype.constructor = Fr,
    Hr.prototype = Object.create(gn.prototype),
    Hr.prototype.constructor = Hr,
    Gr.prototype = Object.create(Pn.prototype),
    Gr.prototype.constructor = Gr;
    function jr(t, e, n, i, r) {
        var s, o;
        if (r === function(t, e, n, i) {
            for (var r = 0, s = e, o = n - i; s < n; s += i)
                r += (t[o] - t[s]) * (t[s + 1] + t[o + 1]),
                o = s;
            return r
        }(t, e, n, i) > 0)
            for (s = e; s < n; s += i)
                o = as(s, t[s], t[s + 1], o);
        else
            for (s = n - i; s >= e; s -= i)
                o = as(s, t[s], t[s + 1], o);
        return o && is(o, o.next) && (cs(o),
        o = o.next),
        o
    }
    function Vr(t, e) {
        if (!t)
            return t;
        e || (e = t);
        var n, i = t;
        do {
            if (n = !1,
            i.steiner || !is(i, i.next) && 0 !== ns(i.prev, i, i.next))
                i = i.next;
            else {
                if (cs(i),
                (i = e = i.prev) === i.next)
                    break;
                n = !0
            }
        } while (n || i !== e);return e
    }
    function Wr(t, e, n, i, r, s, o) {
        if (t) {
            !o && s && function(t, e, n, i) {
                var r = t;
                do {
                    null === r.z && (r.z = Qr(r.x, r.y, e, n, i)),
                    r.prevZ = r.prev,
                    r.nextZ = r.next,
                    r = r.next
                } while (r !== t);r.prevZ.nextZ = null,
                r.prevZ = null,
                function(t) {
                    var e, n, i, r, s, o, a, c, l = 1;
                    do {
                        for (n = t,
                        t = null,
                        s = null,
                        o = 0; n; ) {
                            for (o++,
                            i = n,
                            a = 0,
                            e = 0; e < l && (a++,
                            i = i.nextZ); e++)
                                ;
                            for (c = l; a > 0 || c > 0 && i; )
                                0 !== a && (0 === c || !i || n.z <= i.z) ? (r = n,
                                n = n.nextZ,
                                a--) : (r = i,
                                i = i.nextZ,
                                c--),
                                s ? s.nextZ = r : t = r,
                                r.prevZ = s,
                                s = r;
                            n = i
                        }
                        s.nextZ = null,
                        l *= 2
                    } while (o > 1)
                }(r)
            }(t, i, r, s);
            for (var a, c, l = t; t.prev !== t.next; )
                if (a = t.prev,
                c = t.next,
                s ? qr(t, i, r, s) : Yr(t))
                    e.push(a.i / n),
                    e.push(t.i / n),
                    e.push(c.i / n),
                    cs(t),
                    t = c.next,
                    l = c.next;
                else if ((t = c) === l) {
                    o ? 1 === o ? Wr(t = Xr(t, e, n), e, n, i, r, s, 2) : 2 === o && Zr(t, e, n, i, r, s) : Wr(Vr(t), e, n, i, r, s, 1);
                    break
                }
        }
    }
    function Yr(t) {
        var e = t.prev
          , n = t
          , i = t.next;
        if (ns(e, n, i) >= 0)
            return !1;
        for (var r = t.next.next; r !== t.prev; ) {
            if (ts(e.x, e.y, n.x, n.y, i.x, i.y, r.x, r.y) && ns(r.prev, r, r.next) >= 0)
                return !1;
            r = r.next
        }
        return !0
    }
    function qr(t, e, n, i) {
        var r = t.prev
          , s = t
          , o = t.next;
        if (ns(r, s, o) >= 0)
            return !1;
        for (var a = r.x < s.x ? r.x < o.x ? r.x : o.x : s.x < o.x ? s.x : o.x, c = r.y < s.y ? r.y < o.y ? r.y : o.y : s.y < o.y ? s.y : o.y, l = r.x > s.x ? r.x > o.x ? r.x : o.x : s.x > o.x ? s.x : o.x, h = r.y > s.y ? r.y > o.y ? r.y : o.y : s.y > o.y ? s.y : o.y, p = Qr(a, c, e, n, i), u = Qr(l, h, e, n, i), d = t.nextZ; d && d.z <= u; ) {
            if (d !== t.prev && d !== t.next && ts(r.x, r.y, s.x, s.y, o.x, o.y, d.x, d.y) && ns(d.prev, d, d.next) >= 0)
                return !1;
            d = d.nextZ
        }
        for (d = t.prevZ; d && d.z >= p; ) {
            if (d !== t.prev && d !== t.next && ts(r.x, r.y, s.x, s.y, o.x, o.y, d.x, d.y) && ns(d.prev, d, d.next) >= 0)
                return !1;
            d = d.prevZ
        }
        return !0
    }
    function Xr(t, e, n) {
        var i = t;
        do {
            var r = i.prev
              , s = i.next.next;
            !is(r, s) && rs(r, i, i.next, s) && ss(r, s) && ss(s, r) && (e.push(r.i / n),
            e.push(i.i / n),
            e.push(s.i / n),
            cs(i),
            cs(i.next),
            i = t = s),
            i = i.next
        } while (i !== t);return i
    }
    function Zr(t, e, n, i, r, s) {
        var o = t;
        do {
            for (var a = o.next.next; a !== o.prev; ) {
                if (o.i !== a.i && es(o, a)) {
                    var c = os(o, a);
                    return o = Vr(o, o.next),
                    c = Vr(c, c.next),
                    Wr(o, e, n, i, r, s),
                    void Wr(c, e, n, i, r, s)
                }
                a = a.next
            }
            o = o.next
        } while (o !== t)
    }
    function Kr(t, e) {
        return t.x - e.x
    }
    function Jr(t, e) {
        if (e = function(t, e) {
            var n, i = e, r = t.x, s = t.y, o = -1 / 0;
            do {
                if (s <= i.y && s >= i.next.y && i.next.y !== i.y) {
                    var a = i.x + (s - i.y) * (i.next.x - i.x) / (i.next.y - i.y);
                    if (a <= r && a > o) {
                        if (o = a,
                        a === r) {
                            if (s === i.y)
                                return i;
                            if (s === i.next.y)
                                return i.next
                        }
                        n = i.x < i.next.x ? i : i.next
                    }
                }
                i = i.next
            } while (i !== e);if (!n)
                return null;
            if (r === o)
                return n.prev;
            var c, l = n, h = n.x, p = n.y, u = 1 / 0;
            for (i = n.next; i !== l; )
                r >= i.x && i.x >= h && r !== i.x && ts(s < p ? r : o, s, h, p, s < p ? o : r, s, i.x, i.y) && ((c = Math.abs(s - i.y) / (r - i.x)) < u || c === u && i.x > n.x) && ss(i, t) && (n = i,
                u = c),
                i = i.next;
            return n
        }(t, e)) {
            var n = os(e, t);
            Vr(n, n.next)
        }
    }
    function Qr(t, e, n, i, r) {
        return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * r) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - i) * r) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
    }
    function $r(t) {
        var e = t
          , n = t;
        do {
            e.x < n.x && (n = e),
            e = e.next
        } while (e !== t);return n
    }
    function ts(t, e, n, i, r, s, o, a) {
        return (r - o) * (e - a) - (t - o) * (s - a) >= 0 && (t - o) * (i - a) - (n - o) * (e - a) >= 0 && (n - o) * (s - a) - (r - o) * (i - a) >= 0
    }
    function es(t, e) {
        return t.next.i !== e.i && t.prev.i !== e.i && !function(t, e) {
            var n = t;
            do {
                if (n.i !== t.i && n.next.i !== t.i && n.i !== e.i && n.next.i !== e.i && rs(n, n.next, t, e))
                    return !0;
                n = n.next
            } while (n !== t);return !1
        }(t, e) && ss(t, e) && ss(e, t) && function(t, e) {
            var n = t
              , i = !1
              , r = (t.x + e.x) / 2
              , s = (t.y + e.y) / 2;
            do {
                n.y > s != n.next.y > s && n.next.y !== n.y && r < (n.next.x - n.x) * (s - n.y) / (n.next.y - n.y) + n.x && (i = !i),
                n = n.next
            } while (n !== t);return i
        }(t, e)
    }
    function ns(t, e, n) {
        return (e.y - t.y) * (n.x - e.x) - (e.x - t.x) * (n.y - e.y)
    }
    function is(t, e) {
        return t.x === e.x && t.y === e.y
    }
    function rs(t, e, n, i) {
        return !!(is(t, e) && is(n, i) || is(t, i) && is(n, e)) || ns(t, e, n) > 0 != ns(t, e, i) > 0 && ns(n, i, t) > 0 != ns(n, i, e) > 0
    }
    function ss(t, e) {
        return ns(t.prev, t, t.next) < 0 ? ns(t, e, t.next) >= 0 && ns(t, t.prev, e) >= 0 : ns(t, e, t.prev) < 0 || ns(t, t.next, e) < 0
    }
    function os(t, e) {
        var n = new ls(t.i,t.x,t.y)
          , i = new ls(e.i,e.x,e.y)
          , r = t.next
          , s = e.prev;
        return t.next = e,
        e.prev = t,
        n.next = r,
        r.prev = n,
        i.next = n,
        n.prev = i,
        s.next = i,
        i.prev = s,
        i
    }
    function as(t, e, n, i) {
        var r = new ls(t,e,n);
        return i ? (r.next = i.next,
        r.prev = i,
        i.next.prev = r,
        i.next = r) : (r.prev = r,
        r.next = r),
        r
    }
    function cs(t) {
        t.next.prev = t.prev,
        t.prev.next = t.next,
        t.prevZ && (t.prevZ.nextZ = t.nextZ),
        t.nextZ && (t.nextZ.prevZ = t.prevZ)
    }
    function ls(t, e, n) {
        this.i = t,
        this.x = e,
        this.y = n,
        this.prev = null,
        this.next = null,
        this.z = null,
        this.prevZ = null,
        this.nextZ = null,
        this.steiner = !1
    }
    var hs = {
        area: function(t) {
            for (var e = t.length, n = 0, i = e - 1, r = 0; r < e; i = r++)
                n += t[i].x * t[r].y - t[r].x * t[i].y;
            return .5 * n
        },
        isClockWise: function(t) {
            return hs.area(t) < 0
        },
        triangulateShape: function(t, e) {
            var n = []
              , i = []
              , r = [];
            ps(t),
            us(n, t);
            var s = t.length;
            e.forEach(ps);
            for (var o = 0; o < e.length; o++)
                i.push(s),
                s += e[o].length,
                us(n, e[o]);
            var a = function(t, e, n) {
                n = n || 2;
                var i, r, s, o, a, c, l, h = e && e.length, p = h ? e[0] * n : t.length, u = jr(t, 0, p, n, !0), d = [];
                if (!u)
                    return d;
                if (h && (u = function(t, e, n, i) {
                    var r, s, o, a = [];
                    for (r = 0,
                    s = e.length; r < s; r++)
                        (o = jr(t, e[r] * i, r < s - 1 ? e[r + 1] * i : t.length, i, !1)) === o.next && (o.steiner = !0),
                        a.push($r(o));
                    for (a.sort(Kr),
                    r = 0; r < a.length; r++)
                        Jr(a[r], n),
                        n = Vr(n, n.next);
                    return n
                }(t, e, u, n)),
                t.length > 80 * n) {
                    i = s = t[0],
                    r = o = t[1];
                    for (var f = n; f < p; f += n)
                        a = t[f],
                        c = t[f + 1],
                        a < i && (i = a),
                        c < r && (r = c),
                        a > s && (s = a),
                        c > o && (o = c);
                    l = 0 !== (l = Math.max(s - i, o - r)) ? 1 / l : 0
                }
                return Wr(u, d, n, i, r, l),
                d
            }(n, i);
            for (o = 0; o < a.length; o += 3)
                r.push(a.slice(o, o + 3));
            return r
        }
    };
    function ps(t) {
        var e = t.length;
        e > 2 && t[e - 1].equals(t[0]) && t.pop()
    }
    function us(t, e) {
        for (var n = 0; n < e.length; n++)
            t.push(e[n].x),
            t.push(e[n].y)
    }
    function ds(t, e) {
        gn.call(this),
        this.type = "ExtrudeGeometry",
        this.parameters = {
            shapes: t,
            options: e
        },
        this.fromBufferGeometry(new fs(t,e)),
        this.mergeVertices()
    }
    function fs(t, e) {
        Pn.call(this),
        this.type = "ExtrudeBufferGeometry",
        this.parameters = {
            shapes: t,
            options: e
        };
        for (var n = this, i = [], r = [], s = 0, o = (t = Array.isArray(t) ? t : [t]).length; s < o; s++)
            a(t[s]);
        function a(t) {
            var s = []
              , o = void 0 !== e.curveSegments ? e.curveSegments : 12
              , a = void 0 !== e.steps ? e.steps : 1
              , c = void 0 !== e.depth ? e.depth : 100
              , l = void 0 === e.bevelEnabled || e.bevelEnabled
              , h = void 0 !== e.bevelThickness ? e.bevelThickness : 6
              , p = void 0 !== e.bevelSize ? e.bevelSize : h - 2
              , u = void 0 !== e.bevelSegments ? e.bevelSegments : 3
              , d = e.extrudePath
              , f = void 0 !== e.UVGenerator ? e.UVGenerator : ms;
            void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),
            c = e.amount);
            var m, g, v, y, x, w, b, M, _ = !1;
            d && (m = d.getSpacedPoints(a),
            _ = !0,
            l = !1,
            g = d.computeFrenetFrames(a, !1),
            v = new He,
            y = new He,
            x = new He),
            l || (u = 0,
            h = 0,
            p = 0);
            var S = t.extractPoints(o)
              , E = S.shape
              , T = S.holes;
            if (!hs.isClockWise(E))
                for (E = E.reverse(),
                b = 0,
                M = T.length; b < M; b++)
                    w = T[b],
                    hs.isClockWise(w) && (T[b] = w.reverse());
            var A = hs.triangulateShape(E, T)
              , L = E;
            for (b = 0,
            M = T.length; b < M; b++)
                w = T[b],
                E = E.concat(w);
            function R(t, e, n) {
                return e || console.error("THREE.ExtrudeGeometry: vec does not exist"),
                e.clone().multiplyScalar(n).add(t)
            }
            var P, C, I, O, D, k, B = E.length, N = A.length;
            function U(t, e, n) {
                var i, r, s, o = t.x - e.x, a = t.y - e.y, c = n.x - t.x, l = n.y - t.y, h = o * o + a * a, p = o * l - a * c;
                if (Math.abs(p) > Number.EPSILON) {
                    var u = Math.sqrt(h)
                      , d = Math.sqrt(c * c + l * l)
                      , f = e.x - a / u
                      , m = e.y + o / u
                      , g = ((n.x - l / d - f) * l - (n.y + c / d - m) * c) / (o * l - a * c)
                      , v = (i = f + o * g - t.x) * i + (r = m + a * g - t.y) * r;
                    if (v <= 2)
                        return new Ue(i,r);
                    s = Math.sqrt(v / 2)
                } else {
                    var y = !1;
                    o > Number.EPSILON ? c > Number.EPSILON && (y = !0) : o < -Number.EPSILON ? c < -Number.EPSILON && (y = !0) : Math.sign(a) === Math.sign(l) && (y = !0),
                    y ? (i = -a,
                    r = o,
                    s = Math.sqrt(h)) : (i = o,
                    r = a,
                    s = Math.sqrt(h / 2))
                }
                return new Ue(i / s,r / s)
            }
            for (var z = [], F = 0, H = L.length, G = H - 1, j = F + 1; F < H; F++,
            G++,
            j++)
                G === H && (G = 0),
                j === H && (j = 0),
                z[F] = U(L[F], L[G], L[j]);
            var V, W, Y = [], q = z.concat();
            for (b = 0,
            M = T.length; b < M; b++) {
                for (w = T[b],
                V = [],
                F = 0,
                G = (H = w.length) - 1,
                j = F + 1; F < H; F++,
                G++,
                j++)
                    G === H && (G = 0),
                    j === H && (j = 0),
                    V[F] = U(w[F], w[G], w[j]);
                Y.push(V),
                q = q.concat(V)
            }
            for (P = 0; P < u; P++) {
                for (I = P / u,
                O = h * Math.cos(I * Math.PI / 2),
                C = p * Math.sin(I * Math.PI / 2),
                F = 0,
                H = L.length; F < H; F++)
                    Z((D = R(L[F], z[F], C)).x, D.y, -O);
                for (b = 0,
                M = T.length; b < M; b++)
                    for (w = T[b],
                    V = Y[b],
                    F = 0,
                    H = w.length; F < H; F++)
                        Z((D = R(w[F], V[F], C)).x, D.y, -O)
            }
            for (C = p,
            F = 0; F < B; F++)
                D = l ? R(E[F], q[F], C) : E[F],
                _ ? (y.copy(g.normals[0]).multiplyScalar(D.x),
                v.copy(g.binormals[0]).multiplyScalar(D.y),
                x.copy(m[0]).add(y).add(v),
                Z(x.x, x.y, x.z)) : Z(D.x, D.y, 0);
            for (W = 1; W <= a; W++)
                for (F = 0; F < B; F++)
                    D = l ? R(E[F], q[F], C) : E[F],
                    _ ? (y.copy(g.normals[W]).multiplyScalar(D.x),
                    v.copy(g.binormals[W]).multiplyScalar(D.y),
                    x.copy(m[W]).add(y).add(v),
                    Z(x.x, x.y, x.z)) : Z(D.x, D.y, c / a * W);
            for (P = u - 1; P >= 0; P--) {
                for (I = P / u,
                O = h * Math.cos(I * Math.PI / 2),
                C = p * Math.sin(I * Math.PI / 2),
                F = 0,
                H = L.length; F < H; F++)
                    Z((D = R(L[F], z[F], C)).x, D.y, c + O);
                for (b = 0,
                M = T.length; b < M; b++)
                    for (w = T[b],
                    V = Y[b],
                    F = 0,
                    H = w.length; F < H; F++)
                        D = R(w[F], V[F], C),
                        _ ? Z(D.x, D.y + m[a - 1].y, m[a - 1].x + O) : Z(D.x, D.y, c + O)
            }
            function X(t, e) {
                var n, i;
                for (F = t.length; --F >= 0; ) {
                    n = F,
                    (i = F - 1) < 0 && (i = t.length - 1);
                    var r = 0
                      , s = a + 2 * u;
                    for (r = 0; r < s; r++) {
                        var o = B * r
                          , c = B * (r + 1);
                        J(e + n + o, e + i + o, e + i + c, e + n + c)
                    }
                }
            }
            function Z(t, e, n) {
                s.push(t),
                s.push(e),
                s.push(n)
            }
            function K(t, e, r) {
                Q(t),
                Q(e),
                Q(r);
                var s = i.length / 3
                  , o = f.generateTopUV(n, i, s - 3, s - 2, s - 1);
                $(o[0]),
                $(o[1]),
                $(o[2])
            }
            function J(t, e, r, s) {
                Q(t),
                Q(e),
                Q(s),
                Q(e),
                Q(r),
                Q(s);
                var o = i.length / 3
                  , a = f.generateSideWallUV(n, i, o - 6, o - 3, o - 2, o - 1);
                $(a[0]),
                $(a[1]),
                $(a[3]),
                $(a[1]),
                $(a[2]),
                $(a[3])
            }
            function Q(t) {
                i.push(s[3 * t + 0]),
                i.push(s[3 * t + 1]),
                i.push(s[3 * t + 2])
            }
            function $(t) {
                r.push(t.x),
                r.push(t.y)
            }
            !function() {
                var t = i.length / 3;
                if (l) {
                    var e = 0
                      , r = B * e;
                    for (F = 0; F < N; F++)
                        K((k = A[F])[2] + r, k[1] + r, k[0] + r);
                    for (r = B * (e = a + 2 * u),
                    F = 0; F < N; F++)
                        K((k = A[F])[0] + r, k[1] + r, k[2] + r)
                } else {
                    for (F = 0; F < N; F++)
                        K((k = A[F])[2], k[1], k[0]);
                    for (F = 0; F < N; F++)
                        K((k = A[F])[0] + B * a, k[1] + B * a, k[2] + B * a)
                }
                n.addGroup(t, i.length / 3 - t, 0)
            }(),
            function() {
                var t = i.length / 3
                  , e = 0;
                for (X(L, e),
                e += L.length,
                b = 0,
                M = T.length; b < M; b++)
                    X(w = T[b], e),
                    e += w.length;
                n.addGroup(t, i.length / 3 - t, 1)
            }()
        }
        this.addAttribute("position", new En(i,3)),
        this.addAttribute("uv", new En(r,2)),
        this.computeVertexNormals()
    }
    ds.prototype = Object.create(gn.prototype),
    ds.prototype.constructor = ds,
    ds.prototype.toJSON = function() {
        var t = gn.prototype.toJSON.call(this);
        return gs(this.parameters.shapes, this.parameters.options, t)
    }
    ,
    fs.prototype = Object.create(Pn.prototype),
    fs.prototype.constructor = fs,
    fs.prototype.toJSON = function() {
        var t = Pn.prototype.toJSON.call(this);
        return gs(this.parameters.shapes, this.parameters.options, t)
    }
    ;
    var ms = {
        generateTopUV: function(t, e, n, i, r) {
            var s = e[3 * n]
              , o = e[3 * n + 1]
              , a = e[3 * i]
              , c = e[3 * i + 1]
              , l = e[3 * r]
              , h = e[3 * r + 1];
            return [new Ue(s,o), new Ue(a,c), new Ue(l,h)]
        },
        generateSideWallUV: function(t, e, n, i, r, s) {
            var o = e[3 * n]
              , a = e[3 * n + 1]
              , c = e[3 * n + 2]
              , l = e[3 * i]
              , h = e[3 * i + 1]
              , p = e[3 * i + 2]
              , u = e[3 * r]
              , d = e[3 * r + 1]
              , f = e[3 * r + 2]
              , m = e[3 * s]
              , g = e[3 * s + 1]
              , v = e[3 * s + 2];
            return Math.abs(a - h) < .01 ? [new Ue(o,1 - c), new Ue(l,1 - p), new Ue(u,1 - f), new Ue(m,1 - v)] : [new Ue(a,1 - c), new Ue(h,1 - p), new Ue(d,1 - f), new Ue(g,1 - v)]
        }
    };
    function gs(t, e, n) {
        if (n.shapes = [],
        Array.isArray(t))
            for (var i = 0, r = t.length; i < r; i++) {
                var s = t[i];
                n.shapes.push(s.uuid)
            }
        else
            n.shapes.push(t.uuid);
        return void 0 !== e.extrudePath && (n.options.extrudePath = e.extrudePath.toJSON()),
        n
    }
    function vs(t, e) {
        gn.call(this),
        this.type = "TextGeometry",
        this.parameters = {
            text: t,
            parameters: e
        },
        this.fromBufferGeometry(new ys(t,e)),
        this.mergeVertices()
    }
    function ys(t, e) {
        var n = (e = e || {}).font;
        if (!n || !n.isFont)
            return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),
            new gn;
        var i = n.generateShapes(t, e.size);
        e.depth = void 0 !== e.height ? e.height : 50,
        void 0 === e.bevelThickness && (e.bevelThickness = 10),
        void 0 === e.bevelSize && (e.bevelSize = 8),
        void 0 === e.bevelEnabled && (e.bevelEnabled = !1),
        fs.call(this, i, e),
        this.type = "TextBufferGeometry"
    }
    function xs(t, e, n, i, r, s, o) {
        gn.call(this),
        this.type = "SphereGeometry",
        this.parameters = {
            radius: t,
            widthSegments: e,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: s,
            thetaLength: o
        },
        this.fromBufferGeometry(new ws(t,e,n,i,r,s,o)),
        this.mergeVertices()
    }
    function ws(t, e, n, i, r, s, o) {
        Pn.call(this),
        this.type = "SphereBufferGeometry",
        this.parameters = {
            radius: t,
            widthSegments: e,
            heightSegments: n,
            phiStart: i,
            phiLength: r,
            thetaStart: s,
            thetaLength: o
        },
        t = t || 1,
        e = Math.max(3, Math.floor(e) || 8),
        n = Math.max(2, Math.floor(n) || 6),
        i = void 0 !== i ? i : 0,
        r = void 0 !== r ? r : 2 * Math.PI;
        var a, c, l = (s = void 0 !== s ? s : 0) + (o = void 0 !== o ? o : Math.PI), h = 0, p = [], u = new He, d = new He, f = [], m = [], g = [], v = [];
        for (c = 0; c <= n; c++) {
            var y = []
              , x = c / n;
            for (a = 0; a <= e; a++) {
                var w = a / e;
                u.x = -t * Math.cos(i + w * r) * Math.sin(s + x * o),
                u.y = t * Math.cos(s + x * o),
                u.z = t * Math.sin(i + w * r) * Math.sin(s + x * o),
                m.push(u.x, u.y, u.z),
                d.set(u.x, u.y, u.z).normalize(),
                g.push(d.x, d.y, d.z),
                v.push(w, 1 - x),
                y.push(h++)
            }
            p.push(y)
        }
        for (c = 0; c < n; c++)
            for (a = 0; a < e; a++) {
                var b = p[c][a + 1]
                  , M = p[c][a]
                  , _ = p[c + 1][a]
                  , S = p[c + 1][a + 1];
                (0 !== c || s > 0) && f.push(b, M, S),
                (c !== n - 1 || l < Math.PI) && f.push(M, _, S)
            }
        this.setIndex(f),
        this.addAttribute("position", new En(m,3)),
        this.addAttribute("normal", new En(g,3)),
        this.addAttribute("uv", new En(v,2))
    }
    function bs(t, e, n, i, r, s) {
        gn.call(this),
        this.type = "RingGeometry",
        this.parameters = {
            innerRadius: t,
            outerRadius: e,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: s
        },
        this.fromBufferGeometry(new Ms(t,e,n,i,r,s)),
        this.mergeVertices()
    }
    function Ms(t, e, n, i, r, s) {
        Pn.call(this),
        this.type = "RingBufferGeometry",
        this.parameters = {
            innerRadius: t,
            outerRadius: e,
            thetaSegments: n,
            phiSegments: i,
            thetaStart: r,
            thetaLength: s
        },
        t = t || .5,
        e = e || 1,
        r = void 0 !== r ? r : 0,
        s = void 0 !== s ? s : 2 * Math.PI,
        n = void 0 !== n ? Math.max(3, n) : 8;
        var o, a, c, l = [], h = [], p = [], u = [], d = t, f = (e - t) / (i = void 0 !== i ? Math.max(1, i) : 1), m = new He, g = new Ue;
        for (a = 0; a <= i; a++) {
            for (c = 0; c <= n; c++)
                o = r + c / n * s,
                m.x = d * Math.cos(o),
                m.y = d * Math.sin(o),
                h.push(m.x, m.y, m.z),
                p.push(0, 0, 1),
                g.x = (m.x / e + 1) / 2,
                g.y = (m.y / e + 1) / 2,
                u.push(g.x, g.y);
            d += f
        }
        for (a = 0; a < i; a++) {
            var v = a * (n + 1);
            for (c = 0; c < n; c++) {
                var y = o = c + v
                  , x = o + n + 1
                  , w = o + n + 2
                  , b = o + 1;
                l.push(y, x, b),
                l.push(x, w, b)
            }
        }
        this.setIndex(l),
        this.addAttribute("position", new En(h,3)),
        this.addAttribute("normal", new En(p,3)),
        this.addAttribute("uv", new En(u,2))
    }
    function _s(t, e, n, i) {
        gn.call(this),
        this.type = "LatheGeometry",
        this.parameters = {
            points: t,
            segments: e,
            phiStart: n,
            phiLength: i
        },
        this.fromBufferGeometry(new Ss(t,e,n,i)),
        this.mergeVertices()
    }
    function Ss(t, e, n, i) {
        Pn.call(this),
        this.type = "LatheBufferGeometry",
        this.parameters = {
            points: t,
            segments: e,
            phiStart: n,
            phiLength: i
        },
        e = Math.floor(e) || 12,
        n = n || 0,
        i = i || 2 * Math.PI,
        i = Ne.clamp(i, 0, 2 * Math.PI);
        var r, s, o, a = [], c = [], l = [], h = 1 / e, p = new He, u = new Ue;
        for (s = 0; s <= e; s++) {
            var d = n + s * h * i
              , f = Math.sin(d)
              , m = Math.cos(d);
            for (o = 0; o <= t.length - 1; o++)
                p.x = t[o].x * f,
                p.y = t[o].y,
                p.z = t[o].x * m,
                c.push(p.x, p.y, p.z),
                u.x = s / e,
                u.y = o / (t.length - 1),
                l.push(u.x, u.y)
        }
        for (s = 0; s < e; s++)
            for (o = 0; o < t.length - 1; o++) {
                var g = r = o + s * t.length
                  , v = r + t.length
                  , y = r + t.length + 1
                  , x = r + 1;
                a.push(g, v, x),
                a.push(v, y, x)
            }
        if (this.setIndex(a),
        this.addAttribute("position", new En(c,3)),
        this.addAttribute("uv", new En(l,2)),
        this.computeVertexNormals(),
        i === 2 * Math.PI) {
            var w = this.attributes.normal.array
              , b = new He
              , M = new He
              , _ = new He;
            for (r = e * t.length * 3,
            s = 0,
            o = 0; s < t.length; s++,
            o += 3)
                b.x = w[o + 0],
                b.y = w[o + 1],
                b.z = w[o + 2],
                M.x = w[r + o + 0],
                M.y = w[r + o + 1],
                M.z = w[r + o + 2],
                _.addVectors(b, M).normalize(),
                w[o + 0] = w[r + o + 0] = _.x,
                w[o + 1] = w[r + o + 1] = _.y,
                w[o + 2] = w[r + o + 2] = _.z
        }
    }
    function Es(t, e) {
        gn.call(this),
        this.type = "ShapeGeometry",
        "object" == typeof e && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."),
        e = e.curveSegments),
        this.parameters = {
            shapes: t,
            curveSegments: e
        },
        this.fromBufferGeometry(new Ts(t,e)),
        this.mergeVertices()
    }
    function Ts(t, e) {
        Pn.call(this),
        this.type = "ShapeBufferGeometry",
        this.parameters = {
            shapes: t,
            curveSegments: e
        },
        e = e || 12;
        var n = []
          , i = []
          , r = []
          , s = []
          , o = 0
          , a = 0;
        if (!1 === Array.isArray(t))
            l(t);
        else
            for (var c = 0; c < t.length; c++)
                l(t[c]),
                this.addGroup(o, a, c),
                o += a,
                a = 0;
        function l(t) {
            var o, c, l, h = i.length / 3, p = t.extractPoints(e), u = p.shape, d = p.holes;
            if (!1 === hs.isClockWise(u))
                for (u = u.reverse(),
                o = 0,
                c = d.length; o < c; o++)
                    l = d[o],
                    !0 === hs.isClockWise(l) && (d[o] = l.reverse());
            var f = hs.triangulateShape(u, d);
            for (o = 0,
            c = d.length; o < c; o++)
                l = d[o],
                u = u.concat(l);
            for (o = 0,
            c = u.length; o < c; o++) {
                var m = u[o];
                i.push(m.x, m.y, 0),
                r.push(0, 0, 1),
                s.push(m.x, m.y)
            }
            for (o = 0,
            c = f.length; o < c; o++) {
                var g = f[o]
                  , v = g[0] + h
                  , y = g[1] + h
                  , x = g[2] + h;
                n.push(v, y, x),
                a += 3
            }
        }
        this.setIndex(n),
        this.addAttribute("position", new En(i,3)),
        this.addAttribute("normal", new En(r,3)),
        this.addAttribute("uv", new En(s,2))
    }
    function As(t, e) {
        if (e.shapes = [],
        Array.isArray(t))
            for (var n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.shapes.push(r.uuid)
            }
        else
            e.shapes.push(t.uuid);
        return e
    }
    function Ls(t, e) {
        Pn.call(this),
        this.type = "EdgesGeometry",
        this.parameters = {
            thresholdAngle: e
        },
        e = void 0 !== e ? e : 1;
        var n, i, r, s, o = [], a = Math.cos(Ne.DEG2RAD * e), c = [0, 0], l = {}, h = ["a", "b", "c"];
        t.isBufferGeometry ? (s = new gn).fromBufferGeometry(t) : s = t.clone(),
        s.mergeVertices(),
        s.computeFaceNormals();
        for (var p = s.vertices, u = s.faces, d = 0, f = u.length; d < f; d++)
            for (var m = u[d], g = 0; g < 3; g++)
                n = m[h[g]],
                i = m[h[(g + 1) % 3]],
                c[0] = Math.min(n, i),
                c[1] = Math.max(n, i),
                void 0 === l[r = c[0] + "," + c[1]] ? l[r] = {
                    index1: c[0],
                    index2: c[1],
                    face1: d,
                    face2: void 0
                } : l[r].face2 = d;
        for (r in l) {
            var v = l[r];
            if (void 0 === v.face2 || u[v.face1].normal.dot(u[v.face2].normal) <= a) {
                var y = p[v.index1];
                o.push(y.x, y.y, y.z),
                y = p[v.index2],
                o.push(y.x, y.y, y.z)
            }
        }
        this.addAttribute("position", new En(o,3))
    }
    function Rs(t, e, n, i, r, s, o, a) {
        gn.call(this),
        this.type = "CylinderGeometry",
        this.parameters = {
            radiusTop: t,
            radiusBottom: e,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: s,
            thetaStart: o,
            thetaLength: a
        },
        this.fromBufferGeometry(new Ps(t,e,n,i,r,s,o,a)),
        this.mergeVertices()
    }
    function Ps(t, e, n, i, r, s, o, a) {
        Pn.call(this),
        this.type = "CylinderBufferGeometry",
        this.parameters = {
            radiusTop: t,
            radiusBottom: e,
            height: n,
            radialSegments: i,
            heightSegments: r,
            openEnded: s,
            thetaStart: o,
            thetaLength: a
        };
        var c = this;
        t = void 0 !== t ? t : 1,
        e = void 0 !== e ? e : 1,
        n = n || 1,
        i = Math.floor(i) || 8,
        r = Math.floor(r) || 1,
        s = void 0 !== s && s,
        o = void 0 !== o ? o : 0,
        a = void 0 !== a ? a : 2 * Math.PI;
        var l = []
          , h = []
          , p = []
          , u = []
          , d = 0
          , f = []
          , m = n / 2
          , g = 0;
        function v(n) {
            var r, s, f, v = new Ue, y = new He, x = 0, w = !0 === n ? t : e, b = !0 === n ? 1 : -1;
            for (s = d,
            r = 1; r <= i; r++)
                h.push(0, m * b, 0),
                p.push(0, b, 0),
                u.push(.5, .5),
                d++;
            for (f = d,
            r = 0; r <= i; r++) {
                var M = r / i * a + o
                  , _ = Math.cos(M)
                  , S = Math.sin(M);
                y.x = w * S,
                y.y = m * b,
                y.z = w * _,
                h.push(y.x, y.y, y.z),
                p.push(0, b, 0),
                v.x = .5 * _ + .5,
                v.y = .5 * S * b + .5,
                u.push(v.x, v.y),
                d++
            }
            for (r = 0; r < i; r++) {
                var E = s + r
                  , T = f + r;
                !0 === n ? l.push(T, T + 1, E) : l.push(T + 1, T, E),
                x += 3
            }
            c.addGroup(g, x, !0 === n ? 1 : 2),
            g += x
        }
        !function() {
            var s, v, y = new He, x = new He, w = 0, b = (e - t) / n;
            for (v = 0; v <= r; v++) {
                var M = []
                  , _ = v / r
                  , S = _ * (e - t) + t;
                for (s = 0; s <= i; s++) {
                    var E = s / i
                      , T = E * a + o
                      , A = Math.sin(T)
                      , L = Math.cos(T);
                    x.x = S * A,
                    x.y = -_ * n + m,
                    x.z = S * L,
                    h.push(x.x, x.y, x.z),
                    y.set(A, b, L).normalize(),
                    p.push(y.x, y.y, y.z),
                    u.push(E, 1 - _),
                    M.push(d++)
                }
                f.push(M)
            }
            for (s = 0; s < i; s++)
                for (v = 0; v < r; v++) {
                    var R = f[v][s]
                      , P = f[v + 1][s]
                      , C = f[v + 1][s + 1]
                      , I = f[v][s + 1];
                    l.push(R, P, I),
                    l.push(P, C, I),
                    w += 6
                }
            c.addGroup(g, w, 0),
            g += w
        }(),
        !1 === s && (t > 0 && v(!0),
        e > 0 && v(!1)),
        this.setIndex(l),
        this.addAttribute("position", new En(h,3)),
        this.addAttribute("normal", new En(p,3)),
        this.addAttribute("uv", new En(u,2))
    }
    function Cs(t, e, n, i, r, s, o) {
        Rs.call(this, 0, t, e, n, i, r, s, o),
        this.type = "ConeGeometry",
        this.parameters = {
            radius: t,
            height: e,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: s,
            thetaLength: o
        }
    }
    function Is(t, e, n, i, r, s, o) {
        Ps.call(this, 0, t, e, n, i, r, s, o),
        this.type = "ConeBufferGeometry",
        this.parameters = {
            radius: t,
            height: e,
            radialSegments: n,
            heightSegments: i,
            openEnded: r,
            thetaStart: s,
            thetaLength: o
        }
    }
    function Os(t, e, n, i) {
        gn.call(this),
        this.type = "CircleGeometry",
        this.parameters = {
            radius: t,
            segments: e,
            thetaStart: n,
            thetaLength: i
        },
        this.fromBufferGeometry(new Ds(t,e,n,i)),
        this.mergeVertices()
    }
    function Ds(t, e, n, i) {
        Pn.call(this),
        this.type = "CircleBufferGeometry",
        this.parameters = {
            radius: t,
            segments: e,
            thetaStart: n,
            thetaLength: i
        },
        t = t || 1,
        e = void 0 !== e ? Math.max(3, e) : 8,
        n = void 0 !== n ? n : 0,
        i = void 0 !== i ? i : 2 * Math.PI;
        var r, s, o = [], a = [], c = [], l = [], h = new He, p = new Ue;
        for (a.push(0, 0, 0),
        c.push(0, 0, 1),
        l.push(.5, .5),
        s = 0,
        r = 3; s <= e; s++,
        r += 3) {
            var u = n + s / e * i;
            h.x = t * Math.cos(u),
            h.y = t * Math.sin(u),
            a.push(h.x, h.y, h.z),
            c.push(0, 0, 1),
            p.x = (a[r] / t + 1) / 2,
            p.y = (a[r + 1] / t + 1) / 2,
            l.push(p.x, p.y)
        }
        for (r = 1; r <= e; r++)
            o.push(r, r + 1, 0);
        this.setIndex(o),
        this.addAttribute("position", new En(a,3)),
        this.addAttribute("normal", new En(c,3)),
        this.addAttribute("uv", new En(l,2))
    }
    vs.prototype = Object.create(gn.prototype),
    vs.prototype.constructor = vs,
    ys.prototype = Object.create(fs.prototype),
    ys.prototype.constructor = ys,
    xs.prototype = Object.create(gn.prototype),
    xs.prototype.constructor = xs,
    ws.prototype = Object.create(Pn.prototype),
    ws.prototype.constructor = ws,
    bs.prototype = Object.create(gn.prototype),
    bs.prototype.constructor = bs,
    Ms.prototype = Object.create(Pn.prototype),
    Ms.prototype.constructor = Ms,
    _s.prototype = Object.create(gn.prototype),
    _s.prototype.constructor = _s,
    Ss.prototype = Object.create(Pn.prototype),
    Ss.prototype.constructor = Ss,
    Es.prototype = Object.create(gn.prototype),
    Es.prototype.constructor = Es,
    Es.prototype.toJSON = function() {
        var t = gn.prototype.toJSON.call(this);
        return As(this.parameters.shapes, t)
    }
    ,
    Ts.prototype = Object.create(Pn.prototype),
    Ts.prototype.constructor = Ts,
    Ts.prototype.toJSON = function() {
        var t = Pn.prototype.toJSON.call(this);
        return As(this.parameters.shapes, t)
    }
    ,
    Ls.prototype = Object.create(Pn.prototype),
    Ls.prototype.constructor = Ls,
    Rs.prototype = Object.create(gn.prototype),
    Rs.prototype.constructor = Rs,
    Ps.prototype = Object.create(Pn.prototype),
    Ps.prototype.constructor = Ps,
    Cs.prototype = Object.create(Rs.prototype),
    Cs.prototype.constructor = Cs,
    Is.prototype = Object.create(Ps.prototype),
    Is.prototype.constructor = Is,
    Os.prototype = Object.create(gn.prototype),
    Os.prototype.constructor = Os,
    Ds.prototype = Object.create(Pn.prototype),
    Ds.prototype.constructor = Ds;
    var ks = Object.freeze({
        WireframeGeometry: Sr,
        ParametricGeometry: Er,
        ParametricBufferGeometry: Tr,
        TetrahedronGeometry: Rr,
        TetrahedronBufferGeometry: Pr,
        OctahedronGeometry: Cr,
        OctahedronBufferGeometry: Ir,
        IcosahedronGeometry: Or,
        IcosahedronBufferGeometry: Dr,
        DodecahedronGeometry: kr,
        DodecahedronBufferGeometry: Br,
        PolyhedronGeometry: Ar,
        PolyhedronBufferGeometry: Lr,
        TubeGeometry: Nr,
        TubeBufferGeometry: Ur,
        TorusKnotGeometry: zr,
        TorusKnotBufferGeometry: Fr,
        TorusGeometry: Hr,
        TorusBufferGeometry: Gr,
        TextGeometry: vs,
        TextBufferGeometry: ys,
        SphereGeometry: xs,
        SphereBufferGeometry: ws,
        RingGeometry: bs,
        RingBufferGeometry: Ms,
        PlaneGeometry: On,
        PlaneBufferGeometry: Dn,
        LatheGeometry: _s,
        LatheBufferGeometry: Ss,
        ShapeGeometry: Es,
        ShapeBufferGeometry: Ts,
        ExtrudeGeometry: ds,
        ExtrudeBufferGeometry: fs,
        EdgesGeometry: Ls,
        ConeGeometry: Cs,
        ConeBufferGeometry: Is,
        CylinderGeometry: Rs,
        CylinderBufferGeometry: Ps,
        CircleGeometry: Os,
        CircleBufferGeometry: Ds,
        BoxGeometry: Cn,
        BoxBufferGeometry: In
    });
    function Bs(t) {
        Bn.call(this),
        this.type = "ShadowMaterial",
        this.color = new rn(0),
        this.transparent = !0,
        this.setValues(t)
    }
    function Ns(t) {
        Un.call(this, t),
        this.type = "RawShaderMaterial"
    }
    function Us(t) {
        Bn.call(this),
        this.defines = {
            STANDARD: ""
        },
        this.type = "MeshStandardMaterial",
        this.color = new rn(16777215),
        this.roughness = .5,
        this.metalness = .5,
        this.map = null,
        this.lightMap = null,
        this.lightMapIntensity = 1,
        this.aoMap = null,
        this.aoMapIntensity = 1,
        this.emissive = new rn(0),
        this.emissiveIntensity = 1,
        this.emissiveMap = null,
        this.bumpMap = null,
        this.bumpScale = 1,
        this.normalMap = null,
        this.normalMapType = ke,
        this.normalScale = new Ue(1,1),
        this.displacementMap = null,
        this.displacementScale = 1,
        this.displacementBias = 0,
        this.roughnessMap = null,
        this.metalnessMap = null,
        this.alphaMap = null,
        this.envMap = null,
        this.envMapIntensity = 1,
        this.refractionRatio = .98,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.wireframeLinecap = "round",
        this.wireframeLinejoin = "round",
        this.skinning = !1,
        this.morphTargets = !1,
        this.morphNormals = !1,
        this.setValues(t)
    }
    function zs(t) {
        Us.call(this),
        this.defines = {
            PHYSICAL: ""
        },
        this.type = "MeshPhysicalMaterial",
        this.reflectivity = .5,
        this.clearCoat = 0,
        this.clearCoatRoughness = 0,
        this.setValues(t)
    }
    function Fs(t) {
        Bn.call(this),
        this.type = "MeshPhongMaterial",
        this.color = new rn(16777215),
        this.specular = new rn(1118481),
        this.shininess = 30,
        this.map = null,
        this.lightMap = null,
        this.lightMapIntensity = 1,
        this.aoMap = null,
        this.aoMapIntensity = 1,
        this.emissive = new rn(0),
        this.emissiveIntensity = 1,
        this.emissiveMap = null,
        this.bumpMap = null,
        this.bumpScale = 1,
        this.normalMap = null,
        this.normalMapType = ke,
        this.normalScale = new Ue(1,1),
        this.displacementMap = null,
        this.displacementScale = 1,
        this.displacementBias = 0,
        this.specularMap = null,
        this.alphaMap = null,
        this.envMap = null,
        this.combine = $,
        this.reflectivity = 1,
        this.refractionRatio = .98,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.wireframeLinecap = "round",
        this.wireframeLinejoin = "round",
        this.skinning = !1,
        this.morphTargets = !1,
        this.morphNormals = !1,
        this.setValues(t)
    }
    function Hs(t) {
        Fs.call(this),
        this.defines = {
            TOON: ""
        },
        this.type = "MeshToonMaterial",
        this.gradientMap = null,
        this.setValues(t)
    }
    function Gs(t) {
        Bn.call(this),
        this.type = "MeshNormalMaterial",
        this.bumpMap = null,
        this.bumpScale = 1,
        this.normalMap = null,
        this.normalMapType = ke,
        this.normalScale = new Ue(1,1),
        this.displacementMap = null,
        this.displacementScale = 1,
        this.displacementBias = 0,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.fog = !1,
        this.lights = !1,
        this.skinning = !1,
        this.morphTargets = !1,
        this.morphNormals = !1,
        this.setValues(t)
    }
    function js(t) {
        Bn.call(this),
        this.type = "MeshLambertMaterial",
        this.color = new rn(16777215),
        this.map = null,
        this.lightMap = null,
        this.lightMapIntensity = 1,
        this.aoMap = null,
        this.aoMapIntensity = 1,
        this.emissive = new rn(0),
        this.emissiveIntensity = 1,
        this.emissiveMap = null,
        this.specularMap = null,
        this.alphaMap = null,
        this.envMap = null,
        this.combine = $,
        this.reflectivity = 1,
        this.refractionRatio = .98,
        this.wireframe = !1,
        this.wireframeLinewidth = 1,
        this.wireframeLinecap = "round",
        this.wireframeLinejoin = "round",
        this.skinning = !1,
        this.morphTargets = !1,
        this.morphNormals = !1,
        this.setValues(t)
    }
    function Vs(t) {
        fr.call(this),
        this.type = "LineDashedMaterial",
        this.scale = 1,
        this.dashSize = 3,
        this.gapSize = 1,
        this.setValues(t)
    }
    Bs.prototype = Object.create(Bn.prototype),
    Bs.prototype.constructor = Bs,
    Bs.prototype.isShadowMaterial = !0,
    Bs.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this
    }
    ,
    Ns.prototype = Object.create(Un.prototype),
    Ns.prototype.constructor = Ns,
    Ns.prototype.isRawShaderMaterial = !0,
    Us.prototype = Object.create(Bn.prototype),
    Us.prototype.constructor = Us,
    Us.prototype.isMeshStandardMaterial = !0,
    Us.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.defines = {
            STANDARD: ""
        },
        this.color.copy(t.color),
        this.roughness = t.roughness,
        this.metalness = t.metalness,
        this.map = t.map,
        this.lightMap = t.lightMap,
        this.lightMapIntensity = t.lightMapIntensity,
        this.aoMap = t.aoMap,
        this.aoMapIntensity = t.aoMapIntensity,
        this.emissive.copy(t.emissive),
        this.emissiveMap = t.emissiveMap,
        this.emissiveIntensity = t.emissiveIntensity,
        this.bumpMap = t.bumpMap,
        this.bumpScale = t.bumpScale,
        this.normalMap = t.normalMap,
        this.normalMapType = t.normalMapType,
        this.normalScale.copy(t.normalScale),
        this.displacementMap = t.displacementMap,
        this.displacementScale = t.displacementScale,
        this.displacementBias = t.displacementBias,
        this.roughnessMap = t.roughnessMap,
        this.metalnessMap = t.metalnessMap,
        this.alphaMap = t.alphaMap,
        this.envMap = t.envMap,
        this.envMapIntensity = t.envMapIntensity,
        this.refractionRatio = t.refractionRatio,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.wireframeLinecap = t.wireframeLinecap,
        this.wireframeLinejoin = t.wireframeLinejoin,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.morphNormals = t.morphNormals,
        this
    }
    ,
    zs.prototype = Object.create(Us.prototype),
    zs.prototype.constructor = zs,
    zs.prototype.isMeshPhysicalMaterial = !0,
    zs.prototype.copy = function(t) {
        return Us.prototype.copy.call(this, t),
        this.defines = {
            PHYSICAL: ""
        },
        this.reflectivity = t.reflectivity,
        this.clearCoat = t.clearCoat,
        this.clearCoatRoughness = t.clearCoatRoughness,
        this
    }
    ,
    Fs.prototype = Object.create(Bn.prototype),
    Fs.prototype.constructor = Fs,
    Fs.prototype.isMeshPhongMaterial = !0,
    Fs.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.specular.copy(t.specular),
        this.shininess = t.shininess,
        this.map = t.map,
        this.lightMap = t.lightMap,
        this.lightMapIntensity = t.lightMapIntensity,
        this.aoMap = t.aoMap,
        this.aoMapIntensity = t.aoMapIntensity,
        this.emissive.copy(t.emissive),
        this.emissiveMap = t.emissiveMap,
        this.emissiveIntensity = t.emissiveIntensity,
        this.bumpMap = t.bumpMap,
        this.bumpScale = t.bumpScale,
        this.normalMap = t.normalMap,
        this.normalMapType = t.normalMapType,
        this.normalScale.copy(t.normalScale),
        this.displacementMap = t.displacementMap,
        this.displacementScale = t.displacementScale,
        this.displacementBias = t.displacementBias,
        this.specularMap = t.specularMap,
        this.alphaMap = t.alphaMap,
        this.envMap = t.envMap,
        this.combine = t.combine,
        this.reflectivity = t.reflectivity,
        this.refractionRatio = t.refractionRatio,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.wireframeLinecap = t.wireframeLinecap,
        this.wireframeLinejoin = t.wireframeLinejoin,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.morphNormals = t.morphNormals,
        this
    }
    ,
    Hs.prototype = Object.create(Fs.prototype),
    Hs.prototype.constructor = Hs,
    Hs.prototype.isMeshToonMaterial = !0,
    Hs.prototype.copy = function(t) {
        return Fs.prototype.copy.call(this, t),
        this.gradientMap = t.gradientMap,
        this
    }
    ,
    Gs.prototype = Object.create(Bn.prototype),
    Gs.prototype.constructor = Gs,
    Gs.prototype.isMeshNormalMaterial = !0,
    Gs.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.bumpMap = t.bumpMap,
        this.bumpScale = t.bumpScale,
        this.normalMap = t.normalMap,
        this.normalMapType = t.normalMapType,
        this.normalScale.copy(t.normalScale),
        this.displacementMap = t.displacementMap,
        this.displacementScale = t.displacementScale,
        this.displacementBias = t.displacementBias,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.morphNormals = t.morphNormals,
        this
    }
    ,
    js.prototype = Object.create(Bn.prototype),
    js.prototype.constructor = js,
    js.prototype.isMeshLambertMaterial = !0,
    js.prototype.copy = function(t) {
        return Bn.prototype.copy.call(this, t),
        this.color.copy(t.color),
        this.map = t.map,
        this.lightMap = t.lightMap,
        this.lightMapIntensity = t.lightMapIntensity,
        this.aoMap = t.aoMap,
        this.aoMapIntensity = t.aoMapIntensity,
        this.emissive.copy(t.emissive),
        this.emissiveMap = t.emissiveMap,
        this.emissiveIntensity = t.emissiveIntensity,
        this.specularMap = t.specularMap,
        this.alphaMap = t.alphaMap,
        this.envMap = t.envMap,
        this.combine = t.combine,
        this.reflectivity = t.reflectivity,
        this.refractionRatio = t.refractionRatio,
        this.wireframe = t.wireframe,
        this.wireframeLinewidth = t.wireframeLinewidth,
        this.wireframeLinecap = t.wireframeLinecap,
        this.wireframeLinejoin = t.wireframeLinejoin,
        this.skinning = t.skinning,
        this.morphTargets = t.morphTargets,
        this.morphNormals = t.morphNormals,
        this
    }
    ,
    Vs.prototype = Object.create(fr.prototype),
    Vs.prototype.constructor = Vs,
    Vs.prototype.isLineDashedMaterial = !0,
    Vs.prototype.copy = function(t) {
        return fr.prototype.copy.call(this, t),
        this.scale = t.scale,
        this.dashSize = t.dashSize,
        this.gapSize = t.gapSize,
        this
    }
    ;
    var Ws = Object.freeze({
        ShadowMaterial: Bs,
        SpriteMaterial: cr,
        RawShaderMaterial: Ns,
        ShaderMaterial: Un,
        PointsMaterial: yr,
        MeshPhysicalMaterial: zs,
        MeshStandardMaterial: Us,
        MeshPhongMaterial: Fs,
        MeshToonMaterial: Hs,
        MeshNormalMaterial: Gs,
        MeshLambertMaterial: js,
        MeshDepthMaterial: qi,
        MeshDistanceMaterial: Xi,
        MeshBasicMaterial: Nn,
        LineDashedMaterial: Vs,
        LineBasicMaterial: fr,
        Material: Bn
    })
      , Ys = {
        enabled: !1,
        files: {},
        add: function(t, e) {
            !1 !== this.enabled && (this.files[t] = e)
        },
        get: function(t) {
            if (!1 !== this.enabled)
                return this.files[t]
        },
        remove: function(t) {
            delete this.files[t]
        },
        clear: function() {
            this.files = {}
        }
    };
    function qs(t, e, n) {
        var i = this
          , r = !1
          , s = 0
          , o = 0
          , a = void 0;
        this.onStart = void 0,
        this.onLoad = t,
        this.onProgress = e,
        this.onError = n,
        this.itemStart = function(t) {
            o++,
            !1 === r && void 0 !== i.onStart && i.onStart(t, s, o),
            r = !0
        }
        ,
        this.itemEnd = function(t) {
            s++,
            void 0 !== i.onProgress && i.onProgress(t, s, o),
            s === o && (r = !1,
            void 0 !== i.onLoad && i.onLoad())
        }
        ,
        this.itemError = function(t) {
            void 0 !== i.onError && i.onError(t)
        }
        ,
        this.resolveURL = function(t) {
            return a ? a(t) : t
        }
        ,
        this.setURLModifier = function(t) {
            return a = t,
            this
        }
    }
    var Xs = new qs
      , Zs = {};
    function Ks(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    function Js(t) {
        this.manager = void 0 !== t ? t : Xs,
        this._parser = null
    }
    function Qs(t) {
        this.manager = void 0 !== t ? t : Xs,
        this._parser = null
    }
    function $s(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    function to(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    function eo(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    function no() {
        this.type = "Curve",
        this.arcLengthDivisions = 200
    }
    function io(t, e, n, i, r, s, o, a) {
        no.call(this),
        this.type = "EllipseCurve",
        this.aX = t || 0,
        this.aY = e || 0,
        this.xRadius = n || 1,
        this.yRadius = i || 1,
        this.aStartAngle = r || 0,
        this.aEndAngle = s || 2 * Math.PI,
        this.aClockwise = o || !1,
        this.aRotation = a || 0
    }
    function ro(t, e, n, i, r, s) {
        io.call(this, t, e, n, n, i, r, s),
        this.type = "ArcCurve"
    }
    function so() {
        var t = 0
          , e = 0
          , n = 0
          , i = 0;
        function r(r, s, o, a) {
            t = r,
            e = o,
            n = -3 * r + 3 * s - 2 * o - a,
            i = 2 * r - 2 * s + o + a
        }
        return {
            initCatmullRom: function(t, e, n, i, s) {
                r(e, n, s * (n - t), s * (i - e))
            },
            initNonuniformCatmullRom: function(t, e, n, i, s, o, a) {
                var c = (e - t) / s - (n - t) / (s + o) + (n - e) / o
                  , l = (n - e) / o - (i - e) / (o + a) + (i - n) / a;
                r(e, n, c *= o, l *= o)
            },
            calc: function(r) {
                var s = r * r;
                return t + e * r + n * s + i * (s * r)
            }
        }
    }
    Object.assign(Ks.prototype, {
        load: function(t, e, n, i) {
            void 0 === t && (t = ""),
            void 0 !== this.path && (t = this.path + t),
            t = this.manager.resolveURL(t);
            var r = this
              , s = Ys.get(t);
            if (void 0 !== s)
                return r.manager.itemStart(t),
                setTimeout(function() {
                    e && e(s),
                    r.manager.itemEnd(t)
                }, 0),
                s;
            if (void 0 === Zs[t]) {
                var o = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                if (o) {
                    var a = o[1]
                      , c = !!o[2]
                      , l = o[3];
                    l = window.decodeURIComponent(l),
                    c && (l = window.atob(l));
                    try {
                        var h, p = (this.responseType || "").toLowerCase();
                        switch (p) {
                        case "arraybuffer":
                        case "blob":
                            for (var u = new Uint8Array(l.length), d = 0; d < l.length; d++)
                                u[d] = l.charCodeAt(d);
                            h = "blob" === p ? new Blob([u.buffer],{
                                type: a
                            }) : u.buffer;
                            break;
                        case "document":
                            var f = new DOMParser;
                            h = f.parseFromString(l, a);
                            break;
                        case "json":
                            h = JSON.parse(l);
                            break;
                        default:
                            h = l
                        }
                        window.setTimeout(function() {
                            e && e(h),
                            r.manager.itemEnd(t)
                        }, 0)
                    } catch (e) {
                        window.setTimeout(function() {
                            i && i(e),
                            r.manager.itemEnd(t),
                            r.manager.itemError(t)
                        }, 0)
                    }
                } else {
                    Zs[t] = [],
                    Zs[t].push({
                        onLoad: e,
                        onProgress: n,
                        onError: i
                    });
                    var m = new XMLHttpRequest;
                    for (var g in m.open("GET", t, !0),
                    m.addEventListener("load", function(e) {
                        var n = this.response;
                        Ys.add(t, n);
                        var i = Zs[t];
                        if (delete Zs[t],
                        200 === this.status || 0 === this.status) {
                            0 === this.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
                            for (var s = 0, o = i.length; s < o; s++)
                                (a = i[s]).onLoad && a.onLoad(n);
                            r.manager.itemEnd(t)
                        } else {
                            for (s = 0,
                            o = i.length; s < o; s++) {
                                var a;
                                (a = i[s]).onError && a.onError(e)
                            }
                            r.manager.itemEnd(t),
                            r.manager.itemError(t)
                        }
                    }, !1),
                    m.addEventListener("progress", function(e) {
                        for (var n = Zs[t], i = 0, r = n.length; i < r; i++) {
                            var s = n[i];
                            s.onProgress && s.onProgress(e)
                        }
                    }, !1),
                    m.addEventListener("error", function(e) {
                        var n = Zs[t];
                        delete Zs[t];
                        for (var i = 0, s = n.length; i < s; i++) {
                            var o = n[i];
                            o.onError && o.onError(e)
                        }
                        r.manager.itemEnd(t),
                        r.manager.itemError(t)
                    }, !1),
                    void 0 !== this.responseType && (m.responseType = this.responseType),
                    void 0 !== this.withCredentials && (m.withCredentials = this.withCredentials),
                    m.overrideMimeType && m.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain"),
                    this.requestHeader)
                        m.setRequestHeader(g, this.requestHeader[g]);
                    m.send(null)
                }
                return r.manager.itemStart(t),
                m
            }
            Zs[t].push({
                onLoad: e,
                onProgress: n,
                onError: i
            })
        },
        setPath: function(t) {
            return this.path = t,
            this
        },
        setResponseType: function(t) {
            return this.responseType = t,
            this
        },
        setWithCredentials: function(t) {
            return this.withCredentials = t,
            this
        },
        setMimeType: function(t) {
            return this.mimeType = t,
            this
        },
        setRequestHeader: function(t) {
            return this.requestHeader = t,
            this
        }
    }),
    Object.assign(Js.prototype, {
        load: function(t, e, n, i) {
            var r = this
              , s = []
              , o = new br;
            o.image = s;
            var a = new Ks(this.manager);
            function c(c) {
                a.load(t[c], function(t) {
                    var n = r._parser(t, !0);
                    s[c] = {
                        width: n.width,
                        height: n.height,
                        format: n.format,
                        mipmaps: n.mipmaps
                    },
                    6 === (l += 1) && (1 === n.mipmapCount && (o.minFilter = bt),
                    o.format = n.format,
                    o.needsUpdate = !0,
                    e && e(o))
                }, n, i)
            }
            if (a.setPath(this.path),
            a.setResponseType("arraybuffer"),
            Array.isArray(t))
                for (var l = 0, h = 0, p = t.length; h < p; ++h)
                    c(h);
            else
                a.load(t, function(t) {
                    var n = r._parser(t, !0);
                    if (n.isCubemap)
                        for (var i = n.mipmaps.length / n.mipmapCount, a = 0; a < i; a++) {
                            s[a] = {
                                mipmaps: []
                            };
                            for (var c = 0; c < n.mipmapCount; c++)
                                s[a].mipmaps.push(n.mipmaps[a * n.mipmapCount + c]),
                                s[a].format = n.format,
                                s[a].width = n.width,
                                s[a].height = n.height
                        }
                    else
                        o.image.width = n.width,
                        o.image.height = n.height,
                        o.mipmaps = n.mipmaps;
                    1 === n.mipmapCount && (o.minFilter = bt),
                    o.format = n.format,
                    o.needsUpdate = !0,
                    e && e(o)
                }, n, i);
            return o
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    }),
    Object.assign(Qs.prototype, {
        load: function(t, e, n, i) {
            var r = this
              , s = new Ze
              , o = new Ks(this.manager);
            return o.setResponseType("arraybuffer"),
            o.load(t, function(t) {
                var n = r._parser(t);
                n && (void 0 !== n.image ? s.image = n.image : void 0 !== n.data && (s.image.width = n.width,
                s.image.height = n.height,
                s.image.data = n.data),
                s.wrapS = void 0 !== n.wrapS ? n.wrapS : gt,
                s.wrapT = void 0 !== n.wrapT ? n.wrapT : gt,
                s.magFilter = void 0 !== n.magFilter ? n.magFilter : bt,
                s.minFilter = void 0 !== n.minFilter ? n.minFilter : _t,
                s.anisotropy = void 0 !== n.anisotropy ? n.anisotropy : 1,
                void 0 !== n.format && (s.format = n.format),
                void 0 !== n.type && (s.type = n.type),
                void 0 !== n.mipmaps && (s.mipmaps = n.mipmaps),
                1 === n.mipmapCount && (s.minFilter = bt),
                s.needsUpdate = !0,
                e && e(s, n))
            }, n, i),
            s
        }
    }),
    Object.assign($s.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            void 0 === t && (t = ""),
            void 0 !== this.path && (t = this.path + t),
            t = this.manager.resolveURL(t);
            var r = this
              , s = Ys.get(t);
            if (void 0 !== s)
                return r.manager.itemStart(t),
                setTimeout(function() {
                    e && e(s),
                    r.manager.itemEnd(t)
                }, 0),
                s;
            var o = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
            function a() {
                o.removeEventListener("load", a, !1),
                o.removeEventListener("error", c, !1),
                Ys.add(t, this),
                e && e(this),
                r.manager.itemEnd(t)
            }
            function c(e) {
                o.removeEventListener("load", a, !1),
                o.removeEventListener("error", c, !1),
                i && i(e),
                r.manager.itemEnd(t),
                r.manager.itemError(t)
            }
            return o.addEventListener("load", a, !1),
            o.addEventListener("error", c, !1),
            "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (o.crossOrigin = this.crossOrigin),
            r.manager.itemStart(t),
            o.src = t,
            o
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t,
            this
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    }),
    Object.assign(to.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = new jn
              , s = new $s(this.manager);
            s.setCrossOrigin(this.crossOrigin),
            s.setPath(this.path);
            var o = 0;
            function a(n) {
                s.load(t[n], function(t) {
                    r.images[n] = t,
                    6 == ++o && (r.needsUpdate = !0,
                    e && e(r))
                }, void 0, i)
            }
            for (var c = 0; c < t.length; ++c)
                a(c);
            return r
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t,
            this
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    }),
    Object.assign(eo.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = new We
              , s = new $s(this.manager);
            return s.setCrossOrigin(this.crossOrigin),
            s.setPath(this.path),
            s.load(t, function(n) {
                r.image = n;
                var i = t.search(/\.(jpg|jpeg)$/) > 0 || 0 === t.search(/^data\:image\/jpeg/);
                r.format = i ? Nt : Ut,
                r.needsUpdate = !0,
                void 0 !== e && e(r)
            }, n, i),
            r
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t,
            this
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    }),
    Object.assign(no.prototype, {
        getPoint: function() {
            return console.warn("THREE.Curve: .getPoint() not implemented."),
            null
        },
        getPointAt: function(t, e) {
            var n = this.getUtoTmapping(t);
            return this.getPoint(n, e)
        },
        getPoints: function(t) {
            void 0 === t && (t = 5);
            for (var e = [], n = 0; n <= t; n++)
                e.push(this.getPoint(n / t));
            return e
        },
        getSpacedPoints: function(t) {
            void 0 === t && (t = 5);
            for (var e = [], n = 0; n <= t; n++)
                e.push(this.getPointAt(n / t));
            return e
        },
        getLength: function() {
            var t = this.getLengths();
            return t[t.length - 1]
        },
        getLengths: function(t) {
            if (void 0 === t && (t = this.arcLengthDivisions),
            this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
                return this.cacheArcLengths;
            this.needsUpdate = !1;
            var e, n, i = [], r = this.getPoint(0), s = 0;
            for (i.push(0),
            n = 1; n <= t; n++)
                s += (e = this.getPoint(n / t)).distanceTo(r),
                i.push(s),
                r = e;
            return this.cacheArcLengths = i,
            i
        },
        updateArcLengths: function() {
            this.needsUpdate = !0,
            this.getLengths()
        },
        getUtoTmapping: function(t, e) {
            var n, i = this.getLengths(), r = 0, s = i.length;
            n = e || t * i[s - 1];
            for (var o, a = 0, c = s - 1; a <= c; )
                if ((o = i[r = Math.floor(a + (c - a) / 2)] - n) < 0)
                    a = r + 1;
                else {
                    if (!(o > 0)) {
                        c = r;
                        break
                    }
                    c = r - 1
                }
            if (i[r = c] === n)
                return r / (s - 1);
            var l = i[r];
            return (r + (n - l) / (i[r + 1] - l)) / (s - 1)
        },
        getTangent: function(t) {
            var e = t - 1e-4
              , n = t + 1e-4;
            e < 0 && (e = 0),
            n > 1 && (n = 1);
            var i = this.getPoint(e);
            return this.getPoint(n).clone().sub(i).normalize()
        },
        getTangentAt: function(t) {
            var e = this.getUtoTmapping(t);
            return this.getTangent(e)
        },
        computeFrenetFrames: function(t, e) {
            var n, i, r, s = new He, o = [], a = [], c = [], l = new He, h = new ze;
            for (n = 0; n <= t; n++)
                i = n / t,
                o[n] = this.getTangentAt(i),
                o[n].normalize();
            a[0] = new He,
            c[0] = new He;
            var p = Number.MAX_VALUE
              , u = Math.abs(o[0].x)
              , d = Math.abs(o[0].y)
              , f = Math.abs(o[0].z);
            for (u <= p && (p = u,
            s.set(1, 0, 0)),
            d <= p && (p = d,
            s.set(0, 1, 0)),
            f <= p && s.set(0, 0, 1),
            l.crossVectors(o[0], s).normalize(),
            a[0].crossVectors(o[0], l),
            c[0].crossVectors(o[0], a[0]),
            n = 1; n <= t; n++)
                a[n] = a[n - 1].clone(),
                c[n] = c[n - 1].clone(),
                l.crossVectors(o[n - 1], o[n]),
                l.length() > Number.EPSILON && (l.normalize(),
                r = Math.acos(Ne.clamp(o[n - 1].dot(o[n]), -1, 1)),
                a[n].applyMatrix4(h.makeRotationAxis(l, r))),
                c[n].crossVectors(o[n], a[n]);
            if (!0 === e)
                for (r = Math.acos(Ne.clamp(a[0].dot(a[t]), -1, 1)),
                r /= t,
                o[0].dot(l.crossVectors(a[0], a[t])) > 0 && (r = -r),
                n = 1; n <= t; n++)
                    a[n].applyMatrix4(h.makeRotationAxis(o[n], r * n)),
                    c[n].crossVectors(o[n], a[n]);
            return {
                tangents: o,
                normals: a,
                binormals: c
            }
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.arcLengthDivisions = t.arcLengthDivisions,
            this
        },
        toJSON: function() {
            var t = {
                metadata: {
                    version: 4.5,
                    type: "Curve",
                    generator: "Curve.toJSON"
                }
            };
            return t.arcLengthDivisions = this.arcLengthDivisions,
            t.type = this.type,
            t
        },
        fromJSON: function(t) {
            return this.arcLengthDivisions = t.arcLengthDivisions,
            this
        }
    }),
    io.prototype = Object.create(no.prototype),
    io.prototype.constructor = io,
    io.prototype.isEllipseCurve = !0,
    io.prototype.getPoint = function(t, e) {
        for (var n = e || new Ue, i = 2 * Math.PI, r = this.aEndAngle - this.aStartAngle, s = Math.abs(r) < Number.EPSILON; r < 0; )
            r += i;
        for (; r > i; )
            r -= i;
        r < Number.EPSILON && (r = s ? 0 : i),
        !0 !== this.aClockwise || s || (r === i ? r = -i : r -= i);
        var o = this.aStartAngle + t * r
          , a = this.aX + this.xRadius * Math.cos(o)
          , c = this.aY + this.yRadius * Math.sin(o);
        if (0 !== this.aRotation) {
            var l = Math.cos(this.aRotation)
              , h = Math.sin(this.aRotation)
              , p = a - this.aX
              , u = c - this.aY;
            a = p * l - u * h + this.aX,
            c = p * h + u * l + this.aY
        }
        return n.set(a, c)
    }
    ,
    io.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.aX = t.aX,
        this.aY = t.aY,
        this.xRadius = t.xRadius,
        this.yRadius = t.yRadius,
        this.aStartAngle = t.aStartAngle,
        this.aEndAngle = t.aEndAngle,
        this.aClockwise = t.aClockwise,
        this.aRotation = t.aRotation,
        this
    }
    ,
    io.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.aX = this.aX,
        t.aY = this.aY,
        t.xRadius = this.xRadius,
        t.yRadius = this.yRadius,
        t.aStartAngle = this.aStartAngle,
        t.aEndAngle = this.aEndAngle,
        t.aClockwise = this.aClockwise,
        t.aRotation = this.aRotation,
        t
    }
    ,
    io.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.aX = t.aX,
        this.aY = t.aY,
        this.xRadius = t.xRadius,
        this.yRadius = t.yRadius,
        this.aStartAngle = t.aStartAngle,
        this.aEndAngle = t.aEndAngle,
        this.aClockwise = t.aClockwise,
        this.aRotation = t.aRotation,
        this
    }
    ,
    ro.prototype = Object.create(io.prototype),
    ro.prototype.constructor = ro,
    ro.prototype.isArcCurve = !0;
    var oo = new He
      , ao = new so
      , co = new so
      , lo = new so;
    function ho(t, e, n, i) {
        no.call(this),
        this.type = "CatmullRomCurve3",
        this.points = t || [],
        this.closed = e || !1,
        this.curveType = n || "centripetal",
        this.tension = i || .5
    }
    function po(t, e, n, i, r) {
        var s = .5 * (i - e)
          , o = .5 * (r - n)
          , a = t * t;
        return (2 * n - 2 * i + s + o) * (t * a) + (-3 * n + 3 * i - 2 * s - o) * a + s * t + n
    }
    function uo(t, e, n, i) {
        return function(t, e) {
            var n = 1 - t;
            return n * n * e
        }(t, e) + function(t, e) {
            return 2 * (1 - t) * t * n
        }(t) + function(t, e) {
            return t * t * i
        }(t)
    }
    function fo(t, e, n, i, r) {
        return function(t, e) {
            var n = 1 - t;
            return n * n * n * e
        }(t, e) + function(t, e) {
            var n = 1 - t;
            return 3 * n * n * t * e
        }(t, n) + function(t, e) {
            return 3 * (1 - t) * t * t * i
        }(t) + function(t, e) {
            return t * t * t * r
        }(t)
    }
    function mo(t, e, n, i) {
        no.call(this),
        this.type = "CubicBezierCurve",
        this.v0 = t || new Ue,
        this.v1 = e || new Ue,
        this.v2 = n || new Ue,
        this.v3 = i || new Ue
    }
    function go(t, e, n, i) {
        no.call(this),
        this.type = "CubicBezierCurve3",
        this.v0 = t || new He,
        this.v1 = e || new He,
        this.v2 = n || new He,
        this.v3 = i || new He
    }
    function vo(t, e) {
        no.call(this),
        this.type = "LineCurve",
        this.v1 = t || new Ue,
        this.v2 = e || new Ue
    }
    function yo(t, e) {
        no.call(this),
        this.type = "LineCurve3",
        this.v1 = t || new He,
        this.v2 = e || new He
    }
    function xo(t, e, n) {
        no.call(this),
        this.type = "QuadraticBezierCurve",
        this.v0 = t || new Ue,
        this.v1 = e || new Ue,
        this.v2 = n || new Ue
    }
    function wo(t, e, n) {
        no.call(this),
        this.type = "QuadraticBezierCurve3",
        this.v0 = t || new He,
        this.v1 = e || new He,
        this.v2 = n || new He
    }
    function bo(t) {
        no.call(this),
        this.type = "SplineCurve",
        this.points = t || []
    }
    ho.prototype = Object.create(no.prototype),
    ho.prototype.constructor = ho,
    ho.prototype.isCatmullRomCurve3 = !0,
    ho.prototype.getPoint = function(t, e) {
        var n, i, r, s, o = e || new He, a = this.points, c = a.length, l = (c - (this.closed ? 0 : 1)) * t, h = Math.floor(l), p = l - h;
        if (this.closed ? h += h > 0 ? 0 : (Math.floor(Math.abs(h) / c) + 1) * c : 0 === p && h === c - 1 && (h = c - 2,
        p = 1),
        this.closed || h > 0 ? n = a[(h - 1) % c] : (oo.subVectors(a[0], a[1]).add(a[0]),
        n = oo),
        i = a[h % c],
        r = a[(h + 1) % c],
        this.closed || h + 2 < c ? s = a[(h + 2) % c] : (oo.subVectors(a[c - 1], a[c - 2]).add(a[c - 1]),
        s = oo),
        "centripetal" === this.curveType || "chordal" === this.curveType) {
            var u = "chordal" === this.curveType ? .5 : .25
              , d = Math.pow(n.distanceToSquared(i), u)
              , f = Math.pow(i.distanceToSquared(r), u)
              , m = Math.pow(r.distanceToSquared(s), u);
            f < 1e-4 && (f = 1),
            d < 1e-4 && (d = f),
            m < 1e-4 && (m = f),
            ao.initNonuniformCatmullRom(n.x, i.x, r.x, s.x, d, f, m),
            co.initNonuniformCatmullRom(n.y, i.y, r.y, s.y, d, f, m),
            lo.initNonuniformCatmullRom(n.z, i.z, r.z, s.z, d, f, m)
        } else
            "catmullrom" === this.curveType && (ao.initCatmullRom(n.x, i.x, r.x, s.x, this.tension),
            co.initCatmullRom(n.y, i.y, r.y, s.y, this.tension),
            lo.initCatmullRom(n.z, i.z, r.z, s.z, this.tension));
        return o.set(ao.calc(p), co.calc(p), lo.calc(p)),
        o
    }
    ,
    ho.prototype.copy = function(t) {
        no.prototype.copy.call(this, t),
        this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push(i.clone())
        }
        return this.closed = t.closed,
        this.curveType = t.curveType,
        this.tension = t.tension,
        this
    }
    ,
    ho.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        t.points = [];
        for (var e = 0, n = this.points.length; e < n; e++) {
            var i = this.points[e];
            t.points.push(i.toArray())
        }
        return t.closed = this.closed,
        t.curveType = this.curveType,
        t.tension = this.tension,
        t
    }
    ,
    ho.prototype.fromJSON = function(t) {
        no.prototype.fromJSON.call(this, t),
        this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push((new He).fromArray(i))
        }
        return this.closed = t.closed,
        this.curveType = t.curveType,
        this.tension = t.tension,
        this
    }
    ,
    mo.prototype = Object.create(no.prototype),
    mo.prototype.constructor = mo,
    mo.prototype.isCubicBezierCurve = !0,
    mo.prototype.getPoint = function(t, e) {
        var n = e || new Ue
          , i = this.v0
          , r = this.v1
          , s = this.v2
          , o = this.v3;
        return n.set(fo(t, i.x, r.x, s.x, o.x), fo(t, i.y, r.y, s.y, o.y)),
        n
    }
    ,
    mo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v0.copy(t.v0),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this.v3.copy(t.v3),
        this
    }
    ,
    mo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(),
        t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t.v3 = this.v3.toArray(),
        t
    }
    ,
    mo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v0.fromArray(t.v0),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this.v3.fromArray(t.v3),
        this
    }
    ,
    go.prototype = Object.create(no.prototype),
    go.prototype.constructor = go,
    go.prototype.isCubicBezierCurve3 = !0,
    go.prototype.getPoint = function(t, e) {
        var n = e || new He
          , i = this.v0
          , r = this.v1
          , s = this.v2
          , o = this.v3;
        return n.set(fo(t, i.x, r.x, s.x, o.x), fo(t, i.y, r.y, s.y, o.y), fo(t, i.z, r.z, s.z, o.z)),
        n
    }
    ,
    go.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v0.copy(t.v0),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this.v3.copy(t.v3),
        this
    }
    ,
    go.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(),
        t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t.v3 = this.v3.toArray(),
        t
    }
    ,
    go.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v0.fromArray(t.v0),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this.v3.fromArray(t.v3),
        this
    }
    ,
    vo.prototype = Object.create(no.prototype),
    vo.prototype.constructor = vo,
    vo.prototype.isLineCurve = !0,
    vo.prototype.getPoint = function(t, e) {
        var n = e || new Ue;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1),
        n.multiplyScalar(t).add(this.v1)),
        n
    }
    ,
    vo.prototype.getPointAt = function(t, e) {
        return this.getPoint(t, e)
    }
    ,
    vo.prototype.getTangent = function() {
        return this.v2.clone().sub(this.v1).normalize()
    }
    ,
    vo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this
    }
    ,
    vo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t
    }
    ,
    vo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this
    }
    ,
    yo.prototype = Object.create(no.prototype),
    yo.prototype.constructor = yo,
    yo.prototype.isLineCurve3 = !0,
    yo.prototype.getPoint = function(t, e) {
        var n = e || new He;
        return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1),
        n.multiplyScalar(t).add(this.v1)),
        n
    }
    ,
    yo.prototype.getPointAt = function(t, e) {
        return this.getPoint(t, e)
    }
    ,
    yo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this
    }
    ,
    yo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t
    }
    ,
    yo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this
    }
    ,
    xo.prototype = Object.create(no.prototype),
    xo.prototype.constructor = xo,
    xo.prototype.isQuadraticBezierCurve = !0,
    xo.prototype.getPoint = function(t, e) {
        var n = e || new Ue
          , i = this.v0
          , r = this.v1
          , s = this.v2;
        return n.set(uo(t, i.x, r.x, s.x), uo(t, i.y, r.y, s.y)),
        n
    }
    ,
    xo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v0.copy(t.v0),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this
    }
    ,
    xo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(),
        t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t
    }
    ,
    xo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v0.fromArray(t.v0),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this
    }
    ,
    wo.prototype = Object.create(no.prototype),
    wo.prototype.constructor = wo,
    wo.prototype.isQuadraticBezierCurve3 = !0,
    wo.prototype.getPoint = function(t, e) {
        var n = e || new He
          , i = this.v0
          , r = this.v1
          , s = this.v2;
        return n.set(uo(t, i.x, r.x, s.x), uo(t, i.y, r.y, s.y), uo(t, i.z, r.z, s.z)),
        n
    }
    ,
    wo.prototype.copy = function(t) {
        return no.prototype.copy.call(this, t),
        this.v0.copy(t.v0),
        this.v1.copy(t.v1),
        this.v2.copy(t.v2),
        this
    }
    ,
    wo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        return t.v0 = this.v0.toArray(),
        t.v1 = this.v1.toArray(),
        t.v2 = this.v2.toArray(),
        t
    }
    ,
    wo.prototype.fromJSON = function(t) {
        return no.prototype.fromJSON.call(this, t),
        this.v0.fromArray(t.v0),
        this.v1.fromArray(t.v1),
        this.v2.fromArray(t.v2),
        this
    }
    ,
    bo.prototype = Object.create(no.prototype),
    bo.prototype.constructor = bo,
    bo.prototype.isSplineCurve = !0,
    bo.prototype.getPoint = function(t, e) {
        var n = e || new Ue
          , i = this.points
          , r = (i.length - 1) * t
          , s = Math.floor(r)
          , o = r - s
          , a = i[0 === s ? s : s - 1]
          , c = i[s]
          , l = i[s > i.length - 2 ? i.length - 1 : s + 1]
          , h = i[s > i.length - 3 ? i.length - 1 : s + 2];
        return n.set(po(o, a.x, c.x, l.x, h.x), po(o, a.y, c.y, l.y, h.y)),
        n
    }
    ,
    bo.prototype.copy = function(t) {
        no.prototype.copy.call(this, t),
        this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push(i.clone())
        }
        return this
    }
    ,
    bo.prototype.toJSON = function() {
        var t = no.prototype.toJSON.call(this);
        t.points = [];
        for (var e = 0, n = this.points.length; e < n; e++) {
            var i = this.points[e];
            t.points.push(i.toArray())
        }
        return t
    }
    ,
    bo.prototype.fromJSON = function(t) {
        no.prototype.fromJSON.call(this, t),
        this.points = [];
        for (var e = 0, n = t.points.length; e < n; e++) {
            var i = t.points[e];
            this.points.push((new Ue).fromArray(i))
        }
        return this
    }
    ;
    var Mo = Object.freeze({
        ArcCurve: ro,
        CatmullRomCurve3: ho,
        CubicBezierCurve: mo,
        CubicBezierCurve3: go,
        EllipseCurve: io,
        LineCurve: vo,
        LineCurve3: yo,
        QuadraticBezierCurve: xo,
        QuadraticBezierCurve3: wo,
        SplineCurve: bo
    });
    function _o() {
        no.call(this),
        this.type = "CurvePath",
        this.curves = [],
        this.autoClose = !1
    }
    function So(t) {
        _o.call(this),
        this.type = "Path",
        this.currentPoint = new Ue,
        t && this.setFromPoints(t)
    }
    function Eo(t) {
        So.call(this, t),
        this.uuid = Ne.generateUUID(),
        this.type = "Shape",
        this.holes = []
    }
    function To(t, e) {
        pn.call(this),
        this.type = "Light",
        this.color = new rn(t),
        this.intensity = void 0 !== e ? e : 1,
        this.receiveShadow = void 0
    }
    function Ao(t, e, n) {
        To.call(this, t, n),
        this.type = "HemisphereLight",
        this.castShadow = void 0,
        this.position.copy(pn.DefaultUp),
        this.updateMatrix(),
        this.groundColor = new rn(e)
    }
    function Lo(t) {
        this.camera = t,
        this.bias = 0,
        this.radius = 1,
        this.mapSize = new Ue(512,512),
        this.map = null,
        this.matrix = new ze
    }
    function Ro() {
        Lo.call(this, new $i(50,1,.5,500))
    }
    function Po(t, e, n, i, r, s) {
        To.call(this, t, e),
        this.type = "SpotLight",
        this.position.copy(pn.DefaultUp),
        this.updateMatrix(),
        this.target = new pn,
        Object.defineProperty(this, "power", {
            get: function() {
                return this.intensity * Math.PI
            },
            set: function(t) {
                this.intensity = t / Math.PI
            }
        }),
        this.distance = void 0 !== n ? n : 0,
        this.angle = void 0 !== i ? i : Math.PI / 3,
        this.penumbra = void 0 !== r ? r : 0,
        this.decay = void 0 !== s ? s : 1,
        this.shadow = new Ro
    }
    function Co(t, e, n, i) {
        To.call(this, t, e),
        this.type = "PointLight",
        Object.defineProperty(this, "power", {
            get: function() {
                return 4 * this.intensity * Math.PI
            },
            set: function(t) {
                this.intensity = t / (4 * Math.PI)
            }
        }),
        this.distance = void 0 !== n ? n : 0,
        this.decay = void 0 !== i ? i : 1,
        this.shadow = new Lo(new $i(90,1,.5,500))
    }
    function Io() {
        Lo.call(this, new dn(-5,5,5,-5,.5,500))
    }
    function Oo(t, e) {
        To.call(this, t, e),
        this.type = "DirectionalLight",
        this.position.copy(pn.DefaultUp),
        this.updateMatrix(),
        this.target = new pn,
        this.shadow = new Io
    }
    function Do(t, e) {
        To.call(this, t, e),
        this.type = "AmbientLight",
        this.castShadow = void 0
    }
    function ko(t, e, n, i) {
        To.call(this, t, e),
        this.type = "RectAreaLight",
        this.width = void 0 !== n ? n : 10,
        this.height = void 0 !== i ? i : 10
    }
    _o.prototype = Object.assign(Object.create(no.prototype), {
        constructor: _o,
        add: function(t) {
            this.curves.push(t)
        },
        closePath: function() {
            var t = this.curves[0].getPoint(0)
              , e = this.curves[this.curves.length - 1].getPoint(1);
            t.equals(e) || this.curves.push(new vo(e,t))
        },
        getPoint: function(t) {
            for (var e = t * this.getLength(), n = this.getCurveLengths(), i = 0; i < n.length; ) {
                if (n[i] >= e) {
                    var r = n[i] - e
                      , s = this.curves[i]
                      , o = s.getLength()
                      , a = 0 === o ? 0 : 1 - r / o;
                    return s.getPointAt(a)
                }
                i++
            }
            return null
        },
        getLength: function() {
            var t = this.getCurveLengths();
            return t[t.length - 1]
        },
        updateArcLengths: function() {
            this.needsUpdate = !0,
            this.cacheLengths = null,
            this.getCurveLengths()
        },
        getCurveLengths: function() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
                return this.cacheLengths;
            for (var t = [], e = 0, n = 0, i = this.curves.length; n < i; n++)
                e += this.curves[n].getLength(),
                t.push(e);
            return this.cacheLengths = t,
            t
        },
        getSpacedPoints: function(t) {
            void 0 === t && (t = 40);
            for (var e = [], n = 0; n <= t; n++)
                e.push(this.getPoint(n / t));
            return this.autoClose && e.push(e[0]),
            e
        },
        getPoints: function(t) {
            t = t || 12;
            for (var e, n = [], i = 0, r = this.curves; i < r.length; i++)
                for (var s = r[i], o = s && s.isEllipseCurve ? 2 * t : s && (s.isLineCurve || s.isLineCurve3) ? 1 : s && s.isSplineCurve ? t * s.points.length : t, a = s.getPoints(o), c = 0; c < a.length; c++) {
                    var l = a[c];
                    e && e.equals(l) || (n.push(l),
                    e = l)
                }
            return this.autoClose && n.length > 1 && !n[n.length - 1].equals(n[0]) && n.push(n[0]),
            n
        },
        copy: function(t) {
            no.prototype.copy.call(this, t),
            this.curves = [];
            for (var e = 0, n = t.curves.length; e < n; e++) {
                var i = t.curves[e];
                this.curves.push(i.clone())
            }
            return this.autoClose = t.autoClose,
            this
        },
        toJSON: function() {
            var t = no.prototype.toJSON.call(this);
            t.autoClose = this.autoClose,
            t.curves = [];
            for (var e = 0, n = this.curves.length; e < n; e++) {
                var i = this.curves[e];
                t.curves.push(i.toJSON())
            }
            return t
        },
        fromJSON: function(t) {
            no.prototype.fromJSON.call(this, t),
            this.autoClose = t.autoClose,
            this.curves = [];
            for (var e = 0, n = t.curves.length; e < n; e++) {
                var i = t.curves[e];
                this.curves.push((new Mo[i.type]).fromJSON(i))
            }
            return this
        }
    }),
    So.prototype = Object.assign(Object.create(_o.prototype), {
        constructor: So,
        setFromPoints: function(t) {
            this.moveTo(t[0].x, t[0].y);
            for (var e = 1, n = t.length; e < n; e++)
                this.lineTo(t[e].x, t[e].y)
        },
        moveTo: function(t, e) {
            this.currentPoint.set(t, e)
        },
        lineTo: function(t, e) {
            var n = new vo(this.currentPoint.clone(),new Ue(t,e));
            this.curves.push(n),
            this.currentPoint.set(t, e)
        },
        quadraticCurveTo: function(t, e, n, i) {
            var r = new xo(this.currentPoint.clone(),new Ue(t,e),new Ue(n,i));
            this.curves.push(r),
            this.currentPoint.set(n, i)
        },
        bezierCurveTo: function(t, e, n, i, r, s) {
            var o = new mo(this.currentPoint.clone(),new Ue(t,e),new Ue(n,i),new Ue(r,s));
            this.curves.push(o),
            this.currentPoint.set(r, s)
        },
        splineThru: function(t) {
            var e = new bo([this.currentPoint.clone()].concat(t));
            this.curves.push(e),
            this.currentPoint.copy(t[t.length - 1])
        },
        arc: function(t, e, n, i, r, s) {
            var o = this.currentPoint.x
              , a = this.currentPoint.y;
            this.absarc(t + o, e + a, n, i, r, s)
        },
        absarc: function(t, e, n, i, r, s) {
            this.absellipse(t, e, n, n, i, r, s)
        },
        ellipse: function(t, e, n, i, r, s, o, a) {
            var c = this.currentPoint.x
              , l = this.currentPoint.y;
            this.absellipse(t + c, e + l, n, i, r, s, o, a)
        },
        absellipse: function(t, e, n, i, r, s, o, a) {
            var c = new io(t,e,n,i,r,s,o,a);
            if (this.curves.length > 0) {
                var l = c.getPoint(0);
                l.equals(this.currentPoint) || this.lineTo(l.x, l.y)
            }
            this.curves.push(c);
            var h = c.getPoint(1);
            this.currentPoint.copy(h)
        },
        copy: function(t) {
            return _o.prototype.copy.call(this, t),
            this.currentPoint.copy(t.currentPoint),
            this
        },
        toJSON: function() {
            var t = _o.prototype.toJSON.call(this);
            return t.currentPoint = this.currentPoint.toArray(),
            t
        },
        fromJSON: function(t) {
            return _o.prototype.fromJSON.call(this, t),
            this.currentPoint.fromArray(t.currentPoint),
            this
        }
    }),
    Eo.prototype = Object.assign(Object.create(So.prototype), {
        constructor: Eo,
        getPointsHoles: function(t) {
            for (var e = [], n = 0, i = this.holes.length; n < i; n++)
                e[n] = this.holes[n].getPoints(t);
            return e
        },
        extractPoints: function(t) {
            return {
                shape: this.getPoints(t),
                holes: this.getPointsHoles(t)
            }
        },
        copy: function(t) {
            So.prototype.copy.call(this, t),
            this.holes = [];
            for (var e = 0, n = t.holes.length; e < n; e++) {
                var i = t.holes[e];
                this.holes.push(i.clone())
            }
            return this
        },
        toJSON: function() {
            var t = So.prototype.toJSON.call(this);
            t.uuid = this.uuid,
            t.holes = [];
            for (var e = 0, n = this.holes.length; e < n; e++) {
                var i = this.holes[e];
                t.holes.push(i.toJSON())
            }
            return t
        },
        fromJSON: function(t) {
            So.prototype.fromJSON.call(this, t),
            this.uuid = t.uuid,
            this.holes = [];
            for (var e = 0, n = t.holes.length; e < n; e++) {
                var i = t.holes[e];
                this.holes.push((new So).fromJSON(i))
            }
            return this
        }
    }),
    To.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: To,
        isLight: !0,
        copy: function(t) {
            return pn.prototype.copy.call(this, t),
            this.color.copy(t.color),
            this.intensity = t.intensity,
            this
        },
        toJSON: function(t) {
            var e = pn.prototype.toJSON.call(this, t);
            return e.object.color = this.color.getHex(),
            e.object.intensity = this.intensity,
            void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()),
            void 0 !== this.distance && (e.object.distance = this.distance),
            void 0 !== this.angle && (e.object.angle = this.angle),
            void 0 !== this.decay && (e.object.decay = this.decay),
            void 0 !== this.penumbra && (e.object.penumbra = this.penumbra),
            void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()),
            e
        }
    }),
    Ao.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Ao,
        isHemisphereLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t),
            this.groundColor.copy(t.groundColor),
            this
        }
    }),
    Object.assign(Lo.prototype, {
        copy: function(t) {
            return this.camera = t.camera.clone(),
            this.bias = t.bias,
            this.radius = t.radius,
            this.mapSize.copy(t.mapSize),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        toJSON: function() {
            var t = {};
            return 0 !== this.bias && (t.bias = this.bias),
            1 !== this.radius && (t.radius = this.radius),
            512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()),
            t.camera = this.camera.toJSON(!1).object,
            delete t.camera.matrix,
            t
        }
    }),
    Ro.prototype = Object.assign(Object.create(Lo.prototype), {
        constructor: Ro,
        isSpotLightShadow: !0,
        update: function(t) {
            var e = this.camera
              , n = 2 * Ne.RAD2DEG * t.angle
              , i = this.mapSize.width / this.mapSize.height
              , r = t.distance || e.far;
            n === e.fov && i === e.aspect && r === e.far || (e.fov = n,
            e.aspect = i,
            e.far = r,
            e.updateProjectionMatrix())
        }
    }),
    Po.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Po,
        isSpotLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t),
            this.distance = t.distance,
            this.angle = t.angle,
            this.penumbra = t.penumbra,
            this.decay = t.decay,
            this.target = t.target.clone(),
            this.shadow = t.shadow.clone(),
            this
        }
    }),
    Co.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Co,
        isPointLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t),
            this.distance = t.distance,
            this.decay = t.decay,
            this.shadow = t.shadow.clone(),
            this
        }
    }),
    Io.prototype = Object.assign(Object.create(Lo.prototype), {
        constructor: Io
    }),
    Oo.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Oo,
        isDirectionalLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t),
            this.target = t.target.clone(),
            this.shadow = t.shadow.clone(),
            this
        }
    }),
    Do.prototype = Object.assign(Object.create(To.prototype), {
        constructor: Do,
        isAmbientLight: !0
    }),
    ko.prototype = Object.assign(Object.create(To.prototype), {
        constructor: ko,
        isRectAreaLight: !0,
        copy: function(t) {
            return To.prototype.copy.call(this, t),
            this.width = t.width,
            this.height = t.height,
            this
        },
        toJSON: function(t) {
            var e = To.prototype.toJSON.call(this, t);
            return e.object.width = this.width,
            e.object.height = this.height,
            e
        }
    });
    var Bo = {
        arraySlice: function(t, e, n) {
            return Bo.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n)
        },
        convertArray: function(t, e, n) {
            return !t || !n && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t)
        },
        isTypedArray: function(t) {
            return ArrayBuffer.isView(t) && !(t instanceof DataView)
        },
        getKeyframeOrder: function(t) {
            for (var e = t.length, n = new Array(e), i = 0; i !== e; ++i)
                n[i] = i;
            return n.sort(function(e, n) {
                return t[e] - t[n]
            }),
            n
        },
        sortedArray: function(t, e, n) {
            for (var i = t.length, r = new t.constructor(i), s = 0, o = 0; o !== i; ++s)
                for (var a = n[s] * e, c = 0; c !== e; ++c)
                    r[o++] = t[a + c];
            return r
        },
        flattenJSON: function(t, e, n, i) {
            for (var r = 1, s = t[0]; void 0 !== s && void 0 === s[i]; )
                s = t[r++];
            if (void 0 !== s) {
                var o = s[i];
                if (void 0 !== o)
                    if (Array.isArray(o))
                        do {
                            void 0 !== (o = s[i]) && (e.push(s.time),
                            n.push.apply(n, o)),
                            s = t[r++]
                        } while (void 0 !== s);
                    else if (void 0 !== o.toArray)
                        do {
                            void 0 !== (o = s[i]) && (e.push(s.time),
                            o.toArray(n, n.length)),
                            s = t[r++]
                        } while (void 0 !== s);
                    else
                        do {
                            void 0 !== (o = s[i]) && (e.push(s.time),
                            n.push(o)),
                            s = t[r++]
                        } while (void 0 !== s)
            }
        }
    };
    function No(t, e, n, i) {
        this.parameterPositions = t,
        this._cachedIndex = 0,
        this.resultBuffer = void 0 !== i ? i : new e.constructor(n),
        this.sampleValues = e,
        this.valueSize = n
    }
    function Uo(t, e, n, i) {
        No.call(this, t, e, n, i),
        this._weightPrev = -0,
        this._offsetPrev = -0,
        this._weightNext = -0,
        this._offsetNext = -0
    }
    function zo(t, e, n, i) {
        No.call(this, t, e, n, i)
    }
    function Fo(t, e, n, i) {
        No.call(this, t, e, n, i)
    }
    function Ho(t, e, n, i) {
        if (void 0 === t)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
        if (void 0 === e || 0 === e.length)
            throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
        this.name = t,
        this.times = Bo.convertArray(e, this.TimeBufferType),
        this.values = Bo.convertArray(n, this.ValueBufferType),
        this.setInterpolation(i || this.DefaultInterpolation)
    }
    function Go(t, e, n) {
        Ho.call(this, t, e, n)
    }
    function jo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }
    function Vo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }
    function Wo(t, e, n, i) {
        No.call(this, t, e, n, i)
    }
    function Yo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }
    function qo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }
    function Xo(t, e, n, i) {
        Ho.call(this, t, e, n, i)
    }
    function Zo(t, e, n) {
        this.name = t,
        this.tracks = n,
        this.duration = void 0 !== e ? e : -1,
        this.uuid = Ne.generateUUID(),
        this.duration < 0 && this.resetDuration()
    }
    function Ko(t) {
        if (void 0 === t.type)
            throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
        var e = function(t) {
            switch (t.toLowerCase()) {
            case "scalar":
            case "double":
            case "float":
            case "number":
            case "integer":
                return Vo;
            case "vector":
            case "vector2":
            case "vector3":
            case "vector4":
                return Xo;
            case "color":
                return jo;
            case "quaternion":
                return Yo;
            case "bool":
            case "boolean":
                return Go;
            case "string":
                return qo
            }
            throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t)
        }(t.type);
        if (void 0 === t.times) {
            var n = []
              , i = [];
            Bo.flattenJSON(t.keys, n, i, "value"),
            t.times = n,
            t.values = i
        }
        return void 0 !== e.parse ? e.parse(t) : new e(t.name,t.times,t.values,t.interpolation)
    }
    function Jo(t) {
        this.manager = void 0 !== t ? t : Xs,
        this.textures = {}
    }
    function Qo(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    Object.assign(No.prototype, {
        evaluate: function(t) {
            var e = this.parameterPositions
              , n = this._cachedIndex
              , i = e[n]
              , r = e[n - 1];
            t: {
                e: {
                    var s;
                    n: {
                        i: if (!(t < i)) {
                            for (var o = n + 2; ; ) {
                                if (void 0 === i) {
                                    if (t < r)
                                        break i;
                                    return n = e.length,
                                    this._cachedIndex = n,
                                    this.afterEnd_(n - 1, t, r)
                                }
                                if (n === o)
                                    break;
                                if (r = i,
                                t < (i = e[++n]))
                                    break e
                            }
                            s = e.length;
                            break n
                        }
                        if (t >= r)
                            break t;
                        var a = e[1];
                        for (t < a && (n = 2,
                        r = a),
                        o = n - 2; ; ) {
                            if (void 0 === r)
                                return this._cachedIndex = 0,
                                this.beforeStart_(0, t, i);
                            if (n === o)
                                break;
                            if (i = r,
                            t >= (r = e[--n - 1]))
                                break e
                        }
                        s = n,
                        n = 0
                    }
                    for (; n < s; ) {
                        var c = n + s >>> 1;
                        t < e[c] ? s = c : n = c + 1
                    }
                    if (i = e[n],
                    void 0 === (r = e[n - 1]))
                        return this._cachedIndex = 0,
                        this.beforeStart_(0, t, i);
                    if (void 0 === i)
                        return n = e.length,
                        this._cachedIndex = n,
                        this.afterEnd_(n - 1, r, t)
                }
                this._cachedIndex = n,
                this.intervalChanged_(n, r, i)
            }
            return this.interpolate_(n, r, t, i)
        },
        settings: null,
        DefaultSettings_: {},
        getSettings_: function() {
            return this.settings || this.DefaultSettings_
        },
        copySampleValue_: function(t) {
            for (var e = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = t * i, s = 0; s !== i; ++s)
                e[s] = n[r + s];
            return e
        },
        interpolate_: function() {
            throw new Error("call to abstract method")
        },
        intervalChanged_: function() {}
    }),
    Object.assign(No.prototype, {
        beforeStart_: No.prototype.copySampleValue_,
        afterEnd_: No.prototype.copySampleValue_
    }),
    Uo.prototype = Object.assign(Object.create(No.prototype), {
        constructor: Uo,
        DefaultSettings_: {
            endingStart: xe,
            endingEnd: xe
        },
        intervalChanged_: function(t, e, n) {
            var i = this.parameterPositions
              , r = t - 2
              , s = t + 1
              , o = i[r]
              , a = i[s];
            if (void 0 === o)
                switch (this.getSettings_().endingStart) {
                case we:
                    r = t,
                    o = 2 * e - n;
                    break;
                case be:
                    o = e + i[r = i.length - 2] - i[r + 1];
                    break;
                default:
                    r = t,
                    o = n
                }
            if (void 0 === a)
                switch (this.getSettings_().endingEnd) {
                case we:
                    s = t,
                    a = 2 * n - e;
                    break;
                case be:
                    s = 1,
                    a = n + i[1] - i[0];
                    break;
                default:
                    s = t - 1,
                    a = e
                }
            var c = .5 * (n - e)
              , l = this.valueSize;
            this._weightPrev = c / (e - o),
            this._weightNext = c / (a - n),
            this._offsetPrev = r * l,
            this._offsetNext = s * l
        },
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, s = this.sampleValues, o = this.valueSize, a = t * o, c = a - o, l = this._offsetPrev, h = this._offsetNext, p = this._weightPrev, u = this._weightNext, d = (n - e) / (i - e), f = d * d, m = f * d, g = -p * m + 2 * p * f - p * d, v = (1 + p) * m + (-1.5 - 2 * p) * f + (-.5 + p) * d + 1, y = (-1 - u) * m + (1.5 + u) * f + .5 * d, x = u * m - u * f, w = 0; w !== o; ++w)
                r[w] = g * s[l + w] + v * s[c + w] + y * s[a + w] + x * s[h + w];
            return r
        }
    }),
    zo.prototype = Object.assign(Object.create(No.prototype), {
        constructor: zo,
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, s = this.sampleValues, o = this.valueSize, a = t * o, c = a - o, l = (n - e) / (i - e), h = 1 - l, p = 0; p !== o; ++p)
                r[p] = s[c + p] * h + s[a + p] * l;
            return r
        }
    }),
    Fo.prototype = Object.assign(Object.create(No.prototype), {
        constructor: Fo,
        interpolate_: function(t) {
            return this.copySampleValue_(t - 1)
        }
    }),
    Object.assign(Ho, {
        toJSON: function(t) {
            var e, n = t.constructor;
            if (void 0 !== n.toJSON)
                e = n.toJSON(t);
            else {
                e = {
                    name: t.name,
                    times: Bo.convertArray(t.times, Array),
                    values: Bo.convertArray(t.values, Array)
                };
                var i = t.getInterpolation();
                i !== t.DefaultInterpolation && (e.interpolation = i)
            }
            return e.type = t.ValueTypeName,
            e
        }
    }),
    Object.assign(Ho.prototype, {
        constructor: Ho,
        TimeBufferType: Float32Array,
        ValueBufferType: Float32Array,
        DefaultInterpolation: ve,
        InterpolantFactoryMethodDiscrete: function(t) {
            return new Fo(this.times,this.values,this.getValueSize(),t)
        },
        InterpolantFactoryMethodLinear: function(t) {
            return new zo(this.times,this.values,this.getValueSize(),t)
        },
        InterpolantFactoryMethodSmooth: function(t) {
            return new Uo(this.times,this.values,this.getValueSize(),t)
        },
        setInterpolation: function(t) {
            var e;
            switch (t) {
            case ge:
                e = this.InterpolantFactoryMethodDiscrete;
                break;
            case ve:
                e = this.InterpolantFactoryMethodLinear;
                break;
            case ye:
                e = this.InterpolantFactoryMethodSmooth
            }
            if (void 0 === e) {
                var n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                if (void 0 === this.createInterpolant) {
                    if (t === this.DefaultInterpolation)
                        throw new Error(n);
                    this.setInterpolation(this.DefaultInterpolation)
                }
                return console.warn("THREE.KeyframeTrack:", n),
                this
            }
            return this.createInterpolant = e,
            this
        },
        getInterpolation: function() {
            switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
                return ge;
            case this.InterpolantFactoryMethodLinear:
                return ve;
            case this.InterpolantFactoryMethodSmooth:
                return ye
            }
        },
        getValueSize: function() {
            return this.values.length / this.times.length
        },
        shift: function(t) {
            if (0 !== t)
                for (var e = this.times, n = 0, i = e.length; n !== i; ++n)
                    e[n] += t;
            return this
        },
        scale: function(t) {
            if (1 !== t)
                for (var e = this.times, n = 0, i = e.length; n !== i; ++n)
                    e[n] *= t;
            return this
        },
        trim: function(t, e) {
            for (var n = this.times, i = n.length, r = 0, s = i - 1; r !== i && n[r] < t; )
                ++r;
            for (; -1 !== s && n[s] > e; )
                --s;
            if (++s,
            0 !== r || s !== i) {
                r >= s && (r = (s = Math.max(s, 1)) - 1);
                var o = this.getValueSize();
                this.times = Bo.arraySlice(n, r, s),
                this.values = Bo.arraySlice(this.values, r * o, s * o)
            }
            return this
        },
        validate: function() {
            var t = !0
              , e = this.getValueSize();
            e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this),
            t = !1);
            var n = this.times
              , i = this.values
              , r = n.length;
            0 === r && (console.error("THREE.KeyframeTrack: Track is empty.", this),
            t = !1);
            for (var s = null, o = 0; o !== r; o++) {
                var a = n[o];
                if ("number" == typeof a && isNaN(a)) {
                    console.error("THREE.KeyframeTrack: Time is not a valid number.", this, o, a),
                    t = !1;
                    break
                }
                if (null !== s && s > a) {
                    console.error("THREE.KeyframeTrack: Out of order keys.", this, o, a, s),
                    t = !1;
                    break
                }
                s = a
            }
            if (void 0 !== i && Bo.isTypedArray(i)) {
                o = 0;
                for (var c = i.length; o !== c; ++o) {
                    var l = i[o];
                    if (isNaN(l)) {
                        console.error("THREE.KeyframeTrack: Value is not a valid number.", this, o, l),
                        t = !1;
                        break
                    }
                }
            }
            return t
        },
        optimize: function() {
            for (var t = this.times, e = this.values, n = this.getValueSize(), i = this.getInterpolation() === ye, r = 1, s = t.length - 1, o = 1; o < s; ++o) {
                var a = !1
                  , c = t[o];
                if (c !== t[o + 1] && (1 !== o || c !== c[0]))
                    if (i)
                        a = !0;
                    else
                        for (var l = o * n, h = l - n, p = l + n, u = 0; u !== n; ++u) {
                            var d = e[l + u];
                            if (d !== e[h + u] || d !== e[p + u]) {
                                a = !0;
                                break
                            }
                        }
                if (a) {
                    if (o !== r) {
                        t[r] = t[o];
                        var f = o * n
                          , m = r * n;
                        for (u = 0; u !== n; ++u)
                            e[m + u] = e[f + u]
                    }
                    ++r
                }
            }
            if (s > 0) {
                for (t[r] = t[s],
                f = s * n,
                m = r * n,
                u = 0; u !== n; ++u)
                    e[m + u] = e[f + u];
                ++r
            }
            return r !== t.length && (this.times = Bo.arraySlice(t, 0, r),
            this.values = Bo.arraySlice(e, 0, r * n)),
            this
        }
    }),
    Go.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Go,
        ValueTypeName: "bool",
        ValueBufferType: Array,
        DefaultInterpolation: ge,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }),
    jo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: jo,
        ValueTypeName: "color"
    }),
    Vo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Vo,
        ValueTypeName: "number"
    }),
    Wo.prototype = Object.assign(Object.create(No.prototype), {
        constructor: Wo,
        interpolate_: function(t, e, n, i) {
            for (var r = this.resultBuffer, s = this.sampleValues, o = this.valueSize, a = t * o, c = (n - e) / (i - e), l = a + o; a !== l; a += 4)
                Fe.slerpFlat(r, 0, s, a - o, s, a, c);
            return r
        }
    }),
    Yo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Yo,
        ValueTypeName: "quaternion",
        DefaultInterpolation: ve,
        InterpolantFactoryMethodLinear: function(t) {
            return new Wo(this.times,this.values,this.getValueSize(),t)
        },
        InterpolantFactoryMethodSmooth: void 0
    }),
    qo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: qo,
        ValueTypeName: "string",
        ValueBufferType: Array,
        DefaultInterpolation: ge,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }),
    Xo.prototype = Object.assign(Object.create(Ho.prototype), {
        constructor: Xo,
        ValueTypeName: "vector"
    }),
    Object.assign(Zo, {
        parse: function(t) {
            for (var e = [], n = t.tracks, i = 1 / (t.fps || 1), r = 0, s = n.length; r !== s; ++r)
                e.push(Ko(n[r]).scale(i));
            return new Zo(t.name,t.duration,e)
        },
        toJSON: function(t) {
            for (var e = [], n = t.tracks, i = {
                name: t.name,
                duration: t.duration,
                tracks: e,
                uuid: t.uuid
            }, r = 0, s = n.length; r !== s; ++r)
                e.push(Ho.toJSON(n[r]));
            return i
        },
        CreateFromMorphTargetSequence: function(t, e, n, i) {
            for (var r = e.length, s = [], o = 0; o < r; o++) {
                var a = []
                  , c = [];
                a.push((o + r - 1) % r, o, (o + 1) % r),
                c.push(0, 1, 0);
                var l = Bo.getKeyframeOrder(a);
                a = Bo.sortedArray(a, 1, l),
                c = Bo.sortedArray(c, 1, l),
                i || 0 !== a[0] || (a.push(r),
                c.push(c[0])),
                s.push(new Vo(".morphTargetInfluences[" + e[o].name + "]",a,c).scale(1 / n))
            }
            return new Zo(t,-1,s)
        },
        findByName: function(t, e) {
            var n = t;
            if (!Array.isArray(t)) {
                var i = t;
                n = i.geometry && i.geometry.animations || i.animations
            }
            for (var r = 0; r < n.length; r++)
                if (n[r].name === e)
                    return n[r];
            return null
        },
        CreateClipsFromMorphTargetSequences: function(t, e, n) {
            for (var i = {}, r = /^([\w-]*?)([\d]+)$/, s = 0, o = t.length; s < o; s++) {
                var a = t[s]
                  , c = a.name.match(r);
                if (c && c.length > 1) {
                    var l = i[p = c[1]];
                    l || (i[p] = l = []),
                    l.push(a)
                }
            }
            var h = [];
            for (var p in i)
                h.push(Zo.CreateFromMorphTargetSequence(p, i[p], e, n));
            return h
        },
        parseAnimation: function(t, e) {
            if (!t)
                return console.error("THREE.AnimationClip: No animation in JSONLoader data."),
                null;
            for (var n = function(t, e, n, i, r) {
                if (0 !== n.length) {
                    var s = []
                      , o = [];
                    Bo.flattenJSON(n, s, o, i),
                    0 !== s.length && r.push(new t(e,s,o))
                }
            }, i = [], r = t.name || "default", s = t.length || -1, o = t.fps || 30, a = t.hierarchy || [], c = 0; c < a.length; c++) {
                var l = a[c].keys;
                if (l && 0 !== l.length)
                    if (l[0].morphTargets) {
                        for (var h = {}, p = 0; p < l.length; p++)
                            if (l[p].morphTargets)
                                for (var u = 0; u < l[p].morphTargets.length; u++)
                                    h[l[p].morphTargets[u]] = -1;
                        for (var d in h) {
                            var f = []
                              , m = [];
                            for (u = 0; u !== l[p].morphTargets.length; ++u) {
                                var g = l[p];
                                f.push(g.time),
                                m.push(g.morphTarget === d ? 1 : 0)
                            }
                            i.push(new Vo(".morphTargetInfluence[" + d + "]",f,m))
                        }
                        s = h.length * (o || 1)
                    } else {
                        var v = ".bones[" + e[c].name + "]";
                        n(Xo, v + ".position", l, "pos", i),
                        n(Yo, v + ".quaternion", l, "rot", i),
                        n(Xo, v + ".scale", l, "scl", i)
                    }
            }
            return 0 === i.length ? null : new Zo(r,s,i)
        }
    }),
    Object.assign(Zo.prototype, {
        resetDuration: function() {
            for (var t = 0, e = 0, n = this.tracks.length; e !== n; ++e) {
                var i = this.tracks[e];
                t = Math.max(t, i.times[i.times.length - 1])
            }
            return this.duration = t,
            this
        },
        trim: function() {
            for (var t = 0; t < this.tracks.length; t++)
                this.tracks[t].trim(0, this.duration);
            return this
        },
        validate: function() {
            for (var t = !0, e = 0; e < this.tracks.length; e++)
                t = t && this.tracks[e].validate();
            return t
        },
        optimize: function() {
            for (var t = 0; t < this.tracks.length; t++)
                this.tracks[t].optimize();
            return this
        }
    }),
    Object.assign(Jo.prototype, {
        load: function(t, e, n, i) {
            var r = this;
            new Ks(r.manager).load(t, function(t) {
                e(r.parse(JSON.parse(t)))
            }, n, i)
        },
        setTextures: function(t) {
            this.textures = t
        },
        parse: function(t) {
            var e = this.textures;
            function n(t) {
                return void 0 === e[t] && console.warn("THREE.MaterialLoader: Undefined texture", t),
                e[t]
            }
            var i = new Ws[t.type];
            if (void 0 !== t.uuid && (i.uuid = t.uuid),
            void 0 !== t.name && (i.name = t.name),
            void 0 !== t.color && i.color.setHex(t.color),
            void 0 !== t.roughness && (i.roughness = t.roughness),
            void 0 !== t.metalness && (i.metalness = t.metalness),
            void 0 !== t.emissive && i.emissive.setHex(t.emissive),
            void 0 !== t.specular && i.specular.setHex(t.specular),
            void 0 !== t.shininess && (i.shininess = t.shininess),
            void 0 !== t.clearCoat && (i.clearCoat = t.clearCoat),
            void 0 !== t.clearCoatRoughness && (i.clearCoatRoughness = t.clearCoatRoughness),
            void 0 !== t.uniforms && (i.uniforms = t.uniforms),
            void 0 !== t.vertexShader && (i.vertexShader = t.vertexShader),
            void 0 !== t.fragmentShader && (i.fragmentShader = t.fragmentShader),
            void 0 !== t.vertexColors && (i.vertexColors = t.vertexColors),
            void 0 !== t.fog && (i.fog = t.fog),
            void 0 !== t.flatShading && (i.flatShading = t.flatShading),
            void 0 !== t.blending && (i.blending = t.blending),
            void 0 !== t.side && (i.side = t.side),
            void 0 !== t.opacity && (i.opacity = t.opacity),
            void 0 !== t.transparent && (i.transparent = t.transparent),
            void 0 !== t.alphaTest && (i.alphaTest = t.alphaTest),
            void 0 !== t.depthTest && (i.depthTest = t.depthTest),
            void 0 !== t.depthWrite && (i.depthWrite = t.depthWrite),
            void 0 !== t.colorWrite && (i.colorWrite = t.colorWrite),
            void 0 !== t.wireframe && (i.wireframe = t.wireframe),
            void 0 !== t.wireframeLinewidth && (i.wireframeLinewidth = t.wireframeLinewidth),
            void 0 !== t.wireframeLinecap && (i.wireframeLinecap = t.wireframeLinecap),
            void 0 !== t.wireframeLinejoin && (i.wireframeLinejoin = t.wireframeLinejoin),
            void 0 !== t.rotation && (i.rotation = t.rotation),
            1 !== t.linewidth && (i.linewidth = t.linewidth),
            void 0 !== t.dashSize && (i.dashSize = t.dashSize),
            void 0 !== t.gapSize && (i.gapSize = t.gapSize),
            void 0 !== t.scale && (i.scale = t.scale),
            void 0 !== t.polygonOffset && (i.polygonOffset = t.polygonOffset),
            void 0 !== t.polygonOffsetFactor && (i.polygonOffsetFactor = t.polygonOffsetFactor),
            void 0 !== t.polygonOffsetUnits && (i.polygonOffsetUnits = t.polygonOffsetUnits),
            void 0 !== t.skinning && (i.skinning = t.skinning),
            void 0 !== t.morphTargets && (i.morphTargets = t.morphTargets),
            void 0 !== t.dithering && (i.dithering = t.dithering),
            void 0 !== t.visible && (i.visible = t.visible),
            void 0 !== t.userData && (i.userData = t.userData),
            void 0 !== t.shading && (i.flatShading = 1 === t.shading),
            void 0 !== t.size && (i.size = t.size),
            void 0 !== t.sizeAttenuation && (i.sizeAttenuation = t.sizeAttenuation),
            void 0 !== t.map && (i.map = n(t.map)),
            void 0 !== t.alphaMap && (i.alphaMap = n(t.alphaMap),
            i.transparent = !0),
            void 0 !== t.bumpMap && (i.bumpMap = n(t.bumpMap)),
            void 0 !== t.bumpScale && (i.bumpScale = t.bumpScale),
            void 0 !== t.normalMap && (i.normalMap = n(t.normalMap)),
            void 0 !== t.normalMapType && (i.normalMapType = t.normalMapType),
            void 0 !== t.normalScale) {
                var r = t.normalScale;
                !1 === Array.isArray(r) && (r = [r, r]),
                i.normalScale = (new Ue).fromArray(r)
            }
            return void 0 !== t.displacementMap && (i.displacementMap = n(t.displacementMap)),
            void 0 !== t.displacementScale && (i.displacementScale = t.displacementScale),
            void 0 !== t.displacementBias && (i.displacementBias = t.displacementBias),
            void 0 !== t.roughnessMap && (i.roughnessMap = n(t.roughnessMap)),
            void 0 !== t.metalnessMap && (i.metalnessMap = n(t.metalnessMap)),
            void 0 !== t.emissiveMap && (i.emissiveMap = n(t.emissiveMap)),
            void 0 !== t.emissiveIntensity && (i.emissiveIntensity = t.emissiveIntensity),
            void 0 !== t.specularMap && (i.specularMap = n(t.specularMap)),
            void 0 !== t.envMap && (i.envMap = n(t.envMap)),
            void 0 !== t.reflectivity && (i.reflectivity = t.reflectivity),
            void 0 !== t.lightMap && (i.lightMap = n(t.lightMap)),
            void 0 !== t.lightMapIntensity && (i.lightMapIntensity = t.lightMapIntensity),
            void 0 !== t.aoMap && (i.aoMap = n(t.aoMap)),
            void 0 !== t.aoMapIntensity && (i.aoMapIntensity = t.aoMapIntensity),
            void 0 !== t.gradientMap && (i.gradientMap = n(t.gradientMap)),
            i
        }
    }),
    Object.assign(Qo.prototype, {
        load: function(t, e, n, i) {
            var r = this;
            new Ks(r.manager).load(t, function(t) {
                e(r.parse(JSON.parse(t)))
            }, n, i)
        },
        parse: function(t) {
            var e = new Pn
              , n = t.data.index;
            if (void 0 !== n) {
                var i = new $o[n.type](n.array);
                e.setIndex(new vn(i,1))
            }
            var r = t.data.attributes;
            for (var s in r) {
                var o = r[s];
                i = new $o[o.type](o.array),
                e.addAttribute(s, new vn(i,o.itemSize,o.normalized))
            }
            var a = t.data.groups || t.data.drawcalls || t.data.offsets;
            if (void 0 !== a)
                for (var c = 0, l = a.length; c !== l; ++c) {
                    var h = a[c];
                    e.addGroup(h.start, h.count, h.materialIndex)
                }
            var p = t.data.boundingSphere;
            if (void 0 !== p) {
                var u = new He;
                void 0 !== p.center && u.fromArray(p.center),
                e.boundingSphere = new Je(u,p.radius)
            }
            return e
        }
    });
    var $o = {
        Int8Array: Int8Array,
        Uint8Array: Uint8Array,
        Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
        Int16Array: Int16Array,
        Uint16Array: Uint16Array,
        Int32Array: Int32Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };
    function ta() {}
    ta.Handlers = {
        handlers: [],
        add: function(t, e) {
            this.handlers.push(t, e)
        },
        get: function(t) {
            for (var e = this.handlers, n = 0, i = e.length; n < i; n += 2) {
                var r = e[n]
                  , s = e[n + 1];
                if (r.test(t))
                    return s
            }
            return null
        }
    },
    Object.assign(ta.prototype, {
        crossOrigin: "anonymous",
        onLoadStart: function() {},
        onLoadProgress: function() {},
        onLoadComplete: function() {},
        initMaterials: function(t, e, n) {
            for (var i = [], r = 0; r < t.length; ++r)
                i[r] = this.createMaterial(t[r], e, n);
            return i
        },
        createMaterial: function() {
            var t = {
                NoBlending: _,
                NormalBlending: S,
                AdditiveBlending: E,
                SubtractiveBlending: T,
                MultiplyBlending: A,
                CustomBlending: L
            }
              , e = new rn
              , n = new eo
              , i = new Jo;
            return function(r, s, o) {
                var a = {};
                function c(t, e, i, r, c) {
                    var l, h = s + t, p = ta.Handlers.get(h);
                    null !== p ? l = p.load(h) : (n.setCrossOrigin(o),
                    l = n.load(h)),
                    void 0 !== e && (l.repeat.fromArray(e),
                    1 !== e[0] && (l.wrapS = mt),
                    1 !== e[1] && (l.wrapT = mt)),
                    void 0 !== i && l.offset.fromArray(i),
                    void 0 !== r && ("repeat" === r[0] && (l.wrapS = mt),
                    "mirror" === r[0] && (l.wrapS = vt),
                    "repeat" === r[1] && (l.wrapT = mt),
                    "mirror" === r[1] && (l.wrapT = vt)),
                    void 0 !== c && (l.anisotropy = c);
                    var u = Ne.generateUUID();
                    return a[u] = l,
                    u
                }
                var l = {
                    uuid: Ne.generateUUID(),
                    type: "MeshLambertMaterial"
                };
                for (var h in r) {
                    var p = r[h];
                    switch (h) {
                    case "DbgColor":
                    case "DbgIndex":
                    case "opticalDensity":
                    case "illumination":
                        break;
                    case "DbgName":
                        l.name = p;
                        break;
                    case "blending":
                        l.blending = t[p];
                        break;
                    case "colorAmbient":
                    case "mapAmbient":
                        console.warn("THREE.Loader.createMaterial:", h, "is no longer supported.");
                        break;
                    case "colorDiffuse":
                        l.color = e.fromArray(p).getHex();
                        break;
                    case "colorSpecular":
                        l.specular = e.fromArray(p).getHex();
                        break;
                    case "colorEmissive":
                        l.emissive = e.fromArray(p).getHex();
                        break;
                    case "specularCoef":
                        l.shininess = p;
                        break;
                    case "shading":
                        "basic" === p.toLowerCase() && (l.type = "MeshBasicMaterial"),
                        "phong" === p.toLowerCase() && (l.type = "MeshPhongMaterial"),
                        "standard" === p.toLowerCase() && (l.type = "MeshStandardMaterial");
                        break;
                    case "mapDiffuse":
                        l.map = c(p, r.mapDiffuseRepeat, r.mapDiffuseOffset, r.mapDiffuseWrap, r.mapDiffuseAnisotropy);
                        break;
                    case "mapDiffuseRepeat":
                    case "mapDiffuseOffset":
                    case "mapDiffuseWrap":
                    case "mapDiffuseAnisotropy":
                        break;
                    case "mapEmissive":
                        l.emissiveMap = c(p, r.mapEmissiveRepeat, r.mapEmissiveOffset, r.mapEmissiveWrap, r.mapEmissiveAnisotropy);
                        break;
                    case "mapEmissiveRepeat":
                    case "mapEmissiveOffset":
                    case "mapEmissiveWrap":
                    case "mapEmissiveAnisotropy":
                        break;
                    case "mapLight":
                        l.lightMap = c(p, r.mapLightRepeat, r.mapLightOffset, r.mapLightWrap, r.mapLightAnisotropy);
                        break;
                    case "mapLightRepeat":
                    case "mapLightOffset":
                    case "mapLightWrap":
                    case "mapLightAnisotropy":
                        break;
                    case "mapAO":
                        l.aoMap = c(p, r.mapAORepeat, r.mapAOOffset, r.mapAOWrap, r.mapAOAnisotropy);
                        break;
                    case "mapAORepeat":
                    case "mapAOOffset":
                    case "mapAOWrap":
                    case "mapAOAnisotropy":
                        break;
                    case "mapBump":
                        l.bumpMap = c(p, r.mapBumpRepeat, r.mapBumpOffset, r.mapBumpWrap, r.mapBumpAnisotropy);
                        break;
                    case "mapBumpScale":
                        l.bumpScale = p;
                        break;
                    case "mapBumpRepeat":
                    case "mapBumpOffset":
                    case "mapBumpWrap":
                    case "mapBumpAnisotropy":
                        break;
                    case "mapNormal":
                        l.normalMap = c(p, r.mapNormalRepeat, r.mapNormalOffset, r.mapNormalWrap, r.mapNormalAnisotropy);
                        break;
                    case "mapNormalFactor":
                        l.normalScale = p;
                        break;
                    case "mapNormalRepeat":
                    case "mapNormalOffset":
                    case "mapNormalWrap":
                    case "mapNormalAnisotropy":
                        break;
                    case "mapSpecular":
                        l.specularMap = c(p, r.mapSpecularRepeat, r.mapSpecularOffset, r.mapSpecularWrap, r.mapSpecularAnisotropy);
                        break;
                    case "mapSpecularRepeat":
                    case "mapSpecularOffset":
                    case "mapSpecularWrap":
                    case "mapSpecularAnisotropy":
                        break;
                    case "mapMetalness":
                        l.metalnessMap = c(p, r.mapMetalnessRepeat, r.mapMetalnessOffset, r.mapMetalnessWrap, r.mapMetalnessAnisotropy);
                        break;
                    case "mapMetalnessRepeat":
                    case "mapMetalnessOffset":
                    case "mapMetalnessWrap":
                    case "mapMetalnessAnisotropy":
                        break;
                    case "mapRoughness":
                        l.roughnessMap = c(p, r.mapRoughnessRepeat, r.mapRoughnessOffset, r.mapRoughnessWrap, r.mapRoughnessAnisotropy);
                        break;
                    case "mapRoughnessRepeat":
                    case "mapRoughnessOffset":
                    case "mapRoughnessWrap":
                    case "mapRoughnessAnisotropy":
                        break;
                    case "mapAlpha":
                        l.alphaMap = c(p, r.mapAlphaRepeat, r.mapAlphaOffset, r.mapAlphaWrap, r.mapAlphaAnisotropy);
                        break;
                    case "mapAlphaRepeat":
                    case "mapAlphaOffset":
                    case "mapAlphaWrap":
                    case "mapAlphaAnisotropy":
                        break;
                    case "flipSided":
                        l.side = g;
                        break;
                    case "doubleSided":
                        l.side = v;
                        break;
                    case "transparency":
                        console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),
                        l.opacity = p;
                        break;
                    case "depthTest":
                    case "depthWrite":
                    case "colorWrite":
                    case "opacity":
                    case "reflectivity":
                    case "transparent":
                    case "visible":
                    case "wireframe":
                        l[h] = p;
                        break;
                    case "vertexColors":
                        !0 === p && (l.vertexColors = M),
                        "face" === p && (l.vertexColors = b);
                        break;
                    default:
                        console.error("THREE.Loader.createMaterial: Unsupported", h, p)
                    }
                }
                return "MeshBasicMaterial" === l.type && delete l.emissive,
                "MeshPhongMaterial" !== l.type && delete l.specular,
                l.opacity < 1 && (l.transparent = !0),
                i.setTextures(a),
                i.parse(l)
            }
        }()
    });
    var ea = {
        decodeText: function(t) {
            if ("undefined" != typeof TextDecoder)
                return (new TextDecoder).decode(t);
            for (var e = "", n = 0, i = t.length; n < i; n++)
                e += String.fromCharCode(t[n]);
            return decodeURIComponent(escape(e))
        },
        extractUrlBase: function(t) {
            var e = t.lastIndexOf("/");
            return -1 === e ? "./" : t.substr(0, e + 1)
        }
    };
    function na(t) {
        "boolean" == typeof t && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),
        t = void 0),
        this.manager = void 0 !== t ? t : Xs,
        this.withCredentials = !1
    }
    function ia(t) {
        this.manager = void 0 !== t ? t : Xs,
        this.texturePath = ""
    }
    Object.assign(na.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            var r = this
              , s = this.texturePath && "string" == typeof this.texturePath ? this.texturePath : ea.extractUrlBase(t)
              , o = new Ks(this.manager);
            o.setWithCredentials(this.withCredentials),
            o.load(t, function(n) {
                var i = JSON.parse(n)
                  , o = i.metadata;
                if (void 0 !== o) {
                    var a = o.type;
                    if (void 0 !== a && "object" === a.toLowerCase())
                        return void console.error("THREE.JSONLoader: " + t + " should be loaded with THREE.ObjectLoader instead.")
                }
                var c = r.parse(i, s);
                e(c.geometry, c.materials)
            }, n, i)
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t,
            this
        },
        setTexturePath: function(t) {
            return this.texturePath = t,
            this
        },
        parse: function(t, e) {
            void 0 !== t.data && (t = t.data),
            void 0 !== t.scale ? t.scale = 1 / t.scale : t.scale = 1;
            var n = new gn;
            return function(t, e) {
                function n(t, e) {
                    return t & 1 << e
                }
                var i, r, s, o, a, c, l, h, p, u, d, f, m, g, v, y, x, w, b, M, _, S, E, T, A, L = t.faces, R = t.vertices, P = t.normals, C = t.colors, I = t.scale, O = 0;
                if (void 0 !== t.uvs) {
                    for (i = 0; i < t.uvs.length; i++)
                        t.uvs[i].length && O++;
                    for (i = 0; i < O; i++)
                        e.faceVertexUvs[i] = []
                }
                for (o = 0,
                a = R.length; o < a; )
                    (w = new He).x = R[o++] * I,
                    w.y = R[o++] * I,
                    w.z = R[o++] * I,
                    e.vertices.push(w);
                for (o = 0,
                a = L.length; o < a; )
                    if (d = n(u = L[o++], 0),
                    f = n(u, 1),
                    m = n(u, 3),
                    g = n(u, 4),
                    v = n(u, 5),
                    y = n(u, 6),
                    x = n(u, 7),
                    d) {
                        if ((M = new fn).a = L[o],
                        M.b = L[o + 1],
                        M.c = L[o + 3],
                        (_ = new fn).a = L[o + 1],
                        _.b = L[o + 2],
                        _.c = L[o + 3],
                        o += 4,
                        f && (p = L[o++],
                        M.materialIndex = p,
                        _.materialIndex = p),
                        s = e.faces.length,
                        m)
                            for (i = 0; i < O; i++)
                                for (T = t.uvs[i],
                                e.faceVertexUvs[i][s] = [],
                                e.faceVertexUvs[i][s + 1] = [],
                                r = 0; r < 4; r++)
                                    A = new Ue(T[2 * (h = L[o++])],T[2 * h + 1]),
                                    2 !== r && e.faceVertexUvs[i][s].push(A),
                                    0 !== r && e.faceVertexUvs[i][s + 1].push(A);
                        if (g && (l = 3 * L[o++],
                        M.normal.set(P[l++], P[l++], P[l]),
                        _.normal.copy(M.normal)),
                        v)
                            for (i = 0; i < 4; i++)
                                l = 3 * L[o++],
                                E = new He(P[l++],P[l++],P[l]),
                                2 !== i && M.vertexNormals.push(E),
                                0 !== i && _.vertexNormals.push(E);
                        if (y && (S = C[c = L[o++]],
                        M.color.setHex(S),
                        _.color.setHex(S)),
                        x)
                            for (i = 0; i < 4; i++)
                                S = C[c = L[o++]],
                                2 !== i && M.vertexColors.push(new rn(S)),
                                0 !== i && _.vertexColors.push(new rn(S));
                        e.faces.push(M),
                        e.faces.push(_)
                    } else {
                        if ((b = new fn).a = L[o++],
                        b.b = L[o++],
                        b.c = L[o++],
                        f && (p = L[o++],
                        b.materialIndex = p),
                        s = e.faces.length,
                        m)
                            for (i = 0; i < O; i++)
                                for (T = t.uvs[i],
                                e.faceVertexUvs[i][s] = [],
                                r = 0; r < 3; r++)
                                    A = new Ue(T[2 * (h = L[o++])],T[2 * h + 1]),
                                    e.faceVertexUvs[i][s].push(A);
                        if (g && (l = 3 * L[o++],
                        b.normal.set(P[l++], P[l++], P[l])),
                        v)
                            for (i = 0; i < 3; i++)
                                l = 3 * L[o++],
                                E = new He(P[l++],P[l++],P[l]),
                                b.vertexNormals.push(E);
                        if (y && (c = L[o++],
                        b.color.setHex(C[c])),
                        x)
                            for (i = 0; i < 3; i++)
                                c = L[o++],
                                b.vertexColors.push(new rn(C[c]));
                        e.faces.push(b)
                    }
            }(t, n),
            function(t, e) {
                var n = void 0 !== t.influencesPerVertex ? t.influencesPerVertex : 2;
                if (t.skinWeights)
                    for (var i = 0, r = t.skinWeights.length; i < r; i += n) {
                        var s = t.skinWeights[i]
                          , o = n > 1 ? t.skinWeights[i + 1] : 0
                          , a = n > 2 ? t.skinWeights[i + 2] : 0
                          , c = n > 3 ? t.skinWeights[i + 3] : 0;
                        e.skinWeights.push(new Ye(s,o,a,c))
                    }
                if (t.skinIndices)
                    for (i = 0,
                    r = t.skinIndices.length; i < r; i += n) {
                        var l = t.skinIndices[i]
                          , h = n > 1 ? t.skinIndices[i + 1] : 0
                          , p = n > 2 ? t.skinIndices[i + 2] : 0
                          , u = n > 3 ? t.skinIndices[i + 3] : 0;
                        e.skinIndices.push(new Ye(l,h,p,u))
                    }
                e.bones = t.bones,
                e.bones && e.bones.length > 0 && (e.skinWeights.length !== e.skinIndices.length || e.skinIndices.length !== e.vertices.length) && console.warn("When skinning, number of vertices (" + e.vertices.length + "), skinIndices (" + e.skinIndices.length + "), and skinWeights (" + e.skinWeights.length + ") should match.")
            }(t, n),
            function(t, e) {
                var n = t.scale;
                if (void 0 !== t.morphTargets)
                    for (var i = 0, r = t.morphTargets.length; i < r; i++) {
                        e.morphTargets[i] = {},
                        e.morphTargets[i].name = t.morphTargets[i].name,
                        e.morphTargets[i].vertices = [];
                        for (var s = e.morphTargets[i].vertices, o = t.morphTargets[i].vertices, a = 0, c = o.length; a < c; a += 3) {
                            var l = new He;
                            l.x = o[a] * n,
                            l.y = o[a + 1] * n,
                            l.z = o[a + 2] * n,
                            s.push(l)
                        }
                    }
                if (void 0 !== t.morphColors && t.morphColors.length > 0) {
                    console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
                    var h = e.faces
                      , p = t.morphColors[0].colors;
                    for (i = 0,
                    r = h.length; i < r; i++)
                        h[i].color.fromArray(p, 3 * i)
                }
            }(t, n),
            function(t, e) {
                var n = []
                  , i = [];
                void 0 !== t.animation && i.push(t.animation),
                void 0 !== t.animations && (t.animations.length ? i = i.concat(t.animations) : i.push(t.animations));
                for (var r = 0; r < i.length; r++) {
                    var s = Zo.parseAnimation(i[r], e.bones);
                    s && n.push(s)
                }
                if (e.morphTargets) {
                    var o = Zo.CreateClipsFromMorphTargetSequences(e.morphTargets, 10);
                    n = n.concat(o)
                }
                n.length > 0 && (e.animations = n)
            }(t, n),
            n.computeFaceNormals(),
            n.computeBoundingSphere(),
            void 0 === t.materials || 0 === t.materials.length ? {
                geometry: n
            } : {
                geometry: n,
                materials: ta.prototype.initMaterials(t.materials, e, this.crossOrigin)
            }
        }
    }),
    Object.assign(ia.prototype, {
        crossOrigin: "anonymous",
        load: function(t, e, n, i) {
            "" === this.texturePath && (this.texturePath = t.substring(0, t.lastIndexOf("/") + 1));
            var r = this;
            new Ks(r.manager).load(t, function(n) {
                var s = null;
                try {
                    s = JSON.parse(n)
                } catch (e) {
                    return void 0 !== i && i(e),
                    void console.error("THREE:ObjectLoader: Can't parse " + t + ".", e.message)
                }
                var o = s.metadata;
                void 0 !== o && void 0 !== o.type && "geometry" !== o.type.toLowerCase() ? r.parse(s, e) : console.error("THREE.ObjectLoader: Can't load " + t + ". Use THREE.JSONLoader instead.")
            }, n, i)
        },
        setTexturePath: function(t) {
            return this.texturePath = t,
            this
        },
        setCrossOrigin: function(t) {
            return this.crossOrigin = t,
            this
        },
        parse: function(t, e) {
            var n = this.parseShape(t.shapes)
              , i = this.parseGeometries(t.geometries, n)
              , r = this.parseImages(t.images, function() {
                void 0 !== e && e(a)
            })
              , s = this.parseTextures(t.textures, r)
              , o = this.parseMaterials(t.materials, s)
              , a = this.parseObject(t.object, i, o);
            return t.animations && (a.animations = this.parseAnimations(t.animations)),
            void 0 !== t.images && 0 !== t.images.length || void 0 !== e && e(a),
            a
        },
        parseShape: function(t) {
            var e = {};
            if (void 0 !== t)
                for (var n = 0, i = t.length; n < i; n++) {
                    var r = (new Eo).fromJSON(t[n]);
                    e[r.uuid] = r
                }
            return e
        },
        parseGeometries: function(t, e) {
            var n = {};
            if (void 0 !== t)
                for (var i = new na, r = new Qo, s = 0, o = t.length; s < o; s++) {
                    var a, c = t[s];
                    switch (c.type) {
                    case "PlaneGeometry":
                    case "PlaneBufferGeometry":
                        a = new ks[c.type](c.width,c.height,c.widthSegments,c.heightSegments);
                        break;
                    case "BoxGeometry":
                    case "BoxBufferGeometry":
                    case "CubeGeometry":
                        a = new ks[c.type](c.width,c.height,c.depth,c.widthSegments,c.heightSegments,c.depthSegments);
                        break;
                    case "CircleGeometry":
                    case "CircleBufferGeometry":
                        a = new ks[c.type](c.radius,c.segments,c.thetaStart,c.thetaLength);
                        break;
                    case "CylinderGeometry":
                    case "CylinderBufferGeometry":
                        a = new ks[c.type](c.radiusTop,c.radiusBottom,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);
                        break;
                    case "ConeGeometry":
                    case "ConeBufferGeometry":
                        a = new ks[c.type](c.radius,c.height,c.radialSegments,c.heightSegments,c.openEnded,c.thetaStart,c.thetaLength);
                        break;
                    case "SphereGeometry":
                    case "SphereBufferGeometry":
                        a = new ks[c.type](c.radius,c.widthSegments,c.heightSegments,c.phiStart,c.phiLength,c.thetaStart,c.thetaLength);
                        break;
                    case "DodecahedronGeometry":
                    case "DodecahedronBufferGeometry":
                    case "IcosahedronGeometry":
                    case "IcosahedronBufferGeometry":
                    case "OctahedronGeometry":
                    case "OctahedronBufferGeometry":
                    case "TetrahedronGeometry":
                    case "TetrahedronBufferGeometry":
                        a = new ks[c.type](c.radius,c.detail);
                        break;
                    case "RingGeometry":
                    case "RingBufferGeometry":
                        a = new ks[c.type](c.innerRadius,c.outerRadius,c.thetaSegments,c.phiSegments,c.thetaStart,c.thetaLength);
                        break;
                    case "TorusGeometry":
                    case "TorusBufferGeometry":
                        a = new ks[c.type](c.radius,c.tube,c.radialSegments,c.tubularSegments,c.arc);
                        break;
                    case "TorusKnotGeometry":
                    case "TorusKnotBufferGeometry":
                        a = new ks[c.type](c.radius,c.tube,c.tubularSegments,c.radialSegments,c.p,c.q);
                        break;
                    case "LatheGeometry":
                    case "LatheBufferGeometry":
                        a = new ks[c.type](c.points,c.segments,c.phiStart,c.phiLength);
                        break;
                    case "PolyhedronGeometry":
                    case "PolyhedronBufferGeometry":
                        a = new ks[c.type](c.vertices,c.indices,c.radius,c.details);
                        break;
                    case "ShapeGeometry":
                    case "ShapeBufferGeometry":
                        for (var l = [], h = 0, p = c.shapes.length; h < p; h++) {
                            var u = e[c.shapes[h]];
                            l.push(u)
                        }
                        a = new ks[c.type](l,c.curveSegments);
                        break;
                    case "ExtrudeGeometry":
                    case "ExtrudeBufferGeometry":
                        for (l = [],
                        h = 0,
                        p = c.shapes.length; h < p; h++)
                            u = e[c.shapes[h]],
                            l.push(u);
                        var d = c.options.extrudePath;
                        void 0 !== d && (c.options.extrudePath = (new Mo[d.type]).fromJSON(d)),
                        a = new ks[c.type](l,c.options);
                        break;
                    case "BufferGeometry":
                        a = r.parse(c);
                        break;
                    case "Geometry":
                        a = i.parse(c, this.texturePath).geometry;
                        break;
                    default:
                        console.warn('THREE.ObjectLoader: Unsupported geometry type "' + c.type + '"');
                        continue
                    }
                    a.uuid = c.uuid,
                    void 0 !== c.name && (a.name = c.name),
                    !0 === a.isBufferGeometry && void 0 !== c.userData && (a.userData = c.userData),
                    n[c.uuid] = a
                }
            return n
        },
        parseMaterials: function(t, e) {
            var n = {};
            if (void 0 !== t) {
                var i = new Jo;
                i.setTextures(e);
                for (var r = 0, s = t.length; r < s; r++) {
                    var o = t[r];
                    if ("MultiMaterial" === o.type) {
                        for (var a = [], c = 0; c < o.materials.length; c++)
                            a.push(i.parse(o.materials[c]));
                        n[o.uuid] = a
                    } else
                        n[o.uuid] = i.parse(o)
                }
            }
            return n
        },
        parseAnimations: function(t) {
            for (var e = [], n = 0; n < t.length; n++) {
                var i = t[n]
                  , r = Zo.parse(i);
                void 0 !== i.uuid && (r.uuid = i.uuid),
                e.push(r)
            }
            return e
        },
        parseImages: function(t, e) {
            var n = this
              , i = {};
            function r(t) {
                return n.manager.itemStart(t),
                s.load(t, function() {
                    n.manager.itemEnd(t)
                }, void 0, function() {
                    n.manager.itemEnd(t),
                    n.manager.itemError(t)
                })
            }
            if (void 0 !== t && t.length > 0) {
                var s = new $s(new qs(e));
                s.setCrossOrigin(this.crossOrigin);
                for (var o = 0, a = t.length; o < a; o++) {
                    var c = t[o]
                      , l = c.url;
                    if (Array.isArray(l)) {
                        i[c.uuid] = [];
                        for (var h = 0, p = l.length; h < p; h++) {
                            var u = l[h]
                              , d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(u) ? u : n.texturePath + u;
                            i[c.uuid].push(r(d))
                        }
                    } else
                        d = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url) ? c.url : n.texturePath + c.url,
                        i[c.uuid] = r(d)
                }
            }
            return i
        },
        parseTextures: function(t, e) {
            function n(t, e) {
                return "number" == typeof t ? t : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", t),
                e[t])
            }
            var i = {};
            if (void 0 !== t)
                for (var r = 0, s = t.length; r < s; r++) {
                    var o, a = t[r];
                    void 0 === a.image && console.warn('THREE.ObjectLoader: No "image" specified for', a.uuid),
                    void 0 === e[a.image] && console.warn("THREE.ObjectLoader: Undefined image", a.image),
                    (o = Array.isArray(e[a.image]) ? new jn(e[a.image]) : new We(e[a.image])).needsUpdate = !0,
                    o.uuid = a.uuid,
                    void 0 !== a.name && (o.name = a.name),
                    void 0 !== a.mapping && (o.mapping = n(a.mapping, sa)),
                    void 0 !== a.offset && o.offset.fromArray(a.offset),
                    void 0 !== a.repeat && o.repeat.fromArray(a.repeat),
                    void 0 !== a.center && o.center.fromArray(a.center),
                    void 0 !== a.rotation && (o.rotation = a.rotation),
                    void 0 !== a.wrap && (o.wrapS = n(a.wrap[0], oa),
                    o.wrapT = n(a.wrap[1], oa)),
                    void 0 !== a.format && (o.format = a.format),
                    void 0 !== a.minFilter && (o.minFilter = n(a.minFilter, aa)),
                    void 0 !== a.magFilter && (o.magFilter = n(a.magFilter, aa)),
                    void 0 !== a.anisotropy && (o.anisotropy = a.anisotropy),
                    void 0 !== a.flipY && (o.flipY = a.flipY),
                    i[a.uuid] = o
                }
            return i
        },
        parseObject: function(t, e, n) {
            var i;
            function r(t) {
                return void 0 === e[t] && console.warn("THREE.ObjectLoader: Undefined geometry", t),
                e[t]
            }
            function s(t) {
                if (void 0 !== t) {
                    if (Array.isArray(t)) {
                        for (var e = [], i = 0, r = t.length; i < r; i++) {
                            var s = t[i];
                            void 0 === n[s] && console.warn("THREE.ObjectLoader: Undefined material", s),
                            e.push(n[s])
                        }
                        return e
                    }
                    return void 0 === n[t] && console.warn("THREE.ObjectLoader: Undefined material", t),
                    n[t]
                }
            }
            switch (t.type) {
            case "Scene":
                i = new sr,
                void 0 !== t.background && Number.isInteger(t.background) && (i.background = new rn(t.background)),
                void 0 !== t.fog && ("Fog" === t.fog.type ? i.fog = new rr(t.fog.color,t.fog.near,t.fog.far) : "FogExp2" === t.fog.type && (i.fog = new ir(t.fog.color,t.fog.density)));
                break;
            case "PerspectiveCamera":
                i = new $i(t.fov,t.aspect,t.near,t.far),
                void 0 !== t.focus && (i.focus = t.focus),
                void 0 !== t.zoom && (i.zoom = t.zoom),
                void 0 !== t.filmGauge && (i.filmGauge = t.filmGauge),
                void 0 !== t.filmOffset && (i.filmOffset = t.filmOffset),
                void 0 !== t.view && (i.view = Object.assign({}, t.view));
                break;
            case "OrthographicCamera":
                i = new dn(t.left,t.right,t.top,t.bottom,t.near,t.far),
                void 0 !== t.zoom && (i.zoom = t.zoom),
                void 0 !== t.view && (i.view = Object.assign({}, t.view));
                break;
            case "AmbientLight":
                i = new Do(t.color,t.intensity);
                break;
            case "DirectionalLight":
                i = new Oo(t.color,t.intensity);
                break;
            case "PointLight":
                i = new Co(t.color,t.intensity,t.distance,t.decay);
                break;
            case "RectAreaLight":
                i = new ko(t.color,t.intensity,t.width,t.height);
                break;
            case "SpotLight":
                i = new Po(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);
                break;
            case "HemisphereLight":
                i = new Ao(t.color,t.groundColor,t.intensity);
                break;
            case "SkinnedMesh":
                console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
            case "Mesh":
                var o = r(t.geometry)
                  , a = s(t.material);
                i = o.bones && o.bones.length > 0 ? new dr(o,a) : new Hn(o,a);
                break;
            case "LOD":
                i = new hr;
                break;
            case "Line":
                i = new mr(r(t.geometry),s(t.material),t.mode);
                break;
            case "LineLoop":
                i = new vr(r(t.geometry),s(t.material));
                break;
            case "LineSegments":
                i = new gr(r(t.geometry),s(t.material));
                break;
            case "PointCloud":
            case "Points":
                i = new xr(r(t.geometry),s(t.material));
                break;
            case "Sprite":
                i = new lr(s(t.material));
                break;
            case "Group":
                i = new Qi;
                break;
            default:
                i = new pn
            }
            if (i.uuid = t.uuid,
            void 0 !== t.name && (i.name = t.name),
            void 0 !== t.matrix ? (i.matrix.fromArray(t.matrix),
            void 0 !== t.matrixAutoUpdate && (i.matrixAutoUpdate = t.matrixAutoUpdate),
            i.matrixAutoUpdate && i.matrix.decompose(i.position, i.quaternion, i.scale)) : (void 0 !== t.position && i.position.fromArray(t.position),
            void 0 !== t.rotation && i.rotation.fromArray(t.rotation),
            void 0 !== t.quaternion && i.quaternion.fromArray(t.quaternion),
            void 0 !== t.scale && i.scale.fromArray(t.scale)),
            void 0 !== t.castShadow && (i.castShadow = t.castShadow),
            void 0 !== t.receiveShadow && (i.receiveShadow = t.receiveShadow),
            t.shadow && (void 0 !== t.shadow.bias && (i.shadow.bias = t.shadow.bias),
            void 0 !== t.shadow.radius && (i.shadow.radius = t.shadow.radius),
            void 0 !== t.shadow.mapSize && i.shadow.mapSize.fromArray(t.shadow.mapSize),
            void 0 !== t.shadow.camera && (i.shadow.camera = this.parseObject(t.shadow.camera))),
            void 0 !== t.visible && (i.visible = t.visible),
            void 0 !== t.frustumCulled && (i.frustumCulled = t.frustumCulled),
            void 0 !== t.renderOrder && (i.renderOrder = t.renderOrder),
            void 0 !== t.userData && (i.userData = t.userData),
            void 0 !== t.layers && (i.layers.mask = t.layers),
            void 0 !== t.children)
                for (var c = t.children, l = 0; l < c.length; l++)
                    i.add(this.parseObject(c[l], e, n));
            if ("LOD" === t.type)
                for (var h = t.levels, p = 0; p < h.length; p++) {
                    var u = h[p]
                      , d = i.getObjectByProperty("uuid", u.object);
                    void 0 !== d && i.addLevel(d, u.distance)
                }
            return i
        }
    });
    var ra, sa = {
        UVMapping: at,
        CubeReflectionMapping: ct,
        CubeRefractionMapping: lt,
        EquirectangularReflectionMapping: ht,
        EquirectangularRefractionMapping: pt,
        SphericalReflectionMapping: ut,
        CubeUVReflectionMapping: dt,
        CubeUVRefractionMapping: ft
    }, oa = {
        RepeatWrapping: mt,
        ClampToEdgeWrapping: gt,
        MirroredRepeatWrapping: vt
    }, aa = {
        NearestFilter: yt,
        NearestMipMapNearestFilter: xt,
        NearestMipMapLinearFilter: wt,
        LinearFilter: bt,
        LinearMipMapNearestFilter: Mt,
        LinearMipMapLinearFilter: _t
    };
    function ca(t) {
        "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
        "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
        this.manager = void 0 !== t ? t : Xs,
        this.options = void 0
    }
    function la() {
        this.type = "ShapePath",
        this.color = new rn,
        this.subPaths = [],
        this.currentPath = null
    }
    function ha(t) {
        this.type = "Font",
        this.data = t
    }
    function pa(t, e, n, i, r) {
        var s = r.glyphs[t] || r.glyphs["?"];
        if (s) {
            var o, a, c, l, h, p, u, d, f = new la;
            if (s.o)
                for (var m = s._cachedOutline || (s._cachedOutline = s.o.split(" ")), g = 0, v = m.length; g < v; )
                    switch (m[g++]) {
                    case "m":
                        o = m[g++] * e + n,
                        a = m[g++] * e + i,
                        f.moveTo(o, a);
                        break;
                    case "l":
                        o = m[g++] * e + n,
                        a = m[g++] * e + i,
                        f.lineTo(o, a);
                        break;
                    case "q":
                        c = m[g++] * e + n,
                        l = m[g++] * e + i,
                        h = m[g++] * e + n,
                        p = m[g++] * e + i,
                        f.quadraticCurveTo(h, p, c, l);
                        break;
                    case "b":
                        c = m[g++] * e + n,
                        l = m[g++] * e + i,
                        h = m[g++] * e + n,
                        p = m[g++] * e + i,
                        u = m[g++] * e + n,
                        d = m[g++] * e + i,
                        f.bezierCurveTo(h, p, u, d, c, l)
                    }
            return {
                offsetX: s.ha * e,
                path: f
            }
        }
    }
    function ua(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    ca.prototype = {
        constructor: ca,
        setOptions: function(t) {
            return this.options = t,
            this
        },
        load: function(t, e, n, i) {
            void 0 === t && (t = ""),
            void 0 !== this.path && (t = this.path + t),
            t = this.manager.resolveURL(t);
            var r = this
              , s = Ys.get(t);
            if (void 0 !== s)
                return r.manager.itemStart(t),
                setTimeout(function() {
                    e && e(s),
                    r.manager.itemEnd(t)
                }, 0),
                s;
            fetch(t).then(function(t) {
                return t.blob()
            }).then(function(t) {
                return createImageBitmap(t, r.options)
            }).then(function(n) {
                Ys.add(t, n),
                e && e(n),
                r.manager.itemEnd(t)
            }).catch(function(e) {
                i && i(e),
                r.manager.itemEnd(t),
                r.manager.itemError(t)
            })
        },
        setCrossOrigin: function() {
            return this
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    },
    Object.assign(la.prototype, {
        moveTo: function(t, e) {
            this.currentPath = new So,
            this.subPaths.push(this.currentPath),
            this.currentPath.moveTo(t, e)
        },
        lineTo: function(t, e) {
            this.currentPath.lineTo(t, e)
        },
        quadraticCurveTo: function(t, e, n, i) {
            this.currentPath.quadraticCurveTo(t, e, n, i)
        },
        bezierCurveTo: function(t, e, n, i, r, s) {
            this.currentPath.bezierCurveTo(t, e, n, i, r, s)
        },
        splineThru: function(t) {
            this.currentPath.splineThru(t)
        },
        toShapes: function(t, e) {
            function n(t) {
                for (var e = [], n = 0, i = t.length; n < i; n++) {
                    var r = t[n]
                      , s = new Eo;
                    s.curves = r.curves,
                    e.push(s)
                }
                return e
            }
            function i(t, e) {
                for (var n = e.length, i = !1, r = n - 1, s = 0; s < n; r = s++) {
                    var o = e[r]
                      , a = e[s]
                      , c = a.x - o.x
                      , l = a.y - o.y;
                    if (Math.abs(l) > Number.EPSILON) {
                        if (l < 0 && (o = e[s],
                        c = -c,
                        a = e[r],
                        l = -l),
                        t.y < o.y || t.y > a.y)
                            continue;
                        if (t.y === o.y) {
                            if (t.x === o.x)
                                return !0
                        } else {
                            var h = l * (t.x - o.x) - c * (t.y - o.y);
                            if (0 === h)
                                return !0;
                            if (h < 0)
                                continue;
                            i = !i
                        }
                    } else {
                        if (t.y !== o.y)
                            continue;
                        if (a.x <= t.x && t.x <= o.x || o.x <= t.x && t.x <= a.x)
                            return !0
                    }
                }
                return i
            }
            var r = hs.isClockWise
              , s = this.subPaths;
            if (0 === s.length)
                return [];
            if (!0 === e)
                return n(s);
            var o, a, c, l = [];
            if (1 === s.length)
                return a = s[0],
                (c = new Eo).curves = a.curves,
                l.push(c),
                l;
            var h = !r(s[0].getPoints());
            h = t ? !h : h;
            var p, u, d = [], f = [], m = [], g = 0;
            f[g] = void 0,
            m[g] = [];
            for (var v = 0, y = s.length; v < y; v++)
                o = r(p = (a = s[v]).getPoints()),
                (o = t ? !o : o) ? (!h && f[g] && g++,
                f[g] = {
                    s: new Eo,
                    p: p
                },
                f[g].s.curves = a.curves,
                h && g++,
                m[g] = []) : m[g].push({
                    h: a,
                    p: p[0]
                });
            if (!f[0])
                return n(s);
            if (f.length > 1) {
                for (var x = !1, w = [], b = 0, M = f.length; b < M; b++)
                    d[b] = [];
                for (b = 0,
                M = f.length; b < M; b++)
                    for (var _ = m[b], S = 0; S < _.length; S++) {
                        for (var E = _[S], T = !0, A = 0; A < f.length; A++)
                            i(E.p, f[A].p) && (b !== A && w.push({
                                froms: b,
                                tos: A,
                                hole: S
                            }),
                            T ? (T = !1,
                            d[A].push(E)) : x = !0);
                        T && d[b].push(E)
                    }
                w.length > 0 && (x || (m = d))
            }
            v = 0;
            for (var L = f.length; v < L; v++) {
                c = f[v].s,
                l.push(c);
                for (var R = 0, P = (u = m[v]).length; R < P; R++)
                    c.holes.push(u[R].h)
            }
            return l
        }
    }),
    Object.assign(ha.prototype, {
        isFont: !0,
        generateShapes: function(t, e) {
            void 0 === e && (e = 100);
            for (var n = [], i = function(t, e, n) {
                for (var i = Array.from ? Array.from(t) : String(t).split(""), r = e / n.resolution, s = (n.boundingBox.yMax - n.boundingBox.yMin + n.underlineThickness) * r, o = [], a = 0, c = 0, l = 0; l < i.length; l++) {
                    var h = i[l];
                    if ("\n" === h)
                        a = 0,
                        c -= s;
                    else {
                        var p = pa(h, r, a, c, n);
                        a += p.offsetX,
                        o.push(p.path)
                    }
                }
                return o
            }(t, e, this.data), r = 0, s = i.length; r < s; r++)
                Array.prototype.push.apply(n, i[r].toShapes());
            return n
        }
    }),
    Object.assign(ua.prototype, {
        load: function(t, e, n, i) {
            var r = this
              , s = new Ks(this.manager);
            s.setPath(this.path),
            s.load(t, function(t) {
                var n;
                try {
                    n = JSON.parse(t)
                } catch (e) {
                    console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),
                    n = JSON.parse(t.substring(65, t.length - 2))
                }
                var i = r.parse(n);
                e && e(i)
            }, n, i)
        },
        parse: function(t) {
            return new ha(t)
        },
        setPath: function(t) {
            return this.path = t,
            this
        }
    });
    var da, fa, ma = {
        getContext: function() {
            return void 0 === ra && (ra = new (window.AudioContext || window.webkitAudioContext)),
            ra
        },
        setContext: function(t) {
            ra = t
        }
    };
    function ga(t) {
        this.manager = void 0 !== t ? t : Xs
    }
    function va() {
        this.type = "StereoCamera",
        this.aspect = 1,
        this.eyeSep = .064,
        this.cameraL = new $i,
        this.cameraL.layers.enable(1),
        this.cameraL.matrixAutoUpdate = !1,
        this.cameraR = new $i,
        this.cameraR.layers.enable(2),
        this.cameraR.matrixAutoUpdate = !1
    }
    function ya(t, e, n) {
        pn.call(this),
        this.type = "CubeCamera";
        var i = new $i(90,1,t,e);
        i.up.set(0, -1, 0),
        i.lookAt(new He(1,0,0)),
        this.add(i);
        var r = new $i(90,1,t,e);
        r.up.set(0, -1, 0),
        r.lookAt(new He(-1,0,0)),
        this.add(r);
        var s = new $i(90,1,t,e);
        s.up.set(0, 0, 1),
        s.lookAt(new He(0,1,0)),
        this.add(s);
        var o = new $i(90,1,t,e);
        o.up.set(0, 0, -1),
        o.lookAt(new He(0,-1,0)),
        this.add(o);
        var a = new $i(90,1,t,e);
        a.up.set(0, -1, 0),
        a.lookAt(new He(0,0,1)),
        this.add(a);
        var c = new $i(90,1,t,e);
        c.up.set(0, -1, 0),
        c.lookAt(new He(0,0,-1)),
        this.add(c);
        var l = {
            format: Nt,
            magFilter: bt,
            minFilter: bt
        };
        this.renderTarget = new Xe(n,n,l),
        this.renderTarget.texture.name = "CubeCamera",
        this.update = function(t, e) {
            null === this.parent && this.updateMatrixWorld();
            var n = this.renderTarget
              , l = n.texture.generateMipmaps;
            n.texture.generateMipmaps = !1,
            n.activeCubeFace = 0,
            t.render(e, i, n),
            n.activeCubeFace = 1,
            t.render(e, r, n),
            n.activeCubeFace = 2,
            t.render(e, s, n),
            n.activeCubeFace = 3,
            t.render(e, o, n),
            n.activeCubeFace = 4,
            t.render(e, a, n),
            n.texture.generateMipmaps = l,
            n.activeCubeFace = 5,
            t.render(e, c, n),
            t.setRenderTarget(null)
        }
        ,
        this.clear = function(t, e, n, i) {
            for (var r = this.renderTarget, s = 0; s < 6; s++)
                r.activeCubeFace = s,
                t.setRenderTarget(r),
                t.clear(e, n, i);
            t.setRenderTarget(null)
        }
    }
    function xa() {
        pn.call(this),
        this.type = "AudioListener",
        this.context = ma.getContext(),
        this.gain = this.context.createGain(),
        this.gain.connect(this.context.destination),
        this.filter = null
    }
    function wa(t) {
        pn.call(this),
        this.type = "Audio",
        this.context = t.context,
        this.gain = this.context.createGain(),
        this.gain.connect(t.getInput()),
        this.autoplay = !1,
        this.buffer = null,
        this.loop = !1,
        this.startTime = 0,
        this.offset = 0,
        this.playbackRate = 1,
        this.isPlaying = !1,
        this.hasPlaybackControl = !0,
        this.sourceType = "empty",
        this.filters = []
    }
    function ba(t) {
        wa.call(this, t),
        this.panner = this.context.createPanner(),
        this.panner.connect(this.gain)
    }
    function Ma(t, e) {
        this.analyser = t.context.createAnalyser(),
        this.analyser.fftSize = void 0 !== e ? e : 2048,
        this.data = new Uint8Array(this.analyser.frequencyBinCount),
        t.getOutput().connect(this.analyser)
    }
    function _a(t, e, n) {
        this.binding = t,
        this.valueSize = n;
        var i, r = Float64Array;
        switch (e) {
        case "quaternion":
            i = this._slerp;
            break;
        case "string":
        case "bool":
            r = Array,
            i = this._select;
            break;
        default:
            i = this._lerp
        }
        this.buffer = new r(4 * n),
        this._mixBufferRegion = i,
        this.cumulativeWeight = 0,
        this.useCount = 0,
        this.referenceCount = 0
    }
    function Sa(t, e, n) {
        var i = n || Ea.parseTrackName(e);
        this._targetGroup = t,
        this._bindings = t.subscribe_(e, i)
    }
    function Ea(t, e, n) {
        this.path = e,
        this.parsedPath = n || Ea.parseTrackName(e),
        this.node = Ea.findNode(t, this.parsedPath.nodeName) || t,
        this.rootNode = t
    }
    function Ta() {
        this.uuid = Ne.generateUUID(),
        this._objects = Array.prototype.slice.call(arguments),
        this.nCachedObjects_ = 0;
        var t = {};
        this._indicesByUUID = t;
        for (var e = 0, n = arguments.length; e !== n; ++e)
            t[arguments[e].uuid] = e;
        this._paths = [],
        this._parsedPaths = [],
        this._bindings = [],
        this._bindingsIndicesByPath = {};
        var i = this;
        this.stats = {
            objects: {
                get total() {
                    return i._objects.length
                },
                get inUse() {
                    return this.total - i.nCachedObjects_
                }
            },
            get bindingsPerObject() {
                return i._bindings.length
            }
        }
    }
    function Aa(t, e, n) {
        this._mixer = t,
        this._clip = e,
        this._localRoot = n || null;
        for (var i = e.tracks, r = i.length, s = new Array(r), o = {
            endingStart: xe,
            endingEnd: xe
        }, a = 0; a !== r; ++a) {
            var c = i[a].createInterpolant(null);
            s[a] = c,
            c.settings = o
        }
        this._interpolantSettings = o,
        this._interpolants = s,
        this._propertyBindings = new Array(r),
        this._cacheIndex = null,
        this._byClipCacheIndex = null,
        this._timeScaleInterpolant = null,
        this._weightInterpolant = null,
        this.loop = fe,
        this._loopCount = -1,
        this._startTime = null,
        this.time = 0,
        this.timeScale = 1,
        this._effectiveTimeScale = 1,
        this.weight = 1,
        this._effectiveWeight = 1,
        this.repetitions = 1 / 0,
        this.paused = !1,
        this.enabled = !0,
        this.clampWhenFinished = !1,
        this.zeroSlopeAtStart = !0,
        this.zeroSlopeAtEnd = !0
    }
    function La(t) {
        this._root = t,
        this._initMemoryManager(),
        this._accuIndex = 0,
        this.time = 0,
        this.timeScale = 1
    }
    function Ra(t) {
        "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."),
        t = arguments[1]),
        this.value = t
    }
    function Pa() {
        Pn.call(this),
        this.type = "InstancedBufferGeometry",
        this.maxInstancedCount = void 0
    }
    function Ca(t, e, n) {
        or.call(this, t, e),
        this.meshPerAttribute = n || 1
    }
    function Ia(t, e, n) {
        vn.call(this, t, e),
        this.meshPerAttribute = n || 1
    }
    function Oa(t, e, n, i) {
        this.ray = new zn(t,e),
        this.near = n || 0,
        this.far = i || 1 / 0,
        this.params = {
            Mesh: {},
            Line: {},
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        },
        Object.defineProperties(this.params, {
            PointCloud: {
                get: function() {
                    return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),
                    this.Points
                }
            }
        })
    }
    function Da(t, e) {
        return t.distance - e.distance
    }
    function ka(t, e, n, i) {
        if (!1 !== t.visible && (t.raycast(e, n),
        !0 === i))
            for (var r = t.children, s = 0, o = r.length; s < o; s++)
                ka(r[s], e, n, !0)
    }
    function Ba(t) {
        this.autoStart = void 0 === t || t,
        this.startTime = 0,
        this.oldTime = 0,
        this.elapsedTime = 0,
        this.running = !1
    }
    function Na(t, e, n) {
        return this.radius = void 0 !== t ? t : 1,
        this.phi = void 0 !== e ? e : 0,
        this.theta = void 0 !== n ? n : 0,
        this
    }
    function Ua(t, e, n) {
        return this.radius = void 0 !== t ? t : 1,
        this.theta = void 0 !== e ? e : 0,
        this.y = void 0 !== n ? n : 0,
        this
    }
    function za(t, e) {
        this.min = void 0 !== t ? t : new Ue(1 / 0,1 / 0),
        this.max = void 0 !== e ? e : new Ue(-1 / 0,-1 / 0)
    }
    function Fa(t, e) {
        this.start = void 0 !== t ? t : new He,
        this.end = void 0 !== e ? e : new He
    }
    function Ha(t) {
        pn.call(this),
        this.material = t,
        this.render = function() {}
    }
    function Ga(t, e, n, i) {
        this.object = t,
        this.size = void 0 !== e ? e : 1;
        var r = void 0 !== n ? n : 16711680
          , s = void 0 !== i ? i : 1
          , o = 0
          , a = this.object.geometry;
        a && a.isGeometry ? o = 3 * a.faces.length : a && a.isBufferGeometry && (o = a.attributes.normal.count);
        var c = new Pn
          , l = new En(2 * o * 3,3);
        c.addAttribute("position", l),
        gr.call(this, c, new fr({
            color: r,
            linewidth: s
        })),
        this.matrixAutoUpdate = !1,
        this.update()
    }
    function ja(t, e) {
        pn.call(this),
        this.light = t,
        this.light.updateMatrixWorld(),
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.color = e;
        for (var n = new Pn, i = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], r = 0, s = 1; r < 32; r++,
        s++) {
            var o = r / 32 * Math.PI * 2
              , a = s / 32 * Math.PI * 2;
            i.push(Math.cos(o), Math.sin(o), 1, Math.cos(a), Math.sin(a), 1)
        }
        n.addAttribute("position", new En(i,3));
        var c = new fr({
            fog: !1
        });
        this.cone = new gr(n,c),
        this.add(this.cone),
        this.update()
    }
    function Va(t) {
        for (var e = function t(e) {
            var n = [];
            e && e.isBone && n.push(e);
            for (var i = 0; i < e.children.length; i++)
                n.push.apply(n, t(e.children[i]));
            return n
        }(t), n = new Pn, i = [], r = [], s = new rn(0,0,1), o = new rn(0,1,0), a = 0; a < e.length; a++) {
            var c = e[a];
            c.parent && c.parent.isBone && (i.push(0, 0, 0),
            i.push(0, 0, 0),
            r.push(s.r, s.g, s.b),
            r.push(o.r, o.g, o.b))
        }
        n.addAttribute("position", new En(i,3)),
        n.addAttribute("color", new En(r,3));
        var l = new fr({
            vertexColors: M,
            depthTest: !1,
            depthWrite: !1,
            transparent: !0
        });
        gr.call(this, n, l),
        this.root = t,
        this.bones = e,
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1
    }
    function Wa(t, e, n) {
        this.light = t,
        this.light.updateMatrixWorld(),
        this.color = n;
        var i = new ws(e,4,2)
          , r = new Nn({
            wireframe: !0,
            fog: !1
        });
        Hn.call(this, i, r),
        this.matrix = this.light.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.update()
    }
    function Ya(t, e) {
        pn.call(this),
        this.light = t,
        this.light.updateMatrixWorld(),
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.color = e;
        var n = new fr({
            fog: !1
        })
          , i = new Pn;
        i.addAttribute("position", new vn(new Float32Array(15),3)),
        this.line = new mr(i,n),
        this.add(this.line),
        this.update()
    }
    function qa(t, e, n) {
        pn.call(this),
        this.light = t,
        this.light.updateMatrixWorld(),
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.color = n;
        var i = new Ir(e);
        i.rotateY(.5 * Math.PI),
        this.material = new Nn({
            wireframe: !0,
            fog: !1
        }),
        void 0 === this.color && (this.material.vertexColors = M);
        var r = i.getAttribute("position")
          , s = new Float32Array(3 * r.count);
        i.addAttribute("color", new vn(s,3)),
        this.add(new Hn(i,this.material)),
        this.update()
    }
    function Xa(t, e, n, i) {
        t = t || 10,
        e = e || 10,
        n = new rn(void 0 !== n ? n : 4473924),
        i = new rn(void 0 !== i ? i : 8947848);
        for (var r = e / 2, s = t / e, o = t / 2, a = [], c = [], l = 0, h = 0, p = -o; l <= e; l++,
        p += s) {
            a.push(-o, 0, p, o, 0, p),
            a.push(p, 0, -o, p, 0, o);
            var u = l === r ? n : i;
            u.toArray(c, h),
            h += 3,
            u.toArray(c, h),
            h += 3,
            u.toArray(c, h),
            h += 3,
            u.toArray(c, h),
            h += 3
        }
        var d = new Pn;
        d.addAttribute("position", new En(a,3)),
        d.addAttribute("color", new En(c,3));
        var f = new fr({
            vertexColors: M
        });
        gr.call(this, d, f)
    }
    function Za(t, e, n, i, r, s) {
        t = t || 10,
        e = e || 16,
        n = n || 8,
        i = i || 64,
        r = new rn(void 0 !== r ? r : 4473924),
        s = new rn(void 0 !== s ? s : 8947848);
        var o, a, c, l, h, p, u, d = [], f = [];
        for (l = 0; l <= e; l++)
            c = l / e * (2 * Math.PI),
            o = Math.sin(c) * t,
            a = Math.cos(c) * t,
            d.push(0, 0, 0),
            d.push(o, 0, a),
            u = 1 & l ? r : s,
            f.push(u.r, u.g, u.b),
            f.push(u.r, u.g, u.b);
        for (l = 0; l <= n; l++)
            for (u = 1 & l ? r : s,
            p = t - t / n * l,
            h = 0; h < i; h++)
                c = h / i * (2 * Math.PI),
                o = Math.sin(c) * p,
                a = Math.cos(c) * p,
                d.push(o, 0, a),
                f.push(u.r, u.g, u.b),
                c = (h + 1) / i * (2 * Math.PI),
                o = Math.sin(c) * p,
                a = Math.cos(c) * p,
                d.push(o, 0, a),
                f.push(u.r, u.g, u.b);
        var m = new Pn;
        m.addAttribute("position", new En(d,3)),
        m.addAttribute("color", new En(f,3));
        var g = new fr({
            vertexColors: M
        });
        gr.call(this, m, g)
    }
    function Ka(t, e, n, i) {
        this.object = t,
        this.size = void 0 !== e ? e : 1;
        var r = void 0 !== n ? n : 16776960
          , s = void 0 !== i ? i : 1
          , o = 0
          , a = this.object.geometry;
        a && a.isGeometry ? o = a.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
        var c = new Pn
          , l = new En(2 * o * 3,3);
        c.addAttribute("position", l),
        gr.call(this, c, new fr({
            color: r,
            linewidth: s
        })),
        this.matrixAutoUpdate = !1,
        this.update()
    }
    function Ja(t, e, n) {
        pn.call(this),
        this.light = t,
        this.light.updateMatrixWorld(),
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.color = n,
        void 0 === e && (e = 1);
        var i = new Pn;
        i.addAttribute("position", new En([-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0],3));
        var r = new fr({
            fog: !1
        });
        this.lightPlane = new mr(i,r),
        this.add(this.lightPlane),
        (i = new Pn).addAttribute("position", new En([0, 0, 0, 0, 0, 1],3)),
        this.targetLine = new mr(i,r),
        this.add(this.targetLine),
        this.update()
    }
    function Qa(t) {
        var e = new Pn
          , n = new fr({
            color: 16777215,
            vertexColors: b
        })
          , i = []
          , r = []
          , s = {}
          , o = new rn(16755200)
          , a = new rn(16711680)
          , c = new rn(43775)
          , l = new rn(16777215)
          , h = new rn(3355443);
        function p(t, e, n) {
            u(t, n),
            u(e, n)
        }
        function u(t, e) {
            i.push(0, 0, 0),
            r.push(e.r, e.g, e.b),
            void 0 === s[t] && (s[t] = []),
            s[t].push(i.length / 3 - 1)
        }
        p("n1", "n2", o),
        p("n2", "n4", o),
        p("n4", "n3", o),
        p("n3", "n1", o),
        p("f1", "f2", o),
        p("f2", "f4", o),
        p("f4", "f3", o),
        p("f3", "f1", o),
        p("n1", "f1", o),
        p("n2", "f2", o),
        p("n3", "f3", o),
        p("n4", "f4", o),
        p("p", "n1", a),
        p("p", "n2", a),
        p("p", "n3", a),
        p("p", "n4", a),
        p("u1", "u2", c),
        p("u2", "u3", c),
        p("u3", "u1", c),
        p("c", "t", l),
        p("p", "c", h),
        p("cn1", "cn2", h),
        p("cn3", "cn4", h),
        p("cf1", "cf2", h),
        p("cf3", "cf4", h),
        e.addAttribute("position", new En(i,3)),
        e.addAttribute("color", new En(r,3)),
        gr.call(this, e, n),
        this.camera = t,
        this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(),
        this.matrix = t.matrixWorld,
        this.matrixAutoUpdate = !1,
        this.pointMap = s,
        this.update()
    }
    function $a(t, e) {
        this.object = t,
        void 0 === e && (e = 16776960);
        var n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])
          , i = new Float32Array(24)
          , r = new Pn;
        r.setIndex(new vn(n,1)),
        r.addAttribute("position", new vn(i,3)),
        gr.call(this, r, new fr({
            color: e
        })),
        this.matrixAutoUpdate = !1,
        this.update()
    }
    function tc(t, e) {
        this.type = "Box3Helper",
        this.box = t;
        var n = void 0 !== e ? e : 16776960
          , i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7])
          , r = new Pn;
        r.setIndex(new vn(i,1)),
        r.addAttribute("position", new En([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1],3)),
        gr.call(this, r, new fr({
            color: n
        })),
        this.geometry.computeBoundingSphere()
    }
    function ec(t, e, n) {
        this.type = "PlaneHelper",
        this.plane = t,
        this.size = void 0 === e ? 1 : e;
        var i = void 0 !== n ? n : 16776960
          , r = new Pn;
        r.addAttribute("position", new En([1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],3)),
        r.computeBoundingSphere(),
        mr.call(this, r, new fr({
            color: i
        }));
        var s = new Pn;
        s.addAttribute("position", new En([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1],3)),
        s.computeBoundingSphere(),
        this.add(new Hn(s,new Nn({
            color: i,
            opacity: .2,
            transparent: !0,
            depthWrite: !1
        })))
    }
    function nc(t, e, n, i, r, s) {
        pn.call(this),
        void 0 === i && (i = 16776960),
        void 0 === n && (n = 1),
        void 0 === r && (r = .2 * n),
        void 0 === s && (s = .2 * r),
        void 0 === da && ((da = new Pn).addAttribute("position", new En([0, 0, 0, 0, 1, 0],3)),
        (fa = new Ps(0,.5,1,5,1)).translate(0, -.5, 0)),
        this.position.copy(e),
        this.line = new mr(da,new fr({
            color: i
        })),
        this.line.matrixAutoUpdate = !1,
        this.add(this.line),
        this.cone = new Hn(fa,new Nn({
            color: i
        })),
        this.cone.matrixAutoUpdate = !1,
        this.add(this.cone),
        this.setDirection(t),
        this.setLength(n, r, s)
    }
    function ic(t) {
        var e = [0, 0, 0, t = t || 1, 0, 0, 0, 0, 0, 0, t, 0, 0, 0, 0, 0, 0, t]
          , n = new Pn;
        n.addAttribute("position", new En(e,3)),
        n.addAttribute("color", new En([1, 0, 0, 1, .6, 0, 0, 1, 0, .6, 1, 0, 0, 0, 1, 0, .6, 1],3));
        var i = new fr({
            vertexColors: M
        });
        gr.call(this, n, i)
    }
    function rc(t, e, n, i, r, s, o) {
        return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),
        new fn(t,e,n,r,s,o)
    }
    Object.assign(ga.prototype, {
        load: function(t, e, n, i) {
            var r = new Ks(this.manager);
            r.setResponseType("arraybuffer"),
            r.load(t, function(t) {
                var n = t.slice(0);
                ma.getContext().decodeAudioData(n, function(t) {
                    e(t)
                })
            }, n, i)
        }
    }),
    Object.assign(va.prototype, {
        update: function() {
            var t, e, n, i, r, s, o, a, c = new ze, l = new ze;
            return function(h) {
                if (t !== this || e !== h.focus || n !== h.fov || i !== h.aspect * this.aspect || r !== h.near || s !== h.far || o !== h.zoom || a !== this.eyeSep) {
                    t = this,
                    e = h.focus,
                    n = h.fov,
                    i = h.aspect * this.aspect,
                    r = h.near,
                    s = h.far,
                    o = h.zoom;
                    var p, u, d = h.projectionMatrix.clone(), f = (a = this.eyeSep / 2) * r / e, m = r * Math.tan(Ne.DEG2RAD * n * .5) / o;
                    l.elements[12] = -a,
                    c.elements[12] = a,
                    p = -m * i + f,
                    u = m * i + f,
                    d.elements[0] = 2 * r / (u - p),
                    d.elements[8] = (u + p) / (u - p),
                    this.cameraL.projectionMatrix.copy(d),
                    p = -m * i - f,
                    u = m * i - f,
                    d.elements[0] = 2 * r / (u - p),
                    d.elements[8] = (u + p) / (u - p),
                    this.cameraR.projectionMatrix.copy(d)
                }
                this.cameraL.matrixWorld.copy(h.matrixWorld).multiply(l),
                this.cameraR.matrixWorld.copy(h.matrixWorld).multiply(c)
            }
        }()
    }),
    ya.prototype = Object.create(pn.prototype),
    ya.prototype.constructor = ya,
    xa.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: xa,
        getInput: function() {
            return this.gain
        },
        removeFilter: function() {
            return null !== this.filter && (this.gain.disconnect(this.filter),
            this.filter.disconnect(this.context.destination),
            this.gain.connect(this.context.destination),
            this.filter = null),
            this
        },
        getFilter: function() {
            return this.filter
        },
        setFilter: function(t) {
            return null !== this.filter ? (this.gain.disconnect(this.filter),
            this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination),
            this.filter = t,
            this.gain.connect(this.filter),
            this.filter.connect(this.context.destination),
            this
        },
        getMasterVolume: function() {
            return this.gain.gain.value
        },
        setMasterVolume: function(t) {
            return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01),
            this
        },
        updateMatrixWorld: function() {
            var t = new He
              , e = new Fe
              , n = new He
              , i = new He;
            return function(r) {
                pn.prototype.updateMatrixWorld.call(this, r);
                var s = this.context.listener
                  , o = this.up;
                this.matrixWorld.decompose(t, e, n),
                i.set(0, 0, -1).applyQuaternion(e),
                s.positionX ? (s.positionX.setValueAtTime(t.x, this.context.currentTime),
                s.positionY.setValueAtTime(t.y, this.context.currentTime),
                s.positionZ.setValueAtTime(t.z, this.context.currentTime),
                s.forwardX.setValueAtTime(i.x, this.context.currentTime),
                s.forwardY.setValueAtTime(i.y, this.context.currentTime),
                s.forwardZ.setValueAtTime(i.z, this.context.currentTime),
                s.upX.setValueAtTime(o.x, this.context.currentTime),
                s.upY.setValueAtTime(o.y, this.context.currentTime),
                s.upZ.setValueAtTime(o.z, this.context.currentTime)) : (s.setPosition(t.x, t.y, t.z),
                s.setOrientation(i.x, i.y, i.z, o.x, o.y, o.z))
            }
        }()
    }),
    wa.prototype = Object.assign(Object.create(pn.prototype), {
        constructor: wa,
        getOutput: function() {
            return this.gain
        },
        setNodeSource: function(t) {
            return this.hasPlaybackControl = !1,
            this.sourceType = "audioNode",
            this.source = t,
            this.connect(),
            this
        },
        setMediaElementSource: function(t) {
            return this.hasPlaybackControl = !1,
            this.sourceType = "mediaNode",
            this.source = this.context.createMediaElementSource(t),
            this.connect(),
            this
        },
        setBuffer: function(t) {
            return this.buffer = t,
            this.sourceType = "buffer",
            this.autoplay && this.play(),
            this
        },
        play: function() {
            if (!0 !== this.isPlaying) {
                if (!1 !== this.hasPlaybackControl) {
                    var t = this.context.createBufferSource();
                    return t.buffer = this.buffer,
                    t.loop = this.loop,
                    t.onended = this.onEnded.bind(this),
                    t.playbackRate.setValueAtTime(this.playbackRate, this.startTime),
                    this.startTime = this.context.currentTime,
                    t.start(this.startTime, this.offset),
                    this.isPlaying = !0,
                    this.source = t,
                    this.connect()
                }
                console.warn("THREE.Audio: this Audio has no playback control.")
            } else
                console.warn("THREE.Audio: Audio is already playing.")
        },
        pause: function() {
            if (!1 !== this.hasPlaybackControl)
                return !0 === this.isPlaying && (this.source.stop(),
                this.source.onended = null,
                this.offset += (this.context.currentTime - this.startTime) * this.playbackRate,
                this.isPlaying = !1),
                this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        stop: function() {
            if (!1 !== this.hasPlaybackControl)
                return this.source.stop(),
                this.source.onended = null,
                this.offset = 0,
                this.isPlaying = !1,
                this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        connect: function() {
            if (this.filters.length > 0) {
                this.source.connect(this.filters[0]);
                for (var t = 1, e = this.filters.length; t < e; t++)
                    this.filters[t - 1].connect(this.filters[t]);
                this.filters[this.filters.length - 1].connect(this.getOutput())
            } else
                this.source.connect(this.getOutput());
            return this
        },
        disconnect: function() {
            if (this.filters.length > 0) {
                this.source.disconnect(this.filters[0]);
                for (var t = 1, e = this.filters.length; t < e; t++)
                    this.filters[t - 1].disconnect(this.filters[t]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput())
            } else
                this.source.disconnect(this.getOutput());
            return this
        },
        getFilters: function() {
            return this.filters
        },
        setFilters: function(t) {
            return t || (t = []),
            !0 === this.isPlaying ? (this.disconnect(),
            this.filters = t,
            this.connect()) : this.filters = t,
            this
        },
        getFilter: function() {
            return this.getFilters()[0]
        },
        setFilter: function(t) {
            return this.setFilters(t ? [t] : [])
        },
        setPlaybackRate: function(t) {
            if (!1 !== this.hasPlaybackControl)
                return this.playbackRate = t,
                !0 === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime),
                this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        getPlaybackRate: function() {
            return this.playbackRate
        },
        onEnded: function() {
            this.isPlaying = !1
        },
        getLoop: function() {
            return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."),
            !1) : this.loop
        },
        setLoop: function(t) {
            if (!1 !== this.hasPlaybackControl)
                return this.loop = t,
                !0 === this.isPlaying && (this.source.loop = this.loop),
                this;
            console.warn("THREE.Audio: this Audio has no playback control.")
        },
        getVolume: function() {
            return this.gain.gain.value
        },
        setVolume: function(t) {
            return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01),
            this
        }
    }),
    ba.prototype = Object.assign(Object.create(wa.prototype), {
        constructor: ba,
        getOutput: function() {
            return this.panner
        },
        getRefDistance: function() {
            return this.panner.refDistance
        },
        setRefDistance: function(t) {
            return this.panner.refDistance = t,
            this
        },
        getRolloffFactor: function() {
            return this.panner.rolloffFactor
        },
        setRolloffFactor: function(t) {
            return this.panner.rolloffFactor = t,
            this
        },
        getDistanceModel: function() {
            return this.panner.distanceModel
        },
        setDistanceModel: function(t) {
            return this.panner.distanceModel = t,
            this
        },
        getMaxDistance: function() {
            return this.panner.maxDistance
        },
        setMaxDistance: function(t) {
            return this.panner.maxDistance = t,
            this
        },
        setDirectionalCone: function(t, e, n) {
            return this.panner.coneInnerAngle = t,
            this.panner.coneOuterAngle = e,
            this.panner.coneOuterGain = n,
            this
        },
        updateMatrixWorld: function() {
            var t = new He
              , e = new Fe
              , n = new He
              , i = new He;
            return function(r) {
                pn.prototype.updateMatrixWorld.call(this, r);
                var s = this.panner;
                this.matrixWorld.decompose(t, e, n),
                i.set(0, 0, 1).applyQuaternion(e),
                s.setPosition(t.x, t.y, t.z),
                s.setOrientation(i.x, i.y, i.z)
            }
        }()
    }),
    Object.assign(Ma.prototype, {
        getFrequencyData: function() {
            return this.analyser.getByteFrequencyData(this.data),
            this.data
        },
        getAverageFrequency: function() {
            for (var t = 0, e = this.getFrequencyData(), n = 0; n < e.length; n++)
                t += e[n];
            return t / e.length
        }
    }),
    Object.assign(_a.prototype, {
        accumulate: function(t, e) {
            var n = this.buffer
              , i = this.valueSize
              , r = t * i + i
              , s = this.cumulativeWeight;
            if (0 === s) {
                for (var o = 0; o !== i; ++o)
                    n[r + o] = n[o];
                s = e
            } else {
                var a = e / (s += e);
                this._mixBufferRegion(n, r, 0, a, i)
            }
            this.cumulativeWeight = s
        },
        apply: function(t) {
            var e = this.valueSize
              , n = this.buffer
              , i = t * e + e
              , r = this.cumulativeWeight
              , s = this.binding;
            if (this.cumulativeWeight = 0,
            r < 1) {
                var o = 3 * e;
                this._mixBufferRegion(n, i, o, 1 - r, e)
            }
            for (var a = e, c = e + e; a !== c; ++a)
                if (n[a] !== n[a + e]) {
                    s.setValue(n, i);
                    break
                }
        },
        saveOriginalState: function() {
            var t = this.binding
              , e = this.buffer
              , n = this.valueSize
              , i = 3 * n;
            t.getValue(e, i);
            for (var r = n, s = i; r !== s; ++r)
                e[r] = e[i + r % n];
            this.cumulativeWeight = 0
        },
        restoreOriginalState: function() {
            var t = 3 * this.valueSize;
            this.binding.setValue(this.buffer, t)
        },
        _select: function(t, e, n, i, r) {
            if (i >= .5)
                for (var s = 0; s !== r; ++s)
                    t[e + s] = t[n + s]
        },
        _slerp: function(t, e, n, i) {
            Fe.slerpFlat(t, e, t, e, t, n, i)
        },
        _lerp: function(t, e, n, i, r) {
            for (var s = 1 - i, o = 0; o !== r; ++o) {
                var a = e + o;
                t[a] = t[a] * s + t[n + o] * i
            }
        }
    }),
    Object.assign(Sa.prototype, {
        getValue: function(t, e) {
            this.bind();
            var n = this._targetGroup.nCachedObjects_
              , i = this._bindings[n];
            void 0 !== i && i.getValue(t, e)
        },
        setValue: function(t, e) {
            for (var n = this._bindings, i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)
                n[i].setValue(t, e)
        },
        bind: function() {
            for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e)
                t[e].bind()
        },
        unbind: function() {
            for (var t = this._bindings, e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e)
                t[e].unbind()
        }
    }),
    Object.assign(Ea, {
        Composite: Sa,
        create: function(t, e, n) {
            return t && t.isAnimationObjectGroup ? new Ea.Composite(t,e,n) : new Ea(t,e,n)
        },
        sanitizeNodeName: function() {
            var t = new RegExp("[\\[\\]\\.:\\/]","g");
            return function(e) {
                return e.replace(/\s/g, "_").replace(t, "")
            }
        }(),
        parseTrackName: function() {
            var t = "[^\\[\\]\\.:\\/]"
              , e = "[^" + "\\[\\]\\.:\\/".replace("\\.", "") + "]"
              , n = /((?:WC+[\/:])*)/.source.replace("WC", t)
              , i = /(WCOD+)?/.source.replace("WCOD", e)
              , r = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", t)
              , s = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", t)
              , o = new RegExp("^" + n + i + r + s + "$")
              , a = ["material", "materials", "bones"];
            return function(t) {
                var e = o.exec(t);
                if (!e)
                    throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                var n = {
                    nodeName: e[2],
                    objectName: e[3],
                    objectIndex: e[4],
                    propertyName: e[5],
                    propertyIndex: e[6]
                }
                  , i = n.nodeName && n.nodeName.lastIndexOf(".");
                if (void 0 !== i && -1 !== i) {
                    var r = n.nodeName.substring(i + 1);
                    -1 !== a.indexOf(r) && (n.nodeName = n.nodeName.substring(0, i),
                    n.objectName = r)
                }
                if (null === n.propertyName || 0 === n.propertyName.length)
                    throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                return n
            }
        }(),
        findNode: function(t, e) {
            if (!e || "" === e || "root" === e || "." === e || -1 === e || e === t.name || e === t.uuid)
                return t;
            if (t.skeleton) {
                var n = t.skeleton.getBoneByName(e);
                if (void 0 !== n)
                    return n
            }
            if (t.children) {
                var i = function(t) {
                    for (var n = 0; n < t.length; n++) {
                        var r = t[n];
                        if (r.name === e || r.uuid === e)
                            return r;
                        var s = i(r.children);
                        if (s)
                            return s
                    }
                    return null
                }
                  , r = i(t.children);
                if (r)
                    return r
            }
            return null
        }
    }),
    Object.assign(Ea.prototype, {
        _getValue_unavailable: function() {},
        _setValue_unavailable: function() {},
        BindingType: {
            Direct: 0,
            EntireArray: 1,
            ArrayElement: 2,
            HasFromToArray: 3
        },
        Versioning: {
            None: 0,
            NeedsUpdate: 1,
            MatrixWorldNeedsUpdate: 2
        },
        GetterByBindingType: [function(t, e) {
            t[e] = this.node[this.propertyName]
        }
        , function(t, e) {
            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i)
                t[e++] = n[i]
        }
        , function(t, e) {
            t[e] = this.resolvedProperty[this.propertyIndex]
        }
        , function(t, e) {
            this.resolvedProperty.toArray(t, e)
        }
        ],
        SetterByBindingTypeAndVersioning: [[function(t, e) {
            this.targetObject[this.propertyName] = t[e]
        }
        , function(t, e) {
            this.targetObject[this.propertyName] = t[e],
            this.targetObject.needsUpdate = !0
        }
        , function(t, e) {
            this.targetObject[this.propertyName] = t[e],
            this.targetObject.matrixWorldNeedsUpdate = !0
        }
        ], [function(t, e) {
            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i)
                n[i] = t[e++]
        }
        , function(t, e) {
            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i)
                n[i] = t[e++];
            this.targetObject.needsUpdate = !0
        }
        , function(t, e) {
            for (var n = this.resolvedProperty, i = 0, r = n.length; i !== r; ++i)
                n[i] = t[e++];
            this.targetObject.matrixWorldNeedsUpdate = !0
        }
        ], [function(t, e) {
            this.resolvedProperty[this.propertyIndex] = t[e]
        }
        , function(t, e) {
            this.resolvedProperty[this.propertyIndex] = t[e],
            this.targetObject.needsUpdate = !0
        }
        , function(t, e) {
            this.resolvedProperty[this.propertyIndex] = t[e],
            this.targetObject.matrixWorldNeedsUpdate = !0
        }
        ], [function(t, e) {
            this.resolvedProperty.fromArray(t, e)
        }
        , function(t, e) {
            this.resolvedProperty.fromArray(t, e),
            this.targetObject.needsUpdate = !0
        }
        , function(t, e) {
            this.resolvedProperty.fromArray(t, e),
            this.targetObject.matrixWorldNeedsUpdate = !0
        }
        ]],
        getValue: function(t, e) {
            this.bind(),
            this.getValue(t, e)
        },
        setValue: function(t, e) {
            this.bind(),
            this.setValue(t, e)
        },
        bind: function() {
            var t = this.node
              , e = this.parsedPath
              , n = e.objectName
              , i = e.propertyName
              , r = e.propertyIndex;
            if (t || (t = Ea.findNode(this.rootNode, e.nodeName) || this.rootNode,
            this.node = t),
            this.getValue = this._getValue_unavailable,
            this.setValue = this._setValue_unavailable,
            t) {
                if (n) {
                    var s = e.objectIndex;
                    switch (n) {
                    case "materials":
                        if (!t.material)
                            return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        if (!t.material.materials)
                            return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        t = t.material.materials;
                        break;
                    case "bones":
                        if (!t.skeleton)
                            return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        t = t.skeleton.bones;
                        for (var o = 0; o < t.length; o++)
                            if (t[o].name === s) {
                                s = o;
                                break
                            }
                        break;
                    default:
                        if (void 0 === t[n])
                            return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        t = t[n]
                    }
                    if (void 0 !== s) {
                        if (void 0 === t[s])
                            return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                        t = t[s]
                    }
                }
                var a = t[i];
                if (void 0 !== a) {
                    var c = this.Versioning.None;
                    void 0 !== t.needsUpdate ? (c = this.Versioning.NeedsUpdate,
                    this.targetObject = t) : void 0 !== t.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate,
                    this.targetObject = t);
                    var l = this.BindingType.Direct;
                    if (void 0 !== r) {
                        if ("morphTargetInfluences" === i) {
                            if (!t.geometry)
                                return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                            if (t.geometry.isBufferGeometry) {
                                if (!t.geometry.morphAttributes)
                                    return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                                for (o = 0; o < this.node.geometry.morphAttributes.position.length; o++)
                                    if (t.geometry.morphAttributes.position[o].name === r) {
                                        r = o;
                                        break
                                    }
                            } else {
                                if (!t.geometry.morphTargets)
                                    return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                                for (o = 0; o < this.node.geometry.morphTargets.length; o++)
                                    if (t.geometry.morphTargets[o].name === r) {
                                        r = o;
                                        break
                                    }
                            }
                        }
                        l = this.BindingType.ArrayElement,
                        this.resolvedProperty = a,
                        this.propertyIndex = r
                    } else
                        void 0 !== a.fromArray && void 0 !== a.toArray ? (l = this.BindingType.HasFromToArray,
                        this.resolvedProperty = a) : Array.isArray(a) ? (l = this.BindingType.EntireArray,
                        this.resolvedProperty = a) : this.propertyName = i;
                    this.getValue = this.GetterByBindingType[l],
                    this.setValue = this.SetterByBindingTypeAndVersioning[l][c]
                } else {
                    var h = e.nodeName;
                    console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + i + " but it wasn't found.", t)
                }
            } else
                console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.")
        },
        unbind: function() {
            this.node = null,
            this.getValue = this._getValue_unbound,
            this.setValue = this._setValue_unbound
        }
    }),
    Object.assign(Ea.prototype, {
        _getValue_unbound: Ea.prototype.getValue,
        _setValue_unbound: Ea.prototype.setValue
    }),
    Object.assign(Ta.prototype, {
        isAnimationObjectGroup: !0,
        add: function() {
            for (var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._paths, s = this._parsedPaths, o = this._bindings, a = o.length, c = void 0, l = 0, h = arguments.length; l !== h; ++l) {
                var p = arguments[l]
                  , u = p.uuid
                  , d = i[u];
                if (void 0 === d) {
                    d = e++,
                    i[u] = d,
                    t.push(p);
                    for (var f = 0, m = a; f !== m; ++f)
                        o[f].push(new Ea(p,r[f],s[f]))
                } else if (d < n) {
                    c = t[d];
                    var g = --n
                      , v = t[g];
                    for (i[v.uuid] = d,
                    t[d] = v,
                    i[u] = g,
                    t[g] = p,
                    f = 0,
                    m = a; f !== m; ++f) {
                        var y = o[f]
                          , x = y[g]
                          , w = y[d];
                        y[d] = x,
                        void 0 === w && (w = new Ea(p,r[f],s[f])),
                        y[g] = w
                    }
                } else
                    t[d] !== c && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")
            }
            this.nCachedObjects_ = n
        },
        remove: function() {
            for (var t = this._objects, e = this.nCachedObjects_, n = this._indicesByUUID, i = this._bindings, r = i.length, s = 0, o = arguments.length; s !== o; ++s) {
                var a = arguments[s]
                  , c = a.uuid
                  , l = n[c];
                if (void 0 !== l && l >= e) {
                    var h = e++
                      , p = t[h];
                    n[p.uuid] = l,
                    t[l] = p,
                    n[c] = h,
                    t[h] = a;
                    for (var u = 0, d = r; u !== d; ++u) {
                        var f = i[u]
                          , m = f[h]
                          , g = f[l];
                        f[l] = m,
                        f[h] = g
                    }
                }
            }
            this.nCachedObjects_ = e
        },
        uncache: function() {
            for (var t = this._objects, e = t.length, n = this.nCachedObjects_, i = this._indicesByUUID, r = this._bindings, s = r.length, o = 0, a = arguments.length; o !== a; ++o) {
                var c = arguments[o].uuid
                  , l = i[c];
                if (void 0 !== l)
                    if (delete i[c],
                    l < n) {
                        var h = --n
                          , p = t[h]
                          , u = t[v = --e];
                        i[p.uuid] = l,
                        t[l] = p,
                        i[u.uuid] = h,
                        t[h] = u,
                        t.pop();
                        for (var d = 0, f = s; d !== f; ++d) {
                            var m = (y = r[d])[h]
                              , g = y[v];
                            y[l] = m,
                            y[h] = g,
                            y.pop()
                        }
                    } else {
                        var v;
                        for (i[(u = t[v = --e]).uuid] = l,
                        t[l] = u,
                        t.pop(),
                        d = 0,
                        f = s; d !== f; ++d) {
                            var y;
                            (y = r[d])[l] = y[v],
                            y.pop()
                        }
                    }
            }
            this.nCachedObjects_ = n
        },
        subscribe_: function(t, e) {
            var n = this._bindingsIndicesByPath
              , i = n[t]
              , r = this._bindings;
            if (void 0 !== i)
                return r[i];
            var s = this._paths
              , o = this._parsedPaths
              , a = this._objects
              , c = a.length
              , l = this.nCachedObjects_
              , h = new Array(c);
            i = r.length,
            n[t] = i,
            s.push(t),
            o.push(e),
            r.push(h);
            for (var p = l, u = a.length; p !== u; ++p) {
                var d = a[p];
                h[p] = new Ea(d,t,e)
            }
            return h
        },
        unsubscribe_: function(t) {
            var e = this._bindingsIndicesByPath
              , n = e[t];
            if (void 0 !== n) {
                var i = this._paths
                  , r = this._parsedPaths
                  , s = this._bindings
                  , o = s.length - 1
                  , a = s[o];
                e[t[o]] = n,
                s[n] = a,
                s.pop(),
                r[n] = r[o],
                r.pop(),
                i[n] = i[o],
                i.pop()
            }
        }
    }),
    Object.assign(Aa.prototype, {
        play: function() {
            return this._mixer._activateAction(this),
            this
        },
        stop: function() {
            return this._mixer._deactivateAction(this),
            this.reset()
        },
        reset: function() {
            return this.paused = !1,
            this.enabled = !0,
            this.time = 0,
            this._loopCount = -1,
            this._startTime = null,
            this.stopFading().stopWarping()
        },
        isRunning: function() {
            return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
        },
        isScheduled: function() {
            return this._mixer._isActiveAction(this)
        },
        startAt: function(t) {
            return this._startTime = t,
            this
        },
        setLoop: function(t, e) {
            return this.loop = t,
            this.repetitions = e,
            this
        },
        setEffectiveWeight: function(t) {
            return this.weight = t,
            this._effectiveWeight = this.enabled ? t : 0,
            this.stopFading()
        },
        getEffectiveWeight: function() {
            return this._effectiveWeight
        },
        fadeIn: function(t) {
            return this._scheduleFading(t, 0, 1)
        },
        fadeOut: function(t) {
            return this._scheduleFading(t, 1, 0)
        },
        crossFadeFrom: function(t, e, n) {
            if (t.fadeOut(e),
            this.fadeIn(e),
            n) {
                var i = this._clip.duration
                  , r = t._clip.duration
                  , s = r / i
                  , o = i / r;
                t.warp(1, s, e),
                this.warp(o, 1, e)
            }
            return this
        },
        crossFadeTo: function(t, e, n) {
            return t.crossFadeFrom(this, e, n)
        },
        stopFading: function() {
            var t = this._weightInterpolant;
            return null !== t && (this._weightInterpolant = null,
            this._mixer._takeBackControlInterpolant(t)),
            this
        },
        setEffectiveTimeScale: function(t) {
            return this.timeScale = t,
            this._effectiveTimeScale = this.paused ? 0 : t,
            this.stopWarping()
        },
        getEffectiveTimeScale: function() {
            return this._effectiveTimeScale
        },
        setDuration: function(t) {
            return this.timeScale = this._clip.duration / t,
            this.stopWarping()
        },
        syncWith: function(t) {
            return this.time = t.time,
            this.timeScale = t.timeScale,
            this.stopWarping()
        },
        halt: function(t) {
            return this.warp(this._effectiveTimeScale, 0, t)
        },
        warp: function(t, e, n) {
            var i = this._mixer
              , r = i.time
              , s = this._timeScaleInterpolant
              , o = this.timeScale;
            null === s && (s = i._lendControlInterpolant(),
            this._timeScaleInterpolant = s);
            var a = s.parameterPositions
              , c = s.sampleValues;
            return a[0] = r,
            a[1] = r + n,
            c[0] = t / o,
            c[1] = e / o,
            this
        },
        stopWarping: function() {
            var t = this._timeScaleInterpolant;
            return null !== t && (this._timeScaleInterpolant = null,
            this._mixer._takeBackControlInterpolant(t)),
            this
        },
        getMixer: function() {
            return this._mixer
        },
        getClip: function() {
            return this._clip
        },
        getRoot: function() {
            return this._localRoot || this._mixer._root
        },
        _update: function(t, e, n, i) {
            if (this.enabled) {
                var r = this._startTime;
                if (null !== r) {
                    var s = (t - r) * n;
                    if (s < 0 || 0 === n)
                        return;
                    this._startTime = null,
                    e = n * s
                }
                e *= this._updateTimeScale(t);
                var o = this._updateTime(e)
                  , a = this._updateWeight(t);
                if (a > 0)
                    for (var c = this._interpolants, l = this._propertyBindings, h = 0, p = c.length; h !== p; ++h)
                        c[h].evaluate(o),
                        l[h].accumulate(i, a)
            } else
                this._updateWeight(t)
        },
        _updateWeight: function(t) {
            var e = 0;
            if (this.enabled) {
                e = this.weight;
                var n = this._weightInterpolant;
                if (null !== n) {
                    var i = n.evaluate(t)[0];
                    e *= i,
                    t > n.parameterPositions[1] && (this.stopFading(),
                    0 === i && (this.enabled = !1))
                }
            }
            return this._effectiveWeight = e,
            e
        },
        _updateTimeScale: function(t) {
            var e = 0;
            if (!this.paused) {
                e = this.timeScale;
                var n = this._timeScaleInterpolant;
                null !== n && (e *= n.evaluate(t)[0],
                t > n.parameterPositions[1] && (this.stopWarping(),
                0 === e ? this.paused = !0 : this.timeScale = e))
            }
            return this._effectiveTimeScale = e,
            e
        },
        _updateTime: function(t) {
            var e = this.time + t
              , n = this._clip.duration
              , i = this.loop
              , r = this._loopCount
              , s = i === me;
            if (0 === t)
                return -1 === r ? e : s && 1 == (1 & r) ? n - e : e;
            if (i === de) {
                -1 === r && (this._loopCount = 0,
                this._setEndings(!0, !0, !1));
                t: {
                    if (e >= n)
                        e = n;
                    else {
                        if (!(e < 0))
                            break t;
                        e = 0
                    }
                    this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                    this._mixer.dispatchEvent({
                        type: "finished",
                        action: this,
                        direction: t < 0 ? -1 : 1
                    })
                }
            } else {
                if (-1 === r && (t >= 0 ? (r = 0,
                this._setEndings(!0, 0 === this.repetitions, s)) : this._setEndings(0 === this.repetitions, !0, s)),
                e >= n || e < 0) {
                    var o = Math.floor(e / n);
                    e -= n * o,
                    r += Math.abs(o);
                    var a = this.repetitions - r;
                    if (a <= 0)
                        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                        e = t > 0 ? n : 0,
                        this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: t > 0 ? 1 : -1
                        });
                    else {
                        if (1 === a) {
                            var c = t < 0;
                            this._setEndings(c, !c, s)
                        } else
                            this._setEndings(!1, !1, s);
                        this._loopCount = r,
                        this._mixer.dispatchEvent({
                            type: "loop",
                            action: this,
                            loopDelta: o
                        })
                    }
                }
                if (s && 1 == (1 & r))
                    return this.time = e,
                    n - e
            }
            return this.time = e,
            e
        },
        _setEndings: function(t, e, n) {
            var i = this._interpolantSettings;
            n ? (i.endingStart = we,
            i.endingEnd = we) : (i.endingStart = t ? this.zeroSlopeAtStart ? we : xe : be,
            i.endingEnd = e ? this.zeroSlopeAtEnd ? we : xe : be)
        },
        _scheduleFading: function(t, e, n) {
            var i = this._mixer
              , r = i.time
              , s = this._weightInterpolant;
            null === s && (s = i._lendControlInterpolant(),
            this._weightInterpolant = s);
            var o = s.parameterPositions
              , a = s.sampleValues;
            return o[0] = r,
            a[0] = e,
            o[1] = r + t,
            a[1] = n,
            this
        }
    }),
    La.prototype = Object.assign(Object.create(i.prototype), {
        constructor: La,
        _bindAction: function(t, e) {
            var n = t._localRoot || this._root
              , i = t._clip.tracks
              , r = i.length
              , s = t._propertyBindings
              , o = t._interpolants
              , a = n.uuid
              , c = this._bindingsByRootAndName
              , l = c[a];
            void 0 === l && (l = {},
            c[a] = l);
            for (var h = 0; h !== r; ++h) {
                var p = i[h]
                  , u = p.name
                  , d = l[u];
                if (void 0 !== d)
                    s[h] = d;
                else {
                    if (void 0 !== (d = s[h])) {
                        null === d._cacheIndex && (++d.referenceCount,
                        this._addInactiveBinding(d, a, u));
                        continue
                    }
                    var f = e && e._propertyBindings[h].binding.parsedPath;
                    ++(d = new _a(Ea.create(n, u, f),p.ValueTypeName,p.getValueSize())).referenceCount,
                    this._addInactiveBinding(d, a, u),
                    s[h] = d
                }
                o[h].resultBuffer = d.buffer
            }
        },
        _activateAction: function(t) {
            if (!this._isActiveAction(t)) {
                if (null === t._cacheIndex) {
                    var e = (t._localRoot || this._root).uuid
                      , n = t._clip.uuid
                      , i = this._actionsByClip[n];
                    this._bindAction(t, i && i.knownActions[0]),
                    this._addInactiveAction(t, n, e)
                }
                for (var r = t._propertyBindings, s = 0, o = r.length; s !== o; ++s) {
                    var a = r[s];
                    0 == a.useCount++ && (this._lendBinding(a),
                    a.saveOriginalState())
                }
                this._lendAction(t)
            }
        },
        _deactivateAction: function(t) {
            if (this._isActiveAction(t)) {
                for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                    var r = e[n];
                    0 == --r.useCount && (r.restoreOriginalState(),
                    this._takeBackBinding(r))
                }
                this._takeBackAction(t)
            }
        },
        _initMemoryManager: function() {
            this._actions = [],
            this._nActiveActions = 0,
            this._actionsByClip = {},
            this._bindings = [],
            this._nActiveBindings = 0,
            this._bindingsByRootAndName = {},
            this._controlInterpolants = [],
            this._nActiveControlInterpolants = 0;
            var t = this;
            this.stats = {
                actions: {
                    get total() {
                        return t._actions.length
                    },
                    get inUse() {
                        return t._nActiveActions
                    }
                },
                bindings: {
                    get total() {
                        return t._bindings.length
                    },
                    get inUse() {
                        return t._nActiveBindings
                    }
                },
                controlInterpolants: {
                    get total() {
                        return t._controlInterpolants.length
                    },
                    get inUse() {
                        return t._nActiveControlInterpolants
                    }
                }
            }
        },
        _isActiveAction: function(t) {
            var e = t._cacheIndex;
            return null !== e && e < this._nActiveActions
        },
        _addInactiveAction: function(t, e, n) {
            var i = this._actions
              , r = this._actionsByClip
              , s = r[e];
            if (void 0 === s)
                s = {
                    knownActions: [t],
                    actionByRoot: {}
                },
                t._byClipCacheIndex = 0,
                r[e] = s;
            else {
                var o = s.knownActions;
                t._byClipCacheIndex = o.length,
                o.push(t)
            }
            t._cacheIndex = i.length,
            i.push(t),
            s.actionByRoot[n] = t
        },
        _removeInactiveAction: function(t) {
            var e = this._actions
              , n = e[e.length - 1]
              , i = t._cacheIndex;
            n._cacheIndex = i,
            e[i] = n,
            e.pop(),
            t._cacheIndex = null;
            var r = t._clip.uuid
              , s = this._actionsByClip
              , o = s[r]
              , a = o.knownActions
              , c = a[a.length - 1]
              , l = t._byClipCacheIndex;
            c._byClipCacheIndex = l,
            a[l] = c,
            a.pop(),
            t._byClipCacheIndex = null,
            delete o.actionByRoot[(t._localRoot || this._root).uuid],
            0 === a.length && delete s[r],
            this._removeInactiveBindingsForAction(t)
        },
        _removeInactiveBindingsForAction: function(t) {
            for (var e = t._propertyBindings, n = 0, i = e.length; n !== i; ++n) {
                var r = e[n];
                0 == --r.referenceCount && this._removeInactiveBinding(r)
            }
        },
        _lendAction: function(t) {
            var e = this._actions
              , n = t._cacheIndex
              , i = this._nActiveActions++
              , r = e[i];
            t._cacheIndex = i,
            e[i] = t,
            r._cacheIndex = n,
            e[n] = r
        },
        _takeBackAction: function(t) {
            var e = this._actions
              , n = t._cacheIndex
              , i = --this._nActiveActions
              , r = e[i];
            t._cacheIndex = i,
            e[i] = t,
            r._cacheIndex = n,
            e[n] = r
        },
        _addInactiveBinding: function(t, e, n) {
            var i = this._bindingsByRootAndName
              , r = i[e]
              , s = this._bindings;
            void 0 === r && (r = {},
            i[e] = r),
            r[n] = t,
            t._cacheIndex = s.length,
            s.push(t)
        },
        _removeInactiveBinding: function(t) {
            var e = this._bindings
              , n = t.binding
              , i = n.rootNode.uuid
              , r = n.path
              , s = this._bindingsByRootAndName
              , o = s[i]
              , a = e[e.length - 1]
              , c = t._cacheIndex;
            a._cacheIndex = c,
            e[c] = a,
            e.pop(),
            delete o[r];
            t: {
                for (var l in o)
                    break t;
                delete s[i]
            }
        },
        _lendBinding: function(t) {
            var e = this._bindings
              , n = t._cacheIndex
              , i = this._nActiveBindings++
              , r = e[i];
            t._cacheIndex = i,
            e[i] = t,
            r._cacheIndex = n,
            e[n] = r
        },
        _takeBackBinding: function(t) {
            var e = this._bindings
              , n = t._cacheIndex
              , i = --this._nActiveBindings
              , r = e[i];
            t._cacheIndex = i,
            e[i] = t,
            r._cacheIndex = n,
            e[n] = r
        },
        _lendControlInterpolant: function() {
            var t = this._controlInterpolants
              , e = this._nActiveControlInterpolants++
              , n = t[e];
            return void 0 === n && ((n = new zo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex = e,
            t[e] = n),
            n
        },
        _takeBackControlInterpolant: function(t) {
            var e = this._controlInterpolants
              , n = t.__cacheIndex
              , i = --this._nActiveControlInterpolants
              , r = e[i];
            t.__cacheIndex = i,
            e[i] = t,
            r.__cacheIndex = n,
            e[n] = r
        },
        _controlInterpolantsResultBuffer: new Float32Array(1),
        clipAction: function(t, e) {
            var n = e || this._root
              , i = n.uuid
              , r = "string" == typeof t ? Zo.findByName(n, t) : t
              , s = null !== r ? r.uuid : t
              , o = this._actionsByClip[s]
              , a = null;
            if (void 0 !== o) {
                var c = o.actionByRoot[i];
                if (void 0 !== c)
                    return c;
                a = o.knownActions[0],
                null === r && (r = a._clip)
            }
            if (null === r)
                return null;
            var l = new Aa(this,r,e);
            return this._bindAction(l, a),
            this._addInactiveAction(l, s, i),
            l
        },
        existingAction: function(t, e) {
            var n = e || this._root
              , i = n.uuid
              , r = "string" == typeof t ? Zo.findByName(n, t) : t
              , s = r ? r.uuid : t
              , o = this._actionsByClip[s];
            return void 0 !== o && o.actionByRoot[i] || null
        },
        stopAllAction: function() {
            var t = this._actions
              , e = this._nActiveActions
              , n = this._bindings
              , i = this._nActiveBindings;
            this._nActiveActions = 0,
            this._nActiveBindings = 0;
            for (var r = 0; r !== e; ++r)
                t[r].reset();
            for (r = 0; r !== i; ++r)
                n[r].useCount = 0;
            return this
        },
        update: function(t) {
            t *= this.timeScale;
            for (var e = this._actions, n = this._nActiveActions, i = this.time += t, r = Math.sign(t), s = this._accuIndex ^= 1, o = 0; o !== n; ++o)
                e[o]._update(i, t, r, s);
            var a = this._bindings
              , c = this._nActiveBindings;
            for (o = 0; o !== c; ++o)
                a[o].apply(s);
            return this
        },
        getRoot: function() {
            return this._root
        },
        uncacheClip: function(t) {
            var e = this._actions
              , n = t.uuid
              , i = this._actionsByClip
              , r = i[n];
            if (void 0 !== r) {
                for (var s = r.knownActions, o = 0, a = s.length; o !== a; ++o) {
                    var c = s[o];
                    this._deactivateAction(c);
                    var l = c._cacheIndex
                      , h = e[e.length - 1];
                    c._cacheIndex = null,
                    c._byClipCacheIndex = null,
                    h._cacheIndex = l,
                    e[l] = h,
                    e.pop(),
                    this._removeInactiveBindingsForAction(c)
                }
                delete i[n]
            }
        },
        uncacheRoot: function(t) {
            var e = t.uuid
              , n = this._actionsByClip;
            for (var i in n) {
                var r = n[i].actionByRoot[e];
                void 0 !== r && (this._deactivateAction(r),
                this._removeInactiveAction(r))
            }
            var s = this._bindingsByRootAndName[e];
            if (void 0 !== s)
                for (var o in s) {
                    var a = s[o];
                    a.restoreOriginalState(),
                    this._removeInactiveBinding(a)
                }
        },
        uncacheAction: function(t, e) {
            var n = this.existingAction(t, e);
            null !== n && (this._deactivateAction(n),
            this._removeInactiveAction(n))
        }
    }),
    Ra.prototype.clone = function() {
        return new Ra(void 0 === this.value.clone ? this.value : this.value.clone())
    }
    ,
    Pa.prototype = Object.assign(Object.create(Pn.prototype), {
        constructor: Pa,
        isInstancedBufferGeometry: !0,
        copy: function(t) {
            return Pn.prototype.copy.call(this, t),
            this.maxInstancedCount = t.maxInstancedCount,
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        }
    }),
    Ca.prototype = Object.assign(Object.create(or.prototype), {
        constructor: Ca,
        isInstancedInterleavedBuffer: !0,
        copy: function(t) {
            return or.prototype.copy.call(this, t),
            this.meshPerAttribute = t.meshPerAttribute,
            this
        }
    }),
    Ia.prototype = Object.assign(Object.create(vn.prototype), {
        constructor: Ia,
        isInstancedBufferAttribute: !0,
        copy: function(t) {
            return vn.prototype.copy.call(this, t),
            this.meshPerAttribute = t.meshPerAttribute,
            this
        }
    }),
    Object.assign(Oa.prototype, {
        linePrecision: 1,
        set: function(t, e) {
            this.ray.set(t, e)
        },
        setFromCamera: function(t, e) {
            e && e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld),
            this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize()) : e && e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e),
            this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.")
        },
        intersectObject: function(t, e, n) {
            var i = n || [];
            return ka(t, this, i, e),
            i.sort(Da),
            i
        },
        intersectObjects: function(t, e, n) {
            var i = n || [];
            if (!1 === Array.isArray(t))
                return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
                i;
            for (var r = 0, s = t.length; r < s; r++)
                ka(t[r], this, i, e);
            return i.sort(Da),
            i
        }
    }),
    Object.assign(Ba.prototype, {
        start: function() {
            this.startTime = ("undefined" == typeof performance ? Date : performance).now(),
            this.oldTime = this.startTime,
            this.elapsedTime = 0,
            this.running = !0
        },
        stop: function() {
            this.getElapsedTime(),
            this.running = !1,
            this.autoStart = !1
        },
        getElapsedTime: function() {
            return this.getDelta(),
            this.elapsedTime
        },
        getDelta: function() {
            var t = 0;
            if (this.autoStart && !this.running)
                return this.start(),
                0;
            if (this.running) {
                var e = ("undefined" == typeof performance ? Date : performance).now();
                t = (e - this.oldTime) / 1e3,
                this.oldTime = e,
                this.elapsedTime += t
            }
            return t
        }
    }),
    Object.assign(Na.prototype, {
        set: function(t, e, n) {
            return this.radius = t,
            this.phi = e,
            this.theta = n,
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.radius = t.radius,
            this.phi = t.phi,
            this.theta = t.theta,
            this
        },
        makeSafe: function() {
            return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)),
            this
        },
        setFromVector3: function(t) {
            return this.radius = t.length(),
            0 === this.radius ? (this.theta = 0,
            this.phi = 0) : (this.theta = Math.atan2(t.x, t.z),
            this.phi = Math.acos(Ne.clamp(t.y / this.radius, -1, 1))),
            this
        }
    }),
    Object.assign(Ua.prototype, {
        set: function(t, e, n) {
            return this.radius = t,
            this.theta = e,
            this.y = n,
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.radius = t.radius,
            this.theta = t.theta,
            this.y = t.y,
            this
        },
        setFromVector3: function(t) {
            return this.radius = Math.sqrt(t.x * t.x + t.z * t.z),
            this.theta = Math.atan2(t.x, t.z),
            this.y = t.y,
            this
        }
    }),
    Object.assign(za.prototype, {
        set: function(t, e) {
            return this.min.copy(t),
            this.max.copy(e),
            this
        },
        setFromPoints: function(t) {
            this.makeEmpty();
            for (var e = 0, n = t.length; e < n; e++)
                this.expandByPoint(t[e]);
            return this
        },
        setFromCenterAndSize: function() {
            var t = new Ue;
            return function(e, n) {
                var i = t.copy(n).multiplyScalar(.5);
                return this.min.copy(e).sub(i),
                this.max.copy(e).add(i),
                this
            }
        }(),
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.min.copy(t.min),
            this.max.copy(t.max),
            this
        },
        makeEmpty: function() {
            return this.min.x = this.min.y = 1 / 0,
            this.max.x = this.max.y = -1 / 0,
            this
        },
        isEmpty: function() {
            return this.max.x < this.min.x || this.max.y < this.min.y
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Box2: .getCenter() target is now required"),
            t = new Ue),
            this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
        },
        getSize: function(t) {
            return void 0 === t && (console.warn("THREE.Box2: .getSize() target is now required"),
            t = new Ue),
            this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min)
        },
        expandByPoint: function(t) {
            return this.min.min(t),
            this.max.max(t),
            this
        },
        expandByVector: function(t) {
            return this.min.sub(t),
            this.max.add(t),
            this
        },
        expandByScalar: function(t) {
            return this.min.addScalar(-t),
            this.max.addScalar(t),
            this
        },
        containsPoint: function(t) {
            return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y)
        },
        containsBox: function(t) {
            return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y
        },
        getParameter: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box2: .getParameter() target is now required"),
            e = new Ue),
            e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y))
        },
        intersectsBox: function(t) {
            return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y)
        },
        clampPoint: function(t, e) {
            return void 0 === e && (console.warn("THREE.Box2: .clampPoint() target is now required"),
            e = new Ue),
            e.copy(t).clamp(this.min, this.max)
        },
        distanceToPoint: function() {
            var t = new Ue;
            return function(e) {
                return t.copy(e).clamp(this.min, this.max).sub(e).length()
            }
        }(),
        intersect: function(t) {
            return this.min.max(t.min),
            this.max.min(t.max),
            this
        },
        union: function(t) {
            return this.min.min(t.min),
            this.max.max(t.max),
            this
        },
        translate: function(t) {
            return this.min.add(t),
            this.max.add(t),
            this
        },
        equals: function(t) {
            return t.min.equals(this.min) && t.max.equals(this.max)
        }
    }),
    Object.assign(Fa.prototype, {
        set: function(t, e) {
            return this.start.copy(t),
            this.end.copy(e),
            this
        },
        clone: function() {
            return (new this.constructor).copy(this)
        },
        copy: function(t) {
            return this.start.copy(t.start),
            this.end.copy(t.end),
            this
        },
        getCenter: function(t) {
            return void 0 === t && (console.warn("THREE.Line3: .getCenter() target is now required"),
            t = new He),
            t.addVectors(this.start, this.end).multiplyScalar(.5)
        },
        delta: function(t) {
            return void 0 === t && (console.warn("THREE.Line3: .delta() target is now required"),
            t = new He),
            t.subVectors(this.end, this.start)
        },
        distanceSq: function() {
            return this.start.distanceToSquared(this.end)
        },
        distance: function() {
            return this.start.distanceTo(this.end)
        },
        at: function(t, e) {
            return void 0 === e && (console.warn("THREE.Line3: .at() target is now required"),
            e = new He),
            this.delta(e).multiplyScalar(t).add(this.start)
        },
        closestPointToPointParameter: function() {
            var t = new He
              , e = new He;
            return function(n, i) {
                t.subVectors(n, this.start),
                e.subVectors(this.end, this.start);
                var r = e.dot(e)
                  , s = e.dot(t) / r;
                return i && (s = Ne.clamp(s, 0, 1)),
                s
            }
        }(),
        closestPointToPoint: function(t, e, n) {
            var i = this.closestPointToPointParameter(t, e);
            return void 0 === n && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"),
            n = new He),
            this.delta(n).multiplyScalar(i).add(this.start)
        },
        applyMatrix4: function(t) {
            return this.start.applyMatrix4(t),
            this.end.applyMatrix4(t),
            this
        },
        equals: function(t) {
            return t.start.equals(this.start) && t.end.equals(this.end)
        }
    }),
    Ha.prototype = Object.create(pn.prototype),
    Ha.prototype.constructor = Ha,
    Ha.prototype.isImmediateRenderObject = !0,
    Ga.prototype = Object.create(gr.prototype),
    Ga.prototype.constructor = Ga,
    Ga.prototype.update = function() {
        var t = new He
          , e = new He
          , n = new Ge;
        return function() {
            var i = ["a", "b", "c"];
            this.object.updateMatrixWorld(!0),
            n.getNormalMatrix(this.object.matrixWorld);
            var r = this.object.matrixWorld
              , s = this.geometry.attributes.position
              , o = this.object.geometry;
            if (o && o.isGeometry)
                for (var a = o.vertices, c = o.faces, l = 0, h = 0, p = c.length; h < p; h++)
                    for (var u = c[h], d = 0, f = u.vertexNormals.length; d < f; d++) {
                        var m = a[u[i[d]]]
                          , g = u.vertexNormals[d];
                        t.copy(m).applyMatrix4(r),
                        e.copy(g).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),
                        s.setXYZ(l, t.x, t.y, t.z),
                        l += 1,
                        s.setXYZ(l, e.x, e.y, e.z),
                        l += 1
                    }
            else if (o && o.isBufferGeometry) {
                var v = o.attributes.position
                  , y = o.attributes.normal;
                for (l = 0,
                d = 0,
                f = v.count; d < f; d++)
                    t.set(v.getX(d), v.getY(d), v.getZ(d)).applyMatrix4(r),
                    e.set(y.getX(d), y.getY(d), y.getZ(d)),
                    e.applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),
                    s.setXYZ(l, t.x, t.y, t.z),
                    l += 1,
                    s.setXYZ(l, e.x, e.y, e.z),
                    l += 1
            }
            s.needsUpdate = !0
        }
    }(),
    ja.prototype = Object.create(pn.prototype),
    ja.prototype.constructor = ja,
    ja.prototype.dispose = function() {
        this.cone.geometry.dispose(),
        this.cone.material.dispose()
    }
    ,
    ja.prototype.update = function() {
        var t = new He
          , e = new He;
        return function() {
            this.light.updateMatrixWorld();
            var n = this.light.distance ? this.light.distance : 1e3
              , i = n * Math.tan(this.light.angle);
            this.cone.scale.set(i, i, n),
            t.setFromMatrixPosition(this.light.matrixWorld),
            e.setFromMatrixPosition(this.light.target.matrixWorld),
            this.cone.lookAt(e.sub(t)),
            void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color)
        }
    }(),
    Va.prototype = Object.create(gr.prototype),
    Va.prototype.constructor = Va,
    Va.prototype.updateMatrixWorld = function() {
        var t = new He
          , e = new ze
          , n = new ze;
        return function(i) {
            var r = this.bones
              , s = this.geometry
              , o = s.getAttribute("position");
            n.getInverse(this.root.matrixWorld);
            for (var a = 0, c = 0; a < r.length; a++) {
                var l = r[a];
                l.parent && l.parent.isBone && (e.multiplyMatrices(n, l.matrixWorld),
                t.setFromMatrixPosition(e),
                o.setXYZ(c, t.x, t.y, t.z),
                e.multiplyMatrices(n, l.parent.matrixWorld),
                t.setFromMatrixPosition(e),
                o.setXYZ(c + 1, t.x, t.y, t.z),
                c += 2)
            }
            s.getAttribute("position").needsUpdate = !0,
            pn.prototype.updateMatrixWorld.call(this, i)
        }
    }(),
    Wa.prototype = Object.create(Hn.prototype),
    Wa.prototype.constructor = Wa,
    Wa.prototype.dispose = function() {
        this.geometry.dispose(),
        this.material.dispose()
    }
    ,
    Wa.prototype.update = function() {
        void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color)
    }
    ,
    Ya.prototype = Object.create(pn.prototype),
    Ya.prototype.constructor = Ya,
    Ya.prototype.dispose = function() {
        this.children[0].geometry.dispose(),
        this.children[0].material.dispose()
    }
    ,
    Ya.prototype.update = function() {
        var t = .5 * this.light.width
          , e = .5 * this.light.height
          , n = this.line.geometry.attributes.position
          , i = n.array;
        i[0] = t,
        i[1] = -e,
        i[2] = 0,
        i[3] = t,
        i[4] = e,
        i[5] = 0,
        i[6] = -t,
        i[7] = e,
        i[8] = 0,
        i[9] = -t,
        i[10] = -e,
        i[11] = 0,
        i[12] = t,
        i[13] = -e,
        i[14] = 0,
        n.needsUpdate = !0,
        void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color)
    }
    ,
    qa.prototype = Object.create(pn.prototype),
    qa.prototype.constructor = qa,
    qa.prototype.dispose = function() {
        this.children[0].geometry.dispose(),
        this.children[0].material.dispose()
    }
    ,
    qa.prototype.update = function() {
        var t = new He
          , e = new rn
          , n = new rn;
        return function() {
            var i = this.children[0];
            if (void 0 !== this.color)
                this.material.color.set(this.color);
            else {
                var r = i.geometry.getAttribute("color");
                e.copy(this.light.color),
                n.copy(this.light.groundColor);
                for (var s = 0, o = r.count; s < o; s++) {
                    var a = s < o / 2 ? e : n;
                    r.setXYZ(s, a.r, a.g, a.b)
                }
                r.needsUpdate = !0
            }
            i.lookAt(t.setFromMatrixPosition(this.light.matrixWorld).negate())
        }
    }(),
    Xa.prototype = Object.create(gr.prototype),
    Xa.prototype.constructor = Xa,
    Za.prototype = Object.create(gr.prototype),
    Za.prototype.constructor = Za,
    Ka.prototype = Object.create(gr.prototype),
    Ka.prototype.constructor = Ka,
    Ka.prototype.update = function() {
        var t = new He
          , e = new He
          , n = new Ge;
        return function() {
            this.object.updateMatrixWorld(!0),
            n.getNormalMatrix(this.object.matrixWorld);
            for (var i = this.object.matrixWorld, r = this.geometry.attributes.position, s = this.object.geometry, o = s.vertices, a = s.faces, c = 0, l = 0, h = a.length; l < h; l++) {
                var p = a[l]
                  , u = p.normal;
                t.copy(o[p.a]).add(o[p.b]).add(o[p.c]).divideScalar(3).applyMatrix4(i),
                e.copy(u).applyMatrix3(n).normalize().multiplyScalar(this.size).add(t),
                r.setXYZ(c, t.x, t.y, t.z),
                c += 1,
                r.setXYZ(c, e.x, e.y, e.z),
                c += 1
            }
            r.needsUpdate = !0
        }
    }(),
    Ja.prototype = Object.create(pn.prototype),
    Ja.prototype.constructor = Ja,
    Ja.prototype.dispose = function() {
        this.lightPlane.geometry.dispose(),
        this.lightPlane.material.dispose(),
        this.targetLine.geometry.dispose(),
        this.targetLine.material.dispose()
    }
    ,
    Ja.prototype.update = function() {
        var t = new He
          , e = new He
          , n = new He;
        return function() {
            t.setFromMatrixPosition(this.light.matrixWorld),
            e.setFromMatrixPosition(this.light.target.matrixWorld),
            n.subVectors(e, t),
            this.lightPlane.lookAt(n),
            void 0 !== this.color ? (this.lightPlane.material.color.set(this.color),
            this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color),
            this.targetLine.material.color.copy(this.light.color)),
            this.targetLine.lookAt(n),
            this.targetLine.scale.z = n.length()
        }
    }(),
    Qa.prototype = Object.create(gr.prototype),
    Qa.prototype.constructor = Qa,
    Qa.prototype.update = function() {
        var t, e, n = new He, i = new un;
        function r(r, s, o, a) {
            n.set(s, o, a).unproject(i);
            var c = e[r];
            if (void 0 !== c)
                for (var l = t.getAttribute("position"), h = 0, p = c.length; h < p; h++)
                    l.setXYZ(c[h], n.x, n.y, n.z)
        }
        return function() {
            t = this.geometry,
            e = this.pointMap,
            i.projectionMatrix.copy(this.camera.projectionMatrix),
            r("c", 0, 0, -1),
            r("t", 0, 0, 1),
            r("n1", -1, -1, -1),
            r("n2", 1, -1, -1),
            r("n3", -1, 1, -1),
            r("n4", 1, 1, -1),
            r("f1", -1, -1, 1),
            r("f2", 1, -1, 1),
            r("f3", -1, 1, 1),
            r("f4", 1, 1, 1),
            r("u1", .7, 1.1, -1),
            r("u2", -.7, 1.1, -1),
            r("u3", 0, 2, -1),
            r("cf1", -1, 0, 1),
            r("cf2", 1, 0, 1),
            r("cf3", 0, -1, 1),
            r("cf4", 0, 1, 1),
            r("cn1", -1, 0, -1),
            r("cn2", 1, 0, -1),
            r("cn3", 0, -1, -1),
            r("cn4", 0, 1, -1),
            t.getAttribute("position").needsUpdate = !0
        }
    }(),
    $a.prototype = Object.create(gr.prototype),
    $a.prototype.constructor = $a,
    $a.prototype.update = function() {
        var t = new Ke;
        return function(e) {
            if (void 0 !== e && console.warn("THREE.BoxHelper: .update() has no longer arguments."),
            void 0 !== this.object && t.setFromObject(this.object),
            !t.isEmpty()) {
                var n = t.min
                  , i = t.max
                  , r = this.geometry.attributes.position
                  , s = r.array;
                s[0] = i.x,
                s[1] = i.y,
                s[2] = i.z,
                s[3] = n.x,
                s[4] = i.y,
                s[5] = i.z,
                s[6] = n.x,
                s[7] = n.y,
                s[8] = i.z,
                s[9] = i.x,
                s[10] = n.y,
                s[11] = i.z,
                s[12] = i.x,
                s[13] = i.y,
                s[14] = n.z,
                s[15] = n.x,
                s[16] = i.y,
                s[17] = n.z,
                s[18] = n.x,
                s[19] = n.y,
                s[20] = n.z,
                s[21] = i.x,
                s[22] = n.y,
                s[23] = n.z,
                r.needsUpdate = !0,
                this.geometry.computeBoundingSphere()
            }
        }
    }(),
    $a.prototype.setFromObject = function(t) {
        return this.object = t,
        this.update(),
        this
    }
    ,
    tc.prototype = Object.create(gr.prototype),
    tc.prototype.constructor = tc,
    tc.prototype.updateMatrixWorld = function(t) {
        var e = this.box;
        e.isEmpty() || (e.getCenter(this.position),
        e.getSize(this.scale),
        this.scale.multiplyScalar(.5),
        pn.prototype.updateMatrixWorld.call(this, t))
    }
    ,
    ec.prototype = Object.create(mr.prototype),
    ec.prototype.constructor = ec,
    ec.prototype.updateMatrixWorld = function(t) {
        var e = -this.plane.constant;
        Math.abs(e) < 1e-8 && (e = 1e-8),
        this.scale.set(.5 * this.size, .5 * this.size, e),
        this.children[0].material.side = e < 0 ? g : m,
        this.lookAt(this.plane.normal),
        pn.prototype.updateMatrixWorld.call(this, t)
    }
    ,
    nc.prototype = Object.create(pn.prototype),
    nc.prototype.constructor = nc,
    nc.prototype.setDirection = function() {
        var t, e = new He;
        return function(n) {
            n.y > .99999 ? this.quaternion.set(0, 0, 0, 1) : n.y < -.99999 ? this.quaternion.set(1, 0, 0, 0) : (e.set(n.z, 0, -n.x).normalize(),
            t = Math.acos(n.y),
            this.quaternion.setFromAxisAngle(e, t))
        }
    }(),
    nc.prototype.setLength = function(t, e, n) {
        void 0 === e && (e = .2 * t),
        void 0 === n && (n = .2 * e),
        this.line.scale.set(1, Math.max(0, t - e), 1),
        this.line.updateMatrix(),
        this.cone.scale.set(n, e, n),
        this.cone.position.y = t,
        this.cone.updateMatrix()
    }
    ,
    nc.prototype.setColor = function(t) {
        this.line.material.color.copy(t),
        this.cone.material.color.copy(t)
    }
    ,
    ic.prototype = Object.create(gr.prototype),
    ic.prototype.constructor = ic;
    var sc = 0
      , oc = 1;
    function ac(t) {
        return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),
        t
    }
    function cc(t) {
        return void 0 === t && (t = []),
        console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),
        t.isMultiMaterial = !0,
        t.materials = t,
        t.clone = function() {
            return t.slice()
        }
        ,
        t
    }
    function lc(t, e) {
        return console.warn("THREE.PointCloud has been renamed to THREE.Points."),
        new xr(t,e)
    }
    function hc(t) {
        return console.warn("THREE.Particle has been renamed to THREE.Sprite."),
        new lr(t)
    }
    function pc(t, e) {
        return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),
        new xr(t,e)
    }
    function uc(t) {
        return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),
        new yr(t)
    }
    function dc(t) {
        return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),
        new yr(t)
    }
    function fc(t) {
        return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),
        new yr(t)
    }
    function mc(t, e, n) {
        return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),
        new He(t,e,n)
    }
    function gc(t, e) {
        return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),
        new vn(t,e).setDynamic(!0)
    }
    function vc(t, e) {
        return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),
        new yn(t,e)
    }
    function yc(t, e) {
        return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),
        new xn(t,e)
    }
    function xc(t, e) {
        return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),
        new wn(t,e)
    }
    function wc(t, e) {
        return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),
        new bn(t,e)
    }
    function bc(t, e) {
        return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),
        new Mn(t,e)
    }
    function Mc(t, e) {
        return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),
        new _n(t,e)
    }
    function _c(t, e) {
        return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),
        new Sn(t,e)
    }
    function Sc(t, e) {
        return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),
        new En(t,e)
    }
    function Ec(t, e) {
        return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),
        new Tn(t,e)
    }
    function Tc(t) {
        console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),
        ho.call(this, t),
        this.type = "catmullrom",
        this.closed = !0
    }
    function Ac(t) {
        console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),
        ho.call(this, t),
        this.type = "catmullrom"
    }
    function Lc(t) {
        console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),
        ho.call(this, t),
        this.type = "catmullrom"
    }
    function Rc(t) {
        return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),
        new ic(t)
    }
    function Pc(t, e) {
        return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),
        new $a(t,e)
    }
    function Cc(t, e) {
        return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),
        new gr(new Ls(t.geometry),new fr({
            color: void 0 !== e ? e : 16777215
        }))
    }
    function Ic(t, e) {
        return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),
        new gr(new Sr(t.geometry),new fr({
            color: void 0 !== e ? e : 16777215
        }))
    }
    function Oc(t) {
        return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),
        new Ks(t)
    }
    function Dc(t) {
        return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),
        new Qs(t)
    }
    no.create = function(t, e) {
        return console.log("THREE.Curve.create() has been deprecated"),
        t.prototype = Object.create(no.prototype),
        t.prototype.constructor = t,
        t.prototype.getPoint = e,
        t
    }
    ,
    Object.assign(_o.prototype, {
        createPointsGeometry: function(t) {
            console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            var e = this.getPoints(t);
            return this.createGeometry(e)
        },
        createSpacedPointsGeometry: function(t) {
            console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            var e = this.getSpacedPoints(t);
            return this.createGeometry(e)
        },
        createGeometry: function(t) {
            console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
            for (var e = new gn, n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                e.vertices.push(new He(r.x,r.y,r.z || 0))
            }
            return e
        }
    }),
    Object.assign(So.prototype, {
        fromPoints: function(t) {
            console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),
            this.setFromPoints(t)
        }
    }),
    Tc.prototype = Object.create(ho.prototype),
    Ac.prototype = Object.create(ho.prototype),
    Lc.prototype = Object.create(ho.prototype),
    Object.assign(Lc.prototype, {
        initFromArray: function() {
            console.error("THREE.Spline: .initFromArray() has been removed.")
        },
        getControlPointsArray: function() {
            console.error("THREE.Spline: .getControlPointsArray() has been removed.")
        },
        reparametrizeByArcLength: function() {
            console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")
        }
    }),
    Xa.prototype.setColors = function() {
        console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
    }
    ,
    Va.prototype.update = function() {
        console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
    }
    ,
    Object.assign(ta.prototype, {
        extractUrlBase: function(t) {
            return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),
            ea.extractUrlBase(t)
        }
    }),
    Object.assign(za.prototype, {
        center: function(t) {
            return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),
            this.getCenter(t)
        },
        empty: function() {
            return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),
            this.isEmpty()
        },
        isIntersectionBox: function(t) {
            return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        },
        size: function(t) {
            return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),
            this.getSize(t)
        }
    }),
    Object.assign(Ke.prototype, {
        center: function(t) {
            return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),
            this.getCenter(t)
        },
        empty: function() {
            return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),
            this.isEmpty()
        },
        isIntersectionBox: function(t) {
            return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        },
        isIntersectionSphere: function(t) {
            return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
            this.intersectsSphere(t)
        },
        size: function(t) {
            return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),
            this.getSize(t)
        }
    }),
    Fa.prototype.center = function(t) {
        return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),
        this.getCenter(t)
    }
    ,
    Object.assign(Ne, {
        random16: function() {
            return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),
            Math.random()
        },
        nearestPowerOfTwo: function(t) {
            return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),
            Ne.floorPowerOfTwo(t)
        },
        nextPowerOfTwo: function(t) {
            return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),
            Ne.ceilPowerOfTwo(t)
        }
    }),
    Object.assign(Ge.prototype, {
        flattenToArrayOffset: function(t, e) {
            return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
            this.toArray(t, e)
        },
        multiplyVector3: function(t) {
            return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),
            t.applyMatrix3(this)
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
        },
        applyToBuffer: function(t) {
            return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),
            this.applyToBufferAttribute(t)
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
        }
    }),
    Object.assign(ze.prototype, {
        extractPosition: function(t) {
            return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),
            this.copyPosition(t)
        },
        flattenToArrayOffset: function(t, e) {
            return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
            this.toArray(t, e)
        },
        getPosition: function() {
            var t;
            return function() {
                return void 0 === t && (t = new He),
                console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),
                t.setFromMatrixColumn(this, 3)
            }
        }(),
        setRotationFromQuaternion: function(t) {
            return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),
            this.makeRotationFromQuaternion(t)
        },
        multiplyToArray: function() {
            console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
        },
        multiplyVector3: function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        },
        multiplyVector4: function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        },
        multiplyVector3Array: function() {
            console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
        },
        rotateAxis: function(t) {
            console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),
            t.transformDirection(this)
        },
        crossVector: function(t) {
            return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        },
        translate: function() {
            console.error("THREE.Matrix4: .translate() has been removed.")
        },
        rotateX: function() {
            console.error("THREE.Matrix4: .rotateX() has been removed.")
        },
        rotateY: function() {
            console.error("THREE.Matrix4: .rotateY() has been removed.")
        },
        rotateZ: function() {
            console.error("THREE.Matrix4: .rotateZ() has been removed.")
        },
        rotateByAxis: function() {
            console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
        },
        applyToBuffer: function(t) {
            return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),
            this.applyToBufferAttribute(t)
        },
        applyToVector3Array: function() {
            console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
        },
        makeFrustum: function(t, e, n, i, r, s) {
            return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),
            this.makePerspective(t, e, i, n, r, s)
        }
    }),
    Qe.prototype.isIntersectionLine = function(t) {
        return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),
        this.intersectsLine(t)
    }
    ,
    Fe.prototype.multiplyVector3 = function(t) {
        return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),
        t.applyQuaternion(this)
    }
    ,
    Object.assign(zn.prototype, {
        isIntersectionBox: function(t) {
            return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        },
        isIntersectionPlane: function(t) {
            return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),
            this.intersectsPlane(t)
        },
        isIntersectionSphere: function(t) {
            return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
            this.intersectsSphere(t)
        }
    }),
    Object.assign(Fn.prototype, {
        area: function() {
            return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),
            this.getArea()
        },
        barycoordFromPoint: function(t, e) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),
            this.getBarycoord(t, e)
        },
        midpoint: function(t) {
            return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),
            this.getMidpoint(t)
        },
        normal: function(t) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),
            this.getNormal(t)
        },
        plane: function(t) {
            return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),
            this.getPlane(t)
        }
    }),
    Object.assign(Fn, {
        barycoordFromPoint: function(t, e, n, i, r) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),
            Fn.getBarycoord(t, e, n, i, r)
        },
        normal: function(t, e, n, i) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),
            Fn.getNormal(t, e, n, i)
        }
    }),
    Object.assign(Eo.prototype, {
        extractAllPoints: function(t) {
            return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),
            this.extractPoints(t)
        },
        extrude: function(t) {
            return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),
            new ds(this,t)
        },
        makeGeometry: function(t) {
            return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),
            new Es(this,t)
        }
    }),
    Object.assign(Ue.prototype, {
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        },
        distanceToManhattan: function(t) {
            return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
            this.manhattanDistanceTo(t)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
    }),
    Object.assign(He.prototype, {
        setEulerFromRotationMatrix: function() {
            console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
        },
        setEulerFromQuaternion: function() {
            console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
        },
        getPositionFromMatrix: function(t) {
            return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),
            this.setFromMatrixPosition(t)
        },
        getScaleFromMatrix: function(t) {
            return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),
            this.setFromMatrixScale(t)
        },
        getColumnFromMatrix: function(t, e) {
            return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),
            this.setFromMatrixColumn(e, t)
        },
        applyProjection: function(t) {
            return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),
            this.applyMatrix4(t)
        },
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        },
        distanceToManhattan: function(t) {
            return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
            this.manhattanDistanceTo(t)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
    }),
    Object.assign(Ye.prototype, {
        fromAttribute: function(t, e, n) {
            return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        },
        lengthManhattan: function() {
            return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
    }),
    Object.assign(gn.prototype, {
        computeTangents: function() {
            console.error("THREE.Geometry: .computeTangents() has been removed.")
        },
        computeLineDistances: function() {
            console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")
        }
    }),
    Object.assign(pn.prototype, {
        getChildByName: function(t) {
            return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),
            this.getObjectByName(t)
        },
        renderDepth: function() {
            console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
        },
        translate: function(t, e) {
            return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),
            this.translateOnAxis(e, t)
        },
        getWorldRotation: function() {
            console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")
        }
    }),
    Object.defineProperties(pn.prototype, {
        eulerOrder: {
            get: function() {
                return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                this.rotation.order
            },
            set: function(t) {
                console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                this.rotation.order = t
            }
        },
        useQuaternion: {
            get: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
            },
            set: function() {
                console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
            }
        }
    }),
    Object.defineProperties(hr.prototype, {
        objects: {
            get: function() {
                return console.warn("THREE.LOD: .objects has been renamed to .levels."),
                this.levels
            }
        }
    }),
    Object.defineProperty(pr.prototype, "useVertexTexture", {
        get: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.")
        },
        set: function() {
            console.warn("THREE.Skeleton: useVertexTexture has been removed.")
        }
    }),
    Object.defineProperty(no.prototype, "__arcLengthDivisions", {
        get: function() {
            return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),
            this.arcLengthDivisions
        },
        set: function(t) {
            console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),
            this.arcLengthDivisions = t
        }
    }),
    $i.prototype.setLens = function(t, e) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),
        void 0 !== e && (this.filmGauge = e),
        this.setFocalLength(t)
    }
    ,
    Object.defineProperties(To.prototype, {
        onlyShadow: {
            set: function() {
                console.warn("THREE.Light: .onlyShadow has been removed.")
            }
        },
        shadowCameraFov: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),
                this.shadow.camera.fov = t
            }
        },
        shadowCameraLeft: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),
                this.shadow.camera.left = t
            }
        },
        shadowCameraRight: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),
                this.shadow.camera.right = t
            }
        },
        shadowCameraTop: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),
                this.shadow.camera.top = t
            }
        },
        shadowCameraBottom: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),
                this.shadow.camera.bottom = t
            }
        },
        shadowCameraNear: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),
                this.shadow.camera.near = t
            }
        },
        shadowCameraFar: {
            set: function(t) {
                console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),
                this.shadow.camera.far = t
            }
        },
        shadowCameraVisible: {
            set: function() {
                console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
            }
        },
        shadowBias: {
            set: function(t) {
                console.warn("THREE.Light: .shadowBias is now .shadow.bias."),
                this.shadow.bias = t
            }
        },
        shadowDarkness: {
            set: function() {
                console.warn("THREE.Light: .shadowDarkness has been removed.")
            }
        },
        shadowMapWidth: {
            set: function(t) {
                console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),
                this.shadow.mapSize.width = t
            }
        },
        shadowMapHeight: {
            set: function(t) {
                console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),
                this.shadow.mapSize.height = t
            }
        }
    }),
    Object.defineProperties(vn.prototype, {
        length: {
            get: function() {
                return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),
                this.array.length
            }
        },
        copyIndicesArray: function() {
            console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")
        }
    }),
    Object.assign(Pn.prototype, {
        addIndex: function(t) {
            console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),
            this.setIndex(t)
        },
        addDrawCall: function(t, e, n) {
            void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),
            console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),
            this.addGroup(t, e)
        },
        clearDrawCalls: function() {
            console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),
            this.clearGroups()
        },
        computeTangents: function() {
            console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")
        },
        computeOffsets: function() {
            console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
        }
    }),
    Object.defineProperties(Pn.prototype, {
        drawcalls: {
            get: function() {
                return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),
                this.groups
            }
        },
        offsets: {
            get: function() {
                return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),
                this.groups
            }
        }
    }),
    Object.assign(fs.prototype, {
        getArrays: function() {
            console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")
        },
        addShapeList: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")
        },
        addShape: function() {
            console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")
        }
    }),
    Object.defineProperties(Ra.prototype, {
        dynamic: {
            set: function() {
                console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")
            }
        },
        onUpdate: {
            value: function() {
                return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),
                this
            }
        }
    }),
    Object.defineProperties(Bn.prototype, {
        wrapAround: {
            get: function() {
                console.warn("THREE.Material: .wrapAround has been removed.")
            },
            set: function() {
                console.warn("THREE.Material: .wrapAround has been removed.")
            }
        },
        wrapRGB: {
            get: function() {
                return console.warn("THREE.Material: .wrapRGB has been removed."),
                new rn
            }
        },
        shading: {
            get: function() {
                console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
            },
            set: function(t) {
                console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                this.flatShading = t === y
            }
        }
    }),
    Object.defineProperties(Fs.prototype, {
        metal: {
            get: function() {
                return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),
                !1
            },
            set: function() {
                console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")
            }
        }
    }),
    Object.defineProperties(Un.prototype, {
        derivatives: {
            get: function() {
                return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                this.extensions.derivatives
            },
            set: function(t) {
                console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                this.extensions.derivatives = t
            }
        }
    }),
    Object.assign(nr.prototype, {
        animate: function(t) {
            console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),
            this.setAnimationLoop(t)
        },
        getCurrentRenderTarget: function() {
            return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),
            this.getRenderTarget()
        },
        getMaxAnisotropy: function() {
            return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),
            this.capabilities.getMaxAnisotropy()
        },
        getPrecision: function() {
            return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),
            this.capabilities.precision
        },
        resetGLState: function() {
            return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),
            this.state.reset()
        },
        supportsFloatTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),
            this.extensions.get("OES_texture_float")
        },
        supportsHalfFloatTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),
            this.extensions.get("OES_texture_half_float")
        },
        supportsStandardDerivatives: function() {
            return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),
            this.extensions.get("OES_standard_derivatives")
        },
        supportsCompressedTextureS3TC: function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),
            this.extensions.get("WEBGL_compressed_texture_s3tc")
        },
        supportsCompressedTexturePVRTC: function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),
            this.extensions.get("WEBGL_compressed_texture_pvrtc")
        },
        supportsBlendMinMax: function() {
            return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),
            this.extensions.get("EXT_blend_minmax")
        },
        supportsVertexTextures: function() {
            return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),
            this.capabilities.vertexTextures
        },
        supportsInstancedArrays: function() {
            return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),
            this.extensions.get("ANGLE_instanced_arrays")
        },
        enableScissorTest: function(t) {
            console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),
            this.setScissorTest(t)
        },
        initMaterial: function() {
            console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
        },
        addPrePlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
        },
        addPostPlugin: function() {
            console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
        },
        updateShadowMap: function() {
            console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
        },
        setFaceCulling: function() {
            console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")
        }
    }),
    Object.defineProperties(nr.prototype, {
        shadowMapEnabled: {
            get: function() {
                return this.shadowMap.enabled
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),
                this.shadowMap.enabled = t
            }
        },
        shadowMapType: {
            get: function() {
                return this.shadowMap.type
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),
                this.shadowMap.type = t
            }
        },
        shadowMapCullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
            }
        }
    }),
    Object.defineProperties(Zi.prototype, {
        cullFace: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
            }
        },
        renderReverseSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
            }
        },
        renderSingleSided: {
            get: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
            },
            set: function() {
                console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
            }
        }
    }),
    Object.defineProperties(qe.prototype, {
        wrapS: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                this.texture.wrapS
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                this.texture.wrapS = t
            }
        },
        wrapT: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                this.texture.wrapT
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                this.texture.wrapT = t
            }
        },
        magFilter: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                this.texture.magFilter
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                this.texture.magFilter = t
            }
        },
        minFilter: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                this.texture.minFilter
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                this.texture.minFilter = t
            }
        },
        anisotropy: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                this.texture.anisotropy
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                this.texture.anisotropy = t
            }
        },
        offset: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                this.texture.offset
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                this.texture.offset = t
            }
        },
        repeat: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                this.texture.repeat
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                this.texture.repeat = t
            }
        },
        format: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                this.texture.format
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                this.texture.format = t
            }
        },
        type: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                this.texture.type
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                this.texture.type = t
            }
        },
        generateMipmaps: {
            get: function() {
                return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                this.texture.generateMipmaps
            },
            set: function(t) {
                console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                this.texture.generateMipmaps = t
            }
        }
    }),
    Object.defineProperties(er.prototype, {
        standing: {
            set: function() {
                console.warn("THREE.WebVRManager: .standing has been removed.")
            }
        }
    }),
    wa.prototype.load = function(t) {
        console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
        var e = this;
        return (new ga).load(t, function(t) {
            e.setBuffer(t)
        }),
        this
    }
    ,
    Ma.prototype.getData = function() {
        return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),
        this.getFrequencyData()
    }
    ,
    ya.prototype.updateCubeMap = function(t, e) {
        return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),
        this.update(t, e)
    }
    ;
    var kc = {
        merge: function(t, e, n) {
            var i;
            console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),
            e.isMesh && (e.matrixAutoUpdate && e.updateMatrix(),
            i = e.matrix,
            e = e.geometry),
            t.merge(e, i, n)
        },
        center: function(t) {
            return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),
            t.center()
        }
    };
    function Bc() {
        console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),
        this.projectVector = function(t, e) {
            console.warn("THREE.Projector: .projectVector() is now vector.project()."),
            t.project(e)
        }
        ,
        this.unprojectVector = function(t, e) {
            console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),
            t.unproject(e)
        }
        ,
        this.pickingRay = function() {
            console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")
        }
    }
    function Nc() {
        console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),
        this.domElement = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
        this.clear = function() {}
        ,
        this.render = function() {}
        ,
        this.setClearColor = function() {}
        ,
        this.setSize = function() {}
    }
    je.crossOrigin = void 0,
    je.loadTexture = function(t, e, n, i) {
        console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
        var r = new eo;
        r.setCrossOrigin(this.crossOrigin);
        var s = r.load(t, n, void 0, i);
        return e && (s.mapping = e),
        s
    }
    ,
    je.loadTextureCube = function(t, e, n, i) {
        console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
        var r = new to;
        r.setCrossOrigin(this.crossOrigin);
        var s = r.load(t, n, void 0, i);
        return e && (s.mapping = e),
        s
    }
    ,
    je.loadCompressedTexture = function() {
        console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
    }
    ,
    je.loadCompressedTextureCube = function() {
        console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
    }
    ;
    var Uc = {
        createMultiMaterialObject: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        },
        detach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        },
        attach: function() {
            console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")
        }
    };
    function zc() {
        console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")
    }
}
, function(t, e) {
    t.exports.keyboardMap = "   CANCEL   HELP  BACK_SPACE TAB   CLEAR ENTER ENTER_SPECIAL  SHIFT CONTROL ALT PAUSE CAPS_LOCK KANA EISU JUNJA FINAL HANJA  ESCAPE CONVERT NONCONVERT ACCEPT MODECHANGE SPACE PAGE_UP PAGE_DOWN END HOME LEFT UP RIGHT DOWN SELECT PRINT EXECUTE PRINTSCREEN INSERT DELETE  0 1 2 3 4 5 6 7 8 9 COLON SEMICOLON LESS_THAN EQUALS GREATER_THAN QUESTION_MARK AT A B C D E F G H I J K L M N O P Q R S T U V W X Y Z OS_KEY  CONTEXT_MENU  SLEEP NUMPAD0 NUMPAD1 NUMPAD2 NUMPAD3 NUMPAD4 NUMPAD5 NUMPAD6 NUMPAD7 NUMPAD8 NUMPAD9 MULTIPLY ADD SEPARATOR SUBTRACT DECIMAL DIVIDE F1 F2 F3 F4 F5 F6 F7 F8 F9 F10 F11 F12 F13 F14 F15 F16 F17 F18 F19 F20 F21 F22 F23 F24         NUM_LOCK SCROLL_LOCK WIN_OEM_FJ_JISHO WIN_OEM_FJ_MASSHOU WIN_OEM_FJ_TOUROKU WIN_OEM_FJ_LOYA WIN_OEM_FJ_ROYA          CIRCUMFLEX EXCLAMATION DOUBLE_QUOTE HASH DOLLAR PERCENT AMPERSAND UNDERSCORE OPEN_PAREN CLOSE_PAREN ASTERISK PLUS PIPE HYPHEN_MINUS OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET TILDE     VOLUME_MUTE VOLUME_DOWN VOLUME_UP   SEMICOLON EQUALS COMMA MINUS PERIOD SLASH BACK_QUOTE                           OPEN_BRACKET BACK_SLASH CLOSE_BRACKET QUOTE  META ALTGR  WIN_ICO_HELP WIN_ICO_00  WIN_ICO_CLEAR   WIN_OEM_RESET WIN_OEM_JUMP WIN_OEM_PA1 WIN_OEM_PA2 WIN_OEM_PA3 WIN_OEM_WSCTRL WIN_OEM_CUSEL WIN_OEM_ATTN WIN_OEM_FINISH WIN_OEM_COPY WIN_OEM_AUTO WIN_OEM_ENLW WIN_OEM_BACKTAB ATTN CRSEL EXSEL EREOF PLAY ZOOM  PA1 WIN_OEM_CLEAR ".split(" "),
    Number.prototype.round = function(t) {
        return +this.toFixed(t)
    }
    ,
    String.prototype.escape = function() {
        return (this + "").replace(/[\\"']/g, "\\$&").replace(/\u0000/g, "\\0")
    }
    ,
    Number.prototype.roundToNearest = function(t) {
        return this > 0 ? Math.ceil(this / t) * t : this < 0 ? Math.floor(this / t) * t : this
    }
    ,
    t.exports.isURL = function(t) {
        try {
            return new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%@_.~+&:]*)*(\\?[;&a-z\\d%@_.,~+&:=-]*)?(\\#[-a-z\\d_]*)?$","i").test(t)
        } catch (t) {}
        return !1
    }
    ,
    t.exports.countInArray = function(t, e) {
        for (var n = 0, i = 0; i < t.length; i++)
            t[i] === e && n++;
        return n
    }
    ,
    t.exports.formatNum = function(t) {
        var e = Math.floor(Math.log(Math.abs(t)) / Math.log(1e3))
          , n = "kmb"[e - 1];
        return n ? (t / Math.pow(1e3, e)).toFixed(1) + n : "" + t
    }
    ,
    t.exports.randInt = function(t, e) {
        return Math.floor(Math.random() * (e - t + 1)) + t
    }
    ,
    t.exports.randFloat = function(t, e) {
        return Math.random() * (e - t) + t
    }
    ,
    t.exports.getRandom = function(e) {
        return e[t.exports.randInt(0, e.length - 1)]
    }
    ,
    t.exports.getDistance = function(t, e, n, i) {
        return Math.sqrt((n -= t) * n + (i -= e) * i)
    }
    ,
    t.exports.getDistance3D = function(t, e, n, i, r, s) {
        var o = t - i
          , a = e - r
          , c = n - s;
        return Math.sqrt(o * o + a * a + c * c)
    }
    ,
    t.exports.getAnglesSSS = function(t, e, n) {
        var i = Math.acos((e * e + n * n - t * t) / (2 * e * n))
          , r = Math.acos((n * n + t * t - e * e) / (2 * n * t))
          , s = Math.PI - i - r;
        return [-i - Math.PI / 2, r, s]
    }
    ,
    t.exports.getXDir = function(e, n, i, r, s, o) {
        var a = Math.abs(n - s)
          , c = t.exports.getDistance3D(e, n, i, r, s, o);
        return Math.asin(a / c) * (n > s ? -1 : 1)
    }
    ,
    t.exports.getAngleDist = function(t, e) {
        return Math.atan2(Math.sin(e - t), Math.cos(t - e))
    }
    ,
    t.exports.toRad = function(t) {
        return t * (Math.PI / 180)
    }
    ,
    t.exports.getDirection = function(t, e, n, i) {
        return Math.atan2(e - i, t - n)
    }
    ,
    t.exports.lerp = function(t, e, n) {
        return t + (e - t) * n
    }
    ,
    t.exports.orderByScore = function(t, e) {
        return e.score - t.score
    }
    ,
    t.exports.orderByKills = function(t, e) {
        return e.kills - t.kills
    }
    ,
    t.exports.orderByDst = function(t, e) {
        return t.dst - e.dst
    }
    ,
    t.exports.orderByNum = function(t, e) {
        return t - e
    }
    ,
    t.exports.capFirst = function(t) {
        return t.charAt(0).toUpperCase() + t.slice(1)
    }
    ,
    t.exports.truncateText = function(t, e) {
        return t.length > e ? t.substring(0, e) + "..." : t
    }
    ,
    t.exports.randomString = function(t) {
        for (var e = "", n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", i = 0; i < t; i++)
            e += n.charAt(Math.floor(Math.random() * n.length));
        return e
    }
    ,
    t.exports.formatNumCash = function(t) {
        return parseFloat(Math.round(100 * t) / 100).toFixed(2)
    }
    ,
    t.exports.getKeyName = function(e) {
        return t.exports.keyboardMap[e]
    }
    ,
    t.exports.getTime = function(t) {
        var e = Math.floor(t / 6e4)
          , n = (t % 6e4 / 1e3).toFixed(0);
        return e + ":" + (n < 10 ? "0" : "") + n
    }
    ,
    t.exports.getReadableTime = function(t) {
        var e = t / 1e3 / 60
          , n = parseInt(e % 60);
        e /= 60;
        var i = parseInt(e % 24);
        e /= 24;
        var r = parseInt(e);
        return (r ? r + "d " : "") + (i ? i + "h " : "") + (n || 0) + "m "
    }
    ,
    t.exports.fixTo = function(t, e) {
        return parseFloat(t.toFixed(e))
    }
    ,
    t.exports.limit = function(t, e) {
        return t < -e ? -e : t > e ? e : t
    }
    ,
    t.exports.limitMM = function(t, e, n) {
        return t < e ? e : t > n ? n : t
    }
    ,
    t.exports.cropVal = function(t, e) {
        return t <= e && t >= -e ? 0 : t
    }
    ,
    t.exports.isNumber = function(t) {
        return null !== t && void 0 !== t && "number" == typeof t && !isNaN(t) && isFinite(t)
    }
    ,
    t.exports.arrayInts = function(e) {
        for (var n = 0; n < e.length; ++n)
            if (!t.exports.isNumber(e[n]))
                return !1;
        return !0
    }
    ,
    t.exports.isArray = function(t) {
        return !!t && t.constructor === Array
    }
    ,
    t.exports.isString = function(t) {
        return t && "string" == typeof t
    }
    ,
    t.exports.lineInRect = function(t, e, n, i, r, s, o, a, c, l, h, p) {
        var u = (o - t) * i
          , d = (l - t) * i
          , f = (c - n) * s
          , m = (p - n) * s
          , g = (a - e) * r
          , v = (h - e) * r
          , y = Math.max(Math.max(Math.min(u, d), Math.min(f, m)), Math.min(g, v))
          , x = Math.min(Math.min(Math.max(u, d), Math.max(f, m)), Math.max(g, v));
        return !(x < 0) && !(y > x) && y
    }
    ,
    t.exports.pointInBox3D = function(t, e, n, i) {
        return t >= i.x - i.width && t <= i.x + i.width && e >= i.y - i.height && e <= i.y + i.height && n >= i.z - i.length && n <= i.z + i.length
    }
    ,
    t.exports.pointInBox = function(t, e, n, i, r, s, o) {
        return o ? t >= n && t <= r && e >= i && e <= s : t > n && t < r && e > i && e < s
    }
    ,
    t.exports.sharePos = function(t, e, n) {
        return n = n || 0,
        Math.abs(t.x - e.x) <= n && Math.abs(t.y - e.y) <= n && Math.abs(t.z - e.z) <= n && Math.abs(t.d - e.d) <= n
    }
    ,
    t.exports.cdv = {
        x: "width",
        y: "height",
        z: "length"
    },
    t.exports.boxIntersection = function(e, n, i, r, s) {
        var o = t.exports.cdv[i]
          , a = t.exports.cdv[r]
          , c = e[i] - e[o] - .1
          , l = n[i] - n[o] - .1
          , h = e[i] + e[o] + .1
          , p = n[i] + n[o] + .1
          , u = e[r] - e[a] - .1
          , d = n[r] - n[a] - .1
          , f = e[r] + e[a] + .1
          , m = n[r] + n[a] + .1
          , g = Math.max(c, l)
          , v = Math.min(h, p);
        if (v >= g) {
            var y = Math.max(u, d)
              , x = Math.min(f, m);
            if (x >= y) {
                for (var w = [{
                    [i]: g,
                    [r]: y,
                    d: s[0]
                }, {
                    [i]: v,
                    [r]: x,
                    d: s[1]
                }, {
                    [i]: g,
                    [r]: x,
                    d: s[2]
                }, {
                    [i]: v,
                    [r]: y,
                    d: s[3]
                }], b = w.length - 1; b >= 0; --b)
                    (w[b][i] == h && w[b][i] == p || w[b][i] == c && w[b][i] == l || w[b][r] == f && w[b][r] == m || w[b][r] == u && w[b][r] == d || t.exports.pointInBox(w[b][i], w[b][r], c, u, h, f) || t.exports.pointInBox(w[b][i], w[b][r], l, d, p, m)) && w.splice(b, 1);
                return w.length ? w : null
            }
        }
        return null
    }
    ,
    t.exports.boxCornerIntersection = function(e, n, i, r) {
        for (var s = t.exports.cdv[i], o = t.exports.cdv[r], a = e[i] - e[s], c = n[i] - n[s], l = e[i] + e[s], h = n[i] + n[s], p = e[r] - e[o], u = n[r] - n[o], d = e[r] + e[o], f = n[r] + n[o], m = [{
            [i]: a,
            [r]: p,
            d: Math.PI / 2
        }, {
            [i]: a,
            [r]: d,
            d: Math.PI
        }, {
            [i]: l,
            [r]: p,
            d: 0
        }, {
            [i]: l,
            [r]: d,
            d: -Math.PI / 2
        }], g = m.length - 1; g >= 0; --g)
            m[g].i = g,
            t.exports.pointInBox(m[g][i], m[g][r], c, u, h, f, !0) || m.splice(g, 1);
        return m.length ? m : null
    }
    ,
    t.exports.getIntersection = function(e, n, i) {
        var r = t.exports.cdv[i]
          , s = e[i] - e[r]
          , o = n[i] - n[r]
          , a = e[i] + e[r]
          , c = n[i] + n[r]
          , l = Math.max(s, o)
          , h = Math.min(a, c);
        if (h >= l) {
            var p = (h - l) / 2;
            return {
                [i]: l + p,
                [r]: p
            }
        }
        return null
    }
    ,
    t.exports.limitRectVal = function(e, n, i) {
        var r = t.exports.cdv[i];
        if (e[i] - e[r] < n[i] - n[r]) {
            var s = (n[i] - n[r] - (e[i] - e[r])) / 2;
            e[r] -= s,
            e[i] += s
        }
        e[i] + e[r] > n[i] + n[r] && (s = (e[i] + e[r] - (n[i] + n[r])) / 2,
        e[r] -= s,
        e[i] -= s)
    }
    ,
    t.exports.limitRect = function(e, n, i, r, s, o, a, c) {
        var l = t.exports.cdv[a]
          , h = t.exports.cdv[c]
          , p = {};
        if (p[a] = e,
        p[c] = n,
        p[l] = i,
        p[h] = r,
        t.exports.limitRectVal(p, o, a),
        t.exports.limitRectVal(p, o, c),
        0 == s || s == Math.PI) {
            var u = p[l];
            p[l] = p[h],
            p[h] = u
        }
        return p
    }
    ,
    t.exports.progressOnLine = function(t, e, n, i, r, s) {
        var o = n - t
          , a = i - e
          , c = Math.sqrt(o * o + a * a);
        return ((o /= c) * (r - t) + (a /= c) * (s - e)) / Math.sqrt(Math.pow(n - t, 2) + Math.pow(i - e, 2))
    }
    ,
    t.exports.generateSID = function(t) {
        for (var e = 0, n = !0; n; ) {
            n = !1,
            e++;
            for (var i = 0; i < t.length; ++i)
                if (t[i].sid == e) {
                    n = !0;
                    break
                }
        }
        return e
    }
    ;
    var n = function(t, e) {
        return t.concat(e)
    };
    Array.prototype.flatMap = function(t) {
        return function(t, e) {
            return e.map(t).reduce(n, [])
        }(t, this)
    }
}
, function(t, e, n) {
    var i = n(5);
    e.createCodec = a,
    e.install = function(t) {
        for (var e in t)
            s.prototype[e] = o(s.prototype[e], t[e])
    }
    ,
    e.filter = function(t) {
        return i(t) ? function(t) {
            return t = t.slice(),
            function(n) {
                return t.reduce(e, n)
            }
            ;
            function e(t, e) {
                return e(t)
            }
        }(t) : t
    }
    ;
    var r = n(0);
    function s(t) {
        if (!(this instanceof s))
            return new s(t);
        this.options = t,
        this.init()
    }
    function o(t, e) {
        return t && e ? function() {
            return t.apply(this, arguments),
            e.apply(this, arguments)
        }
        : t || e
    }
    function a(t) {
        return new s(t)
    }
    s.prototype.init = function() {
        var t = this.options;
        return t && t.uint8array && (this.bufferish = r.Uint8Array),
        this
    }
    ,
    e.preset = a({
        preset: !0
    })
}
, function(t, e) {
    var n = {}.toString;
    t.exports = Array.isArray || function(t) {
        return "[object Array]" == n.call(t)
    }
}
, function(t, e, n) {
    var i = n(2);
    const r = n(1);
    n(3);
    var s, o = {};
    t.exports.getColor = function(t, e) {
        var n = t + "-" + (e || "")
          , r = o[n];
        return r || (r = new i.Color(t),
        e && r.multiplyScalar(e),
        o[n] = r),
        r
    }
    ,
    t.exports.colorize = function(e, n, i) {
        n = i || t.exports.getColor(n);
        for (var r = 0; r < e.faces.length; ++r)
            e.faces[r].vertexColors[0] = n,
            e.faces[r].vertexColors[1] = n,
            e.faces[r].vertexColors[2] = n
    }
    ;
    var a = function(t, e, n, r) {
        for (var s = new i.Vector2(e,n).multiplyScalar(r || 1), o = 0; o < t.faceVertexUvs.length; o++)
            for (var a = t.faceVertexUvs[o], c = 0; c < a.length; c++)
                for (var l = 0; l < 3; l++) {
                    var h = a[c][l].multiply(s);
                    h.x = .5 + h.x - s.x / 2
                }
    }
      , c = function(t, e, n, i, r, s) {
        return t >= n - r && t <= n + r && e >= i - s && e <= i + s
    }
      , l = []
      , h = ["a", "b", "c", "d"];
    t.exports.generatePlane = function(e, n, o) {
        e *= o.ratio || 1;
        var p = (o.scale ? e + "_" + n + "_" : "") + (o.scale || "") + (o.tilesX || "") + (o.tilesZ || "") + (void 0 != o.colr ? o.colr : "");
        if (!(s = l[p])) {
            if (s = new i.PlaneGeometry(1,1,o.tilesX || 1,o.tilesZ || 1),
            o.noise) {
                for (var u = {}, d = o.margin || 0, f = 0; f < s.vertices.length; ++f) {
                    var m = s.vertices[f].x
                      , g = s.vertices[f].y;
                    if (!o.pinEdges || -.5 != m && .5 != m && -.5 != g && .5 != g)
                        if (o.objects) {
                            for (var v = 0; v < o.objects.length; ++v)
                                if (o.objects[v].y - o.objects[v].height <= .1 && 2 * o.objects[v].height > o.noise && c(-g * e * 2, m * n * 2, o.objects[v].z, o.objects[v].x, o.objects[v].length + d, o.objects[v].width + d)) {
                                    s.vertices[f].z = Math.random() * o.noise + 1,
                                    u[f] = t.exports.getColor(o.colr, .65);
                                    break
                                }
                        } else
                            s.vertices[f].z = Math.random() * o.noise;
                    u[f] || (u[f] = t.exports.getColor(o.colr))
                }
                for (f = 0; f < s.faces.length; f++) {
                    for (var y = s.faces[f], x = 0, w = 0; w < 3; w++)
                        y.vertexColors[w] = u[y[h[w]]],
                        s.vertices[y[h[w]]].z <= 0 && x++;
                    x >= 3 && delete s.faces[f]
                }
                s.faces = s.faces.filter(function(t) {
                    return t
                }),
                s.elementsNeedUpdate = !0
            } else
                o.colr && t.exports.colorize(s, o.colr);
            o.scale && a(s, n / r.worldUV, e / r.worldUV, o.scale),
            l[p] = s
        }
        return s
    }
    ;
    var p = [];
    t.exports.generateCube = function(e, n, o, c, l) {
        e = e || [1, 1, 1, 1, 1, 1];
        for (var h = (l.scale ? n + "_" + o + "_" + c + "_" : "") + (void 0 != l.colr ? l.colr : "") + (l.scale || "") + (l.amb || "") + (l.useScale || ""), u = 0; u < e.length; ++u)
            h += "_" + e[u];
        if (!(s = p[h])) {
            l.colr = void 0 != l.colr ? l.colr : 16777215;
            var d = t.exports.getColor(l.colr)
              , f = l.noAmb ? d : l.amb ? t.exports.getColor(l.colr, r.ambientVal + l.amb * (1 - r.ambientVal)) : d;
            s = new i.Geometry;
            var m, g = [];
            for (e[0] && ((m = new i.PlaneGeometry(1,1)).rotateY(Math.PI / 2),
            m.translate(.5, .5, 0),
            m.faces[0].vertexColors = [d, f, d],
            m.faces[1].vertexColors = [f, f, d],
            l.scale && a(m, c / r.worldUV, o / r.worldUV, l.scale),
            g.push(m)),
            e[1] && ((m = new i.PlaneGeometry(1,1)).rotateY(-Math.PI / 2),
            m.translate(-.5, .5, 0),
            m.faces[0].vertexColors = [d, f, d],
            m.faces[1].vertexColors = [f, f, d],
            l.scale && a(m, c / r.worldUV, o / r.worldUV, l.scale),
            g.push(m)),
            e[2] && ((m = new i.PlaneGeometry(1,1)).rotateX(-Math.PI / 2),
            m.translate(0, 1, 0),
            m.faces[0].vertexColors = [d, d, d],
            m.faces[1].vertexColors = [d, d, d],
            l.scale && a(m, n / r.worldUV, c / r.worldUV, l.scale),
            g.push(m)),
            e[3] && ((m = new i.PlaneGeometry(1,1)).rotateX(Math.PI / 2),
            m.translate(0, 0, 0),
            m.faces[0].vertexColors = [f, f, f],
            m.faces[1].vertexColors = [f, f, f],
            l.scale && a(m, n / r.worldUV, c / r.worldUV, l.scale),
            g.push(m)),
            e[4] && ((m = new i.PlaneGeometry(1,1)).translate(0, .5, .5),
            m.faces[0].vertexColors = [d, f, d],
            m.faces[1].vertexColors = [f, f, d],
            l.scale && a(m, n / r.worldUV, o / r.worldUV, l.scale),
            g.push(m)),
            e[5] && ((m = new i.PlaneGeometry(1,1)).rotateY(Math.PI),
            m.translate(0, .5, -.5),
            m.faces[0].vertexColors = [d, f, d],
            m.faces[1].vertexColors = [f, f, d],
            l.scale && a(m, n / r.worldUV, o / r.worldUV, l.scale),
            g.push(m)),
            u = 0; u < g.length; u++)
                s.merge(g[u], new i.Matrix4);
            l && l.useScale && (s.scale(n, o, c),
            s.translate(0, -o / 2, 0)),
            p[h] = s
        }
        return s
    }
}
, function(t, e, n) {
    let i = n(2);
    const r = n(1)
      , s = n(6);
    let o = new i.TextureLoader;
    function a(t, e, n, r) {
        return new Promise(s=>{
            (new i.OBJLoader).load(e, e=>{
                let a;
                n && (a = o.load(n, t=>{
                    t.wrapS = i.RepeatWrapping,
                    t.wrapT = i.RepeatWrapping,
                    t.repeat.set(1, 1),
                    t.minFilter = i.NearestFilter,
                    t.magFilter = i.NearestFilter,
                    t.needsUpdate = !0
                }
                ));
                let c = new i.MeshLambertMaterial({
                    map: a
                })
                  , l = new i.Geometry;
                e.traverse(t=>{
                    t instanceof i.Mesh && (t.geometry.isBufferGeometry ? (l.fromBufferGeometry(t.geometry),
                    l.computeFlatVertexNormals(),
                    t.geometry.fromGeometry(l)) : t.geometry.computeFlatVertexNormals(),
                    t.material = c)
                }
                ),
                e.scale.setScalar(r || 1),
                t.add(e),
                s()
            }
            )
        }
        )
    }
    function c(t, e, n) {
        let r = (new i.TextureLoader).load(e);
        r.magFilter = i.NearestFilter;
        let s = new i.SpriteMaterial({
            map: r,
            color: 16777215
        })
          , o = new i.Sprite(s);
        n && o.scale.set(n, n, 1),
        t.add(o)
    }
    function l(t, e) {
        let n = new i.PlaneGeometry(t,e);
        return n.rotateX(-Math.PI / 2),
        n
    }
    function h(t, e, n, r) {
        var o = s.generateCube([1, 1, 1, 1, 1, 1], t, e, n, {
            scale: 1,
            amb: r,
            useScale: !0
        });
        return (new i.BufferGeometry).fromGeometry(o)
    }
    new i.BoxBufferGeometry(1,1,1),
    new i.PlaneBufferGeometry(1,1).rotateX(-Math.PI / 2),
    new i.MeshLambertMaterial({
        color: 65280
    }),
    new i.MeshLambertMaterial({
        color: 5592405
    }),
    t.exports.prefabs = {
        CRATE: {
            dontRound: !0,
            gen: t=>a(t, "models/crate_0.obj", "textures/crate_0.png", r.crateScale),
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        STACK: {
            dontRound: !0,
            gen: t=>a(t, "models/stack_0.obj", "textures/stack_0.png", r.crateScale),
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        BARREL: {
            dontRound: !0,
            complex: !0,
            gen: t=>a(t, "models/barrel_0.obj", "textures/barrel_0.png", r.barrelScale),
            castShadow: !0,
            receiveShadow: !0
        },
        VEHICLE: {
            dontRound: !0,
            complex: !0,
            gen: t=>a(t, "models/vehicle_0.obj", "textures/vehicle_0.png", r.vehicleScale),
            castShadow: !0,
            receiveShadow: !0
        },
        LADDER: {
            defaultSize: [2, 10, 4],
            scalable: !0,
            scaleWithSize: !1,
            hideBoundingBox: !1,
            texturable: !1,
            genGeo: async t=>h(...t),
            customDirection: !0,
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        CUBE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            editAmb: !0,
            scaleWithSize: !1,
            editColor: !0,
            editEmissive: !0,
            editOpac: !0,
            hideBoundingBox: !1,
            editPen: !0,
            texturable: !0,
            genGeo: async(t,e)=>h(...t, e),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        RAMP: {
            defaultSize: [10, 5, 10],
            scalable: !0,
            scaleWithSize: !1,
            hideBoundingBox: !1,
            boostable: !0,
            editColor: !0,
            texturable: !0,
            genGeo: async t=>h(...t),
            shootable: !0,
            customDirection: !0,
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        PLANE: {
            defaultSize: [4, .01, 4],
            dontRound: !0,
            scalable: !0,
            canTerrain: !0,
            scaleWithSize: !0,
            editColor: !0,
            editPen: !0,
            editEmissive: !0,
            editOpac: !0,
            hideBoundingBox: !1,
            texturable: !0,
            genGeo: async t=>l(t[0], t[2]),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        OBJECTIVE: {
            defaultSize: [50, 50, 50],
            scalable: !0,
            noTexture: !0,
            opacity: .2,
            lineCol: 13107455,
            tool: !0,
            genGeo: async(t,e)=>h(...t, e),
            stepSrc: "a"
        },
        PARTICLES: {
            defaultSize: [20, 20, 20],
            hasParticles: !0,
            scalable: !0,
            noTexture: !0,
            opacity: .3,
            lineCol: 3080191,
            tool: !0,
            genGeo: async(t,e)=>h(...t, e),
            stepSrc: "a"
        },
        BILLBOARD: {
            defaultSize: [40, .01, 10],
            lineCol: 16776960,
            dontRound: !0,
            scalable: !0,
            canTerrain: !0,
            scaleWithSize: !0,
            hideBoundingBox: !1,
            genGeo: async t=>l(t[0], t[2]),
            stepSrc: "a",
            dummy: !1,
            castShadow: !0,
            receiveShadow: !0
        },
        SCORE_ZONE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            noTexture: !0,
            opacity: .3,
            lineCol: 16776960,
            tool: !0,
            genGeo: async(t,e)=>h(...t, e),
            stepSrc: "a"
        },
        DEATH_ZONE: {
            defaultSize: [10, 10, 10],
            scalable: !0,
            noTexture: !0,
            opacity: .3,
            lineCol: 16711680,
            tool: !0,
            genGeo: async(t,e)=>h(...t, e),
            stepSrc: "a"
        },
        SPAWN_POINT: {
            defaultSize: [8, 8, 8],
            scalable: !1,
            alwaysSee: !0,
            tool: !0,
            scaleWithSize: !1,
            teamable: !0,
            hideBoundingBox: !0,
            editorGen: t=>c(t, "img/favicon.png", 8),
            stepSrc: "a",
            dummy: !1,
            castShadow: !1,
            receiveShadow: !1
        },
        CAMERA_POSITION: {
            defaultSize: [2, 2, 2],
            scalable: !1,
            alwaysSee: !0,
            tool: !0,
            scaleWithSize: !1,
            hideBoundingBox: !0,
            editorGen: t=>c(t, "img/crosshair.png", 5),
            stepSrc: "a",
            dummy: !1,
            castShadow: !1,
            receiveShadow: !1
        }
    },
    t.exports.texturePrefabs = {
        WALL: {
            src: "wall_0",
            filter: i.NearestFilter
        },
        DIRT: {
            src: "dirt_0",
            filter: i.NearestFilter
        },
        FLOOR: {
            src: "floor_0",
            filter: i.NearestFilter
        },
        GRID: {
            src: "grid_0",
            filter: i.NearestFilter
        },
        GREY: {
            src: "grey_0",
            filter: i.NearestFilter
        },
        DEFAULT: {
            src: "default",
            filter: i.NearestFilter
        },
        ROOF: {
            src: "roof_0",
            filter: i.NearestFilter
        },
        FLAG: {
            src: "flag_0",
            filter: i.NearestFilter
        }
    },
    t.exports.loadTexturePrefab = function(e) {
        let n = t.exports.texturePrefabs[e];
        if ("default" != n.src)
            return o.load("/textures/" + n.src + ".png", t=>{
                t.wrapS = i.RepeatWrapping,
                t.wrapT = i.RepeatWrapping,
                t.minFilter = n.filter,
                t.magFilter = n.filter,
                t.needsUpdate = !0
            }
            )
    }
}
, function(t, e, n) {
    const i = n(1);
    var r = [{
        id: "ffa",
        name: "Free for All",
        alias: "ffa"
    }, {
        id: "tdm",
        name: "Team Deathmatch",
        alias: "tdm",
        teams: !0
    }, {
        id: "point",
        name: "Hardpoint",
        alias: "point",
        objective: !0,
        teams: !0,
        gameStart: function(t) {
            t.activeObjective = -1,
            t.nextObjective()
        }
    }, {
        id: "bhop",
        name: "Parkour",
        endStats: ["sid", "name", "score", "deaths"],
        alias: "bhop",
        noKick: !0,
        friendly: !0
    }, {
        id: "hide",
        name: "Hide & Seek",
        alias: "hide",
        endStats: ["sid", "name", "score", "found", "reward"],
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "hide" == t.players.list[n].team && e++;
            return e > 0 ? "hide" : "seek"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "hide" == t.players.list[n].team && e++;
            return e > 0
        },
        minPlayers: 2,
        waitTimers: [{
            time: 1e4,
            msg: "picking seeker in ",
            trigger: function(t) {
                t.pickSeeker()
            }
        }, {
            time: 45e3,
            msg: "releasing seeker in ",
            trigger: function(t) {
                t.releaseSeeker()
            }
        }],
        spdMlt: {
            hide: .8
        },
        killConv: !0,
        noKick: !0,
        showTeam: !0,
        startTeam: "hide",
        convTeam: "seek",
        convWord: "found",
        noWeap: !0,
        friendly: !0,
        hideNames: !0
    }, {
        id: "infect",
        name: "Infected",
        alias: "infect",
        endStats: ["sid", "name", "score", "kills", "infected", "reward"],
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "surv" == t.players.list[n].team && e++;
            return e > 0 ? "surv" : "inf"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "surv" == t.players.list[n].team && e++;
            return e > 0
        },
        minPlayers: 2,
        waitTimers: [{
            time: 2e4,
            msg: "infection in ",
            trigger: function(t) {
                t.infectRandom()
            }
        }],
        teamClass: {
            inf: 9
        },
        spdMlt: {
            inf: 1.15
        },
        killConv: !0,
        noKick: !0,
        startTeam: "surv",
        convWord: "infected",
        convTeam: "inf"
    }, {
        id: "race",
        name: "Race",
        alias: "race",
        endStats: ["sid", "name", "score", "time"],
        gameTime: 0,
        timed: !0,
        endSort: function(t, e) {
            return t.score === e.score && t.gameTimer && e.gameTimer ? t.gameTimer - e.gameTimer : e.score - t.score
        },
        gameStart: function(t) {
            t.lockMove = !0,
            t.targetScore = 0;
            for (var e = 0; e < t.map.manager.objects.length; ++e)
                t.map.manager.objects[e].score && t.targetScore++
        },
        condition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e)
                t.players.list[e].score >= t.targetScore && !t.players.list[e].timer && (t.players.list[e].timer = t.lastTimer,
                t.players.list[e].gameTimer = t.gameTimer,
                t.waitTimers || (t.waitTimers = [{
                    time: 1e4,
                    contTime: !0,
                    msg: "race ends in ",
                    trigger: function(t) {
                        t.gameTimer = "skip"
                    }
                }]));
            return !0
        },
        waitTimers: [{
            time: 15e3,
            msg: "race starting in ",
            trigger: function(t) {
                t.lockMove = !1
            }
        }],
        noWeap: !0,
        friendly: !0
    }, {
        id: "boss",
        name: "Boss Hunt",
        alias: "boss",
        winCondition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "boss" == t.players.list[n].team && e++;
            return e > 0 ? "boss" : "heros"
        },
        condition: function(t) {
            for (var e = 0, n = 0; n < t.players.list.length; ++n)
                t.players.list[n].active && "boss" == t.players.list[n].team && e++;
            return e > 0
        },
        waitTimers: [{
            time: 15e3,
            msg: "picking boss in ",
            trigger: function(t) {
                t.pickBoss()
            }
        }],
        noReward: !0,
        minPlayers: 1,
        startTeam: "heros"
    }, {
        id: "comp",
        name: "Competitive",
        alias: "comp",
        endStats: ["sid", "name", "score", "kills", "deaths"],
        noReward: !0,
        killSort: !0,
        winCondition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e)
                if (t.players.list[e].kills >= 10)
                    return t.players.list[e];
            return null
        },
        condition: function(t) {
            for (var e = 0; e < t.players.list.length; ++e)
                if (t.players.list[e].kills >= 10)
                    return !1;
            return !0
        },
        gameTime: 6e5,
        regenDelay: 15e3,
        waitTimers: [{
            time: 25e3,
            msg: "match begins in "
        }]
    }];
    t.exports.mapModes = [[0, 2], [0, 2], [0, 2]],
    t.exports.modes = r;
    for (var s = [{
        name: "Burg",
        modURL: "",
        ambient: 9207163,
        light: 16772075,
        sky: 14608620,
        fog: 13746882,
        fogD: 900,
        modes: [0, 1],
        shadScale: 170,
        camPos: [-205, 26, -428],
        spawns: [[-80, 18, 35], [187, 0, -188], [215, 14, -494], [-229, 0, -532], [-328, 0, -255], [-154, 0, -134], [-125, -28, -341], [32, -28, -509], [332, 0, -227], [114, 0, -365]],
        objects: [{
            p: [-96, 0, 57],
            s: [288, 18, 94],
            t: 1
        }, {
            p: [73, 0, 33],
            s: [50, 18, 46],
            id: 9,
            t: 1,
            d: 2
        }, {
            p: [28, 0, 8],
            s: [152, 24, 4]
        }, {
            p: [0, -4, -45],
            s: [516, 4, 304],
            t: 1
        }, {
            p: [-76, 0, -48],
            s: [56, 74, 122]
        }, {
            p: [37, 0, -68],
            s: [110, 54, 80]
        }, {
            p: [-112, 0, 74],
            s: [126, 76, 38]
        }, {
            p: [90, 0, 77],
            s: [158, 76, 44]
        }, {
            p: [-136, 0, -16],
            s: [64, 18, 52],
            t: 1
        }, {
            p: [-136, 0, -44],
            s: [64, 24, 4]
        }, {
            p: [-170, 0, -18],
            s: [4, 24, 56]
        }, {
            p: [-234, 0, -27],
            s: [32, 60, 96]
        }, {
            p: [-240, 0, 41],
            s: [20, 50, 44]
        }, {
            p: [-218, 13, 74],
            s: [88, 38, 54]
        }, {
            p: [185, 0, -9],
            s: [16, 46, 84]
        }, {
            p: [180, 0, 45],
            s: [60, 92, 44]
        }, {
            p: [213, 0, -61],
            s: [94, 88, 60]
        }, {
            p: [96, 0, -175],
            s: [110, 44, 44]
        }, {
            p: [-85, 0, -140],
            s: [56, 84, 112]
        }, {
            p: [126, -4, -300],
            s: [228, 4, 206],
            t: 1
        }, {
            p: [-82, -28, -252],
            s: [60, 94, 138]
        }, {
            p: [9, -28, -274],
            s: [6, 34, 168]
        }, {
            p: [49, -28, -385],
            s: [96, 104, 66]
        }, {
            p: [-23, -28, -252],
            s: [58, 28, 110],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [-4, -32, -365],
            s: [352, 4, 378],
            t: 1
        }, {
            p: [-116, -28, -377],
            s: [146, 88, 42]
        }, {
            p: [-21, 6, -377],
            s: [44, 38, 20]
        }, {
            p: [-243, 0, -105],
            s: [20, 50, 96]
        }, {
            p: [190, -28, -346],
            s: [116, 86, 118]
        }, {
            p: [-195, 0, -17],
            s: [46, 18, 54],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [-134, 0, -191],
            s: [90, 72, 76]
        }, {
            p: [-278, 0, -191],
            s: [130, 72, 76]
        }, {
            p: [-230, -22, -238],
            s: [272, 22, 82],
            t: 1
        }, {
            p: [-210, -28, -323],
            s: [132, 90, 66]
        }, {
            p: [-128, -28, -300],
            s: [32, 28, 42],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [-254, -22, -419],
            s: [214, 22, 280],
            t: 1
        }, {
            p: [-326, -22, -321],
            s: [34, 84, 88]
        }, {
            p: [-341, -2, -253],
            s: [4, 56, 48]
        }, {
            p: [-158, -28, -274],
            s: [28, 90, 32]
        }, {
            p: [-263, -20, -322],
            s: [30, 94, 94]
        }, {
            p: [-330, -23, -394],
            s: [22, 72, 210]
        }, {
            p: [-88, -28, -429],
            s: [78, 28, 62],
            id: 9,
            t: 1,
            d: 2
        }, {
            p: [-103, -22, -497],
            s: [48, 84, 86]
        }, {
            p: [-160, 0, -477],
            s: [66, 26, 4]
        }, {
            p: [-137, -22, -489],
            s: [20, 22, 182],
            t: 1
        }, {
            p: [-164, 0, -547],
            s: [98, 86, 40]
        }, {
            p: [-283, 0, -506],
            s: [72, 10, 86],
            t: 1
        }, {
            p: [-262, 0, -452],
            s: [30, 10, 22],
            t: 1
        }, {
            p: [-300, 0, -450],
            s: [38, 10, 26],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [-245, 0, -493],
            s: [4, 16, 112]
        }, {
            p: [-262, 0, -439],
            s: [30, 16, 4]
        }, {
            p: [-347, 0, -535],
            s: [72, 72, 76]
        }, {
            p: [-262, 0, -567],
            s: [98, 48, 40]
        }, {
            p: [-319, 0, -587],
            s: [48, 120, 54]
        }, {
            p: [-1, -28, -377],
            s: [4, 34, 20]
        }, {
            p: [-41, -28, -377],
            s: [4, 34, 20]
        }, {
            p: [-63, -28, -506],
            s: [52, 118, 92]
        }, {
            p: [85, -28, -498],
            s: [32, 112, 88]
        }, {
            p: [173, -24, -525],
            s: [148, 34, 128],
            t: 1
        }, {
            p: [39, -29, -544],
            s: [218, 94, 46]
        }, {
            p: [182, 7, -540],
            s: [72, 90, 60]
        }, {
            p: [298, -4, -329],
            s: [116, 4, 264],
            t: 1
        }, {
            p: [279, 0, -485],
            s: [64, 10, 48],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [278, -24, -541],
            s: [62, 34, 64],
            t: 1
        }, {
            p: [264, 9, -557],
            s: [94, 36, 24]
        }, {
            p: [331, -23, -552],
            s: [54, 98, 110]
        }, {
            p: [332, -5, -499],
            s: [42, 60, 110]
        }, {
            p: [342, -4, -411],
            s: [20, 36, 110]
        }, {
            p: [332, -23, -303],
            s: [54, 96, 110]
        }, {
            p: [128, -28, -425],
            s: [64, 42, 4]
        }, {
            p: [171, -28, -461],
            s: [152, 44, 4]
        }, {
            p: [249, -24, -484],
            s: [4, 40, 50]
        }, {
            p: [204, -28, -440],
            s: [72, 28, 38],
            id: 9,
            t: 1,
            d: 0
        }, {
            p: [228, 0, -120],
            s: [10, 48, 60]
        }, {
            p: [156, 0, -188],
            s: [32, 70, 82]
        }, {
            p: [228, 0, -188],
            s: [32, 86, 82]
        }, {
            p: [324, -37, -144],
            s: [4, 44, 106]
        }, {
            p: [260, -37, -144],
            s: [4, 44, 106]
        }, {
            p: [293, -28, -153],
            s: [64, 28, 88],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [367, 0, -146],
            s: [58, 50, 118]
        }, {
            p: [347, -28, -63],
            s: [194, 86, 80]
        }, {
            p: [335, 51, -64],
            s: [60, 88, 56]
        }, {
            p: [348, -4, -227],
            s: [8, 48, 52]
        }, {
            p: [393, 0, -404],
            s: [88, 64, 110]
        }, {
            p: [397, 0, -195],
            s: [58, 76, 80]
        }, {
            p: [-356, 0, -369],
            s: [42, 82, 50]
        }, {
            p: [-264, 0, -84],
            s: [42, 106, 50]
        }, {
            p: [292, -30, -106],
            s: [116, 2, 6],
            t: 1
        }, {
            p: [1, 0, 0],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-42, 0, -79],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-42, 12, -79],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-42, 0, -67],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [0, -28, -325],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [0, -28, -337],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [0, -16, -333],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-76, -28, -327],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-76, -16, -327],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [237, 10, -473],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [224, 10, -520],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [155, 10, -504],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [167, 10, -504],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [163, 22, -504],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [214, 10, -467],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [312, 0, -401],
            s: [2, 2, 86]
        }, {
            p: [313, 0, -242],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [210, 0, -281],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [198, 0, -281],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [204, 12, -281],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-59, 18, 19],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-110, 18, -36],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-110, 0, -52],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-122, 0, -52],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-164, 18, -38],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-214, 18, 15],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-154, 0, -252],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-313, 0, -235],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-253, 10, -447],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-305, 10, -521],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-251, 10, -457],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-211, 0, -494],
            s: [12, 12, 12],
            id: 8
        }, {
            p: [-199, 0, -493],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-199, 12, -498],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [206, 0, -207],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [206, 0, -195],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [98, 0, -61],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [98, 0, -73],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [96, 0, -51],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [136, 0, -149],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [192, 34, -188],
            s: [40, 24, 82]
        }, {
            p: [128, -4, -415],
            s: [68, 12, 20],
            t: 1
        }, {
            p: [94, -28, -422],
            s: [4, 42, 10]
        }, {
            p: [337, -4, -150],
            s: [22, 4, 94],
            t: 1
        }, {
            p: [-261, 0, -375],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-181, 0, -404],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-11, -28, -384],
            s: [20, 34, 2],
            t: 2
        }, {
            p: [-32, -28, -370],
            s: [18, 34, 2],
            t: 2
        }, {
            p: [173, 0, -233],
            s: [2, 34, 24],
            t: 2
        }, {
            p: [202, 0, -226],
            s: [20, 34, 2],
            t: 2
        }, {
            p: [182, 0, -150],
            s: [20, 34, 2],
            t: 2
        }, {
            p: [211, 0, -162],
            s: [2, 34, 24],
            t: 2
        }, {
            p: [20, -28, -438],
            s: [28, 76, 40]
        }, {
            p: [114, 0, -388],
            s: [36, 8, 34],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [-279, 0, -451],
            s: [4, 16, 28]
        }, {
            p: [-337, 120, -563],
            s: [12, 4, 6],
            col: 1
        }, {
            p: [-299, 120, -566],
            s: [8, 4, 12],
            col: 1
        }, {
            p: [-297, 120, -586],
            s: [4, 4, 12],
            col: 1
        }, {
            p: [-300, 120, -608],
            s: [10, 6, 12],
            col: 1
        }, {
            p: [-316, 120, -563],
            s: [12, 2, 6],
            col: 1
        }, {
            p: [-206, 86, -535],
            s: [14, 4, 16],
            col: 1
        }, {
            p: [-126, 86, -535],
            s: [22, 6, 16],
            col: 1
        }, {
            p: [-165, 86, -530],
            s: [22, 4, 6],
            col: 1
        }, {
            p: [-209, 86, -560],
            s: [8, 4, 14],
            col: 1
        }, {
            p: [-230, 48, -550],
            s: [24, 2, 6],
            col: 1
        }, {
            p: [-264, 48, -550],
            s: [18, 2, 6],
            col: 1
        }, {
            p: [-295, 48, -550],
            s: [14, 4, 6],
            col: 1
        }, {
            p: [-316, 70, -502],
            s: [6, 12, 6],
            col: 1,
            t: 2
        }, {
            p: [-378, 73, -502],
            s: [6, 8, 6],
            col: 1,
            t: 2
        }, {
            p: [-318, 72, -504],
            s: [14, 4, 14],
            col: 1
        }, {
            p: [-378, 72, -504],
            s: [10, 2, 14],
            col: 1
        }, {
            p: [-358, 72, -499],
            s: [14, 2, 4],
            col: 1
        }, {
            p: [-314, 72, -536],
            s: [6, 4, 16],
            col: 1
        }, {
            p: [-321, 49, -480],
            s: [4, 2, 24],
            col: 1
        }, {
            p: [-321, 49, -384],
            s: [4, 6, 16],
            col: 1
        }, {
            p: [-321, 49, -413],
            s: [4, 4, 16],
            col: 1
        }, {
            p: [-321, 49, -446],
            s: [4, 4, 12],
            col: 1
        }, {
            p: [-53, 60, -392],
            s: [20, 6, 12],
            col: 1
        }, {
            p: [-182, 60, -362],
            s: [14, 6, 12],
            col: 1
        }, {
            p: [233, 45, -548],
            s: [12, 2, 6],
            col: 1
        }, {
            p: [262, 45, -548],
            s: [20, 2, 6],
            col: 1
        }, {
            p: [288, 45, -548],
            s: [16, 2, 6],
            col: 1
        }, {
            p: [-82, 90, -466],
            s: [14, 4, 12],
            col: 1
        }, {
            p: [-43, 90, -467],
            s: [12, 4, 14],
            col: 1
        }, {
            p: [-44, 90, -519],
            s: [14, 6, 30],
            col: 1
        }, {
            p: [-60, 90, -463],
            s: [14, 2, 6],
            col: 1
        }, {
            p: [-39, 90, -490],
            s: [4, 2, 16],
            col: 1
        }, {
            p: [-84, 90, -524],
            s: [10, 6, 26],
            col: 1
        }, {
            p: [-87, 90, -492],
            s: [4, 2, 10],
            col: 1
        }, {
            p: [-63, 71, -450],
            s: [4, 4, 20],
            t: 2
        }, {
            p: [-122, 62, -459],
            s: [6, 10, 6],
            col: 1,
            t: 2
        }, {
            p: [-124, 62, -507],
            s: [6, 4, 22],
            col: 1
        }, {
            p: [-124, 62, -476],
            s: [6, 4, 14],
            col: 1
        }, {
            p: [-88, 62, -457],
            s: [18, 4, 6],
            col: 1
        }, {
            p: [-132, 60, -396],
            s: [26, 4, 4],
            col: 1
        }, {
            p: [-179, 60, -392],
            s: [20, 6, 12],
            col: 1
        }, {
            p: [-89, 60, -396],
            s: [14, 4, 4],
            col: 1
        }, {
            p: [85, 66, -447],
            s: [4, 4, 16],
            t: 2
        }, {
            p: [-34, 44, -377],
            s: [12, 4, 20],
            col: 1
        }, {
            p: [-14, 44, -377],
            s: [10, 2, 20],
            col: 1
        }, {
            p: [-341, 82, -387],
            s: [12, 4, 14],
            col: 1
        }, {
            p: [-341, 82, -350],
            s: [12, 6, 12],
            col: 1
        }, {
            p: [-338, 82, -369],
            s: [6, 2, 12],
            col: 1
        }, {
            p: [-371, 82, -389],
            s: [12, 4, 10],
            col: 1
        }, {
            p: [-356, 82, -392],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [53, 65, -523],
            s: [18, 4, 4],
            col: 1
        }, {
            p: [135, 65, -523],
            s: [12, 4, 4],
            col: 1
        }, {
            p: [114, 65, -523],
            s: [12, 4, 4],
            col: 1
        }, {
            p: [211, 97, -517],
            s: [14, 6, 14],
            col: 1
        }, {
            p: [153, 97, -518],
            s: [14, 4, 16],
            col: 1
        }, {
            p: [184, 97, -514],
            s: [12, 2, 8],
            col: 1
        }, {
            p: [215, 97, -539],
            s: [6, 2, 18],
            col: 1
        }, {
            p: [211, 97, -564],
            s: [14, 6, 12],
            col: 1
        }, {
            p: [153, 97, -562],
            s: [14, 6, 16],
            col: 1
        }, {
            p: [149, 97, -539],
            s: [6, 2, 12],
            col: 1
        }, {
            p: [107, 16, -461],
            s: [6, 2, 4]
        }, {
            p: [149, 16, -461],
            s: [14, 2, 4]
        }, {
            p: [242, 16, -461],
            s: [18, 2, 4]
        }, {
            p: [249, 16, -497],
            s: [4, 2, 10]
        }, {
            p: [96, 84, -459],
            s: [6, 12, 6],
            col: 1,
            t: 2
        }, {
            p: [74, 84, -459],
            s: [6, 10, 6],
            col: 1,
            t: 2
        }, {
            p: [74, 84, -537],
            s: [6, 18, 6],
            col: 1,
            t: 2
        }, {
            p: [96, 84, -537],
            s: [6, 14, 6],
            col: 1,
            t: 2
        }, {
            p: [94, 84, -463],
            s: [14, 4, 18],
            col: 1
        }, {
            p: [74, 84, -463],
            s: [10, 4, 18],
            col: 1
        }, {
            p: [76, 84, -533],
            s: [14, 4, 18],
            col: 1
        }, {
            p: [96, 84, -533],
            s: [10, 4, 18],
            col: 1
        }, {
            p: [98, 84, -498],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [72, 84, -498],
            s: [6, 4, 26],
            col: 1
        }, {
            p: [91, 76, -413],
            s: [6, 16, 6],
            col: 1,
            t: 2
        }, {
            p: [85, 76, -409],
            s: [24, 6, 18],
            col: 1
        }, {
            p: [13, 76, -409],
            s: [24, 6, 18],
            col: 1
        }, {
            p: [48, 76, -415],
            s: [20, 4, 6],
            col: 1
        }, {
            p: [12, 76, -359],
            s: [22, 6, 14],
            col: 1
        }, {
            p: [5, 76, -382],
            s: [8, 4, 14],
            col: 1
        }, {
            p: [53, 76, -355],
            s: [22, 4, 6],
            col: 1
        }, {
            p: [85, 76, -361],
            s: [24, 6, 18],
            col: 1
        }, {
            p: [93, 76, -387],
            s: [8, 4, 14],
            col: 1
        }, {
            p: [6, 76, -413],
            s: [6, 20, 6],
            col: 1,
            t: 2
        }, {
            p: [6, 76, -357],
            s: [6, 20, 6],
            col: 1,
            t: 2
        }, {
            p: [334, 32, -432],
            s: [4, 2, 18],
            col: 1
        }, {
            p: [334, 32, -376],
            s: [4, 4, 18],
            col: 1
        }, {
            p: [334, 32, -406],
            s: [4, 2, 22],
            col: 1
        }, {
            p: [147, 58, -402],
            s: [30, 12, 6],
            col: 1
        }, {
            p: [136, 58, -378],
            s: [8, 18, 42],
            col: 1
        }, {
            p: [198, 58, -418],
            s: [10, 6, 6],
            col: 1
        }, {
            p: [245, 58, -375],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [234, 58, -413],
            s: [28, 8, 16],
            col: 1
        }, {
            p: [236, 58, -299],
            s: [24, 8, 24],
            col: 1
        }, {
            p: [245, 58, -341],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [243, 61, -416],
            s: [6, 16, 6],
            col: 1,
            t: 2
        }, {
            p: [311, 73, -349],
            s: [12, 6, 18],
            col: 1
        }, {
            p: [331, 73, -356],
            s: [12, 4, 4],
            col: 1
        }, {
            p: [353, 73, -349],
            s: [12, 6, 18],
            col: 1
        }, {
            p: [308, 73, -306],
            s: [6, 4, 38],
            col: 1
        }, {
            p: [312, 73, -259],
            s: [14, 6, 22],
            col: 1
        }, {
            p: [332, 73, -250],
            s: [12, 4, 4],
            col: 1
        }, {
            p: [353, 73, -257],
            s: [12, 6, 18],
            col: 1
        }, {
            p: [285, 58, -84],
            s: [2, 40, 2],
            col: 1,
            t: 2
        }, {
            p: [285, 58, -48],
            s: [2, 40, 2],
            col: 1,
            t: 2
        }, {
            p: [294, 93, -66],
            s: [22, 2, 40],
            t: 2
        }, {
            p: [193, 58, -290],
            s: [24, 4, 6],
            col: 1
        }, {
            p: [136, 58, -332],
            s: [8, 6, 24],
            col: 1
        }, {
            p: [397, 76, -195],
            s: [64, 2, 86],
            t: 2
        }, {
            p: [348, 44, -236],
            s: [8, 4, 16],
            col: 1
        }, {
            p: [348, 44, -216],
            s: [8, 2, 8],
            col: 1
        }, {
            p: [352, 64, -379],
            s: [6, 4, 24],
            col: 1
        }, {
            p: [352, 64, -415],
            s: [6, 2, 20],
            col: 1
        }, {
            p: [355, 64, -448],
            s: [12, 4, 22],
            col: 1
        }, {
            p: [313, 55, -490],
            s: [4, 4, 14],
            col: 1
        }, {
            p: [318, 55, -451],
            s: [14, 4, 14],
            col: 1
        }, {
            p: [313, 55, -473],
            s: [4, 2, 10],
            col: 1
        }, {
            p: [342, 55, -446],
            s: [14, 4, 4],
            col: 1
        }, {
            p: [315, 75, -509],
            s: [22, 6, 24],
            col: 1
        }, {
            p: [307, 75, -544],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [307, 75, -576],
            s: [6, 4, 22],
            col: 1
        }, {
            p: [350, 75, -500],
            s: [16, 6, 6],
            col: 1
        }, {
            p: [385, 58, -100],
            s: [34, 6, 6],
            col: 1
        }, {
            p: [333, 58, -100],
            s: [26, 4, 6],
            col: 1
        }, {
            p: [289, 58, -100],
            s: [22, 2, 6],
            col: 1
        }, {
            p: [257, 58, -95],
            s: [14, 6, 16],
            col: 1
        }, {
            p: [335, 139, -89],
            s: [16, 4, 6],
            col: 1
        }, {
            p: [313, 139, -84],
            s: [16, 6, 16],
            col: 1
        }, {
            p: [359, 139, -84],
            s: [12, 6, 16],
            col: 1
        }, {
            p: [313, 139, -44],
            s: [16, 6, 16],
            col: 1
        }, {
            p: [308, 139, -64],
            s: [6, 4, 12],
            col: 1
        }, {
            p: [228, 48, -132],
            s: [10, 2, 16],
            col: 1
        }, {
            p: [228, 48, -106],
            s: [10, 4, 20],
            col: 1
        }, {
            p: [-293, 40, -321],
            s: [32, 22, 88]
        }, {
            p: [-192, 62, -323],
            s: [20, 4, 66],
            col: 1
        }, {
            p: [-328, 62, -361],
            s: [20, 4, 8],
            col: 1
        }, {
            p: [-296, 62, -361],
            s: [20, 4, 8],
            col: 1
        }, {
            p: [-253, 73, -364],
            s: [6, 10, 6],
            col: 1,
            t: 2
        }, {
            p: [-274, 73, -364],
            s: [6, 14, 6],
            col: 1,
            t: 2
        }, {
            p: [-274, 74, -322],
            s: [8, 4, 94],
            col: 1
        }, {
            p: [-252, 74, -283],
            s: [8, 4, 16],
            col: 1
        }, {
            p: [9, 6, -313],
            s: [6, 2, 18]
        }, {
            p: [9, 6, -199],
            s: [6, 4, 18]
        }, {
            p: [9, 6, -252],
            s: [6, 2, 10]
        }, {
            p: [-341, 54, -237],
            s: [4, 4, 12],
            col: 1
        }, {
            p: [-341, 54, -263],
            s: [4, 2, 16],
            col: 1
        }, {
            p: [164, 0, -61],
            s: [4, 62, 4],
            t: 2
        }, {
            p: [154, 54, -61],
            s: [16, 4, 4],
            t: 2
        }, {
            p: [158, 51, -61],
            s: [16, 2, 2],
            col: 1,
            r: [0, 0, -.7],
            t: 2
        }, {
            p: [-263, 0, -273],
            s: [4, 54, 4],
            t: 2
        }, {
            p: [-263, 47, -263],
            s: [4, 4, 16],
            t: 2
        }, {
            p: [-263, 43, -268],
            s: [2, 2, 16],
            col: 1,
            r: [-.7, 0, 0],
            t: 2
        }, {
            p: [238, 86, -224],
            s: [12, 4, 10],
            col: 1
        }, {
            p: [240, 86, -152],
            s: [8, 4, 10],
            col: 1
        }, {
            p: [217, 86, -222],
            s: [10, 4, 14],
            col: 1
        }, {
            p: [242, 86, -189],
            s: [4, 4, 28],
            col: 1
        }, {
            p: [251, 88, -82],
            s: [18, 6, 18],
            col: 1
        }, {
            p: [176, 88, -82],
            s: [20, 6, 18],
            col: 1
        }, {
            p: [173, 88, -40],
            s: [14, 6, 18],
            col: 1
        }, {
            p: [207, 88, -88],
            s: [20, 4, 6],
            col: 1
        }, {
            p: [168, 88, -61],
            s: [4, 2, 12],
            col: 1
        }, {
            p: [254, 88, -41],
            s: [12, 6, 20],
            col: 1
        }, {
            p: [214, 88, -34],
            s: [30, 4, 6],
            col: 1
        }, {
            p: [433, 58, -92],
            s: [22, 6, 22],
            col: 1
        }, {
            p: [145, 70, -158],
            s: [10, 4, 22],
            col: 1
        }, {
            p: [168, 70, -154],
            s: [8, 4, 14],
            col: 1
        }, {
            p: [145, 70, -218],
            s: [10, 4, 22],
            col: 1
        }, {
            p: [168, 70, -222],
            s: [8, 4, 14],
            col: 1
        }, {
            p: [214, 86, -184],
            s: [4, 2, 24],
            col: 1
        }, {
            p: [216, 86, -152],
            s: [8, 4, 10],
            col: 1
        }, {
            p: [179, 46, -22],
            s: [4, 4, 18],
            col: 1
        }, {
            p: [179, 46, 0],
            s: [4, 2, 14],
            col: 1
        }, {
            p: [179, 46, 18],
            s: [4, 4, 12],
            col: 1
        }, {
            p: [136, 44, -157],
            s: [4, 38, 4],
            t: 2
        }, {
            p: [45, 44, -157],
            s: [4, 38, 4],
            t: 2
        }, {
            p: [45, 44, -193],
            s: [4, 38, 4],
            t: 2
        }, {
            p: [136, 44, -193],
            s: [4, 42, 4],
            t: 2
        }, {
            p: [91, 58, -175],
            s: [100, 2, 44],
            t: 2
        }, {
            p: [127, 44, -155],
            s: [26, 4, 4],
            col: 1
        }, {
            p: [48, 44, -159],
            s: [14, 4, 12],
            col: 1
        }, {
            p: [44, 44, -191],
            s: [6, 4, 12],
            col: 1
        }, {
            p: [90, 44, -155],
            s: [18, 2, 4],
            col: 1
        }, {
            p: [195, 58, -226],
            s: [18, 4, 6],
            col: 1
        }, {
            p: [186, 58, -150],
            s: [18, 4, 6],
            col: 1
        }, {
            p: [-3, 54, -100],
            s: [30, 6, 16],
            col: 1
        }, {
            p: [77, 54, -98],
            s: [30, 6, 20],
            col: 1
        }, {
            p: [79, 54, -35],
            s: [26, 6, 14],
            col: 1
        }, {
            p: [-5, 54, -35],
            s: [26, 6, 14],
            col: 1
        }, {
            p: [89, 54, -66],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [37, 54, -105],
            s: [30, 4, 6],
            col: 1
        }, {
            p: [-15, 54, -66],
            s: [6, 4, 20],
            col: 1
        }, {
            p: [38, 54, -31],
            s: [18, 4, 6],
            col: 1
        }, {
            p: [-53, 60, -364],
            s: [20, 6, 16],
            col: 1
        }, {
            p: [-237, 50, 35],
            s: [14, 2, 10],
            col: 1
        }, {
            p: [164, 92, 31],
            s: [28, 6, 16],
            col: 1
        }, {
            p: [203, 92, 31],
            s: [14, 6, 16],
            col: 1
        }, {
            p: [156, 92, 60],
            s: [12, 6, 14],
            col: 1
        }, {
            p: [-260, 47, 19],
            s: [4, 22, 158]
        }, {
            p: [-216, 47, 99],
            s: [108, 22, 4]
        }, {
            p: [-178, 13, 51],
            s: [4, 74, 4],
            t: 2
        }, {
            p: [-254, 13, 51],
            s: [4, 74, 4],
            t: 2
        }, {
            p: [-216, 80, 72],
            s: [84, 2, 50],
            t: 2
        }, {
            p: [-260, 69, 73],
            s: [4, 4, 20],
            col: 1
        }, {
            p: [-189, 69, 99],
            s: [26, 4, 4],
            col: 1
        }, {
            p: [-239, 69, 99],
            s: [24, 6, 4],
            col: 1
        }, {
            p: [-55, 74, 2],
            s: [14, 6, 22],
            col: 1
        }, {
            p: [-97, 74, 1],
            s: [14, 6, 24],
            col: 1
        }, {
            p: [-102, 74, -42],
            s: [4, 4, 24],
            col: 1
        }, {
            p: [-102, 74, -75],
            s: [4, 4, 14],
            col: 1
        }, {
            p: [-77, 74, 11],
            s: [14, 4, 4],
            col: 1
        }, {
            p: [-50, 74, -45],
            s: [4, 4, 24],
            col: 1
        }, {
            p: [-54, 74, -97],
            s: [12, 4, 24],
            col: 1
        }, {
            p: [-236, 50, -131],
            s: [6, 4, 24],
            col: 1
        }, {
            p: [-236, 50, -96],
            s: [6, 4, 22],
            col: 1
        }, {
            p: [-221, 60, 14],
            s: [6, 2, 14],
            col: 1
        }, {
            p: [-244, 60, 13],
            s: [12, 2, 16],
            col: 1
        }, {
            p: [-224, 60, -61],
            s: [12, 2, 28],
            col: 1
        }, {
            p: [-220, 60, -17],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-246, 106, -84],
            s: [6, 4, 14],
            col: 1
        }, {
            p: [-251, 106, -64],
            s: [16, 6, 10],
            col: 1
        }, {
            p: [-251, 106, -104],
            s: [16, 6, 10],
            col: 1
        }, {
            p: [-278, 106, -66],
            s: [14, 4, 14],
            col: 1
        }, {
            p: [-278, 106, -105],
            s: [14, 4, 8],
            col: 1
        }, {
            p: [-109, 60, -359],
            s: [34, 4, 6],
            col: 1
        }, {
            p: [-141, 72, -191],
            s: [30, 4, 76],
            col: 1
        }, {
            p: [-189, 72, -191],
            s: [26, 6, 76],
            col: 1
        }, {
            p: [-240, 72, -191],
            s: [26, 4, 76],
            col: 1
        }, {
            p: [-297, 72, -191],
            s: [36, 6, 76],
            col: 1
        }, {
            p: [-260, 69, 35],
            s: [4, 4, 16],
            col: 1
        }, {
            p: [-260, 69, -35],
            s: [4, 4, 16],
            col: 1
        }, {
            p: [-260, 69, -1],
            s: [4, 4, 14],
            col: 1
        }, {
            p: [336, 139, -39],
            s: [16, 4, 6],
            col: 1
        }, {
            p: [361, 139, -44],
            s: [8, 6, 16],
            col: 1
        }, {
            p: [-296, 62, -281],
            s: [20, 4, 8],
            col: 1
        }, {
            p: [-323, 62, -281],
            s: [14, 4, 8],
            col: 1
        }, {
            p: [9, -2, -180],
            s: [4, 56, 4],
            t: 2
        }, {
            p: [9, 44, -175],
            s: [2, 2, 12],
            col: 1,
            r: [-.7, 0, 0],
            t: 2
        }, {
            p: [-106, 84, -96],
            s: [14, 6, 24],
            col: 1
        }, {
            p: [-110, 84, -137],
            s: [6, 4, 24],
            col: 1
        }, {
            p: [-108, 84, -184],
            s: [10, 4, 24],
            col: 1
        }, {
            p: [-64, 84, -96],
            s: [14, 6, 24],
            col: 1
        }, {
            p: [-64, 84, -184],
            s: [14, 6, 24],
            col: 1
        }, {
            p: [-60, 84, -137],
            s: [6, 4, 16],
            col: 1
        }, {
            p: [-182, 51, 55],
            s: [16, 4, 16],
            col: 1
        }, {
            p: [-250, 51, 50],
            s: [16, 4, 6],
            col: 1
        }, {
            p: [-212, 51, 50],
            s: [16, 2, 6],
            col: 1
        }, {
            p: [-252, 51, 60],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [343, 32, -383],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [260, 7, -178],
            s: [4, 2, 22]
        }, {
            p: [260, 7, -129],
            s: [4, 4, 22]
        }, {
            p: [324, 7, -129],
            s: [4, 4, 22]
        }, {
            p: [324, 7, -182],
            s: [4, 2, 16]
        }, {
            p: [243, 61, -292],
            s: [6, 14, 6],
            col: 1,
            t: 2
        }, {
            p: [10, 24, 8],
            s: [18, 2, 4]
        }, {
            p: [82, 24, 8],
            s: [20, 2, 4]
        }, {
            p: [-42, 24, 8],
            s: [10, 2, 4]
        }, {
            p: [-129, 24, -44],
            s: [16, 2, 4]
        }, {
            p: [-164, 24, -44],
            s: [16, 2, 4]
        }, {
            p: [-170, 24, -31],
            s: [4, 2, 22]
        }, {
            p: [-170, 24, 4],
            s: [4, 2, 12]
        }, {
            p: [-259, 16, -439],
            s: [14, 2, 4]
        }, {
            p: [-245, 16, -522],
            s: [4, 2, 12]
        }, {
            p: [-245, 16, -479],
            s: [4, 2, 12]
        }, {
            p: [-227, 62, -323],
            s: [20, 4, 66],
            col: 1
        }, {
            p: [-108, 88, -89],
            s: [6, 12, 6],
            col: 1,
            t: 2
        }, {
            p: [-250, 44, -124],
            s: [4, 36, 4],
            t: 2
        }, {
            p: [-280, 44, -124],
            s: [4, 40, 4],
            t: 2
        }, {
            p: [-265, 74, -117],
            s: [38, 2, 22],
            t: 2
        }, {
            p: [-57, 66, -201],
            s: [10, 6, 36],
            col: 1
        }, {
            p: [-57, 66, -260],
            s: [10, 4, 26],
            col: 1
        }, {
            p: [-61, 66, -308],
            s: [18, 4, 26],
            col: 1
        }, {
            p: [-103, 66, -308],
            s: [18, 4, 26],
            col: 1
        }, {
            p: [-107, 66, -260],
            s: [10, 4, 26],
            col: 1
        }, {
            p: [-168, 62, -268],
            s: [8, 4, 20],
            col: 1
        }, {
            p: [-150, 62, -268],
            s: [12, 4, 20],
            col: 1
        }, {
            p: [-148, 62, -304],
            s: [8, 4, 20],
            col: 1
        }, {
            p: [-148, 62, -342],
            s: [8, 4, 28],
            col: 1
        }, {
            p: [335, 100, -64],
            s: [6, 20, 58],
            col: 1,
            c: 0
        }, {
            p: [196, 51, -91],
            s: [6, 20, 2],
            col: 1,
            c: 0
        }, {
            p: [-243, 79, -84],
            s: [2, 16, 6],
            col: 1,
            c: 0
        }, {
            p: [-295, 84, -587],
            s: [2, 18, 6],
            col: 1,
            c: 0
        }, {
            p: [-319, 91, -560],
            s: [4, 16, 2],
            col: 1,
            c: 0
        }, {
            p: [305, 105, -64],
            s: [2, 20, 6],
            col: 1,
            c: 0
        }, {
            p: [304, 46, -518],
            s: [2, 14, 6],
            col: 1,
            c: 0
        }, {
            p: [203, 70, -510],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [183, 70, -510],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [162, 70, -510],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [38, 18, 51],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [296, 60, -301],
            s: [18, 4, 4],
            t: 2
        }, {
            p: [-225, 0, -145],
            s: [8, 2, 6],
            col: 1
        }, {
            p: [-208, 0, -158],
            s: [4, 2, 6],
            col: 1
        }, {
            p: [-177, 0, -259],
            s: [4, 2, 6],
            col: 1
        }, {
            p: [-273, 0, -270],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-242, 0, -431],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-285, 0, -434],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-195, 0, -397],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-167, -1, -404],
            s: [8, 2, 8],
            col: 1
        }, {
            p: [-249, 0, -375],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-5, -28, -393],
            s: [6, 2, 4],
            col: 1
        }, {
            p: [306, 0, -434],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [334, 0, -200],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [301, 0, -255],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [304, 0, -365],
            s: [6, 2, 4],
            col: 1
        }, {
            p: [253, 0, -190],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [223, 0, -232],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [183, 0, -284],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [106, 10, -473],
            s: [6, 2, 10],
            col: 1
        }, {
            p: [101, 0, -355],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [15, 0, -345],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [15, 0, -197],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-50, 0, -175],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [97, 0, -87],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [217, 0, -140],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [94, 0, 0],
            s: [10, 2, 4],
            col: 1
        }, {
            p: [-43, 0, -1],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [-11, 18, 15],
            s: [10, 2, 4],
            col: 1
        }, {
            p: [-147, 18, -37],
            s: [10, 2, 4],
            col: 1
        }, {
            p: [-108, 18, 4],
            s: [4, 2, 10],
            col: 1
        }, {
            p: [-136, 0, -52],
            s: [8, 2, 6],
            col: 1
        }, {
            p: [161, 0, -52],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [42, 0, -147],
            s: [8, 2, 6],
            col: 1
        }, {
            p: [-305, 0, -349],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-332, 0, -270],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-66, -28, -327],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-140, -28, -350],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-7, 0, -112],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-182, 0, -218],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [-210, 18, 43],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-41, 18, 52],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [118, 0, -147],
            s: [6, 2, 8],
            col: 1
        }, {
            p: [-218, 0, -470],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [-202, 0, -523],
            s: [8, 2, 4],
            col: 1
        }, {
            p: [258, 0, -386],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [252, 0, -319],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [324, 0, -203],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [221, 0, -278],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [194, 0, -270],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [160, 0, -70],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [-52, 0, -163],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [15, 0, -329],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [251, 0, -407],
            s: [4, 2, 6],
            col: 1
        }, {
            p: [-5, -28, -411],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [252, 0, -301],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [302, 0, -349],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [321, 0, -364],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [132, 0, -209],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [185, 0, -96],
            s: [4, 2, 4],
            col: 1
        }, {
            p: [36, 0, -195],
            s: [4, 2, 8],
            col: 1
        }, {
            p: [37, 0, -307],
            s: [4, 6, 38]
        }, {
            p: [77, 0, -231],
            s: [58, 4, 4]
        }, {
            p: [94, 0, -325],
            s: [22, 6, 4]
        }, {
            p: [107, 0, -314],
            s: [4, 6, 26]
        }, {
            p: [37, 6, -316],
            s: [4, 2, 10]
        }, {
            p: [86, 4, -231],
            s: [14, 2, 4]
        }, {
            p: [107, 6, -321],
            s: [4, 2, 12]
        }, {
            p: [99, 6, -325],
            s: [12, 4, 4]
        }, {
            p: [76, 0, -325],
            s: [14, 2, 4]
        }, {
            p: [101, -2, -239],
            s: [4, 56, 4],
            t: 2
        }, {
            p: [9, 47, -171],
            s: [4, 4, 14],
            t: 2
        }, {
            p: [101, 47, -248],
            s: [4, 4, 14],
            t: 2
        }, {
            p: [101, 44, -244],
            s: [2, 2, 12],
            col: 1,
            r: [.7, 0, 0],
            t: 2
        }, {
            p: [92, 0, -237],
            s: [6, 2, 4],
            col: 1
        }, {
            p: [75, 0, -225],
            s: [6, 2, 4],
            col: 1
        }, {
            p: [-124, 61, -114],
            s: [22, 4, 4],
            t: 2
        }, {
            p: [22, 45, -352],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [51, 45, -352],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [79, 45, -352],
            s: [6, 14, 2],
            col: 1,
            c: 0
        }, {
            p: [-52, 30, -283],
            s: [2, 16, 6],
            col: 1,
            c: 0
        }, {
            p: [-63, 68, -456],
            s: [2, 2, 14],
            col: 1,
            r: [-.7, 0, 0],
            t: 2
        }, {
            p: [-115, 57, -114],
            s: [14, 2, 2],
            col: 1,
            r: [0, 0, -.7],
            t: 2
        }, {
            p: [91, 77, -175],
            s: [100, 2, 44],
            t: 2
        }, {
            p: [146, 14, -425],
            s: [12, 2, 4]
        }, {
            p: [106, 14, -425],
            s: [12, 2, 4]
        }, {
            p: [119, 10, -474],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [204, -28, -413],
            s: [88, 86, 16]
        }, {
            p: [165, 58, -413],
            s: [10, 6, 16],
            col: 1
        }, {
            p: [185, 16, -461],
            s: [20, 2, 4]
        }, {
            p: [72, 0, -279],
            s: [4, 40, 4],
            c: 14145495,
            t: 2
        }, {
            p: [62, 18, -278],
            s: [8, 6, 8],
            c: 7438128,
            t: 5
        }, {
            p: [72, -1, -279],
            s: [22, 2, 22],
            col: 1,
            c: 10987431,
            t: 1
        }, {
            p: [72, 0, -291],
            s: [26, 2, 2]
        }, {
            p: [72, 0, -267],
            s: [26, 2, 2]
        }, {
            p: [60, 0, -279],
            s: [2, 2, 22]
        }, {
            p: [84, 0, -279],
            s: [2, 2, 22]
        }, {
            p: [72, 35, -279],
            s: [24, 22, 24],
            c: 7438128,
            t: 5
        }, {
            p: [66, 19, -279],
            s: [8, 2, 2],
            c: 14145495,
            t: 2
        }, {
            p: [78, 26, -279],
            s: [8, 2, 2],
            c: 14145495,
            t: 2
        }, {
            p: [85, 24, -278],
            s: [8, 6, 8],
            c: 7438128,
            t: 5
        }, {
            p: [344, 50, -196],
            s: [12, 4, 18],
            col: 1
        }, {
            p: [340, 50, -160],
            s: [4, 2, 18],
            col: 1
        }, {
            p: [340, 50, -123],
            s: [4, 4, 22],
            col: 1
        }, {
            p: [322, -1, -401],
            s: [20, 2, 96],
            c: 10987431,
            t: 1
        }, {
            p: [323, 0, -425],
            s: [4, 40, 4],
            c: 14145495,
            t: 2
        }, {
            p: [323, 0, -382],
            s: [4, 18, 4],
            c: 14145495,
            t: 2
        }, {
            p: [323, 18, -383],
            s: [4, 2, 2],
            c: 14145495,
            t: 2
        }, {
            p: [317, 26, -425],
            s: [8, 2, 2],
            c: 14145495,
            t: 2
        }, {
            p: [323, 32, -419],
            s: [2, 2, 8],
            c: 14145495,
            t: 2
        }, {
            p: [311, 24, -425],
            s: [8, 6, 8],
            c: 7438128,
            t: 5
        }, {
            p: [324, 30, -413],
            s: [8, 6, 8],
            c: 7438128,
            t: 5
        }, {
            p: [323, 39, -425],
            s: [26, 26, 28],
            c: 7438128,
            t: 5
        }, {
            p: [252, 0, -385],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [144, 58, -294],
            s: [24, 4, 14],
            col: 1
        }, {
            p: [305, -23, -750],
            s: [76, 142, 60],
            col: 1
        }, {
            p: [277, 119, -727],
            s: [20, 4, 14],
            col: 1
        }, {
            p: [333, 119, -729],
            s: [20, 6, 18],
            col: 1
        }, {
            p: [305, 119, -723],
            s: [14, 4, 6],
            col: 1
        }, {
            p: [306, 80, -720],
            s: [8, 20, 2],
            col: 1,
            c: 0
        }, {
            p: [302, 56, -301],
            s: [14, 2, 2],
            col: 1,
            r: [0, 0, -.7],
            t: 2
        }, {
            p: [85, 62, -453],
            s: [2, 2, 14],
            col: 1,
            r: [-.7, 0, 0],
            t: 2
        }, {
            p: [-22, 65, -523],
            s: [18, 4, 4],
            col: 1
        }, {
            p: [16, 65, -523],
            s: [20, 2, 4],
            col: 1
        }, {
            p: [-191, 0, -503],
            s: [4, 26, 48]
        }, {
            p: [-191, 26, -518],
            s: [4, 2, 12]
        }, {
            p: [-191, 26, -481],
            s: [4, 2, 12]
        }, {
            p: [-155, 26, -477],
            s: [12, 2, 4]
        }, {
            p: [-158, 4, -503],
            s: [62, 16, 48],
            t: 2
        }, {
            p: [-140, 0, -474],
            s: [8, 28, 2],
            id: 3,
            d: 1
        }, {
            p: [-191, 28, -477],
            s: [2, 34, 2],
            c: 7034172,
            t: 5
        }, {
            p: [-199, 52, -477],
            s: [14, 8, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [185, 97, -534],
            s: [2, 38, 2],
            t: 2
        }, {
            p: [193, 126, -534],
            s: [14, 8, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [335, 138, -67],
            s: [2, 38, 2],
            col: 1,
            t: 2
        }, {
            p: [327, 166, -67],
            s: [14, 8, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [-264, 46, -618],
            s: [36, 32, 26],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-199, 0, -505],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-243, 34, -594],
            s: [34, 30, 30],
            col: 1,
            c: 5792804,
            t: 5
        }, {
            p: [-157, 20, -502],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-55, 65, -319],
            s: [2, 46, 2],
            col: 1,
            t: 2
        }, {
            p: [-47, 101, -319],
            s: [14, 8, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [-192, -2, -357],
            s: [2, 36, 2],
            t: 2
        }, {
            p: [-234, -2, -357],
            s: [2, 36, 2],
            t: 2
        }, {
            p: [-234, -1, -379],
            s: [2, 26, 2],
            t: 2
        }, {
            p: [-192, -1, -379],
            s: [2, 26, 2],
            t: 2
        }, {
            p: [-213, -1, -379],
            s: [40, 8, 2],
            c: 14935011,
            t: 2
        }, {
            p: [-234, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            t: 5
        }, {
            p: [-228, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            c: 12472400,
            t: 5
        }, {
            p: [-222, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            t: 5
        }, {
            p: [-216, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            c: 12472400,
            t: 5
        }, {
            p: [-210, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            t: 5
        }, {
            p: [-204, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            c: 12472400,
            t: 5
        }, {
            p: [-198, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            t: 5
        }, {
            p: [-192, 34, -357],
            s: [6, 28, 2],
            col: 1,
            r: [-1.92, 0, 0],
            c: 12472400,
            t: 5
        }, {
            p: [-193, 0, -384],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-210, 0, -276],
            s: [76, 4, 2],
            c: 13158600
        }, {
            p: [-210, -1, -284],
            s: [76, 4, 14],
            col: 1,
            c: 2638441,
            t: 5
        }, {
            p: [-253, 0, -269],
            s: [4, 2, 6],
            col: 1
        }, {
            p: [-176, 0, -270],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-302, 0, -233],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-128, 0, -115],
            s: [6, 2, 66],
            t: 2
        }, {
            p: [-121, 0, -114],
            s: [6, 2, 66],
            c: 13290186,
            t: 2
        }, {
            p: [-132, 2, -113],
            s: [6, 2, 66],
            t: 2
        }, {
            p: [-125, 2, -114],
            s: [6, 2, 66],
            t: 2
        }, {
            p: [-128, 4, -112],
            s: [6, 2, 66],
            c: 12632256,
            t: 2
        }, {
            p: [-135, 0, -112],
            s: [6, 2, 66],
            c: 12303291,
            t: 2
        }, {
            p: [-264, 106, -85],
            s: [2, 38, 2],
            col: 1,
            t: 2
        }, {
            p: [-264, 134, -77],
            s: [2, 8, 14],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [-132, 23, -114],
            s: [2, 40, 2],
            col: 1,
            c: 11645361,
            t: 2
        }, {
            p: [-196, 46, -191],
            s: [34, 26, 76]
        }, {
            p: [-183, 40, -157],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-192, 42, -157],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-201, 41, -157],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-209, 40, -157],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-192, 41, -227],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-183, 40, -227],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-201, 42, -227],
            s: [2, 4, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-209, 40, -227],
            s: [2, 6, 2],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [-386, 48, -442],
            s: [36, 28, 40],
            col: 1,
            c: 8820284,
            t: 5
        }, {
            p: [-373, 29, -425],
            s: [36, 32, 44],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-373, 29, -472],
            s: [40, 36, 36],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-199, 37, -611],
            s: [42, 34, 46],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-371, 40, -271],
            s: [38, 34, 34],
            col: 1,
            c: 5265957,
            t: 5
        }, {
            p: [-411, 39, -504],
            s: [44, 40, 40],
            col: 1,
            c: 8886333,
            t: 5
        }, {
            p: [269, 11, -631],
            s: [42, 46, 40],
            col: 1,
            c: 6582317,
            t: 5
        }, {
            p: [235, 29, -672],
            s: [42, 40, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [385, 23, -129],
            s: [42, 46, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [367, 27, -183],
            s: [28, 36, 42],
            col: 1,
            c: 9478716,
            t: 5
        }, {
            p: [388, 31, -256],
            s: [28, 30, 30],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [181, 92, 48],
            s: [2, 38, 2],
            col: 1,
            t: 2
        }, {
            p: [181, 120, 40],
            s: [2, 8, 14],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [-295, 48, -617],
            s: [26, 20, 28],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [238, 27, -10],
            s: [32, 34, 30],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [298, 46, 62],
            s: [52, 66, 56],
            col: 1,
            c: 5858344,
            t: 5
        }, {
            p: [310, 35, -2],
            s: [34, 42, 46],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [228, 20, -591],
            s: [42, 40, 40],
            col: 1,
            c: 5397538,
            t: 5
        }, {
            p: [427, 39, -38],
            s: [84, 52, 52],
            col: 1,
            c: 6055470,
            t: 5
        }, {
            p: [287, 30, -583],
            s: [28, 30, 26],
            col: 1,
            c: 6582317,
            t: 5
        }, {
            p: [260, 44, 32],
            s: [38, 36, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-309, 119, -576],
            s: [2, 34, 2],
            col: 1,
            t: 2
        }, {
            p: [-317, 143, -576],
            s: [14, 8, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [-260, 29, -129],
            s: [36, 32, 28],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-374, 36, -228],
            s: [36, 36, 44],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-400, 40, -389],
            s: [38, 34, 34],
            col: 1,
            c: 5265957,
            t: 5
        }, {
            p: [-287, 54, -40],
            s: [38, 34, 42],
            col: 1,
            c: 5265957,
            t: 5
        }, {
            p: [-292, 56, 33],
            s: [36, 36, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-297, 57, 103],
            s: [38, 34, 48],
            col: 1,
            c: 5265957,
            t: 5
        }, {
            p: [-295, 38, -135],
            s: [38, 34, 34],
            col: 1,
            c: 5265957,
            t: 5
        }, {
            p: [-340, 50, 61],
            s: [36, 36, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-442, 0, 157],
            s: [62, 206, 72],
            col: 1
        }, {
            p: [-418, 206, 129],
            s: [14, 6, 16],
            col: 1
        }, {
            p: [-414, 206, 157],
            s: [6, 6, 22],
            col: 1
        }, {
            p: [-414, 206, 186],
            s: [6, 4, 14],
            col: 1
        }, {
            p: [-444, 206, 123],
            s: [20, 6, 4],
            col: 1
        }, {
            p: [-468, 206, 123],
            s: [10, 6, 4],
            col: 1
        }, {
            p: [-442, 163, 121],
            s: [8, 20, 2],
            col: 1,
            c: 0
        }, {
            p: [-178, 13, 93],
            s: [4, 74, 4],
            t: 2
        }, {
            p: [-254, 13, 93],
            s: [4, 74, 4],
            t: 2
        }, {
            p: [-250, 49, 140],
            s: [36, 36, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-194, 50, 125],
            s: [36, 36, 40],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [189, 46, -30],
            s: [8, 46, 2],
            id: 3,
            d: 1
        }, {
            p: [-19, 64, 74],
            s: [60, 12, 38]
        }, {
            p: [123, 76, 57],
            s: [28, 4, 4],
            col: 1
        }, {
            p: [70, 76, 57],
            s: [34, 2, 4],
            col: 1
        }, {
            p: [21, 76, 57],
            s: [26, 4, 4],
            col: 1
        }, {
            p: [-41, 76, 57],
            s: [12, 2, 4],
            col: 1
        }, {
            p: [-75, 76, 57],
            s: [16, 2, 4],
            col: 1
        }, {
            p: [-127, 76, 57],
            s: [26, 4, 4],
            col: 1
        }, {
            p: [-19, 0, 73],
            s: [60, 64, 2],
            t: 2
        }, {
            p: [-45, 18, 61],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-13, 32, 71],
            s: [4, 4, 2],
            col: 1,
            c: 3092271,
            t: 5
        }, {
            p: [-26, 32, 71],
            s: [4, 4, 2],
            col: 1,
            c: 3092271,
            t: 5
        }, {
            p: [19, 63, 48],
            s: [4, 4, 16],
            t: 2
        }, {
            p: [-56, 63, 48],
            s: [4, 4, 16],
            t: 2
        }, {
            p: [-56, 59, 53],
            s: [2, 2, 12],
            col: 1,
            r: [.87, 0, 0],
            t: 2
        }, {
            p: [19, 59, 53],
            s: [2, 2, 12],
            col: 1,
            r: [.87, 0, 0],
            t: 2
        }, {
            p: [-139, 301, 405],
            s: [110, 66, 86],
            t: 5
        }, {
            p: [-73, 281, 361],
            s: [70, 42, 56],
            t: 5
        }, {
            p: [-527, 412, 373],
            s: [146, 90, 116],
            t: 5
        }, {
            p: [-571, 369, 297],
            s: [118, 72, 94],
            t: 5
        }, {
            p: [673, 319, 120],
            s: [110, 66, 86],
            t: 5
        }, {
            p: [485, 337, 84],
            s: [146, 88, 82],
            t: 5
        }, {
            p: [334, 337, 95],
            s: [58, 26, 46],
            col: 1,
            t: 5
        }, {
            p: [-866, 323, -277],
            s: [146, 90, 196],
            col: 1,
            t: 5
        }, {
            p: [-926, 303, -516],
            s: [122, 76, 160],
            col: 1,
            t: 5
        }, {
            p: [-1998, 360, -35],
            s: [260, 76, 368],
            col: 1,
            t: 5
        }, {
            p: [1593, 397, -140],
            s: [218, 132, 256],
            t: 5
        }, {
            p: [1593, 377, -267],
            s: [118, 72, 92],
            t: 5
        }, {
            p: [-130, 234, -914],
            s: [146, 90, 116],
            t: 5
        }, {
            p: [-46, 204, -952],
            s: [118, 74, 94],
            t: 5
        }, {
            p: [98, 204, -952],
            s: [96, 38, 48],
            col: 1,
            t: 5
        }, {
            p: [735, 363, -1249],
            s: [224, 104, 178],
            t: 5
        }, {
            p: [186, 263, 500],
            s: [104, 58, 112],
            col: 1,
            t: 5
        }, {
            p: [81, 263, 500],
            s: [48, 28, 52],
            col: 1,
            t: 5
        }, {
            p: [-561, 204, -851],
            s: [118, 74, 94],
            t: 5
        }, {
            p: [-21, -28, -517],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-33, -16, -517],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-31, -28, -515],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [60, -28, -424],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [120, 52, 162],
            s: [44, 58, 50],
            col: 1,
            c: 6384434,
            t: 5
        }, {
            p: [-221, 40, 169],
            s: [54, 44, 50],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [145, 51, 129],
            s: [44, 58, 50],
            col: 1,
            c: 6384434,
            t: 5
        }, {
            p: [63, -28, -515],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [63, -28, -503],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [53, -28, -517],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [218, 70, -541],
            s: [2, 14, 6],
            col: 1,
            c: 0
        }, {
            p: [170, -47, -750],
            s: [76, 152, 60],
            col: 1
        }, {
            p: [198, 105, -731],
            s: [20, 6, 22],
            col: 1
        }, {
            p: [142, 105, -731],
            s: [20, 4, 22],
            col: 1
        }, {
            p: [172, 105, -723],
            s: [16, 4, 6],
            col: 1
        }, {
            p: [205, 105, -763],
            s: [6, 6, 16],
            col: 1
        }, {
            p: [-13, 76, 57],
            s: [10, 4, 4],
            col: 1
        }, {
            p: [-19, 70, 102],
            s: [220, 40, 58]
        }, {
            p: [89, 110, 108],
            s: [4, 4, 18],
            col: 1
        }, {
            p: [-119, 110, 80],
            s: [20, 4, 14],
            col: 1
        }, {
            p: [36, 110, 75],
            s: [16, 4, 4],
            col: 1
        }, {
            p: [-2, 110, 75],
            s: [24, 2, 4],
            col: 1
        }, {
            p: [-78, 110, 75],
            s: [14, 2, 4],
            col: 1
        }, {
            p: [-44, 110, 75],
            s: [14, 4, 4],
            col: 1
        }, {
            p: [81, 110, 80],
            s: [20, 4, 14],
            col: 1
        }, {
            p: [-127, 110, 108],
            s: [4, 4, 18],
            col: 1
        }, {
            p: [-121, 99, 70],
            s: [4, 4, 8],
            t: 2
        }, {
            p: [82, 99, 70],
            s: [4, 4, 8],
            t: 2
        }, {
            p: [92, 99, 82],
            s: [12, 4, 4],
            t: 2
        }, {
            p: [-131, 99, 82],
            s: [10, 4, 4],
            t: 2
        }, {
            p: [292, 40, -108],
            s: [60, 2, 10],
            t: 2
        }, {
            p: [320, -28, -111],
            s: [2, 104, 2],
            t: 2
        }, {
            p: [264, -28, -111],
            s: [2, 106, 2],
            t: 2
        }, {
            p: [292, 71, -102],
            s: [60, 2, 24],
            t: 2
        }, {
            p: [264, 52, -93],
            s: [2, 24, 2],
            t: 2
        }, {
            p: [11, -28, -462],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-16, 102, 82],
            s: [2, 38, 2],
            col: 1,
            t: 2
        }, {
            p: [-25, 128, 82],
            s: [16, 10, 2],
            col: 1,
            c: 9190460,
            t: 5
        }, {
            p: [16, 18, 49],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [20, 18, 53],
            s: [2, 6, 2],
            col: 1,
            c: 8886328,
            t: 5
        }, {
            p: [13, 18, 53],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [64, -1, -287],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [79, -1, -271],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [133, -2, -284],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [129, -1, -289],
            s: [2, 6, 2],
            col: 1,
            c: 8622905,
            t: 5
        }, {
            p: [12, -33, -467],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [7, -29, -519],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [64, -32, -491],
            s: [2, 8, 2],
            col: 1,
            c: 9280837,
            t: 5
        }, {
            p: [60, -33, -494],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [68, -29, -495],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [5, -31, -460],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-14, -32, -519],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [35, -31, -461],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [37, -34, -455],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [30, -29, -460],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-35, -29, -460],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [66, 0, -273],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [138, -2, -228],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [142, -4, -232],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [106, -2, -242],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-35, -30, -464],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-243, 0, -270],
            s: [2, 4, 2],
            col: 1,
            t: 5
        }, {
            p: [-249, -2, -272],
            s: [2, 4, 2],
            col: 1,
            t: 5
        }, {
            p: [-249, 2, -272],
            s: [4, 2, 4],
            col: 1,
            c: 10518105,
            t: 5
        }, {
            p: [-243, 3, -270],
            s: [4, 2, 4],
            col: 1,
            c: 8874571,
            t: 5
        }, {
            p: [-184, 0, -270],
            s: [2, 4, 2],
            col: 1,
            t: 5
        }, {
            p: [-184, 3, -270],
            s: [4, 2, 4],
            col: 1,
            c: 10845781,
            t: 5
        }, {
            p: [-245, -1, -280],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-177, -1, -279],
            s: [2, 10, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-188, -1, -272],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-247, -1, -268],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-266, -1, -268],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-222, -1, -231],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-227, -1, -230],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-295, -1, -232],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-291, -4, -231],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [174, 0, -218],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [205, 0, -220],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [201, 0, -216],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [174, 0, -190],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [208, 0, -184],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [209, 0, -179],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-49, 18, 52],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-46, 18, 55],
            s: [2, 4, 2],
            col: 1,
            c: 7043120,
            t: 5
        }, {
            p: [-134, -1, -73],
            s: [2, 10, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-129, -1, -71],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-133, 0, -68],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [250, 0, -372],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [253, 0, -376],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [251, 0, -379],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [317, 0, -370],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [317, 1, -432],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [324, 1, -419],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [323, 1, -391],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [329, 0, -441],
            s: [2, 2, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [38, -2, -176],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [38, -2, -171],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [35, -2, -174],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [162, 0, -89],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [165, 0, -92],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [94, 0, -27],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [91, -2, -24],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [94, -2, -31],
            s: [2, 8, 2],
            col: 1,
            c: 8754743,
            t: 5
        }, {
            p: [-17, -2, -25],
            s: [2, 8, 2],
            col: 1,
            c: 8754743,
            t: 5
        }, {
            p: [-21, -2, -30],
            s: [2, 4, 2],
            col: 1,
            c: 8754743,
            t: 5
        }, {
            p: [-20, -1, -26],
            s: [2, 4, 2],
            col: 1,
            c: 7569967,
            t: 5
        }, {
            p: [-21, 0, -38],
            s: [2, 4, 2],
            col: 1,
            t: 5
        }, {
            p: [-21, 3, -38],
            s: [4, 2, 4],
            col: 1,
            c: 10845781,
            t: 5
        }, {
            p: [-33, -1, 4],
            s: [2, 4, 2],
            col: 1,
            c: 7569967,
            t: 5
        }, {
            p: [152, 0, 20],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [148, 0, 21],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-217, -1, -148],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-214, -1, -76],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-215, -1, -71],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-219, -1, -78],
            s: [2, 6, 2],
            col: 1,
            c: 9018169,
            t: 5
        }, {
            p: [-213, -1, -150],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-316, -1, -368],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-312, -1, -368],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-316, -2, -372],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-199, 0, -382],
            s: [2, 4, 2],
            col: 1,
            c: 7372586,
            t: 5
        }, {
            p: [-199, -3, -385],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-205, -3, -382],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-195, -3, -483],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-199, 0, -484],
            s: [2, 4, 2],
            col: 1,
            c: 7372586,
            t: 5
        }, {
            p: [-195, -3, -476],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-240, -2, -440],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-243, -2, -435],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-249, 0, -435],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-317, 0, -420],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-176, 18, 44],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-171, 18, 47],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-223, 18, 24],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-228, 18, 44],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-89, -30, -354],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-94, -30, -353],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-109, -30, -324],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-115, -30, -320],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-114, -30, -326],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [1, -1, -190],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-51, -1, -168],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-55, -1, -158],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [73, -31, -451],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [80, -32, -452],
            s: [2, 8, 2],
            col: 1,
            c: 7108662,
            t: 5
        }, {
            p: [157, -32, -430],
            s: [2, 8, 2],
            col: 1,
            c: 6187310,
            t: 5
        }, {
            p: [163, -31, -430],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [192, -31, -423],
            s: [2, 16, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [90, -31, -429],
            s: [2, 8, 2],
            col: 1,
            c: 6187310,
            t: 5
        }, {
            p: [202, -31, -457],
            s: [2, 24, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [106, -28, -454],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [3, -32, -421],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [4, -30, -455],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [251, 0, -288],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [248, 0, -284],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [311, 0, -233],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [323, 0, -244],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-159, -3, -402],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-154, 0, -400],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-313, 10, -493],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-317, 8, -490],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-252, 10, -541],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-256, 8, -546],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-274, 8, -445],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-40, -30, -360],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-43, -30, -354],
            s: [2, 4, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-3, -30, -349],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [1, -30, -310],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [20, 48, -433],
            s: [28, 4, 14],
            col: 1
        }, {
            p: [-58, -28, -457],
            s: [2, 10, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-69, -28, -402],
            s: [2, 12, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-73, -28, -404],
            s: [2, 10, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [20, 48, -453],
            s: [28, 2, 10],
            col: 1
        }, {
            p: [303, 0, -325],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [222, 8, -511],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [218, 10, -507],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [302, 9, -511],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [162, -28, -424],
            s: [4, 42, 6]
        }, {
            p: [251, -1, -416],
            s: [2, 8, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [-109, 40, -404],
            s: [4, 4, 14],
            t: 2
        }, {
            p: [-109, 37, -400],
            s: [2, 2, 14],
            col: 1,
            r: [.7, 0, 0],
            t: 2
        }, {
            p: [20, 34, -461],
            s: [4, 4, 20],
            t: 2
        }, {
            p: [20, 32, -461],
            s: [2, 2, 12],
            col: 1,
            r: [.87, 0, 0],
            t: 2
        }, {
            p: [21, -28, -464],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [21, -16, -464],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-253, 53, -559],
            s: [74, 32, 2],
            c: 6904648,
            t: 5
        }, {
            p: [-286, 48, -562],
            s: [4, 40, 4],
            t: 2
        }, {
            p: [-221, 48, -562],
            s: [4, 40, 4],
            t: 2
        }, {
            p: [260, 53, -560],
            s: [74, 32, 2],
            c: 7363405,
            t: 5
        }, {
            p: [229, 45, -563],
            s: [4, 44, 4],
            t: 2
        }, {
            p: [291, 43, -563],
            s: [4, 46, 4],
            t: 2
        }, {
            p: [-253, 69, -557],
            s: [69, 0, 28],
            id: 11,
            col: 1,
            r: [1.57, 0, 0]
        }, {
            p: [260, 69, -558],
            s: [69, 0, 28],
            id: 11,
            col: 1,
            r: [1.57, 0, 0]
        }, {
            p: [-242, 67, -18],
            s: [2, 26, 62],
            c: 6903619,
            t: 5
        }, {
            p: [-245, 60, 8],
            s: [4, 36, 4],
            t: 2
        }, {
            p: [-245, 60, -45],
            s: [4, 36, 4],
            t: 2
        }, {
            p: [-240, 80, -18],
            s: [57, 0, 22],
            id: 11,
            col: 1,
            r: [1.57, 0, 1.57]
        }, {
            p: [-130, -1, -471],
            s: [2, 6, 2],
            col: 1,
            c: 7438128,
            t: 5
        }, {
            p: [72, 0, -278],
            s: [64, 41, 88],
            id: 14,
            col: 1
        }, {
            p: [-283, 10, -505],
            s: [69, 41, 78],
            id: 14,
            col: 1
        }, {
            p: [174, 10, -504],
            s: [142, 41, 78],
            id: 14,
            col: 1
        }, {
            p: [-136, 18, -16],
            s: [59, 41, 49],
            id: 14,
            col: 1
        }]
    }, {
        name: "Littletown",
        modURL: "",
        ambient: 8093324,
        light: 5461350,
        sky: 6716054,
        fog: 7832738,
        fogD: 722.1829102596926,
        camPos: [36, 53, 252],
        spawns: [[414, 0, -102], [-276, 0, 12], [-274, 0, 186], [270, 38, 32], [-156, 38, 33], [-95, 38, -4], [371, 0, 87], [141, 0, 337]],
        objects: [{
            p: [138, 2, 6],
            s: [4, 36, 60],
            c: 12927811,
            t: 5
        }, {
            p: [205, 36, 30],
            s: [62, 2, 108],
            c: 7368816,
            t: 5
        }, {
            p: [238, 38, 45],
            s: [4, 26, 74],
            c: 16767158,
            t: 5
        }, {
            p: [170, 2, 123],
            s: [30, 116, 18],
            c: 7368816,
            t: 5
        }, {
            p: [-65, 2, 69],
            s: [4, 30, 10],
            c: 5799880,
            t: 5
        }, {
            p: [304, 2, -7],
            s: [2, 52, 12],
            id: 3,
            d: 0
        }, {
            p: [138, 38, 3],
            s: [4, 6, 38],
            c: 12927811,
            t: 5
        }, {
            p: [138, 38, 81],
            s: [4, 6, 34],
            c: 12927811,
            t: 5
        }, {
            p: [138, 38, 43],
            s: [4, 28, 42],
            c: 12927811,
            t: 5
        }, {
            p: [138, 38, 104],
            s: [4, 28, 12],
            c: 12927811,
            t: 5
        }, {
            p: [138, 38, -20],
            s: [4, 28, 8],
            c: 12927811,
            t: 5
        }, {
            p: [138, 66, 43],
            s: [4, 10, 134],
            c: 12927811,
            t: 5
        }, {
            p: [138, 2, 81],
            s: [4, 36, 58],
            c: 12927811,
            t: 5
        }, {
            p: [138, 26, 44],
            s: [4, 12, 16],
            c: 12927811,
            t: 5
        }, {
            p: [220, 2, 112],
            s: [168, 74, 4],
            c: 12927811,
            t: 5
        }, {
            p: [205, 2, -26],
            s: [138, 74, 4],
            c: 12927811,
            t: 5
        }, {
            p: [297, 2, -26],
            s: [14, 74, 4],
            c: 12927811,
            t: 5
        }, {
            p: [282, 26, -26],
            s: [16, 50, 4],
            c: 12927811,
            t: 5
        }, {
            p: [302, 38, 16],
            s: [4, 38, 80],
            c: 12927811,
            t: 5
        }, {
            p: [302, 38, 91],
            s: [4, 38, 38],
            c: 12927811,
            t: 5
        }, {
            p: [302, 62, 64],
            s: [4, 14, 16],
            c: 12927811,
            t: 5
        }, {
            p: [302, 2, 25],
            s: [4, 36, 98],
            c: 12927811,
            t: 5
        }, {
            p: [302, 2, 100],
            s: [4, 36, 20],
            c: 12927811,
            t: 5
        }, {
            p: [302, 26, 82],
            s: [4, 12, 16],
            c: 12927811,
            t: 5
        }, {
            p: [238, 38, -16],
            s: [4, 26, 16],
            c: 16767158,
            t: 5
        }, {
            p: [238, 64, 29],
            s: [4, 12, 106],
            c: 16767158,
            t: 5
        }, {
            p: [176, 34, 98],
            s: [4, 42, 24],
            c: 16767158,
            t: 5
        }, {
            p: [291, 38, 84],
            s: [18, 38, 4],
            c: 16767158,
            t: 5
        }, {
            p: [262, 38, 84],
            s: [8, 38, 4],
            c: 16767158,
            t: 5
        }, {
            p: [274, 62, 84],
            s: [16, 14, 4],
            c: 16767158,
            t: 5
        }, {
            p: [216, 2, 84],
            s: [84, 74, 4],
            c: 16767158,
            t: 5
        }, {
            p: [256, 2, 98],
            s: [4, 36, 24],
            c: 16767158,
            t: 5
        }, {
            p: [238, 2, 67],
            s: [4, 24, 30],
            c: 16767158,
            t: 5
        }, {
            p: [238, 2, -5],
            s: [4, 24, 38],
            c: 16767158,
            t: 5
        }, {
            p: [238, 26, 29],
            s: [4, 12, 107],
            c: 16767158,
            t: 5
        }, {
            p: [157, 36, 43],
            s: [34, 2, 134],
            c: 7368816,
            t: 5
        }, {
            p: [270, 36, 30],
            s: [60, 2, 108],
            c: 7368816,
            t: 5
        }, {
            p: [279, 36, 97],
            s: [42, 2, 26],
            c: 7368816,
            t: 5
        }, {
            p: [220, 0, 43],
            s: [172, 2, 146],
            c: 7368816,
            t: 5
        }, {
            p: [183, 0, -75],
            s: [150, 2, 98],
            c: 7368816,
            t: 5
        }, {
            p: [158, 2, -31],
            s: [4, 30, 6],
            c: 12927811,
            t: 5
        }, {
            p: [158, 2, -74],
            s: [4, 30, 4],
            c: 12927811,
            t: 5
        }, {
            p: [158, 2, -119],
            s: [4, 30, 6],
            c: 12927811,
            t: 5
        }, {
            p: [158, 32, -75],
            s: [4, 12, 94],
            c: 12927811,
            t: 5
        }, {
            p: [254, 2, -60],
            s: [4, 24, 64],
            c: 12927811,
            t: 5
        }, {
            p: [254, 2, -115],
            s: [4, 24, 14],
            c: 12927811,
            t: 5
        }, {
            p: [254, 26, -75],
            s: [4, 18, 94],
            c: 12927811,
            t: 5
        }, {
            p: [206, 2, -120],
            s: [92, 42, 4],
            c: 12927811,
            t: 5
        }, {
            p: [158, 2, -96],
            s: [2, 30, 42],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [170, 0, 125],
            s: [34, 2, 18],
            c: 7368816,
            t: 5
        }, {
            p: [260, 0, -100],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [308, 0, 82],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [-41, 0, -24],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [282, 0, -32],
            s: [20, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [29, -1, 323],
            s: [106, 2, 845],
            c: 3750201,
            t: 5
        }, {
            p: [-65, 32, 115],
            s: [4, 12, 102],
            c: 5799880,
            t: 5
        }, {
            p: [-65, 2, 115],
            s: [4, 30, 10],
            c: 5799880,
            t: 5
        }, {
            p: [-65, 2, 161],
            s: [4, 30, 10],
            c: 5799880,
            t: 5
        }, {
            p: [-145, 2, 161],
            s: [4, 24, 10],
            c: 5799880,
            t: 5
        }, {
            p: [-145, 2, 102],
            s: [4, 24, 76],
            c: 5799880,
            t: 5
        }, {
            p: [-105, 2, 168],
            s: [84, 42, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-145, 26, 115],
            s: [4, 18, 102],
            c: 5799880,
            t: 5
        }, {
            p: [-65, 2, 139],
            s: [2, 30, 42],
            pe: 1,
            t: 5
        }, {
            p: [-91, 0, 118],
            s: [116, 2, 108],
            c: 7368816,
            t: 5
        }, {
            p: [-113, 0, -16],
            s: [140, 2, 164],
            c: 7368816,
            t: 5
        }, {
            p: [-142, 2, 62],
            s: [30, 74, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-78, 2, 62],
            s: [66, 74, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-113, 2, -94],
            s: [136, 74, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 66, -16],
            s: [4, 10, 152],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 38, -77],
            s: [4, 28, 30],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 38, -3],
            s: [4, 28, 42],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 38, 35],
            s: [4, 6, 34],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 38, -43],
            s: [4, 6, 38],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 38, 56],
            s: [4, 28, 8],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 2, -62],
            s: [4, 36, 60],
            c: 5799880,
            t: 5
        }, {
            p: [-47, 26, -24],
            s: [4, 12, 16],
            c: 5799880,
            t: 5
        }, {
            p: [-177, 2, 62],
            s: [8, 74, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-179, 2, 5],
            s: [4, 74, 110],
            c: 5799880,
            t: 5
        }, {
            p: [-179, 2, -79],
            s: [4, 74, 26],
            c: 5799880,
            t: 5
        }, {
            p: [-119, 26, 62],
            s: [16, 50, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-165, 26, 62],
            s: [16, 50, 4],
            c: 5799880,
            t: 5
        }, {
            p: [-140, 2, -80],
            s: [4, 36, 24],
            c: 16767158,
            t: 5
        }, {
            p: [-105, 2, -66],
            s: [74, 74, 4],
            c: 16767158,
            t: 5
        }, {
            p: [-70, 34, -80],
            s: [4, 42, 24],
            c: 16767158,
            t: 5
        }, {
            p: [-179, 26, -58],
            s: [4, 12, 16],
            c: 5799880,
            t: 5
        }, {
            p: [-58, 36, -16],
            s: [20, 2, 152],
            c: 7368816,
            t: 5
        }, {
            p: [-134, 2, 32],
            s: [4, 28, 56],
            c: 16767158,
            t: 5
        }, {
            p: [-134, 2, -49],
            s: [4, 28, 30],
            c: 16767158,
            t: 5
        }, {
            p: [-134, 30, -2],
            s: [4, 8, 124],
            c: 16767158,
            t: 5
        }, {
            p: [-100, 36, -2],
            s: [64, 2, 124],
            c: 7368816,
            t: 5
        }, {
            p: [-157, 36, -3],
            s: [42, 2, 126],
            c: 7368816,
            t: 5
        }, {
            p: [-160, 36, -79],
            s: [36, 2, 26],
            c: 7368816,
            t: 5
        }, {
            p: [-179, 62, -58],
            s: [4, 14, 16],
            c: 5799880,
            t: 5
        }, {
            p: [-134, 38, -57],
            s: [4, 38, 14],
            c: 16767158,
            t: 5
        }, {
            p: [-134, 38, 13],
            s: [4, 38, 94],
            c: 16767158,
            t: 5
        }, {
            p: [-134, 60, -42],
            s: [4, 16, 16],
            c: 16767158,
            t: 5
        }, {
            p: [337, -2, 99],
            s: [4, 40, 4],
            c: 7692103,
            t: 5
        }, {
            p: [306, -2, 99],
            s: [4, 40, 4],
            c: 7692103,
            t: 5
        }, {
            p: [337, -2, 5],
            s: [4, 40, 4],
            c: 7692103,
            t: 5
        }, {
            p: [306, -2, 5],
            s: [4, 40, 4],
            c: 7692103,
            t: 5
        }, {
            p: [322, 34, 52],
            s: [36, 2, 100],
            c: 7692103,
            t: 5
        }, {
            p: [-199, 34, -47],
            s: [36, 2, 82],
            c: 7692103,
            t: 5
        }, {
            p: [-214, -1, -9],
            s: [4, 38, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-214, -1, -85],
            s: [4, 38, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-183, -1, -85],
            s: [4, 38, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-183, -1, -9],
            s: [4, 38, 4],
            c: 7692103,
            t: 5
        }, {
            p: [132, 0, 44],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [-185, 0, -58],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [-151, 0, 148],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [-165, 0, 68],
            s: [18, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [-113, 76, -16],
            s: [146, 4, 170],
            c: 5263440,
            t: 5
        }, {
            p: [-105, 44, 119],
            s: [94, 4, 112],
            c: 5263440,
            t: 5
        }, {
            p: [220, 76, 43],
            s: [178, 4, 152],
            c: 5263440,
            t: 5
        }, {
            p: [206, 44, -77],
            s: [108, 4, 98],
            c: 5263440,
            t: 5
        }, {
            p: [-79, 2, -105],
            s: [30, 118, 18],
            c: 7368816,
            t: 5
        }, {
            p: [-79, 0, -107],
            s: [34, 2, 18],
            c: 7368816,
            t: 5
        }, {
            p: [32, 2, -207],
            s: [124, 74, 150],
            c: 12958048,
            t: 5
        }, {
            p: [32, 74, -207],
            s: [136, 4, 162],
            c: 5263440,
            t: 5
        }, {
            p: [32, 0, -207],
            s: [128, 2, 154],
            c: 7368816,
            t: 5
        }, {
            p: [94, -1, 159],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [94, -1, 217],
            s: [2, 24, 113],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [246, -1, 159],
            s: [302, 24, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [-37, -1, 235],
            s: [2, 24, 58],
            c: 7692103,
            t: 5
        }, {
            p: [-37, -1, 205],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-163, -1, 205],
            s: [254, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [398, -1, 159],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [399, -1, 59],
            s: [2, 24, 206],
            c: 7692103,
            t: 5
        }, {
            p: [399, -1, -156],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [260, -1, -157],
            s: [340, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [-161, -1, -157],
            s: [262, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [-290, -1, 204],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-291, -1, 24],
            s: [2, 24, 358],
            c: 7692103,
            t: 5
        }, {
            p: [-290, -1, -156],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-181, 2, 3],
            s: [2, 52, 12],
            id: 3,
            d: 2
        }, {
            p: [32, 0, -121],
            s: [48, 2, 18],
            c: 7368816,
            t: 5
        }, {
            p: [32, 39, -123],
            s: [46, 3, 19],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [-251, -1, 171],
            s: [2, 24, 64],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [-267, 0, 73],
            s: [46, 30, 42],
            c: 5799880,
            t: 5
        }, {
            p: [-267, 30, 73],
            s: [54, 2, 50],
            c: 5395026,
            t: 5
        }, {
            p: [343, 0, -138],
            s: [52, 32, 36],
            c: 12927811,
            t: 5
        }, {
            p: [343, 32, -138],
            s: [56, 2, 40],
            c: 5263440,
            t: 5
        }, {
            p: [399, -1, -46],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [416, -1, -45],
            s: [30, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [431, -1, -46],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [432, -1, -101],
            s: [2, 24, 110],
            c: 7692103,
            t: 5
        }, {
            p: [431, -1, -156],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-250, -1, 16],
            s: [8, 24, 72],
            pe: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-213, -1, -120],
            s: [8, 10, 20],
            pe: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-232, 26, -143],
            s: [58, 2, 32],
            c: 7039851,
            t: 5
        }, {
            p: [-232, 0, -143],
            s: [52, 26, 26],
            c: 5799880,
            t: 5
        }, {
            p: [-233, -1, 86],
            s: [22, 10, 8],
            c: 6984507,
            t: 5
        }, {
            p: [313, -1, -134],
            s: [8, 10, 44],
            c: 6984507,
            t: 5
        }, {
            p: [-144, -1, -154],
            s: [124, 10, 5],
            c: 6984507,
            t: 5
        }, {
            p: [435, 0, -16],
            s: [52, 32, 36],
            c: 12927811,
            t: 5
        }, {
            p: [435, 32, -16],
            s: [56, 2, 40],
            c: 5263440,
            t: 5
        }, {
            p: [399, -2, -100],
            s: [8, 20, 56],
            pe: 1,
            c: 6984507,
            t: 5
        }, {
            p: [342, -1, 52],
            s: [6, 10, 104],
            c: 6984507,
            t: 5
        }, {
            p: [-251, -1, 205],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-251, -1, 107],
            s: [2, 24, 26],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [151, 2, -99],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [340, 0, -114],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [108, 0, 152],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [108, 12, 152],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [191, 2, -112],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [246, 2, -50],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-137, 2, 116],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-104, 2, 160],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-56, 0, 198],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-56, 12, 198],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-139, 2, 106],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [248, 2, -60],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-202, 0, -148],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-92, 2, 160],
            s: [12, 12, 12],
            id: 8
        }, {
            p: [203, 2, -112],
            s: [12, 12, 12],
            id: 8
        }, {
            p: [130, 34, 79],
            s: [12, 2, 42],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [136, 2, 105],
            s: [2, 42, 8],
            id: 3,
            d: 2
        }, {
            p: [-47, 44, 35],
            s: [1, 22, 34],
            pe: 1,
            c: 9533019,
            t: 5
        }, {
            p: [-219, -1, 176],
            s: [4, 32, 4],
            c: 6574655,
            t: 5
        }, {
            p: [-219, 30, 176],
            s: [26, 26, 28],
            c: 6193707,
            t: 5
        }, {
            p: [-219, 20, 181],
            s: [2, 2, 8],
            c: 6574655,
            t: 5
        }, {
            p: [-219, 19, 188],
            s: [6, 6, 8],
            c: 6193707,
            t: 5
        }, {
            p: [-224, 18, 176],
            s: [6, 2, 2],
            c: 6574655,
            t: 5
        }, {
            p: [-229, 17, 176],
            s: [6, 4, 6],
            c: 6193707,
            t: 5
        }, {
            p: [375, -1, 138],
            s: [4, 32, 4],
            c: 6574655,
            t: 5
        }, {
            p: [375, 29, 138],
            s: [26, 26, 28],
            c: 6193707,
            t: 5
        }, {
            p: [375, 19, 133],
            s: [2, 2, 8],
            c: 6574655,
            t: 5
        }, {
            p: [375, 18, 127],
            s: [6, 6, 8],
            c: 6193707,
            t: 5
        }, {
            p: [371, 15, 138],
            s: [6, 2, 2],
            c: 6574655,
            t: 5
        }, {
            p: [365, 14, 138],
            s: [6, 4, 6],
            c: 6193707,
            t: 5
        }, {
            p: [33, 3, 67],
            s: [32, 32, 116],
            t: 5
        }, {
            p: [33, 1, 67],
            s: [34, 2, 118],
            c: 9012870,
            t: 5
        }, {
            p: [33, 35, 67],
            s: [34, 2, 118],
            c: 9012870,
            t: 5
        }, {
            p: [37, 1, -78],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [49, 1, -78],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [44, 1, -66],
            s: [12, 12, 12],
            id: 8
        }, {
            p: [42, 0, 4],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [35, 0, 4],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [29, 0, 4],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [41, 13, -78],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [130, 2, 51],
            s: [16, 24, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [-39, 2, -31],
            s: [16, 24, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [29, 1, 225],
            s: [51, 15, 20],
            id: 7,
            col: 1
        }, {
            p: [-125, -1, 175],
            s: [4, 22, 2],
            col: 1,
            r: [-.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [-113, 0, 175],
            s: [4, 22, 2],
            col: 1,
            r: [-.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [154, 2, -46],
            s: [51, 15, 20],
            id: 7,
            col: 1,
            r: [-3.14, 0, -3.14]
        }, {
            p: [54, 1, 116],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-59, 2, 115],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [11, 1, 76],
            s: [6, 2, 92],
            c: 8678483,
            t: 5
        }, {
            p: [4, 1, 75],
            s: [6, 2, 92],
            c: 7692103,
            t: 5
        }, {
            p: [-3, 1, 77],
            s: [6, 2, 92],
            c: 5259054,
            t: 5
        }, {
            p: [-1, 3, 76],
            s: [6, 2, 92],
            c: 7692103,
            t: 5
        }, {
            p: [7, 3, 77],
            s: [6, 2, 92],
            c: 7692103,
            t: 5
        }, {
            p: [3, 5, 77],
            s: [6, 2, 92],
            c: 7035206,
            t: 5
        }, {
            p: [33, 1, 126],
            s: [8, 38, 2],
            id: 3,
            d: 1
        }, {
            p: [33, 3, 125],
            s: [10, 34, 2],
            v: 1,
            t: 5
        }, {
            p: [169, 0, -150],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [89, 0, 175],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [394, 0, 28],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-246, 0, 112],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [29, 1, 225],
            s: [48, 8, 16],
            v: 1,
            t: 5
        }, {
            p: [34, 8, 225],
            s: [24, 8, 16],
            v: 1,
            t: 5
        }, {
            p: [148, 9, -45],
            s: [24, 8, 16],
            v: 1,
            t: 5
        }, {
            p: [154, 3, -45],
            s: [48, 8, 16],
            v: 1,
            t: 5
        }, {
            p: [138, 44, 3],
            s: [1, 22, 38],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [117, 21, 180],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [117, -1, 180],
            s: [4, 28, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-64, -1, 235],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-64, 21, 235],
            s: [26, 28, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [-42, 23, 288],
            s: [27, 28, 24],
            pe: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-37, -1, 265],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [94, -1, 275],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-42, -1, 289],
            s: [4, 31, 4],
            pe: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-315, -1, 13],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-321, -1, -132],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [459, 14, -62],
            s: [26, 27, 35],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [207, 17, -188],
            s: [26, 25, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-102, 16, -181],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-320, 19, 175],
            s: [26, 28, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [85, 0, 188],
            s: [2, 73, 2],
            c: 7368816,
            t: 5
        }, {
            p: [79, 71, 188],
            s: [10, 2, 2],
            c: 7368816,
            t: 5
        }, {
            p: [75, 70, 498],
            s: [10, 2, 4],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [75, 69, 188],
            s: [9, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-27, 0, 332],
            s: [2, 73, 2],
            c: 7368816,
            t: 5
        }, {
            p: [-21, 71, 332],
            s: [10, 2, 2],
            c: 7368816,
            t: 5
        }, {
            p: [-17, 70, 332],
            s: [10, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [-17, 69, 332],
            s: [9, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-9, 0, -104],
            s: [2, 73, 2],
            c: 7368816,
            t: 5
        }, {
            p: [-9, 71, -99],
            s: [2, 2, 8],
            c: 7368816,
            t: 5
        }, {
            p: [-9, 69, -96],
            s: [2, 1, 8],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-9, 70, -96],
            s: [3, 2, 9],
            c: 7368816,
            t: 5
        }, {
            p: [279, 15, 184],
            s: [26, 28, 28],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-33, -1, 202],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-32, -1, 208],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-41, -2, 201],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-27, -2, 237],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [84, 0, 169],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [90, -2, 166],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [131, -1, -22],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [60, 0, -124],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [64, 0, -126],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-14, 0, -105],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-5, 0, -102],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-10, -1, -108],
            s: [1, 8, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-32, -3, 65],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-34, -1, 61],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-39, -1, -96],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-25, -4, 122],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-26, -3, 37],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-69, -1, 174],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [85, 0, -29],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [86, 0, 119],
            s: [1, 3, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [114, -1, 144],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [132, 0, 112],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [131, 0, 27],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [106, 0, -118],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [98, 0, -135],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [90, -2, -128],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [84, -2, 116],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-31, -4, 149],
            s: [1, 8, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-96, -2, 201],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-67, -1, 201],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-26, -1, -44],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [87, -2, 238],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-99, -2, -113],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-35, -1, -153],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-204, -1, -143],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-196, -2, -147],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-184, 0, -46],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-180, 0, 68],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-151, 0, 69],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-147, -1, 174],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-216, -1, 180],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-216, -3, 172],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-247, -2, 118],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-243, -2, 50],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-241, -3, 79],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-254, -2, -128],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-251, -4, -127],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [292, -1, -154],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [177, -1, -147],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [177, -3, -154],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [296, -1, -34],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [260, -1, -72],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [260, -2, -35],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [404, -2, -49],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [429, -2, -60],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [405, -2, -153],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [307, -3, -18],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [391, -2, 22],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [371, -3, 135],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [334, -2, 156],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [308, -3, 114],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [189, -2, 132],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [151, -2, 131],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [229, -2, 156],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [308, -2, 59],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-218, 0, -88],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-158, -1, -100],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [133, 0, 69],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [84, 0, 12],
            s: [1, 5, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [36, -1, -101],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-321, 11, -132],
            s: [26, 30, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [206, -1, -125],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [230, 2, 2],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [246, 2, 62],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [246, 38, 28],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [190, 38, 76],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-126, 38, 36],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-171, 38, -16],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-126, 2, -58],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-55, 2, -1],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-84, 38, 56],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [-76, 38, 56],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [-96, 38, 56],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [-114, 39, 29],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, .52, 0],
            c: 10987431,
            t: 5
        }, {
            p: [-81, 39, 47],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 11645361,
            t: 5
        }, {
            p: [-144, 39, -57],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 10658466,
            t: 5
        }, {
            p: [-109, 3, -53],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 11184810,
            t: 5
        }, {
            p: [60, 2, -62],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [8, 2, 178],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 10329501,
            t: 5
        }, {
            p: [-120, 38, 28],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-67, 39, -59],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [-3.14, 1.05, -3.14],
            c: 10987431,
            t: 5
        }, {
            p: [-120, 40, 28],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-53, 38, 55],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-53, 40, 55],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-80, 38, -62],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-80, 40, -62],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-138, 38, -11],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-138, 40, -11],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-142, 39, -5],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [3.14, -1.04, 3.14],
            c: 10658466,
            t: 5
        }, {
            p: [-89, 38, -58],
            s: [12, 12, 12],
            id: 8
        }, {
            p: [-70, 3, 108],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [-3.14, 1.05, -3.14],
            c: 10987431,
            t: 5
        }, {
            p: [-86, 2, 66],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-86, 4, 66],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-106, 3, 127],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [-3.14, 1.05, -3.14],
            c: 10987431,
            t: 5
        }, {
            p: [-103, 3, 119],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, .7, 0],
            c: 10987431,
            t: 5
        }, {
            p: [-92, 4, 58],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-92, 2, 58],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [173, 2, -20],
            s: [1, 8, 7],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [195, 2, -20],
            s: [1, 8, 7],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [184, 9, -20],
            s: [11, 1, 4],
            pe: 1,
            c: 3421236,
            t: 5
        }, {
            p: [184, 8, -20],
            s: [21, 1, 6],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [184, 10, -20],
            s: [2, 1, 1],
            pe: 1,
            c: 3421236,
            t: 5
        }, {
            p: [184, 11, -20],
            s: [22, 11, 1],
            pe: 1,
            c: 3421236,
            t: 5
        }, {
            p: [184, 12, -19],
            s: [20, 9, 1],
            pe: 1,
            c: 3421236,
            e: 16777215,
            t: 5
        }, {
            p: [164, 3, -13],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [235, 3, 48],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [-3.14, 1.4, -3.14],
            c: 9671571,
            t: 5
        }, {
            p: [143, 2, 84],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [143, 2, 80],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [225, 3, 68],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [55, 30, 23],
            s: [5, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [52, 32, 23],
            s: [8, 1, 1],
            c: 9012870,
            t: 5
        }, {
            p: [55, 29, 23],
            s: [4, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [15, 32, 121],
            s: [8, 1, 1],
            c: 9012870,
            t: 5
        }, {
            p: [12, 30, 121],
            s: [5, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [12, 29, 121],
            s: [4, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [258, 30, -100],
            s: [8, 1, 1],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [261, 28, -100],
            s: [5, 2, 3],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [261, 27, -100],
            s: [4, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-152, 27, 148],
            s: [5, 2, 3],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-150, 29, 148],
            s: [6, 1, 1],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-152, 26, 148],
            s: [4, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-242, 26, 73],
            s: [4, 1, 1],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-240, 24, 73],
            s: [4, 2, 3],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-240, 23, 73],
            s: [3, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-234, 22, -128],
            s: [1, 1, 4],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-234, 20, -126],
            s: [3, 2, 4],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-234, 19, -126],
            s: [2, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [306, 65, 63],
            s: [8, 1, 1],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [309, 63, 63],
            s: [5, 2, 3],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [309, 62, 63],
            s: [4, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [198, 0, 242],
            s: [123, 42, 120],
            c: 5799880,
            t: 5
        }, {
            p: [198, 42, 242],
            s: [130, 2, 128],
            c: 8553090,
            t: 5
        }, {
            p: [167, 0, 311],
            s: [30, 61, 18],
            c: 7368816,
            t: 5
        }, {
            p: [303, 6, 186],
            s: [23, 27, 23],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [331, 10, 205],
            s: [31, 30, 30],
            col: 1,
            c: 7576379,
            t: 5
        }, {
            p: [-121, 0, 322],
            s: [123, 60, 120],
            c: 12951902,
            t: 5
        }, {
            p: [-121, 60, 322],
            s: [130, 2, 126],
            c: 6908265,
            t: 5
        }, {
            p: [-58, 35, 356],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-58, 36, 356],
            s: [1, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-59, 36, 362],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-59, 36, 350],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-59, 48, 356],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-59, 36, 356],
            s: [1, 12, 11],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-112, 35, 261],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-112, 36, 262],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-106, 36, 262],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-118, 36, 262],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-112, 48, 262],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-112, 36, 262],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [77, 49, -131],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [77, 50, -132],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [71, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [83, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [77, 62, -132],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [77, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [95, 47, -163],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [94, 48, -163],
            s: [1, 12, 11],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [93, 48, -157],
            s: [4, 13, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [94, 60, -163],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [93, 48, -169],
            s: [4, 13, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [93, 48, -163],
            s: [4, 13, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [32, 0, -109],
            s: [23, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [113, -1, 298],
            s: [4, 28, 4],
            c: 6574655,
            t: 5
        }, {
            p: [114, 22, 298],
            s: [26, 28, 28],
            c: 5204775,
            t: 5
        }, {
            p: [-121, 0, 322],
            s: [135, 8, 133],
            c: 6193707,
            t: 5
        }, {
            p: [124, 11, -198],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [418, 15, -183],
            s: [26, 33, 28],
            col: 1,
            c: 7247414,
            t: 5
        }, {
            p: [163, 2, 422],
            s: [113, 78, 116],
            c: 12927811,
            t: 5
        }, {
            p: [165, 0, 419],
            s: [134, 8, 126],
            c: 6193707,
            t: 5
        }, {
            p: [85, 0, 498],
            s: [2, 73, 2],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [79, 71, 498],
            s: [10, 2, 2],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [75, 70, 188],
            s: [10, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [75, 69, 498],
            s: [9, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [163, 80, 422],
            s: [123, 3, 125],
            col: 1,
            c: 5921370,
            t: 5
        }, {
            p: [106, 54, 387],
            s: [1, 12, 11],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [105, 53, 387],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [105, 66, 387],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 393],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 381],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 387],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 452],
            s: [1, 12, 11],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [105, 53, 452],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [105, 66, 452],
            s: [3, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 446],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 458],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [106, 54, 452],
            s: [2, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [253, -1, 376],
            s: [4, 28, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [253, 22, 376],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-224, 19, 248],
            s: [26, 28, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [-224, -1, 248],
            s: [4, 23, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-89, 0, 470],
            s: [104, 135, 116],
            c: 10658466,
            t: 5
        }, {
            p: [-30, -1, 392],
            s: [4, 31, 4],
            c: 6574655,
            t: 5
        }, {
            p: [-30, 23, 392],
            s: [27, 28, 24],
            c: 6193707,
            t: 5
        }, {
            p: [-89, 135, 470],
            s: [110, 3, 122],
            col: 1,
            c: 5921370,
            t: 5
        }, {
            p: [-89, 65, 470],
            s: [111, 5, 124],
            c: 5921370,
            t: 5
        }, {
            p: [-27, 0, 651],
            s: [2, 73, 2],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [-21, 71, 651],
            s: [10, 2, 2],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [-17, 70, 651],
            s: [10, 2, 4],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [-17, 69, 651],
            s: [9, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-28, 0, 308],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [107, -1, 504],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [107, 21, 504],
            s: [27, 28, 24],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [156, 0, 621],
            s: [123, 84, 120],
            col: 1,
            c: 12951902,
            t: 5
        }, {
            p: [-97, 0, 686],
            s: [123, 52, 120],
            col: 1,
            c: 5799880,
            t: 5
        }, {
            p: [-97, 52, 686],
            s: [131, 4, 132],
            col: 1,
            c: 5723991,
            t: 5
        }, {
            p: [156, 84, 621],
            s: [131, 5, 132],
            col: 1,
            c: 5723991,
            t: 5
        }, {
            p: [489, 22, 19],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [424, 18, 101],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [427, 15, 26],
            s: [27, 30, 30],
            col: 1,
            c: 7576379,
            t: 5
        }, {
            p: [387, 13, 187],
            s: [23, 27, 23],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [396, -2, -1],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [394, -4, -43],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [458, 18, 69],
            s: [23, 24, 27],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [727, 0, -41],
            s: [104, 74, 79],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [687, 74, -41],
            s: [24, 48, 26],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [727, 74, -41],
            s: [105, 6, 76],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [687, 121, -41],
            s: [31, 6, 32],
            col: 1,
            c: 7890002,
            t: 5
        }, {
            p: [687, 127, -41],
            s: [22, 13, 19],
            col: 1,
            c: 7890002,
            t: 5
        }, {
            p: [727, 80, -41],
            s: [105, 6, 54],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [727, 84, -61],
            s: [115, 6, 53],
            col: 1,
            r: [-.52, 0, 0],
            c: 7890002,
            t: 5
        }, {
            p: [681, 154, -41],
            s: [2, 25, 2],
            col: 1,
            c: 7890002,
            t: 5
        }, {
            p: [681, 171, -41],
            s: [2, 2, 14],
            col: 1,
            c: 7890002,
            t: 5
        }, {
            p: [687, 124, -30],
            s: [22, 33, 11],
            col: 1,
            r: [-.35, 0, 0],
            c: 7890002,
            t: 5
        }, {
            p: [687, 124, -52],
            s: [22, 33, 11],
            col: 1,
            r: [.35, 0, 0],
            c: 7890002,
            t: 5
        }, {
            p: [727, 84, -22],
            s: [115, 6, 51],
            col: 1,
            r: [.53, 0, 0],
            c: 7890002,
            t: 5
        }, {
            p: [727, 80, -41],
            s: [105, 12, 34],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [674, 0, -41],
            s: [2, 57, 32],
            col: 1,
            c: 7890002,
            t: 5
        }, {
            p: [692, 16, -106],
            s: [26, 31, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [691, -1, -106],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [648, 17, 8],
            s: [26, 34, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [648, -1, 9],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [458, 17, -140],
            s: [26, 31, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [621, 18, -154],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [621, -1, -154],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [208, 0, -376],
            s: [121, 69, 83],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [674, 108, -41],
            s: [1, 9, 9],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [673, 113, -41],
            s: [1, 4, 1],
            col: 1,
            c: 2960685,
            t: 5
        }, {
            p: [673, 113, -41],
            s: [1, 4, 1],
            col: 1,
            r: [2.09, 0, 0],
            c: 2960685,
            t: 5
        }, {
            p: [674, 64, -41],
            s: [2, 19, 4],
            col: 1,
            c: 2105376,
            t: 5
        }, {
            p: [752, 18, 167],
            s: [39, 24, 1182],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [611, 18, -401],
            s: [257, 31, 27],
            col: 1,
            c: 6060596,
            t: 5
        }, {
            p: [592, 31, -395],
            s: [38, 34, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [737, 15, -383],
            s: [47, 36, 49],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [746, 22, -200],
            s: [38, 28, 38],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [746, 22, -292],
            s: [38, 33, 38],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [748, 0, -142],
            s: [4, 23, 132],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [758, 0, -298],
            s: [4, 23, 219],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [735, -1, -287],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [27, 0, 172],
            s: [1506, 0, 1212],
            id: 4,
            c: 7504967,
            t: 5
        }, {
            p: [640, 0, -405],
            s: [307, 23, 5],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [542, -1, -391],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [610, 18, -235],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [610, -1, -235],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [460, -1, -324],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [460, 18, -324],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [748, 0, 331],
            s: [4, 23, 852],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [501, 17, -113],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [459, 9, -102],
            s: [25, 26, 25],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [451, 22, 93],
            s: [26, 24, 25],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [427, 10, 60],
            s: [26, 28, 29],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [424, 15, 135],
            s: [30, 28, 27],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [501, 16, -8],
            s: [29, 25, 29],
            col: 1,
            c: 4941357,
            t: 5
        }, {
            p: [530, 9, -52],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [595, 9, 107],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [418, 13, 183],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [477, 20, 166],
            s: [27, 30, 30],
            col: 1,
            c: 7576379,
            t: 5
        }, {
            p: [746, 22, 77],
            s: [38, 28, 44],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [746, 22, 140],
            s: [38, 29, 41],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [439, 8, 46],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [395, -2, 116],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [746, 23, 254],
            s: [38, 28, 34],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [746, 18, 349],
            s: [38, 29, 74],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [450, 14, -177],
            s: [25, 30, 25],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [166, 0, -429],
            s: [1786, 23, 5],
            col: 1,
            c: 5917499,
            t: 5
        }, {
            p: [-81, 19, -418],
            s: [1233, 31, 27],
            col: 1,
            c: 6060596,
            t: 5
        }, {
            p: [436, 16, -407],
            s: [38, 37, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [319, 17, -407],
            s: [38, 37, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [437, -1, -401],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [318, -1, -401],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [291, -1, -412],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [371, -1, -412],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [376, 31, -439],
            s: [38, 33, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [291, -1, -234],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [291, 8, -237],
            s: [31, 33, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [208, 69, -376],
            s: [128, 3, 89],
            col: 1,
            c: 6381921,
            t: 5
        }, {
            p: [399, -1, 45],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [408, -1, -415],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [242, 47, -334],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [173, 47, -334],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [173, 46, -333],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [173, 59, -333],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [242, 59, -333],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [242, 46, -333],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [167, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [179, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [236, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [248, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [242, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [173, 47, -334],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-24, 112, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 66, 470],
            s: [14, 57, 3],
            col: 1,
            c: 5921370,
            t: 5
        }, {
            p: [-30, 112, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 116, 468],
            s: [4, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-24, 101, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-30, 101, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 101, 468],
            s: [4, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 108, 468],
            s: [4, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 90, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 97, 468],
            s: [8, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-25, 79, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 86, 468],
            s: [6, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 79, 468],
            s: [6, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-27, 82, 468],
            s: [6, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-25, 68, 468],
            s: [2, 9, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-28, 68, 468],
            s: [6, 2, 1],
            col: 1,
            c: 5723991,
            e: 16711680,
            t: 5
        }, {
            p: [-37, 108, 470],
            s: [6, 3, 3],
            col: 1,
            c: 5921370,
            t: 5
        }, {
            p: [-37, 77, 470],
            s: [6, 3, 3],
            col: 1,
            c: 5921370,
            t: 5
        }, {
            p: [65, 1, 654],
            s: [20, 15, 51],
            id: 7,
            col: 1,
            r: [0, -1.57, 0]
        }, {
            p: [106, -1, -84],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [6, -1, -127],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [83, -4, 59],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-247, -2, 198],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [32, 0, 814],
            s: [79, 135, 116],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [32, 135, 814],
            s: [87, 3, 124],
            col: 1,
            c: 6052956,
            t: 5
        }, {
            p: [88, -1, 709],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [90, 17, 708],
            s: [27, 28, 24],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-33, -1, 770],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-34, 16, 770],
            s: [27, 28, 24],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [115, -2, 958],
            s: [113, 65, 116],
            col: 1,
            c: 12927811,
            t: 5
        }, {
            p: [115, 63, 958],
            s: [124, 5, 126],
            col: 1,
            c: 5066061,
            t: 5
        }, {
            p: [-63, -18, 928],
            s: [123, 112, 120],
            col: 1,
            c: 12951902,
            t: 5
        }, {
            p: [-63, 93, 928],
            s: [131, 4, 127],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [-155, -75, 1251],
            s: [79, 289, 61],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [151, -31, 1120],
            s: [108, 142, 61],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [308, 0, 1120],
            s: [79, 220, 61],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [-269, -31, 1008],
            s: [108, 142, 113],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [437, 0, 747],
            s: [677, 23, 5],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [609, 21, 751],
            s: [315, 24, 44],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [269, 21, 751],
            s: [374, 27, 53],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [525, 20, 744],
            s: [38, 29, 41],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [744, 18, 739],
            s: [43, 35, 46],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [333, 22, 743],
            s: [38, 32, 41],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [636, 20, 744],
            s: [38, 29, 41],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [746, 23, 557],
            s: [38, 28, 34],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [443, 24, 258],
            s: [23, 24, 23],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [359, 11, 197],
            s: [24, 24, 30],
            col: 1,
            c: 6390324,
            t: 5
        }, {
            p: [313, 13, 245],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [369, 60, 323],
            s: [132, 3, 130],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [369, -4, 323],
            s: [123, 64, 120],
            col: 1,
            c: 12951902,
            t: 5
        }, {
            p: [252, 12, -209],
            s: [26, 28, 28],
            col: 1,
            c: 4940075,
            t: 5
        }, {
            p: [208, -1, -370],
            s: [137, 10, 89],
            c: 6984507,
            t: 5
        }, {
            p: [373, 18, -259],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [247, 24, 743],
            s: [38, 32, 41],
            col: 1,
            c: 6588720,
            t: 5
        }, {
            p: [571, -57, 1262],
            s: [79, 220, 61],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [563, 13, 53],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [439, 5, 10],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [288, 9, -185],
            s: [25, 26, 25],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [337, 14, -183],
            s: [25, 26, 25],
            col: 1,
            c: 6720572,
            t: 5
        }, {
            p: [164, 6, -221],
            s: [25, 30, 25],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [213, 12, -250],
            s: [21, 25, 21],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [368, 15, -183],
            s: [26, 27, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [392, 11, -194],
            s: [25, 26, 25],
            col: 1,
            c: 5666099,
            t: 5
        }, {
            p: [316, 5, -203],
            s: [25, 26, 25],
            col: 1,
            c: 5666099,
            t: 5
        }, {
            p: [439, 8, 83],
            s: [29, 25, 29],
            col: 1,
            c: 5732402,
            t: 5
        }, {
            p: [212, 18, -319],
            s: [26, 28, 28],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [51, 31, -439],
            s: [38, 33, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [111, 17, -407],
            s: [38, 37, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [25, -1, -412],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [111, -1, -401],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [73, -1, -407],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-92, 17, -407],
            s: [38, 37, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-175, 27, -427],
            s: [38, 33, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-175, 27, -427],
            s: [38, 33, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-90, -1, -400],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-174, -1, -418],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [158, 0, -153],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-67, 22, -274],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-66, -1, -273],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-12, 50, -132],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-12, 49, -131],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-12, 62, -132],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-18, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-6, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-12, 50, -132],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-63, 10, -181],
            s: [25, 30, 25],
            col: 1,
            c: 6851648,
            t: 5
        }, {
            p: [-37, -2, -3],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [32, 26, -126],
            s: [44, 13, 22],
            c: 12958048,
            t: 5
        }, {
            p: [125, -1, 2],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [128, 0, 89],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [88, -1, 82],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [142, -1, 128],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [-37, -1, -55],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [286, -2, 156],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [271, -2, 118],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [239, 3, -66],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [-38, 3, 157],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [-65, -2, -118],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-247, -1, -414],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-341, -1, -413],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-252, 15, -427],
            s: [51, 58, 28],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-372, 15, -411],
            s: [48, 41, 35],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-212, 10, -177],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-156, -1, 235],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-157, 15, 235],
            s: [26, 28, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [165, -1, -213],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [203, -1, -186],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [124, -1, -188],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [285, -1, -185],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [250, -1, -202],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-125, -1, -105],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [-262, -1, -17],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [-257, 0, -12],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-287, 0, -54],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-245, -1, 190],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [392, -1, 40],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [265, -1, -65],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [109, -1, -146],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [-134, -1, -149],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [213, -1, -318],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [213, -1, -248],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [55, -1, -407],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [24, 1, 395],
            s: [33, 15, 52],
            id: 7,
            col: 1,
            r: [3.14, -1.22, 3.14]
        }, {
            p: [-259, 17, 231],
            s: [26, 28, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [-203, 18, 291],
            s: [26, 26, 28],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-203, -1, 292],
            s: [4, 23, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-155, -75, 1251],
            s: [4, 341, 4],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [308, 85, 1120],
            s: [4, 189, 2],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [-102, -1, -180],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-64, -1, -180],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-285, -1, -78],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [-39, -1, -141],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [350, -1, 5],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [427, -1, -136],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [327, -1, 154],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [200, -1, 121],
            s: [4, 2, 4],
            c: 7368816,
            t: 5
        }, {
            p: [116, 0, 155],
            s: [1, 4, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-11, 0, -75],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [133, 0, 15],
            s: [1, 15, 3],
            col: 1,
            r: [0, 0, -.17],
            c: 7692103,
            t: 5
        }, {
            p: [133, 0, 11],
            s: [1, 15, 3],
            col: 1,
            r: [0, 0, -.17],
            c: 7692103,
            t: 5
        }, {
            p: [-47, 2, 22],
            s: [4, 36, 76],
            c: 5799880,
            t: 5
        }, {
            p: [-253, 16, -176],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-182, 0, -245],
            s: [121, 51, 83],
            c: 13619151,
            t: 5
        }, {
            p: [-209, -1, -176],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-183, 66, -58],
            s: [4, 1, 1],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-185, 64, -58],
            s: [4, 2, 3],
            col: 1,
            c: 9012870,
            t: 5
        }, {
            p: [-185, 63, -58],
            s: [3, 1, 2],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-182, 51, -245],
            s: [130, 3, 95],
            c: 7039851,
            t: 5
        }, {
            p: [-173, 31, -203],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-179, 31, -203],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-167, 31, -203],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-173, 31, -203],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-173, 30, -203],
            s: [14, 1, 4],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-173, 43, -203],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-392, 0, 747],
            s: [677, 23, 5],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-385, 21, 751],
            s: [691, 27, 53],
            col: 1,
            c: 4743462,
            t: 5
        }, {
            p: [-215, 0, -5],
            s: [1, 6, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-405, 0, -51],
            s: [123, 60, 120],
            c: 12951902,
            t: 5
        }, {
            p: [-403, 60, -51],
            s: [130, 2, 130],
            c: 5263440,
            t: 5
        }, {
            p: [-316, 15, 11],
            s: [26, 30, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [-320, -1, 173],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-707, 19, 165],
            s: [44, 31, 1300],
            col: 1,
            c: 6060596,
            t: 5
        }, {
            p: [-694, 0, 183],
            s: [1, 23, 1208],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-343, 40, -83],
            s: [1, 12, 11],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-344, 52, -83],
            s: [4, 1, 13],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-343, 39, -83],
            s: [4, 1, 14],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-344, 40, -89],
            s: [4, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-344, 40, -77],
            s: [4, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-344, 40, -83],
            s: [4, 12, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-315, 5, -45],
            s: [26, 30, 28],
            col: 1,
            c: 6786608,
            t: 5
        }, {
            p: [-371, -25, 16],
            s: [27, 105, 15],
            c: 6579300,
            t: 5
        }, {
            p: [-310, 16, -166],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-310, -1, -167],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-290, 11, -213],
            s: [26, 30, 28],
            col: 1,
            c: 7709238,
            t: 5
        }, {
            p: [-270, 16, -274],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-269, -1, -271],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-334, 16, -216],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-328, -1, -219],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-42, 0, 25],
            s: [6, 9, 78],
            c: 6984507,
            t: 5
        }, {
            p: [17, 2, -126],
            s: [14, 24, 22],
            c: 12958048,
            t: 5
        }, {
            p: [32, 2, -119],
            s: [16, 24, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [47, 2, -126],
            s: [14, 24, 22],
            c: 12958048,
            t: 5
        }, {
            p: [-255, -1, 230],
            s: [4, 23, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [275, -1, 183],
            s: [4, 28, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [32, 42, -132],
            s: [29, 18, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [17, 42, -132],
            s: [1, 18, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [32, 42, -132],
            s: [1, 18, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [32, 60, -132],
            s: [31, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [11, 42, -116],
            s: [2, 8, 2],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [53, 42, -116],
            s: [2, 8, 2],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [53, 42, -131],
            s: [2, 8, 2],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [11, 42, -131],
            s: [2, 8, 2],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [11, 42, -123],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [53, 42, -124],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [46, 42, -116],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [18, 42, -116],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [27, 42, -116],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [36, 42, -116],
            s: [1, 7, 1],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [32, 49, -116],
            s: [42, 1, 2],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [53, 49, -124],
            s: [2, 1, 14],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [11, 49, -123],
            s: [2, 1, 14],
            col: 1,
            c: 5263440,
            t: 5
        }, {
            p: [-183, 36, -58],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [306, 36, 64],
            s: [4, 2, 20],
            c: 7368816,
            t: 5
        }, {
            p: [47, 42, -132],
            s: [1, 18, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [340, -1, -182],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [369, -1, -182],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [419, -1, -183],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [391, -1, -193],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-70, 2, 160],
            s: [3, 6, 6],
            col: 1,
            c: 12927811,
            t: 5
        }, {
            p: [-70, 7, 162],
            s: [1, 3, 1],
            col: 1,
            c: 8882055,
            t: 5
        }, {
            p: [52, 1, 106],
            s: [3, 6, 6],
            col: 1,
            c: 12927811,
            t: 5
        }, {
            p: [52, 6, 108],
            s: [1, 3, 1],
            col: 1,
            c: 8882055,
            t: 5
        }, {
            p: [98, 2, -212],
            s: [14, 100, 25],
            c: 7368816,
            t: 5
        }, {
            p: [-397, 16, -128],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-389, -1, -128],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-689, 15, -307],
            s: [48, 41, 58],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-689, 17, -208],
            s: [48, 41, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-574, 17, -413],
            s: [48, 41, 35],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-404, 17, -176],
            s: [26, 31, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [-405, -1, -177],
            s: [4, 34, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-460, 15, -411],
            s: [36, 43, 35],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [369, 39, 263],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [369, 38, 262],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [369, 51, 263],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [375, 39, 263],
            s: [1, 12, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [363, 39, 263],
            s: [1, 12, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [369, 39, 263],
            s: [1, 12, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-151, -3, 125],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-372, 0, 98],
            s: [104, 106, 116],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [-372, 105, 98],
            s: [115, 3, 126],
            col: 1,
            c: 7368816,
            t: 5
        }, {
            p: [-366, 17, 737],
            s: [48, 41, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-489, 17, 737],
            s: [66, 36, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-205, 17, 737],
            s: [66, 36, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-624, 17, 737],
            s: [66, 39, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-689, 17, 202],
            s: [48, 41, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-689, 17, 318],
            s: [48, 41, 41],
            col: 1,
            c: 5665581,
            t: 5
        }, {
            p: [-306, 23, 205],
            s: [26, 26, 28],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-306, -1, 205],
            s: [4, 31, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [-290, 12, 243],
            s: [26, 28, 28],
            col: 1,
            c: 8695624,
            t: 5
        }, {
            p: [-288, -1, 249],
            s: [4, 23, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [126, 0, 60],
            s: [2, 37, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [126, 0, 98],
            s: [2, 37, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [-161, -1, 205],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-290, -1, -49],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [238, -1, -156],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [182, -1, 159],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [296, -1, 159],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [1009, 10, 134],
            s: [65, 76, 76],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [995, 21, -386],
            s: [65, 53, 76],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [555, 21, -559],
            s: [137, 54, 76],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [924, 10, 606],
            s: [74, 74, 87],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [-289, -7, 309],
            s: [82, 106, 86],
            col: 1,
            c: 10658466,
            t: 5
        }, {
            p: [849, -8, -520],
            s: [65, 84, 76],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [661, -4, 165],
            s: [123, 64, 120],
            col: 1,
            c: 12951902,
            t: 5
        }, {
            p: [661, 60, 165],
            s: [132, 4, 131],
            col: 1,
            c: 6381921,
            t: 5
        }, {
            p: [-289, 99, 309],
            s: [89, 4, 93],
            col: 1,
            c: 7895160,
            t: 5
        }, {
            p: [-345, 18, 247],
            s: [26, 26, 28],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-431, 14, 166],
            s: [26, 26, 28],
            col: 1,
            c: 6193707,
            t: 5
        }, {
            p: [-269, 74, 266],
            s: [11, 12, 1],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-269, 73, 265],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-269, 86, 266],
            s: [14, 1, 3],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-263, 74, 266],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-275, 74, 266],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-269, 74, 266],
            s: [1, 12, 2],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [995, 17, -153],
            s: [65, 68, 47],
            col: 1,
            c: 6324784,
            t: 5
        }, {
            p: [-136, 3, -80],
            s: [7, 32, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-130, 3, -80],
            s: [7, 29, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-124, 3, -80],
            s: [7, 26, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-118, 3, -80],
            s: [7, 23, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-112, 3, -80],
            s: [7, 20, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-106, 3, -80],
            s: [7, 17, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-100, 3, -80],
            s: [7, 14, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-94, 3, -80],
            s: [7, 11, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-88, 3, -80],
            s: [7, 8, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-82, 3, -80],
            s: [7, 5, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-76, 2, -80],
            s: [7, 3, 23],
            c: 8355711,
            t: 5
        }, {
            p: [-102, 2, -80],
            s: [72, 36, 24],
            id: 9,
            v: 1,
            t: 5,
            d: 2
        }, {
            p: [-125, 3, 54],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, 1.04, 0],
            c: 11184810,
            t: 5
        }, {
            p: [251, 3, 98],
            s: [7, 32, 23],
            c: 8355711,
            t: 5
        }, {
            p: [244, 3, 98],
            s: [7, 29, 23],
            c: 8355711,
            t: 5
        }, {
            p: [237, 3, 98],
            s: [7, 26, 23],
            c: 8355711,
            t: 5
        }, {
            p: [230, 3, 98],
            s: [7, 23, 23],
            c: 8355711,
            t: 5
        }, {
            p: [223, 3, 98],
            s: [7, 20, 23],
            c: 8355711,
            t: 5
        }, {
            p: [216, 3, 98],
            s: [7, 17, 23],
            c: 8355711,
            t: 5
        }, {
            p: [209, 3, 98],
            s: [7, 14, 23],
            c: 8355711,
            t: 5
        }, {
            p: [202, 3, 98],
            s: [7, 11, 23],
            c: 8355711,
            t: 5
        }, {
            p: [195, 3, 98],
            s: [7, 8, 23],
            c: 8355711,
            t: 5
        }, {
            p: [188, 3, 98],
            s: [7, 5, 23],
            c: 8355711,
            t: 5
        }, {
            p: [181, 2, 98],
            s: [7, 3, 23],
            c: 8355711,
            t: 5
        }, {
            p: [212, 2, 98],
            s: [84, 36, 24],
            id: 9,
            v: 1,
            t: 5,
            d: 0
        }, {
            p: [-320, 72, 67],
            s: [1, 20, 23],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-320, 72, 125],
            s: [1, 20, 23],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-319, 71, 67],
            s: [3, 1, 27],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 92, 67],
            s: [2, 1, 27],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 55],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 79],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 67],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-319, 71, 125],
            s: [3, 1, 27],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 92, 125],
            s: [2, 1, 27],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 137],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 113],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [-320, 72, 125],
            s: [2, 20, 1],
            col: 1,
            c: 6250335,
            t: 5
        }, {
            p: [137, -1, -156],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [-170, -2, 201],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [119, 0, -15],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [349, -2, 38],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-47, -1, 357],
            s: [38, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [116, -1, 275],
            s: [41, 24, 2],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [70, 2, 357],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -1.23, 0],
            c: 10329501,
            t: 5
        }, {
            p: [-12, 2, 249],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 10329501,
            t: 5
        }, {
            p: [-49, -1, 265],
            s: [21, 24, 2],
            c: 7692103,
            t: 5
        }, {
            p: [-33, 0, 413],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [94, 0, 362],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [103, -2, 279],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [109, -1, 302],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-29, -1, 357],
            s: [4, 26, 4],
            c: 7692103,
            t: 5
        }, {
            p: [160, -3, 323],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [85, -3, 338],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [41, -1, 365],
            s: [3, 12, 1],
            col: 1,
            r: [.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [58, 9, 369],
            s: [40, 3, 1],
            col: 1,
            c: 13158600,
            t: 5
        }, {
            p: [41, -1, 373],
            s: [3, 12, 1],
            col: 1,
            r: [-.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [75, -1, 365],
            s: [3, 12, 1],
            col: 1,
            r: [.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [75, -1, 373],
            s: [3, 12, 1],
            col: 1,
            r: [-.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [3, 9, 369],
            s: [40, 3, 1],
            col: 1,
            c: 13158600,
            t: 5
        }, {
            p: [-14, -1, 365],
            s: [3, 12, 1],
            col: 1,
            r: [.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [20, -1, 365],
            s: [3, 12, 1],
            col: 1,
            r: [.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [-14, -1, 373],
            s: [3, 12, 1],
            col: 1,
            r: [-.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [20, -1, 373],
            s: [3, 12, 1],
            col: 1,
            r: [-.35, 0, 0],
            c: 13158600,
            t: 5
        }, {
            p: [58, 1, 382],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-31, 0, 369],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-5, 1, 377],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [47, 1, 378],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [34, 1, 368],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [89, 0, 373],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [73, 2, 406],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [3.14, -1.39, 3.14],
            c: 10329501,
            t: 5
        }, {
            p: [144, -2, 353],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [84, -1, 414],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-26, -1, 381],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [-44, -3, 268],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [75, 2, 282],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -1.4, 0],
            c: 10329501,
            t: 5
        }, {
            p: [89, 0, 266],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [100, -1, 348],
            s: [4, 2, 6],
            c: 7368816,
            t: 5
        }, {
            p: [164, -1, 342],
            s: [2, 27, 48],
            pe: 1,
            c: 7692103,
            t: 5
        }, {
            p: [132, 0, 292],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-178, -1, 235],
            s: [284, 74, 62],
            v: 1,
            t: 5
        }, {
            p: [-314, -1, 29],
            s: [48, 74, 463],
            v: 1,
            t: 5
        }, {
            p: [63, -1, -187],
            s: [870, 74, 62],
            v: 1,
            t: 5
        }, {
            p: [422, -1, 80],
            s: [48, 74, 252],
            v: 1,
            t: 5
        }, {
            p: [455, -1, -98],
            s: [48, 74, 116],
            v: 1,
            t: 5
        }, {
            p: [253, -1, 217],
            s: [320, 74, 118],
            v: 1,
            t: 5
        }, {
            p: [24, -1, 428],
            s: [168, 74, 119],
            v: 1,
            t: 5
        }, {
            p: [-47, -1, 363],
            s: [37, 74, 14],
            v: 1,
            t: 5
        }, {
            p: [182, -1, 326],
            s: [38, 86, 111],
            v: 1,
            t: 5
        }, {
            p: [-20, 1, 372],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [188, -1, 339],
            s: [4, 28, 4],
            col: 1,
            c: 6574655,
            t: 5
        }, {
            p: [189, 22, 341],
            s: [26, 28, 28],
            col: 1,
            c: 5204775,
            t: 5
        }, {
            p: [221, -1, 351],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [289, -1, 366],
            s: [1, 7, 1],
            col: 1,
            c: 6984507,
            t: 5
        }, {
            p: [113, 3, -37],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [167, 3, -75],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [164, 39, -13],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [249, 39, 47],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, -.53, 0],
            c: 9671571,
            t: 5
        }, {
            p: [-142, 2, 25],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-175, 2, -28],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-175, 4, -28],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [243, 2, 8],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [-129, 2, 12],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [-139, 2, 74],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [-139, 2, 81],
            s: [1, 17, 3],
            col: 1,
            r: [0, 0, .17],
            c: 7692103,
            t: 5
        }, {
            p: [158, 38, -22],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [158, 40, -22],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [202, 38, 77],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [209, 38, 77],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [145, 2, -22],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [145, 4, -22],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [188, 8, 88],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [188, 10, 88],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-93, 14, -70],
            s: [2, 4, 2],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [-93, 16, -70],
            s: [1, 4, 1],
            col: 1,
            pe: 1,
            c: 5211204,
            t: 5
        }, {
            p: [145, 39, 105],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [0, 1.39, 0],
            c: 9671571,
            t: 5
        }, {
            p: [168, 38, 106],
            s: [4, 22, 2],
            col: 1,
            r: [.17, 0, 0],
            c: 7692103,
            t: 5
        }, {
            p: [35, 1, 304],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [23, 1, 304],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [29, 13, 304],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-92, 32, -2],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [-92, 34, -2],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [-92, 31, -2],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [-92, 74, -2],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [-92, 72, -2],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [-92, 71, -2],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [183, 74, 39],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [183, 72, 39],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [183, 71, 39],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [183, 34, 39],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [272, 32, 39],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [183, 31, 39],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [272, 34, 39],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [183, 32, 39],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [272, 31, 39],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [294, 2, 23],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [288, 3, 9],
            s: [4, 0, 5],
            id: 4,
            col: 1,
            r: [-3.14, 1.4, -3.14],
            c: 9671571,
            t: 5
        }, {
            p: [-163, 32, -2],
            s: [7, 2, 7],
            c: 9012870,
            t: 5
        }, {
            p: [-163, 34, -2],
            s: [3, 2, 3],
            c: 9012870,
            t: 5
        }, {
            p: [-163, 31, -2],
            s: [3, 1, 3],
            col: 1,
            c: 0,
            e: 16767098,
            t: 5
        }, {
            p: [28, 1, 305],
            s: [72, 50, 63],
            id: 14,
            col: 1
        }, {
            p: [-89, 38, -8],
            s: [61, 50, 65],
            id: 14,
            col: 1
        }, {
            p: [184, 2, 37],
            s: [61, 33, 59],
            id: 14,
            col: 1
        }]
    }, {
        name: "Sandstorm",
        modURL: "",
        ambient: 9937064,
        light: 15923452,
        sky: 11180929,
        fog: 10654834,
        fogD: 633.4396002067896,
        camPos: [-124, 62, -269],
        spawns: [[0, 15, -3], [-77, 40, -347], [278, 38, 122], [-105, 52, 86], [241, 38, -322]],
        objects: [{
            p: [-5, 12, 0],
            s: [94, 1, 114],
            t: 1
        }, {
            p: [-67, 12, 0],
            s: [30, 1, 44],
            t: 1
        }, {
            p: [-178, 32, 0],
            s: [122, 1, 150],
            t: 1
        }, {
            p: [-163, 47, 157],
            s: [154, 1, 57],
            t: 1
        }, {
            p: [-135, 47, 102],
            s: [98, 1, 53],
            t: 1
        }, {
            p: [21, 47, 105],
            s: [214, 1, 52],
            t: 1
        }, {
            p: [1, 47, -26],
            s: [104, 1, 210],
            t: 1
        }, {
            p: [241, 32, 38],
            s: [126, 1, 185],
            t: 1
        }, {
            p: [132, 32, 0],
            s: [92, 1, 62],
            t: 1
        }, {
            p: [252, 32, -168],
            s: [78, 1, 227],
            t: 1
        }, {
            p: [221, 32, -309],
            s: [116, 1, 55],
            t: 1
        }, {
            p: [132, 32, -208],
            s: [62, 1, 257],
            t: 1
        }, {
            p: [-101, 32, -267],
            s: [244, 1, 196],
            t: 1
        }, {
            p: [61, 32, -309],
            s: [80, 1, 55],
            t: 1
        }, {
            p: [-175, 43, -138],
            s: [53, 1, 62],
            t: 1
        }, {
            p: [64, 13, 0],
            s: [44, 20, 46],
            id: 9,
            t: 1,
            d: 0
        }, {
            p: [-209, 33, 101],
            s: [38, 15, 55],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [-175, 33, -91],
            s: [53, 11, 32],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [-175, 33, -185],
            s: [53, 11, 32],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [80, 33, -106],
            s: [54, 15, 49],
            id: 9,
            t: 1,
            d: 2
        }, {
            p: [110, 33, 54],
            s: [36, 15, 50],
            id: 9,
            t: 1,
            d: 1
        }, {
            p: [-138, 24, 76],
            s: [104, 31, 6],
            c: 12497300,
            e: 3746078
        }, {
            p: [-187, 24, 104],
            s: [6, 31, 50],
            c: 12497300,
            e: 3746078
        }, {
            p: [159, 32, 103],
            s: [38, 1, 55],
            t: 1
        }, {
            p: [-50, 16, -219],
            s: [6, 22, 37],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 14, -246],
            s: [6, 38, 7],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 38, -207],
            s: [6, 12, 14],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 38, -217],
            s: [6, 4, 6],
            c: 12497300,
            e: 3746078
        }, {
            p: [220, 33, 125],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-103, 32, -128],
            s: [96, 2, 111],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-103, 109, -129],
            s: [100, 5, 117],
            c: 4408131,
            t: 2
        }, {
            p: [61, 87, -245],
            s: [87, 4, 77],
            c: 4868682,
            t: 2
        }, {
            p: [20, 87, -167],
            s: [169, 4, 79],
            c: 4868682,
            t: 2
        }, {
            p: [61, 30, -242],
            s: [82, 4, 79],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [20, 30, -166],
            s: [164, 4, 73],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [20, 32, -166],
            s: [162, 55, 71],
            c: 8349264,
            e: 2432793
        }, {
            p: [42, 32, -284],
            s: [15, 72, 7],
            c: 3091496,
            e: 3616548
        }, {
            p: [-33, 51, -202],
            s: [15, 1, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-40, 34, -202],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-26, 34, -202],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [42, 33, -285],
            s: [17, 1, 7],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-33, 34, -201],
            s: [13, 17, 2],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [-147, 114, -120],
            s: [35, 3, 15],
            c: 5263440,
            t: 2
        }, {
            p: [115, 73, -12],
            s: [2, 42, 2],
            col: 1,
            c: 12303291,
            t: 2
        }, {
            p: [-133, 33, -195],
            s: [36, 1, 19],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-159, 40, -308],
            s: [87, 1, 57],
            t: 1
        }, {
            p: [-187, 33, -268],
            s: [31, 8, 23],
            id: 9,
            t: 1,
            d: 3
        }, {
            p: [-141, 40, -270],
            s: [51, 1, 19],
            t: 1
        }, {
            p: [-169, 17, -270],
            s: [5, 29, 19],
            c: 12497300,
            e: 3746078
        }, {
            p: [-141, 17, -258],
            s: [61, 29, 5],
            c: 12497300,
            e: 3746078
        }, {
            p: [-113, 17, -299],
            s: [5, 29, 77],
            c: 12497300,
            e: 3746078
        }, {
            p: [-103, 17, -129],
            s: [94, 92, 111],
            c: 10191214,
            e: 4077098
        }, {
            p: [-97, 33, -349],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-197, 44, -155],
            s: [1, 19, 6],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-229, 32, -162],
            s: [56, 45, 111],
            c: 10652266,
            e: 2432532
        }, {
            p: [-229, 77, -162],
            s: [61, 3, 115],
            c: 4868682,
            t: 2
        }, {
            p: [-248, 32, -309],
            s: [93, 94, 111],
            c: 7691850,
            e: 3222046
        }, {
            p: [-248, 126, -309],
            s: [101, 5, 117],
            c: 5723991,
            t: 2
        }, {
            p: [-241, 32, -237],
            s: [56, 33, 111],
            c: 7038557,
            e: 5390122
        }, {
            p: [-241, 65, -237],
            s: [62, 3, 111],
            c: 4868682,
            t: 2
        }, {
            p: [-241, 31, -236],
            s: [58, 3, 35],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-229, 31, -162],
            s: [58, 3, 113],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-250, 29, -309],
            s: [99, 5, 113],
            col: 1,
            c: 5723991,
            t: 2
        }, {
            p: [-204, 102, -267],
            s: [6, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-340, 32, -199],
            s: [91, 73, 116],
            c: 10519402,
            e: 7892309
        }, {
            p: [-340, 105, -199],
            s: [97, 6, 122],
            c: 6381921,
            t: 2
        }, {
            p: [-197, 44, -163],
            s: [1, 19, 6],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-63, 32, -411],
            s: [81, 85, 111],
            c: 16765069,
            e: 1973790
        }, {
            p: [-170, 97, -392],
            s: [140, 6, 120],
            c: 4408131,
            t: 2
        }, {
            p: [-110, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-170, 32, -392],
            s: [133, 65, 111],
            c: 9860174,
            e: 3749164
        }, {
            p: [-63, 117, -411],
            s: [87, 6, 119],
            c: 5066061,
            t: 2
        }, {
            p: [-63, 154, -411],
            s: [58, 5, 56],
            c: 4868682,
            t: 2
        }, {
            p: [22, 32, -381],
            s: [91, 57, 87],
            c: 10519402,
            e: 3616035
        }, {
            p: [-203, 134, -483],
            s: [97, 7, 94],
            c: 5395026,
            t: 2
        }, {
            p: [-204, 101, -267],
            s: [7, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-204, 102, -288],
            s: [6, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-204, 102, -309],
            s: [6, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-204, 101, -288],
            s: [7, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-204, 101, -309],
            s: [7, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-103, 84, -129],
            s: [95, 2, 113],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-103, 59, -129],
            s: [96, 2, 113],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-63, 123, -411],
            s: [52, 32, 49],
            c: 16765069,
            e: 1973790
        }, {
            p: [-203, 57, -204],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-204, 56, -204],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [61, 32, -241],
            s: [80, 55, 79],
            c: 8349264,
            e: 2432793
        }, {
            p: [-63, 89, -411],
            s: [83, 2, 112],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-63, 59, -411],
            s: [83, 2, 112],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-250, 82, -309],
            s: [99, 2, 113],
            col: 1,
            c: 5723991,
            t: 2
        }, {
            p: [61, 59, -242],
            s: [82, 2, 79],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [20, 59, -166],
            s: [164, 2, 73],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-134, 67, -181],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-37, 97, -359],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-37, 96, -359],
            s: [10, 1, 9],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-63, 32, -411],
            s: [83, 2, 113],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-128, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-146, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-163, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-180, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-195, 82, -335],
            s: [4, 4, 16],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-134, 66, -184],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-75, 91, -184],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-75, 92, -181],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-133, 32, -194],
            s: [34, 27, 19],
            c: 10191214,
            e: 4077098
        }, {
            p: [88, 68, -277],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [88, 67, -280],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-58, 91, -94],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-237, 81, 150],
            s: [9, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-197, 41, -333],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-187, 41, -332],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-199, 41, -319],
            s: [2, 4, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [15, 45, -208],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [15, 33, -220],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-204, 32, -485],
            s: [91, 102, 87],
            c: 10519402,
            e: 3616035
        }, {
            p: [22, 89, -381],
            s: [98, 5, 93],
            c: 5395026,
            t: 2
        }, {
            p: [22, 59, -381],
            s: [92, 2, 88],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [22, 32, -381],
            s: [93, 2, 89],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-10, 68, -341],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [11, 68, -341],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-10, 67, -341],
            s: [10, 1, 9],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [11, 67, -341],
            s: [10, 1, 9],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [253, 32, -160],
            s: [64, 53, 72],
            c: 9860174,
            e: 3749164
        }, {
            p: [193, 95, -293],
            s: [74, 4, 121],
            c: 4868682,
            t: 2
        }, {
            p: [193, 65, -292],
            s: [69, 2, 114],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [193, 32, -285],
            s: [70, 2, 101],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [161, 75, -309],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [161, 74, -309],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [154, 59, -273],
            s: [20, 2, 44],
            c: 9539985,
            t: 2
        }, {
            p: [146, 33, -293],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [146, 33, -253],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [158, 33, -246],
            s: [1, 38, 4],
            id: 3,
            d: 2
        }, {
            p: [-8, 55, -258],
            s: [9, 3, 3],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-2, 55, -258],
            s: [3, 8, 3],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-14, 75, -258],
            s: [30, 27, 31],
            c: 5988172,
            t: 5
        }, {
            p: [-2, 63, -258],
            s: [10, 9, 10],
            c: 5988172,
            t: 5
        }, {
            p: [129, 32, -403],
            s: [124, 73, 93],
            c: 9860174,
            e: 3749164
        }, {
            p: [132, 32, -464],
            s: [295, 1, 255],
            t: 1
        }, {
            p: [129, 105, -404],
            s: [132, 5, 121],
            c: 5395026,
            t: 2
        }, {
            p: [168, 33, -404],
            s: [44, 1, 115],
            col: 1,
            c: 985865,
            t: 5
        }, {
            p: [129, 33, -355],
            s: [37, 36, 6],
            c: 8553090,
            t: 2
        }, {
            p: [134, 43, -355],
            s: [3, 8, 8],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [236, 32, -367],
            s: [90, 32, 61],
            c: 10652266,
            e: 2432532
        }, {
            p: [236, 64, -367],
            s: [97, 5, 68],
            c: 5395026,
            t: 2
        }, {
            p: [241, 44, -340],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [241, 43, -340],
            s: [10, 1, 9],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [236, 29, -367],
            s: [92, 5, 63],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [74, 33, -341],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [57, 33, -288],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [261, 33, -330],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [273, 33, -330],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-213, 59, -249],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-213, 59, -231],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-213, 59, -240],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-213, 59, -222],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-14, 33, -258],
            s: [5, 42, 5],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-65, 33, -188],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-67, 28, -196],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-59, 33, -324],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-59, 33, -336],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-59, 33, -348],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-59, 45, -348],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-50, 16, -348],
            s: [6, 40, 67],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 16, -270],
            s: [6, 40, 41],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 14, -240],
            s: [6, 31, 5],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 38, -233],
            s: [6, 2, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 50, -204],
            s: [6, 6, 5],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -286],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -270],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -254],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -200],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -319],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -335],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [-50, 56, -351],
            s: [6, 3, 9],
            c: 12497300,
            e: 3746078
        }, {
            p: [15, 33, -208],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [3, 33, -208],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-9, 33, -208],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-71, 33, -352],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-76, 30, -350],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-82, 32, -354],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [16, 31, -235],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [18, 33, -242],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [17, 28, -251],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-158, 41, -329],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-146, 41, -329],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-124, 41, -269],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [169, 32, -352],
            s: [44, 73, 9],
            c: 9860174,
            e: 3749164
        }, {
            p: [90, 32, -352],
            s: [46, 73, 9],
            c: 9860174,
            e: 3749164
        }, {
            p: [130, 69, -352],
            s: [34, 36, 9],
            c: 9860174,
            e: 3749164
        }, {
            p: [-210, 33, -222],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-207, 29, -231],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-198, 31, -206],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-44, 33, -338],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-40, 29, -341],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [86, 33, -341],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [319, 32, -317],
            s: [79, 58, 183],
            c: 16765069,
            e: 1973790
        }, {
            p: [319, 90, -317],
            s: [87, 4, 189],
            c: 4868682,
            t: 2
        }, {
            p: [319, 60, -281],
            s: [80, 2, 112],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [319, 32, -281],
            s: [81, 2, 113],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [281, 70, -240],
            s: [4, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [281, 70, -270],
            s: [4, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [282, 69, -270],
            s: [7, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [282, 69, -240],
            s: [7, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [225, 77, -332],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [225, 76, -332],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [126, 43, -355],
            s: [3, 8, 8],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [327, 32, -470],
            s: [142, 99, 87],
            c: 10519402,
            e: 3616035
        }, {
            p: [328, 130, -470],
            s: [152, 4, 96],
            c: 4868682,
            t: 2
        }, {
            p: [240, 64, -417],
            s: [23, 24, 21],
            c: 5988172,
            t: 5
        }, {
            p: [228, 65, -438],
            s: [30, 31, 31],
            c: 5988172,
            t: 5
        }, {
            p: [267, 63, -420],
            s: [20, 23, 23],
            c: 5988172,
            t: 5
        }, {
            p: [210, 54, -417],
            s: [30, 28, 31],
            c: 5988172,
            t: 5
        }, {
            p: [196, 67, -441],
            s: [21, 22, 26],
            c: 5988172,
            t: 5
        }, {
            p: [259, 52, -412],
            s: [23, 26, 21],
            c: 5988172,
            t: 5
        }, {
            p: [191, 32, -555],
            s: [109, 76, 87],
            c: 10519402,
            e: 3616035
        }, {
            p: [191, 105, -557],
            s: [113, 5, 100],
            c: 5395026,
            t: 2
        }, {
            p: [325, 32, -186],
            s: [80, 77, 79],
            c: 8349264,
            e: 2432793
        }, {
            p: [326, 109, -186],
            s: [88, 4, 86],
            c: 4868682,
            t: 2
        }, {
            p: [326, 86, -186],
            s: [83, 2, 80],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [326, 60, -186],
            s: [83, 2, 80],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [168, 62, -160],
            s: [20, 2, 44],
            c: 9539985,
            t: 2
        }, {
            p: [176, 64, -180],
            s: [2, 7, 2],
            c: 9539985,
            t: 2
        }, {
            p: [176, 71, -160],
            s: [3, 1, 44],
            c: 9539985,
            t: 2
        }, {
            p: [171, 71, -181],
            s: [7, 1, 2],
            c: 9539985,
            t: 2
        }, {
            p: [167, 64, -160],
            s: [1, 17, 13],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [167, 81, -160],
            s: [2, 1, 15],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [167, 64, -167],
            s: [2, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [299, 32, -100],
            s: [52, 40, 93],
            c: 10652266,
            e: 2432532
        }, {
            p: [326, 32, -185],
            s: [84, 2, 79],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [299, 72, -100],
            s: [57, 5, 97],
            c: 5395026,
            t: 2
        }, {
            p: [278, 29, -100],
            s: [12, 5, 95],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [276, 58, -187],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [276, 58, -175],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7039851,
            t: 5
        }, {
            p: [276, 58, -171],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [276, 58, -163],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [276, 58, -155],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [276, 58, -179],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [276, 58, -167],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7039851,
            t: 5
        }, {
            p: [276, 58, -159],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7039851,
            t: 5
        }, {
            p: [276, 58, -183],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7039851,
            t: 5
        }, {
            p: [268, 33, -155],
            s: [2, 25, 2],
            c: 9539985,
            t: 2
        }, {
            p: [265, 39, -256],
            s: [3, 1, 30],
            c: 9539985,
            t: 2
        }, {
            p: [265, 33, -256],
            s: [1, 6, 30],
            c: 9539985,
            t: 2
        }, {
            p: [241, 33, -281],
            s: [1, 6, 30],
            c: 9539985,
            t: 2
        }, {
            p: [241, 39, -281],
            s: [3, 1, 30],
            c: 9539985,
            t: 2
        }, {
            p: [233, 62, -265],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 4399894,
            t: 5
        }, {
            p: [233, 62, -269],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 6710886,
            t: 5
        }, {
            p: [233, 62, -277],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 6710886,
            t: 5
        }, {
            p: [233, 62, -293],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 6710886,
            t: 5
        }, {
            p: [233, 62, -273],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 4399894,
            t: 5
        }, {
            p: [233, 62, -281],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 4399894,
            t: 5
        }, {
            p: [233, 62, -289],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 4399894,
            t: 5
        }, {
            p: [233, 62, -297],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 4399894,
            t: 5
        }, {
            p: [-133, 59, -195],
            s: [36, 2, 19],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-133, 34, -203],
            s: [13, 17, 2],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [-140, 34, -204],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-126, 34, -204],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-133, 51, -204],
            s: [15, 1, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-133, 60, -194],
            s: [34, 1, 19],
            pe: 1,
            v: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-121, 41, -333],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-132, 41, -331],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [173, 64, -160],
            s: [10, 36, 44],
            pe: 1,
            v: 1,
            c: 9539985,
            t: 2
        }, {
            p: [215, 33, -179],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [215, 33, -167],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [199, 33, -86],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [173, 30, -341],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [325, 32, -14],
            s: [80, 55, 79],
            c: 8349264,
            e: 2432793
        }, {
            p: [319, 32, 135],
            s: [68, 76, 115],
            c: 9860174,
            e: 3749164
        }, {
            p: [325, 87, -14],
            s: [86, 5, 85],
            c: 5395026,
            t: 2
        }, {
            p: [325, 29, -14],
            s: [82, 5, 81],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [304, 32, 30],
            s: [13, 43, 9],
            c: 10191214,
            e: 4077098
        }, {
            p: [304, 32, 73],
            s: [13, 43, 9],
            c: 10191214,
            e: 4077098
        }, {
            p: [304, 75, 51],
            s: [13, 9, 53],
            c: 10191214,
            e: 4077098
        }, {
            p: [302, 43, 57],
            s: [3, 8, 3],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [302, 43, 47],
            s: [3, 8, 3],
            col: 1,
            c: 3421236,
            t: 5
        }, {
            p: [302, 33, 51],
            s: [1, 42, 39],
            c: 8553090,
            t: 2
        }, {
            p: [325, 60, -14],
            s: [81, 2, 80],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [304, 77, 51],
            s: [26, 4, 4],
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [304, 77, 62],
            s: [26, 4, 4],
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [304, 77, 72],
            s: [26, 4, 4],
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [304, 77, 40],
            s: [26, 4, 4],
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [304, 77, 30],
            s: [26, 4, 4],
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [431, 12, -96],
            s: [92, 102, 160],
            c: 10519402,
            e: 3616035
        }, {
            p: [431, 113, -96],
            s: [99, 4, 165],
            c: 4868682,
            t: 2
        }, {
            p: [319, 108, 135],
            s: [74, 5, 121],
            c: 5395026,
            t: 2
        }, {
            p: [319, 83, 135],
            s: [69, 2, 116],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [319, 56, 135],
            s: [69, 2, 116],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [287, 68, -35],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [287, 67, -35],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [287, 65, 94],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [287, 64, 94],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [287, 64, 94],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [94, -2, -52],
            s: [80, 114, 59],
            c: 9860174,
            e: 3749164
        }, {
            p: [180, 32, -48],
            s: [92, 40, 63],
            c: 8349264,
            e: 2432793
        }, {
            p: [180, 72, -48],
            s: [95, 4, 66],
            c: 4868682,
            t: 2
        }, {
            p: [94, 111, -52],
            s: [88, 4, 67],
            c: 4868682,
            t: 2
        }, {
            p: [94, 32, -52],
            s: [82, 2, 61],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [180, 32, -48],
            s: [94, 2, 65],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [319, 32, 135],
            s: [70, 2, 117],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [92, 33, -404],
            s: [44, 1, 115],
            col: 1,
            c: 985865,
            t: 5
        }, {
            p: [-144, 32, -345],
            s: [83, 2, 19],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [275, 49, -103],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [275, 48, -103],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [271, 32, -76],
            s: [8, 54, 15],
            c: 3091496,
            e: 3616548
        }, {
            p: [269, 29, -76],
            s: [6, 5, 17],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-156, 44, -136],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-148, 92, -88],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-147, 91, -88],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [280, 33, 0],
            s: [1, 23, 6],
            col: 1,
            r: [0, 0, -.18],
            c: 8684676,
            t: 2
        }, {
            p: [281, 33, 10],
            s: [1, 18, 6],
            col: 1,
            r: [0, 0, -.18],
            c: 8684676,
            t: 2
        }, {
            p: [240, 32, 163],
            s: [92, 51, 64],
            c: 10191214,
            e: 4077098
        }, {
            p: [240, 83, 163],
            s: [97, 5, 70],
            c: 5395026,
            t: 2
        }, {
            p: [239, 56, 163],
            s: [91, 2, 65],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [240, 32, 163],
            s: [90, 2, 66],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [235, 57, 123],
            s: [49, 2, 17],
            c: 9539985,
            t: 2
        }, {
            p: [213, 32, 117],
            s: [2, 28, 2],
            c: 9539985,
            t: 2
        }, {
            p: [257, 32, 117],
            s: [2, 28, 2],
            c: 9539985,
            t: 2
        }, {
            p: [205, 33, 130],
            s: [5, 34, 1],
            id: 3,
            d: 3
        }, {
            p: [94, 59, -52],
            s: [81, 2, 60],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [94, 86, -52],
            s: [81, 2, 60],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [132, 93, -33],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [132, 92, -33],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [226, 34, -67],
            s: [1, 17, 13],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [226, 34, -60],
            s: [2, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [226, 51, -67],
            s: [2, 1, 15],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [226, 34, -74],
            s: [2, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [115, 115, -24],
            s: [15, 3, 37],
            c: 5263440,
            t: 2
        }, {
            p: [-159, 76, -120],
            s: [2, 38, 2],
            col: 1,
            c: 12303291,
            t: 2
        }, {
            p: [158, 32, 72],
            s: [60, 68, 93],
            c: 10191214,
            e: 4077098
        }, {
            p: [158, 67, 72],
            s: [61, 2, 94],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [142, 75, 31],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [142, 74, 31],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [213, 84, -278],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [213, 83, -281],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [194, 33, 34],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [154, 32, 158],
            s: [80, 43, 79],
            c: 8349264,
            e: 2432793
        }, {
            p: [154, 75, 154],
            s: [85, 5, 75],
            c: 5395026,
            t: 2
        }, {
            p: [77, 32, 169],
            s: [74, 69, 79],
            c: 10652266,
            e: 2432532
        }, {
            p: [192, 33, 125],
            s: [6, 1, 15],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [271, 64, 134],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [271, 63, 131],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [77, 101, 169],
            s: [81, 5, 87],
            c: 5395026,
            t: 2
        }, {
            p: [77, 76, 169],
            s: [74, 2, 80],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [77, 47, 169],
            s: [74, 2, 81],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [102, 84, 132],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [102, 83, 130],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [154, 33, 115],
            s: [47, 1, 5],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [215, 30, -157],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [218, 32, -142],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [250, 28, -117],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [282, 30, -50],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [280, 32, -42],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [269, 31, -60],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [191, 32, 51],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [194, 29, 58],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [191, 29, 76],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [243, 32, -333],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [251, 30, -329],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [152, 47, -19],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [152, 46, -16],
            s: [10, 1, 1],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [115, 33, -16],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [127, 33, -16],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [69, 94, -78],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [69, 93, -81],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [119, 34, -81],
            s: [13, 17, 2],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [112, 34, -82],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [119, 51, -82],
            s: [15, 1, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [126, 34, -82],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [67, 94, -25],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [142, 79, 28],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [79, 61, 14],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [142, 78, 26],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [67, 93, -23],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [182, 79, 32],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [182, 78, 32],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-97, 33, -199],
            s: [30, 6, 1],
            c: 9539985,
            t: 2
        }, {
            p: [-113, 33, -199],
            s: [2, 25, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-81, 33, -199],
            s: [2, 25, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-97, 39, -199],
            s: [30, 1, 3],
            c: 9539985,
            t: 2
        }, {
            p: [-81, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 4081241,
            t: 5
        }, {
            p: [-113, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 4081241,
            t: 5
        }, {
            p: [-85, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 8026746,
            t: 5
        }, {
            p: [-109, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 8026746,
            t: 5
        }, {
            p: [-105, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 4081241,
            t: 5
        }, {
            p: [-101, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 8026746,
            t: 5
        }, {
            p: [-97, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 4081241,
            t: 5
        }, {
            p: [-89, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 4081241,
            t: 5
        }, {
            p: [-93, 58, -193],
            s: [4, 2, 20],
            col: 1,
            r: [-.17, 0, 0],
            c: 8026746,
            t: 5
        }, {
            p: [-75, 29, -187],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [65, 82, 51],
            s: [58, 4, 80],
            c: 4868682,
            t: 2
        }, {
            p: [143, 33, 22],
            s: [4, 17, 1],
            col: 1,
            r: [.17, 0, 0],
            c: 8684676,
            t: 2
        }, {
            p: [149, 33, 22],
            s: [4, 17, 1],
            col: 1,
            r: [.17, 0, 0],
            c: 8684676,
            t: 2
        }, {
            p: [65, 54, 51],
            s: [55, 2, 75],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [79, 62, 16],
            s: [9, 14, 5],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-102, -3, -17],
            s: [42, 96, 62],
            c: 9860174,
            e: 3749164
        }, {
            p: [-102, 92, -17],
            s: [47, 4, 67],
            c: 4868682,
            t: 2
        }, {
            p: [-102, 32, -18],
            s: [44, 2, 62],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [240, 32, -120],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [206, 13, -15],
            s: [15, 74, 7],
            c: 3091496,
            e: 3616548
        }, {
            p: [206, 32, -13],
            s: [17, 2, 5],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [180, 30, 115],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [191, 27, 115],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [282, 28, -13],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [189, 31, -14],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [175, 28, -12],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [166, 29, -14],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [102, 29, -17],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [132, 31, 22],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [275, 31, -311],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [276, 32, -287],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [274, 29, -274],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [276, 30, -268],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-119, 40, -278],
            s: [2, 8, 2],
            col: 1,
            pe: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-121, 37, -286],
            s: [2, 8, 2],
            col: 1,
            pe: 1,
            c: 5988172,
            t: 5
        }, {
            p: [108, 33, -169],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [106, 33, -179],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [106, 33, -187],
            s: [7, 8, 7],
            id: 2,
            r: [0, -1.57, 0]
        }, {
            p: [-87, -3, 47],
            s: [62, 104, 66],
            c: 10191214,
            e: 4077098
        }, {
            p: [-87, 100, 47],
            s: [67, 4, 72],
            c: 4868682,
            t: 2
        }, {
            p: [-87, 102, 48],
            s: [45, 10, 55],
            c: 10191214,
            e: 4077098
        }, {
            p: [-87, 112, 48],
            s: [51, 4, 61],
            c: 4868682,
            t: 2
        }, {
            p: [-87, 76, 47],
            s: [63, 2, 67],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-87, 52, 47],
            s: [63, 2, 67],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-67, 84, 26],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-67, 83, 23],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-120, 71, -35],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-120, 70, -35],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-116, 59, 68],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-115, 58, 68],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-87, 32, 47],
            s: [64, 2, 64],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [73, 32, 52],
            s: [40, 2, 78],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [65, 13, 51],
            s: [54, 69, 74],
            c: 9860174,
            e: 3749164
        }, {
            p: [28, 12, -46],
            s: [169, 2, 54],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [27, 12, 37],
            s: [167, 2, 52],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-67, 83, 16],
            s: [9, 14, 5],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-67, 82, 15],
            s: [10, 1, 4],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [13, 32, 155],
            s: [55, 54, 63],
            c: 10191214,
            e: 4077098
        }, {
            p: [-52, 46, -28],
            s: [8, 31, 218],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 46, -28],
            s: [8, 31, 117],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 77, -80],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 77, -58],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 77, -36],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 77, -14],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [50, 77, 8],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, 8],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, 30],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, 53],
            s: [8, 5, 14],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, 75],
            s: [8, 5, 12],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -14],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -36],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -58],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -80],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -102],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-52, 77, -124],
            s: [8, 5, 13],
            c: 10652266,
            e: 2432532
        }, {
            p: [-1, 14, 19],
            s: [110, 32, 14],
            c: 10652266,
            e: 2432532
        }, {
            p: [-1, 14, -51],
            s: [110, 32, 62],
            c: 10652266,
            e: 2432532
        }, {
            p: [-1, 46, -2],
            s: [94, 1, 57],
            c: 10652266,
            e: 2432532
        }, {
            p: [233, 31, -174],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [231, 31, -188],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [2, 10, -17],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-26, 8, -16],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-12, 10, 9],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-36, 11, -17],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [19, 12, 10],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [34, 10, -18],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [89, 80, -351],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [89, 79, -351],
            s: [10, 1, 9],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-51, 32, 188],
            s: [73, 76, 115],
            c: 8349264,
            e: 2432793
        }, {
            p: [-124, 32, 215],
            s: [73, 76, 61],
            c: 8349264,
            e: 2432793
        }, {
            p: [-197, 32, 217],
            s: [73, 52, 79],
            c: 10652266,
            e: 2432532
        }, {
            p: [13, 86, 160],
            s: [61, 5, 79],
            c: 5395026,
            t: 2
        }, {
            p: [13, 47, 163],
            s: [57, 2, 81],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-52, 47, 157],
            s: [73, 2, 55],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-126, 47, 211],
            s: [75, 2, 55],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-265, -3, 183],
            s: [63, 104, 108],
            c: 10191214,
            e: 4077098
        }, {
            p: [-268, 32, 74],
            s: [84, 85, 111],
            c: 16765069,
            e: 1973790
        }, {
            p: [-268, 32, -10],
            s: [73, 46, 60],
            c: 10652266,
            e: 2432532
        }, {
            p: [-232, 32, -73],
            s: [68, 77, 67],
            c: 10191214,
            e: 4077098
        }, {
            p: [-51, 108, 187],
            s: [81, 5, 121],
            c: 5395026,
            t: 2
        }, {
            p: [-128, 108, 214],
            s: [73, 5, 68],
            c: 5395026,
            t: 2
        }, {
            p: [-70, 32, 128],
            s: [15, 93, 9],
            c: 3091496,
            e: 3616548
        }, {
            p: [-70, 47, 126],
            s: [17, 2, 7],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [0, 63, 126],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [0, 62, 124],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-29, 89, 133],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-51, 89, 133],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-29, 88, 131],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-51, 88, 131],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-52, 77, 157],
            s: [73, 2, 55],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-126, 77, 211],
            s: [75, 2, 55],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-117, 50, 154],
            s: [25, 1, 25],
            t: 1
        }, {
            p: [-14, 24, -245],
            s: [29, 13, 3],
            c: 12497300,
            e: 3746078
        }, {
            p: [-117, 24, 168],
            s: [31, 28, 3],
            c: 12497300,
            e: 3746078
        }, {
            p: [-103, 24, 154],
            s: [3, 28, 25],
            c: 12497300,
            e: 3746078
        }, {
            p: [-131, 24, 154],
            s: [3, 28, 25],
            c: 12497300,
            e: 3746078
        }, {
            p: [-117, 48, 154],
            s: [5, 45, 5],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-117, 92, 154],
            s: [30, 27, 30],
            c: 5988172,
            t: 5
        }, {
            p: [-123, 69, 154],
            s: [10, 4, 4],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-130, 69, 154],
            s: [4, 9, 4],
            pe: 1,
            c: 11316396,
            t: 2
        }, {
            p: [-130, 78, 154],
            s: [10, 11, 10],
            c: 5988172,
            t: 5
        }, {
            p: [-145, 89, 187],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-145, 88, 185],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-196, 47, 180],
            s: [73, 2, 7],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-242, 47, 154],
            s: [19, 2, 57],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-242, 73, 154],
            s: [19, 2, 57],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-196, 84, 214],
            s: [80, 5, 81],
            c: 5395026,
            t: 2
        }, {
            p: [67, 33, -285],
            s: [7, 8, 7],
            id: 2,
            r: [0, -1.57, 0]
        }, {
            p: [-265, 101, 178],
            s: [70, 5, 124],
            c: 5395026,
            t: 2
        }, {
            p: [-228, 32, 49],
            s: [5, 2, 62],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-234, 32, -9],
            s: [7, 2, 63],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-214, 32, -71],
            s: [34, 2, 65],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-236, 82, 150],
            s: [6, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-59, 90, -94],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-265, 117, 74],
            s: [86, 5, 119],
            c: 5395026,
            t: 2
        }, {
            p: [431, 40, -96],
            s: [66, 102, 125],
            c: 10519402,
            e: 3616035
        }, {
            p: [431, 141, -96],
            s: [77, 4, 135],
            c: 4868682,
            t: 2
        }, {
            p: [-266, 78, -11],
            s: [78, 5, 59],
            c: 5395026,
            t: 2
        }, {
            p: [-232, 109, -73],
            s: [74, 5, 72],
            c: 5395026,
            t: 2
        }, {
            p: [-239, 62, 74],
            s: [27, 2, 112],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-268, 88, 74],
            s: [85, 2, 112],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-243, 60, -73],
            s: [91, 2, 68],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-232, 84, -73],
            s: [69, 2, 68],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [-278, 78, -70],
            s: [54, 5, 59],
            c: 5395026,
            t: 2
        }, {
            p: [-227, 48, 171],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-215, 48, 171],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-78, 48, 86],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-176, 48, 87],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-125, 33, 67],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-137, 33, 67],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-90, 48, 86],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-225, 33, -34],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-213, 33, -34],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-129, 33, -33],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-116, 83, 28],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-115, 82, 28],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-179, 48, 174],
            s: [6, 19, 1],
            col: 1,
            r: [.17, 0, 0],
            c: 8684676,
            t: 2
        }, {
            p: [-189, 48, 174],
            s: [6, 19, 1],
            col: 1,
            r: [.17, 0, 0],
            c: 8684676,
            t: 2
        }, {
            p: [-228, 122, 42],
            s: [35, 3, 15],
            c: 5263440,
            t: 2
        }, {
            p: [-217, 69, 42],
            s: [2, 53, 2],
            col: 1,
            c: 12303291,
            t: 2
        }, {
            p: [-232, 34, 3],
            s: [2, 17, 13],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [-231, 34, -4],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-231, 34, 10],
            s: [1, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-231, 51, 3],
            s: [1, 1, 15],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-211, 92, -43],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-211, 91, -40],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-232, 72, 14],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-232, 72, -11],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-232, 72, 1],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-232, 72, -24],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-232, 72, -35],
            s: [10, 3, 3],
            col: 1,
            pe: 1,
            c: 7039851,
            t: 2
        }, {
            p: [-229, 98, 112],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-229, 98, 89],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-229, 97, 112],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-229, 97, 89],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-222, 32, 59],
            s: [1, 23, 4],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-222, 33, 52],
            s: [1, 16, 4],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-1, 45, -4],
            s: [2, 1, 29],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 45, -4],
            s: [2, 1, 28],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-56, 13, -19],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-56, 13, 11],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-56, 45, -4],
            s: [2, 2, 28],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [54, 13, 11],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [54, 45, -4],
            s: [2, 2, 28],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [280, 77, -122],
            s: [19, 22, 53],
            pe: 1,
            v: 1,
            c: 9539985,
            t: 2
        }, {
            p: [47, 48, 123],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [110, 48, 125],
            s: [7, 8, 7],
            id: 2,
            r: [0, 1.57, 0]
        }, {
            p: [40, 48, -78],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [29, 47, -28],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [29, 47, 4],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [36, 77, 4],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 5385783,
            t: 5
        }, {
            p: [36, 77, -4],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 5385783,
            t: 5
        }, {
            p: [36, 77, 0],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7237230,
            t: 5
        }, {
            p: [36, 77, -8],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7237230,
            t: 5
        }, {
            p: [36, 77, -12],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 5385783,
            t: 5
        }, {
            p: [36, 77, -16],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7237230,
            t: 5
        }, {
            p: [36, 77, -20],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 5385783,
            t: 5
        }, {
            p: [36, 77, -24],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7237230,
            t: 5
        }, {
            p: [36, 77, -28],
            s: [21, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 5385783,
            t: 5
        }, {
            p: [29, 47, -12],
            s: [1, 7, 30],
            c: 9539985,
            t: 2
        }, {
            p: [29, 54, -12],
            s: [3, 1, 30],
            c: 9539985,
            t: 2
        }, {
            p: [40, 48, -66],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [46, 47, 4],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [46, 47, -28],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 47, 8],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-38, 77, 8],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 3030610,
            t: 5
        }, {
            p: [-38, 77, 12],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, 20],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, 16],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 3030610,
            t: 5
        }, {
            p: [-38, 77, 24],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 3030610,
            t: 5
        }, {
            p: [-38, 77, 28],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, 32],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 3030610,
            t: 5
        }, {
            p: [-38, 77, 36],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, 40],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 3030610,
            t: 5
        }, {
            p: [-30, 47, 40],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-30, 47, 24],
            s: [1, 7, 30],
            c: 9539985,
            t: 2
        }, {
            p: [-30, 54, 24],
            s: [3, 1, 30],
            c: 9539985,
            t: 2
        }, {
            p: [-48, 47, 8],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-48, 47, 40],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [54, 13, -19],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 13, -19],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 13, 11],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-1, 13, 11],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [28, 13, 11],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [28, 13, -19],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-1, 13, -19],
            s: [2, 34, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [28, 45, -4],
            s: [2, 2, 28],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 47, -59],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-38, 77, -59],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 5849386,
            t: 5
        }, {
            p: [-38, 77, -63],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, -67],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 5849386,
            t: 5
        }, {
            p: [-38, 77, -71],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, -75],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 5849386,
            t: 5
        }, {
            p: [-38, 77, -79],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, -83],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 5849386,
            t: 5
        }, {
            p: [-38, 77, -87],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 7895160,
            t: 5
        }, {
            p: [-38, 77, -91],
            s: [22, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 5849386,
            t: 5
        }, {
            p: [-30, 47, -91],
            s: [2, 30, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-48, 47, -59],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-48, 47, -91],
            s: [2, 32, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-30, 47, -75],
            s: [1, 7, 30],
            c: 9539985,
            t: 2
        }, {
            p: [-30, 54, -75],
            s: [3, 1, 30],
            c: 9539985,
            t: 2
        }, {
            p: [-44, 47, -17],
            s: [1, 23, 5],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-44, 47, -8],
            s: [1, 23, 5],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [-42, 48, -124],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [155, 33, -314],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [153, 30, -307],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [155, 31, -336],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [105, 30, -253],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [107, 29, -218],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [104, 33, -210],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [104, 33, -158],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [106, 29, -152],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [146, 30, -84],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [137, 33, -82],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [138, 33, -120],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [32, 48, 43],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [32, 48, 67],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [32, 48, 55],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-36, 46, 77],
            s: [24, 31, 8],
            c: 10652266,
            e: 2432532
        }, {
            p: [26, 46, 77],
            s: [24, 31, 8],
            c: 10652266,
            e: 2432532
        }, {
            p: [-46, 77, 77],
            s: [4, 5, 8],
            c: 10652266,
            e: 2432532
        }, {
            p: [-30, 77, 77],
            s: [8, 5, 12],
            r: [0, -1.57, 0],
            c: 10652266,
            e: 2432532
        }, {
            p: [20, 77, 77],
            s: [8, 5, 12],
            r: [0, -1.57, 0],
            c: 10652266,
            e: 2432532
        }, {
            p: [36, 77, 77],
            s: [4, 5, 8],
            c: 10652266,
            e: 2432532
        }, {
            p: [-42, 48, 67],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [1, 45, -129],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-7, 43, -127],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-31, 46, -129],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-46, 44, -107],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-44, 45, -100],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-33, 45, 71],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-32, 45, 65],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [41, 46, -57],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [43, 46, -49],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [32, 46, 34],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [36, 46, 29],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [34, 46, 18],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [126, 46, 104],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [125, 46, 115],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [69, 46, 126],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [58, 46, 124],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [35, 46, 84],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [29, 46, 86],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [44, 46, 90],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-11, 46, 120],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-26, 44, 128],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-111, 43, 87],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-100, 46, 85],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-159, 45, 82],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-181, 45, 111],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-178, 43, 122],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-206, 45, 172],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-197, 43, 174],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-83, 44, 127],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-123, 49, 161],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-125, 46, 148],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-108, 47, 151],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-229, 30, -13],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-227, 33, -22],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-221, 30, 43],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-222, 30, 33],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-124, 33, 58],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-121, 33, 40],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-123, 33, 31],
            s: [2, 6, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-125, 33, -42],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-128, 33, -15],
            s: [2, 4, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-126, 33, -24],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [227, 33, -297],
            s: [3, 31, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [227, 33, -265],
            s: [3, 30, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [280, 33, -240],
            s: [4, 31, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [285, 33, -155],
            s: [3, 28, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [-8, 32, -265],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-16, 30, -251],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-22, 31, -260],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-159, 41, -308],
            s: [84, 50, 56],
            id: 14,
            col: 1
        }, {
            p: [240, 33, 106],
            s: [87, 50, 45],
            id: 14,
            col: 1
        }, {
            p: [-151, 48, 104],
            s: [64, 50, 48],
            id: 14,
            col: 1
        }, {
            p: [10, 48, -23],
            s: [69, 50, 72],
            id: 14,
            col: 1
        }, {
            p: [-1, 48, -35],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-1, 48, -23],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [3, 47, -44],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [8, 44, -33],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-194, 41, -309],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-194, 53, -309],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [158, 100, 72],
            s: [67, 4, 101],
            c: 4868682,
            t: 2
        }, {
            p: [158, 32, 72],
            s: [62, 2, 95],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [126, 41, 94],
            s: [6, 74, 12],
            c: 3091496,
            e: 3616548
        }, {
            p: [186, 79, 99],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [186, 78, 99],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [169, 32, -341],
            s: [22, 2, 11],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [153, 33, -325],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [188, 32, -158],
            s: [50, 1, 164],
            t: 1
        }, {
            p: [134, 32, -160],
            s: [66, 76, 72],
            c: 10191214,
            e: 4077098
        }, {
            p: [193, 32, -292],
            s: [68, 63, 113],
            c: 10191214,
            e: 4077098
        }, {
            p: [273, 62, -240],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [273, 62, -244],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7895160,
            t: 5
        }, {
            p: [273, 62, -252],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7895160,
            t: 5
        }, {
            p: [273, 62, -248],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [273, 62, -256],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [273, 62, -264],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [273, 62, -260],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7895160,
            t: 5
        }, {
            p: [273, 62, -272],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 6116223,
            t: 1
        }, {
            p: [273, 62, -268],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, .17],
            c: 7895160,
            t: 5
        }, {
            p: [280, 33, -272],
            s: [4, 31, 2],
            col: 1,
            c: 9539985,
            t: 2
        }, {
            p: [134, 108, -160],
            s: [71, 4, 77],
            c: 4868682,
            t: 2
        }, {
            p: [56, 94, -68],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [57, 93, -68],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [130, 79, 44],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [131, 78, 44],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [130, 79, 69],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [131, 78, 69],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [246, 29, -160],
            s: [52, 5, 74],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [278, 29, -174],
            s: [12, 5, 46],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [252, 60, -160],
            s: [63, 2, 73],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [284, 60, -160],
            s: [1, 2, 73],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [253, 85, -160],
            s: [69, 4, 77],
            c: 4868682,
            t: 2
        }, {
            p: [135, 29, -160],
            s: [66, 5, 74],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [135, 59, -160],
            s: [66, 2, 73],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [101, 59, -126],
            s: [2, 2, 5],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [101, 59, -129],
            s: [2, 2, 1],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [134, 84, -160],
            s: [67, 2, 73],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [176, 64, -140],
            s: [2, 7, 2],
            c: 9539985,
            t: 2
        }, {
            p: [171, 71, -139],
            s: [7, 1, 2],
            c: 9539985,
            t: 2
        }, {
            p: [167, 64, -153],
            s: [2, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [161, 75, -333],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [161, 74, -333],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [171, 33, -155],
            s: [1, 20, 6],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [171, 33, -142],
            s: [1, 20, 6],
            col: 1,
            r: [0, 0, .17],
            c: 8684676,
            t: 2
        }, {
            p: [170, 31, -163],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [172, 29, -173],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [235, 67, -127],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [235, 66, -125],
            s: [10, 1, 4],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [223, 67, -179],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [223, 66, -179],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [211, 75, -239],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [211, 74, -236],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [144, 33, -202],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [144, 45, -202],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [181, 33, -229],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [261, 1, -605],
            s: [81, 85, 82],
            c: 16765069,
            e: 1973790
        }, {
            p: [259, 85, -604],
            s: [91, 5, 86],
            c: 5395026,
            t: 2
        }, {
            p: [266, 9, -199],
            s: [15, 93, 10],
            c: 3091496,
            e: 3616548
        }, {
            p: [266, 29, -201],
            s: [17, 5, 8],
            col: 1,
            c: 5395026,
            t: 2
        }, {
            p: [161, 47, -77],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [161, 46, -80],
            s: [10, 1, 1],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [155, 67, -193],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [155, 66, -196],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [115, 91, -193],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [115, 90, -196],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [210, 29, -83],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [220, 30, -84],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [267, 33, -118],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [129, 30, -120],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [21, 33, -331],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [21, 45, -331],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [-40, 33, -349],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [99, 68, -267],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [99, 67, -267],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [135, 29, -200],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [23, 68, -227],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [23, 67, -227],
            s: [6, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [5, 29, -330],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-2, 29, -334],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [44, 29, -334],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [35, 28, -330],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [57, 28, -332],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [74, 29, -284],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [83, 27, -286],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [199, 29, -232],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [208, 29, -230],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [253, 29, -199],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [236, 29, -201],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [228, 29, -199],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-14, 35, -258],
            s: [23, 1, 23],
            t: 1
        }, {
            p: [-117, 24, 140],
            s: [31, 28, 3],
            c: 12497300,
            e: 3746078
        }, {
            p: [-27, 24, -258],
            s: [3, 13, 23],
            c: 12497300,
            e: 3746078
        }, {
            p: [-14, 24, -271],
            s: [29, 13, 3],
            c: 12497300,
            e: 3746078
        }, {
            p: [-1, 24, -258],
            s: [3, 13, 23],
            c: 12497300,
            e: 3746078
        }, {
            p: [270, 32, 80],
            s: [30, 15, 4],
            c: 10191214,
            e: 4077098
        }, {
            p: [218, 32, 80],
            s: [5, 16, 5],
            c: 10191214,
            e: 4077098
        }, {
            p: [200, 29, 75],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [200, 29, 86],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [192, 29, 95],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [282, 29, 87],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [269, 27, 85],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [281, 27, 99],
            s: [2, 9, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [245, 27, 126],
            s: [2, 11, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [115, 91, -127],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [115, 90, -124],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [148, 33, -118],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [152, 65, -124],
            s: [10, 1, 2],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [152, 66, -127],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [62, 65, -130],
            s: [10, 1, 1],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [62, 66, -133],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [27, 65, -130],
            s: [10, 1, 1],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [27, 66, -133],
            s: [9, 14, 6],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [233, 62, -285],
            s: [20, 2, 4],
            col: 1,
            r: [0, 0, -.18],
            c: 6710886,
            t: 5
        }, {
            p: [-156, 43, -111],
            s: [2, 5, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-157, 43, -146],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-153, 41, -156],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-196, 41, -143],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-199, 43, -120],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [279, 33, 108],
            s: [12, 12, 12],
            id: 1
        }, {
            p: [203, 32, 80],
            s: [30, 15, 4],
            c: 10191214,
            e: 4077098
        }, {
            p: [255, 32, 80],
            s: [5, 16, 5],
            c: 10191214,
            e: 4077098
        }, {
            p: [279, 29, 76],
            s: [2, 10, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [293, 29, 73],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-166, 48, 85],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-229, 48, 134],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-229, 48, 141],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-229, 48, 148],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-147, 33, 69],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-41, 13, 8],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-34, 13, 8],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-92, 48, 180],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-92, 48, 173],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-154, 44, -126],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-134, 41, -267],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-196, 41, -299],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-208, 33, -249],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-208, 33, -242],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-29, 33, -350],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [11, 33, -333],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [96, 33, -343],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [154, 33, -282],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [154, 33, -274],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [191, 33, -231],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [280, 33, -201],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [280, 33, -208],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [257, 33, -120],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [189, 33, -84],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [230, 33, -36],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [230, 33, -29],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [193, 33, 44],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [230, 33, 127],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [237, 33, 127],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-68, 48, 84],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [22, 48, 69],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-44, 48, 57],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-44, 48, -26],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-44, 48, -114],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [9, 48, -24],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-257, 32, 309],
            s: [149, 84, 80],
            c: 10519402,
            e: 7892309
        }, {
            p: [-259, 116, 309],
            s: [160, 5, 87],
            c: 5395026,
            t: 2
        }, {
            p: [-149, 34, 320],
            s: [74, 69, 79],
            c: 10652266,
            e: 2432532
        }, {
            p: [-137, 103, 319],
            s: [91, 5, 87],
            c: 5395026,
            t: 2
        }, {
            p: [395, 7, 103],
            s: [80, 88, 59],
            c: 9860174,
            e: 3749164
        }, {
            p: [396, 95, 104],
            s: [88, 4, 67],
            c: 4868682,
            t: 2
        }, {
            p: [184, 32, 235],
            s: [102, 76, 49],
            c: 9860174,
            e: 3749164
        }, {
            p: [184, 108, 235],
            s: [109, 5, 57],
            c: 5395026,
            t: 2
        }, {
            p: [-89, 33, -137],
            s: [54, 1, 97],
            col: 1,
            c: 4408131,
            t: 2
        }, {
            p: [-200, 92, -91],
            s: [5, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-201, 91, -91],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-121, 32, 14],
            s: [6, 2, 2],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-68, 32, 47],
            s: [26, 2, 68],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-69, 12, 47],
            s: [25, 2, 68],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-102, 12, -18],
            s: [44, 2, 62],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-102, 62, -17],
            s: [43, 2, 63],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-120, 71, -18],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-120, 70, -18],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-123, 34, 0],
            s: [1, 17, 13],
            col: 1,
            c: 8221547,
            t: 2
        }, {
            p: [-122, 34, -7],
            s: [4, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-122, 34, 7],
            s: [4, 17, 1],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-122, 51, 0],
            s: [4, 1, 15],
            col: 1,
            c: 4868682,
            t: 2
        }, {
            p: [-60, 24, -69],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-68, 24, -69],
            s: [7, 8, 7],
            id: 2
        }, {
            p: [-75, 22, -71],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-137, 33, -68],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-130, 29, -70],
            s: [2, 7, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-84, 43, -34],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-84, 42, -34],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-84, 72, 1],
            s: [7, 14, 9],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-84, 71, 1],
            s: [8, 1, 10],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-66, 10, 11],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-77, 8, -5],
            s: [2, 8, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-78, 8, -11],
            s: [2, 11, 2],
            col: 1,
            c: 5988172,
            t: 5
        }, {
            p: [-138, 91, -77],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-138, 90, -74],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-68, 65, -74],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-68, 66, -77],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-94, 66, -77],
            s: [9, 14, 8],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-94, 65, -74],
            s: [10, 1, 3],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-111, 32, -62],
            s: [12, 1, 43],
            t: 1
        }, {
            p: [-110, 71, -45],
            s: [9, 14, 7],
            col: 1,
            c: 8553090,
            t: 2
        }, {
            p: [-110, 70, -47],
            s: [10, 1, 4],
            col: 1,
            c: 5066061,
            t: 2
        }, {
            p: [-93, 24, -62],
            s: [24, 9, 28],
            id: 9,
            t: 1,
            d: 2
        }, {
            p: [241, 33, -297],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [241, 33, -265],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [265, 33, -272],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [265, 33, -240],
            s: [2, 29, 2],
            c: 9539985,
            t: 2
        }, {
            p: [-61, 23, -61],
            s: [40, 1, 26],
            t: 1
        }, {
            p: [-68, 13, -35],
            s: [26, 11, 26],
            id: 9,
            t: 1,
            d: 3
        }]
    }], o = 0; o < s.length; ++o)
        for (var a = 0; a < s[o].objects.length; ++a)
            s[o].objects[a].id = i.prefabIDS[s[o].objects[a].id || 0],
            s[o].objects[a].t = i.textureIDS[s[o].objects[a].t || 0];
    t.exports.maps = s,
    t.exports.manager = function(t, e, i, o) {
        var a, c;
        this.manager = new (n(17).manager)(t,i,o),
        this.maps = s,
        this.modes = r,
        this.spawns = [],
        this.lastGen = null,
        this.setMaps = function(t) {
            this.maps = t || s
        }
        ,
        this.getRandomMap = function() {
            return i.randInt(0, this.maps.length - 1)
        }
        ;
        var l = "";
        this.generate = function(n, r, s) {
            var h = this.maps[n];
            if (t)
                try {
                    mapInfo.innerHTML = r.alias + "_" + h.name,
                    gameMessage.innerHTML = "",
                    curGameInfo.innerHTML = r.name
                } catch (t) {}
            t && l != h.modURL && (l = h.modURL) && "" != l && loadModPack(l, !0);
            var p = n;
            if (s || this.lastGen !== p) {
                this.lastGen = p,
                this.manager.removeAll(),
                t && t.init(h),
                e && (e.reset(),
                t.scene.add(e.ExplosionManager));
                for (var u = 0, d = 0, f = 0, m = 0, g = 0; g < h.objects.length; ++g) {
                    var v = (a = h.objects[g]).p[0]
                      , y = a.p[1]
                      , x = a.p[2];
                    if (v - a.s[0] < u && (u = v - a.s[0]),
                    v + a.s[0] > d && (d = v + a.s[0]),
                    x - a.s[2] < f && (f = x - a.s[2]),
                    x + a.s[2] > m && (m = x + a.s[2]),
                    "CUBE" == a.id) {
                        for (var w = 1, b = 0; b < h.objects.length; ++b)
                            if ("CUBE" == (c = h.objects[b]).id && a != c && y <= c.p[1] + c.s[1] && y >= c.p[1] && v + a.s[0] / 2 < c.p[0] + c.s[0] / 2 && v - a.s[0] / 2 > c.p[0] - c.s[0] / 2 && x + a.s[2] / 2 < c.p[2] + c.s[2] / 2 && x - a.s[2] / 2 > c.p[2] - c.s[2] / 2) {
                                w = 0;
                                break
                            }
                        this.manager.addBlock(v, y, x, a.s[0], a.s[2], a.s[1], [1, 1, 1, w, 1, 1], {
                            src: a.t.toLowerCase() + "_0",
                            colr: a.c,
                            emissive: a.e || 0,
                            opacity: 1 != a.o && void 0 != a.o ? a.o : 1,
                            transparent: 1 != a.o && void 0 != a.o,
                            penetrable: a.pe,
                            amb: a.a,
                            yR: a.r ? a.r[0] : 0,
                            xR: a.r ? a.r[1] : 0,
                            zR: a.r ? a.r[2] : 0,
                            noCol: a.col,
                            noVis: a.v
                        })
                    } else
                        "OBJECTIVE" == a.id ? this.manager.addObjective(v, y, x, a.s[0], a.s[2], a.s[1]) : "PARTICLES" == a.id ? e && e.area(v, y, x, a.s[0], a.s[1], a.s[2], {
                            src: "glow_0",
                            blending: 2,
                            count: Math.round((a.s[0] + a.s[2] + a.s[1]) / 9),
                            spd: .008,
                            grav: [-.015, -.005],
                            scl: [.7, 1],
                            dir: 0
                        }) : "PLANE" == a.id || "BILLBOARD" == a.id ? this.manager.addPlane(v, y, x, a.s[2] / 2, a.s[0] / 2, {
                            src: "BILLBOARD" == a.id ? "pubs/bill_1" : a.t.toLowerCase() + "_0",
                            emissive: a.e || 0,
                            opacity: 1 != a.o && void 0 != a.o ? a.o : 1,
                            penetrable: a.pe,
                            colr: a.c,
                            col: !a.col,
                            noVis: a.v
                        }, a.r ? a.r[2] : 0, (a.r ? a.r[0] : 0) - Math.PI / 2, a.r ? a.r[1] : 0) : "RAMP" == a.id ? this.manager.addRamp(v, y, x, a.s[0], a.s[1], a.s[2], a.d * Math.PI / 2, a.b, a.t ? a.t.toLowerCase() + "_0" : "grey_0", a.v, a.c) : "SCORE_ZONE" == a.id ? this.manager.addScoreZone(v, y, x, a.s[0], a.s[2], a.s[1]) : "DEATH_ZONE" == a.id ? this.manager.addDeathZone(v, y, x, a.s[0], a.s[2], a.s[1]) : "LADDER" == a.id ? this.manager.addLadder(v, y, x, a.s[1], a.d * Math.PI / 2, a.v) : this.manager.addMesh(v, y, x, a.r ? a.r[1] ? a.r[1] : Math.PI : 0, a.s[0] / 2, a.s[1] / 2, a.s[2] / 2, a.id.toLowerCase(), a.col)
                }
                if (h.shadLength = Math.round(Math.abs(d - u) / 2.5),
                h.shadWidth = Math.round(Math.abs(m - f) / 2.5),
                t && t.updateLightMap(h),
                t) {
                    var M, _ = o.ambScale;
                    for (g = 0; g < this.manager.objects.length; ++g)
                        if (!(a = this.manager.objects[g]).noVis && !a.complexMesh)
                            for (b = 0; b < this.manager.objects.length; ++b)
                                if (!(c = this.manager.objects[b]).noVis && !c.complexMesh && this.manager.collision(a, c, 0)) {
                                    if (b > g) {
                                        if (M = i.boxIntersection(a, c, "x", "z", [Math.PI, 0, Math.PI / 2, -Math.PI / 2]))
                                            for (var S = 0; S < M.length; ++S)
                                                for (var E = i.getIntersection(a, c, "y"), T = 0; T < 2; T++) {
                                                    var A = (M[S].d + Math.PI / 2 * T) % (2 * Math.PI);
                                                    _ = this.manager.limitAmb(o.ambScale, M[S], A, "x", "z", a, c),
                                                    this.manager.addAmbient(M[S].x + _ * Math.cos(A), E.y, M[S].z + _ * Math.sin(A), -A + Math.PI, 0, 0, E.height, _, 1)
                                                }
                                        if (M = i.boxIntersection(a, c, "z", "y", [Math.PI, 0, -Math.PI / 2, Math.PI / 2]))
                                            for (S = 0; S < M.length; ++S)
                                                for (E = i.getIntersection(a, c, "x"),
                                                T = 0; T < 2; T++)
                                                    A = M[S].d + Math.PI / 2 * (T ? 0 : 1),
                                                    _ = this.manager.limitAmb(o.ambScale, M[S], -A + Math.PI / 2, "z", "y", a, c),
                                                    this.manager.addAmbient(E.x, M[S].y + _ * Math.cos(A), M[S].z + _ * Math.sin(A), 0, A, -Math.PI / 2, E.width, _, 1);
                                        if (M = i.boxIntersection(a, c, "x", "y", [Math.PI, 0, -Math.PI / 2, Math.PI / 2]))
                                            for (S = 0; S < M.length; ++S)
                                                for (E = i.getIntersection(a, c, "z"),
                                                T = 0; T < 2; T++)
                                                    A = M[S].d + Math.PI / 2 * (T ? 0 : 1),
                                                    _ = this.manager.limitAmb(o.ambScale, M[S], -A + Math.PI / 2, "x", "y", a, c),
                                                    this.manager.addAmbient(M[S].x + _ * Math.sin(A), M[S].y + _ * Math.cos(A), E.z, Math.PI / 2, A, -Math.PI / 2, E.length, _, 1)
                                    }
                                    var L = a.y + a.height > c.y + c.height
                                      , R = a.y - a.height < c.y - c.height;
                                    if ((L || R) && (M = i.boxCornerIntersection(a, c, "x", "z")))
                                        for (S = 0; S < M.length; ++S)
                                            for (_ = Math.sqrt(2) * o.ambScale,
                                            A = M[S].d - Math.PI / 4,
                                            T = 0; T < 2; ++T)
                                                if (y = c.y + (c.height + o.ambOff) * (T ? -1 : 1),
                                                (T || L) && (!T || R)) {
                                                    var P = i.limitRect(M[S].x - _ * Math.sin(A), M[S].z - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "x", "z");
                                                    this.manager.addAmbient(P.x, y, P.z, M[S].d, Math.PI / 2, 0, P.width, P.length, 0)
                                                }
                                    var C = a.x + a.width > c.x + c.width
                                      , I = a.x - a.width < c.x - c.width;
                                    if (C || I) {
                                        var O = [Math.PI / 2, 0, Math.PI, -Math.PI / 2];
                                        if (M = i.boxCornerIntersection(a, c, "z", "y"))
                                            for (S = 0; S < M.length; ++S)
                                                for (_ = Math.sqrt(2) * o.ambScale,
                                                A = M[S].d - Math.PI / 4,
                                                T = 0; T < 2; ++T)
                                                    v = c.x + (c.width + o.ambOff) * (T ? -1 : 1),
                                                    !T && !C || T && !I || (P = i.limitRect(M[S].z - _ * Math.sin(A), M[S].y - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "z", "y"),
                                                    this.manager.addAmbient(v, P.y, P.z, Math.PI / 2, Math.PI, O[M[S].i], P.length, P.height, 0))
                                    }
                                    var D = a.z + a.length > c.z + c.length
                                      , k = a.z - a.length < c.z - c.length;
                                    if ((D || k) && (O = [-Math.PI / 2, Math.PI, 0, Math.PI / 2],
                                    M = i.boxCornerIntersection(a, c, "x", "y")))
                                        for (S = 0; S < M.length; ++S)
                                            for (_ = Math.sqrt(2) * o.ambScale,
                                            A = M[S].d - Math.PI / 4,
                                            T = 0; T < 2; ++T)
                                                x = c.z + (c.length + o.ambOff) * (T ? -1 : 1),
                                                !T && !D || T && !k || (P = i.limitRect(M[S].x - _ * Math.sin(A), M[S].y - _ * Math.cos(A), o.ambScale, o.ambScale, M[S].d, c, "x", "y"),
                                                this.manager.addAmbient(P.x, P.y, x, 0, 0, O[M[S].i], P.width, P.height, 0))
                                }
                }
                for (this.spawns.length = 0,
                g = 0; g < h.spawns.length; ++g)
                    this.spawns.push({
                        x: h.spawns[g][0],
                        y: h.spawns[g][1],
                        z: h.spawns[g][2],
                        team: h.spawns[g][3]
                    });
                t && t.addMeshGroups()
            }
        }
    }
}
, function(t, e, n) {
    var i = n(13).ExtBuffer
      , r = n(39)
      , s = n(19).readUint8
      , o = n(38)
      , a = n(4);
    function c() {
        var t = this.options;
        return this.decode = function(t) {
            var e = o.getReadToken(t);
            return function(t) {
                var n = s(t)
                  , i = e[n];
                if (!i)
                    throw new Error("Invalid type: " + (n ? "0x" + n.toString(16) : n));
                return i(t)
            }
        }(t),
        t && t.preset && r.setExtUnpackers(this),
        this
    }
    a.install({
        addExtUnpacker: function(t, e) {
            (this.extUnpackers || (this.extUnpackers = []))[t] = a.filter(e)
        },
        getExtUnpacker: function(t) {
            return (this.extUnpackers || (this.extUnpackers = []))[t] || function(e) {
                return new i(e,t)
            }
        },
        init: c
    }),
    e.preset = c.call(a.preset)
}
, function(t, e, n) {
    (function(t) {
        !function(e) {
            var n, i = "undefined", r = i !== typeof t && t, s = i !== typeof Uint8Array && Uint8Array, o = i !== typeof ArrayBuffer && ArrayBuffer, a = [0, 0, 0, 0, 0, 0, 0, 0], c = Array.isArray || function(t) {
                return !!t && "[object Array]" == Object.prototype.toString.call(t)
            }
            , l = 4294967296, h = 16777216;
            function p(t, c, p) {
                var M = c ? 0 : 4
                  , _ = c ? 4 : 0
                  , S = c ? 0 : 3
                  , E = c ? 1 : 2
                  , T = c ? 2 : 1
                  , A = c ? 3 : 0
                  , L = c ? y : w
                  , R = c ? x : b
                  , P = O.prototype
                  , C = "is" + t
                  , I = "_" + C;
                return P.buffer = void 0,
                P.offset = 0,
                P[I] = !0,
                P.toNumber = D,
                P.toString = function(t) {
                    var e = this.buffer
                      , n = this.offset
                      , i = B(e, n + M)
                      , r = B(e, n + _)
                      , s = ""
                      , o = !p && 2147483648 & i;
                    for (o && (i = ~i,
                    r = l - r),
                    t = t || 10; ; ) {
                        var a = i % t * l + r;
                        if (i = Math.floor(i / t),
                        r = Math.floor(a / t),
                        s = (a % t).toString(t) + s,
                        !i && !r)
                            break
                    }
                    return o && (s = "-" + s),
                    s
                }
                ,
                P.toJSON = D,
                P.toArray = u,
                r && (P.toBuffer = d),
                s && (P.toArrayBuffer = f),
                O[C] = function(t) {
                    return !(!t || !t[I])
                }
                ,
                e[t] = O,
                O;
                function O(t, e, r, c) {
                    return this instanceof O ? function(t, e, r, c, h) {
                        if (s && o && (e instanceof o && (e = new s(e)),
                        c instanceof o && (c = new s(c))),
                        e || r || c || n) {
                            if (!m(e, r))
                                h = r,
                                c = e,
                                r = 0,
                                e = new (n || Array)(8);
                            t.buffer = e,
                            t.offset = r |= 0,
                            i !== typeof c && ("string" == typeof c ? function(t, e, n, i) {
                                var r = 0
                                  , s = n.length
                                  , o = 0
                                  , a = 0;
                                "-" === n[0] && r++;
                                for (var c = r; r < s; ) {
                                    var h = parseInt(n[r++], i);
                                    if (!(h >= 0))
                                        break;
                                    a = a * i + h,
                                    o = o * i + Math.floor(a / l),
                                    a %= l
                                }
                                c && (o = ~o,
                                a ? a = l - a : o++),
                                k(t, e + M, o),
                                k(t, e + _, a)
                            }(e, r, c, h || 10) : m(c, h) ? g(e, r, c, h) : "number" == typeof h ? (k(e, r + M, c),
                            k(e, r + _, h)) : c > 0 ? L(e, r, c) : c < 0 ? R(e, r, c) : g(e, r, a, 0))
                        } else
                            t.buffer = v(a, 0)
                    }(this, t, e, r, c) : new O(t,e,r,c)
                }
                function D() {
                    var t = this.buffer
                      , e = this.offset
                      , n = B(t, e + M)
                      , i = B(t, e + _);
                    return p || (n |= 0),
                    n ? n * l + i : i
                }
                function k(t, e, n) {
                    t[e + A] = 255 & n,
                    n >>= 8,
                    t[e + T] = 255 & n,
                    n >>= 8,
                    t[e + E] = 255 & n,
                    n >>= 8,
                    t[e + S] = 255 & n
                }
                function B(t, e) {
                    return t[e + S] * h + (t[e + E] << 16) + (t[e + T] << 8) + t[e + A]
                }
            }
            function u(t) {
                var e = this.buffer
                  , i = this.offset;
                return n = null,
                !1 !== t && 0 === i && 8 === e.length && c(e) ? e : v(e, i)
            }
            function d(e) {
                var i = this.buffer
                  , s = this.offset;
                if (n = r,
                !1 !== e && 0 === s && 8 === i.length && t.isBuffer(i))
                    return i;
                var o = new r(8);
                return g(o, 0, i, s),
                o
            }
            function f(t) {
                var e = this.buffer
                  , i = this.offset
                  , r = e.buffer;
                if (n = s,
                !1 !== t && 0 === i && r instanceof o && 8 === r.byteLength)
                    return r;
                var a = new s(8);
                return g(a, 0, e, i),
                a.buffer
            }
            function m(t, e) {
                var n = t && t.length;
                return e |= 0,
                n && e + 8 <= n && "string" != typeof t[e]
            }
            function g(t, e, n, i) {
                e |= 0,
                i |= 0;
                for (var r = 0; r < 8; r++)
                    t[e++] = 255 & n[i++]
            }
            function v(t, e) {
                return Array.prototype.slice.call(t, e, e + 8)
            }
            function y(t, e, n) {
                for (var i = e + 8; i > e; )
                    t[--i] = 255 & n,
                    n /= 256
            }
            function x(t, e, n) {
                var i = e + 8;
                for (n++; i > e; )
                    t[--i] = 255 & -n ^ 255,
                    n /= 256
            }
            function w(t, e, n) {
                for (var i = e + 8; e < i; )
                    t[e++] = 255 & n,
                    n /= 256
            }
            function b(t, e, n) {
                var i = e + 8;
                for (n++; e < i; )
                    t[e++] = 255 & -n ^ 255,
                    n /= 256
            }
            p("Uint64BE", !0, !0),
            p("Int64BE", !0, !1),
            p("Uint64LE", !1, !0),
            p("Int64LE", !1, !1)
        }("object" == typeof e && "string" != typeof e.nodeName ? e : this || {})
    }
    ).call(this, n(24).Buffer)
}
, function(t, e, n) {
    var i = n(43);
    e.copy = c,
    e.slice = l,
    e.toString = function(t, e, n) {
        return (!o && r.isBuffer(this) ? this.toString : i.toString).apply(this, arguments)
    }
    ,
    e.write = function(t) {
        return function() {
            return (this[t] || i[t]).apply(this, arguments)
        }
    }("write");
    var r = n(0)
      , s = r.global
      , o = r.hasBuffer && "TYPED_ARRAY_SUPPORT"in s
      , a = o && !s.TYPED_ARRAY_SUPPORT;
    function c(t, e, n, s) {
        var o = r.isBuffer(this)
          , c = r.isBuffer(t);
        if (o && c)
            return this.copy(t, e, n, s);
        if (a || o || c || !r.isView(this) || !r.isView(t))
            return i.copy.call(this, t, e, n, s);
        var h = n || null != s ? l.call(this, n, s) : this;
        return t.set(h, e),
        h.length
    }
    function l(t, e) {
        var n = this.slice || !a && this.subarray;
        if (n)
            return n.call(this, t, e);
        var i = r.alloc.call(this, e - t);
        return c.call(this, i, 0, t, e),
        i
    }
}
, function(t, e) {
    e.read = function(t, e, n, i, r) {
        var s, o, a = 8 * r - i - 1, c = (1 << a) - 1, l = c >> 1, h = -7, p = n ? r - 1 : 0, u = n ? -1 : 1, d = t[e + p];
        for (p += u,
        s = d & (1 << -h) - 1,
        d >>= -h,
        h += a; h > 0; s = 256 * s + t[e + p],
        p += u,
        h -= 8)
            ;
        for (o = s & (1 << -h) - 1,
        s >>= -h,
        h += i; h > 0; o = 256 * o + t[e + p],
        p += u,
        h -= 8)
            ;
        if (0 === s)
            s = 1 - l;
        else {
            if (s === c)
                return o ? NaN : 1 / 0 * (d ? -1 : 1);
            o += Math.pow(2, i),
            s -= l
        }
        return (d ? -1 : 1) * o * Math.pow(2, s - i)
    }
    ,
    e.write = function(t, e, n, i, r, s) {
        var o, a, c, l = 8 * s - r - 1, h = (1 << l) - 1, p = h >> 1, u = 23 === r ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = i ? 0 : s - 1, f = i ? 1 : -1, m = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
        for (e = Math.abs(e),
        isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0,
        o = h) : (o = Math.floor(Math.log(e) / Math.LN2),
        e * (c = Math.pow(2, -o)) < 1 && (o--,
        c *= 2),
        (e += o + p >= 1 ? u / c : u * Math.pow(2, 1 - p)) * c >= 2 && (o++,
        c /= 2),
        o + p >= h ? (a = 0,
        o = h) : o + p >= 1 ? (a = (e * c - 1) * Math.pow(2, r),
        o += p) : (a = e * Math.pow(2, p - 1) * Math.pow(2, r),
        o = 0)); r >= 8; t[n + d] = 255 & a,
        d += f,
        a /= 256,
        r -= 8)
            ;
        for (o = o << r | a,
        l += r; l > 0; t[n + d] = 255 & o,
        d += f,
        o /= 256,
        l -= 8)
            ;
        t[n + d - f] |= 128 * m
    }
}
, function(t, e, n) {
    e.ExtBuffer = function t(e, n) {
        if (!(this instanceof t))
            return new t(e,n);
        this.buffer = i.from(e),
        this.type = n
    }
    ;
    var i = n(0)
}
, function(t, e, n) {
    var i = n(13).ExtBuffer
      , r = n(42)
      , s = n(41)
      , o = n(4);
    function a() {
        var t = this.options;
        return this.encode = function(t) {
            var e = s.getWriteType(t);
            return function(t, n) {
                var i = e[typeof n];
                if (!i)
                    throw new Error('Unsupported type "' + typeof n + '": ' + n);
                i(t, n)
            }
        }(t),
        t && t.preset && r.setExtPackers(this),
        this
    }
    o.install({
        addExtPacker: function(t, e, n) {
            n = o.filter(n);
            var r = e.name;
            r && "Object" !== r ? (this.extPackers || (this.extPackers = {}))[r] = s : (this.extEncoderList || (this.extEncoderList = [])).unshift([e, s]);
            function s(e) {
                return n && (e = n(e)),
                new i(e,t)
            }
        },
        getExtPacker: function(t) {
            var e = this.extPackers || (this.extPackers = {})
              , n = t.constructor
              , i = n && n.name && e[n.name];
            if (i)
                return i;
            for (var r = this.extEncoderList || (this.extEncoderList = []), s = r.length, o = 0; o < s; o++) {
                var a = r[o];
                if (n === a[0])
                    return a[1]
            }
        },
        init: a
    }),
    e.preset = a.call(o.preset)
}
, function(t, e) {
    var n, i, r = t.exports = {};
    function s() {
        throw new Error("setTimeout has not been defined")
    }
    function o() {
        throw new Error("clearTimeout has not been defined")
    }
    function a(t) {
        if (n === setTimeout)
            return setTimeout(t, 0);
        if ((n === s || !n) && setTimeout)
            return n = setTimeout,
            setTimeout(t, 0);
        try {
            return n(t, 0)
        } catch (e) {
            try {
                return n.call(null, t, 0)
            } catch (e) {
                return n.call(this, t, 0)
            }
        }
    }
    !function() {
        try {
            n = "function" == typeof setTimeout ? setTimeout : s
        } catch (t) {
            n = s
        }
        try {
            i = "function" == typeof clearTimeout ? clearTimeout : o
        } catch (t) {
            i = o
        }
    }();
    var c, l = [], h = !1, p = -1;
    function u() {
        h && c && (h = !1,
        c.length ? l = c.concat(l) : p = -1,
        l.length && d())
    }
    function d() {
        if (!h) {
            var t = a(u);
            h = !0;
            for (var e = l.length; e; ) {
                for (c = l,
                l = []; ++p < e; )
                    c && c[p].run();
                p = -1,
                e = l.length
            }
            c = null,
            h = !1,
            function(t) {
                if (i === clearTimeout)
                    return clearTimeout(t);
                if ((i === o || !i) && clearTimeout)
                    return i = clearTimeout,
                    clearTimeout(t);
                try {
                    i(t)
                } catch (e) {
                    try {
                        return i.call(null, t)
                    } catch (e) {
                        return i.call(this, t)
                    }
                }
            }(t)
        }
    }
    function f(t, e) {
        this.fun = t,
        this.array = e
    }
    function m() {}
    r.nextTick = function(t) {
        var e = new Array(arguments.length - 1);
        if (arguments.length > 1)
            for (var n = 1; n < arguments.length; n++)
                e[n - 1] = arguments[n];
        l.push(new f(t,e)),
        1 !== l.length || h || a(d)
    }
    ,
    f.prototype.run = function() {
        this.fun.apply(null, this.array)
    }
    ,
    r.title = "browser",
    r.browser = !0,
    r.env = {},
    r.argv = [],
    r.version = "",
    r.versions = {},
    r.on = m,
    r.addListener = m,
    r.once = m,
    r.off = m,
    r.removeListener = m,
    r.removeAllListeners = m,
    r.emit = m,
    r.prependListener = m,
    r.prependOnceListener = m,
    r.listeners = function(t) {
        return []
    }
    ,
    r.binding = function(t) {
        throw new Error("process.binding is not supported")
    }
    ,
    r.cwd = function() {
        return "/"
    }
    ,
    r.chdir = function(t) {
        throw new Error("process.chdir is not supported")
    }
    ,
    r.umask = function() {
        return 0
    }
}
, function(t, e, n) {
    var i, r = n(1), s = n(2);
    t.exports = function(e, r, s) {
        var o = n(6)
          , a = new e.LoadingManager
          , c = new e.OBJLoader(a);
        this.cubeGeo = new e.BoxGeometry(1,1,1),
        this.getCubeMesh = function() {
            return new e.Mesh(this.cubeGeo)
        }
        ;
        var l = new e.PlaneGeometry(1,1);
        new e.CylinderGeometry(.1,1,1,4,1,!1,Math.PI / 4).computeFlatVertexNormals();
        var h = new e.TextureLoader
          , p = new e.MeshBasicMaterial({
            color: 16777215
        })
          , u = new e.MeshBasicMaterial({
            color: 65280
        })
          , d = {}
          , f = {}
          , m = {}
          , g = this
          , v = {};
        this.frustum = new e.Frustum;
        var y = new e.Matrix4;
        this.camera = new e.PerspectiveCamera(0,window.innerWidth / window.innerHeight,.1,8e3),
        this.weaponLean = 1,
        this.init = function(n) {
            this.scene = new e.Scene,
            t.exports.initScene.call(this, n),
            this.sunPlane = this.addPlane(0, 5e3, -4500, 750, 750, {
                src: "sun_0",
                noFog: !0,
                transparent: !0,
                mat: e.MeshBasicMaterial,
                noGroup: !0
            }, 0, r.getDirection(-4500, 5e3, 0, 0))
        }
        ;
        var x, w, b = 0;
        this.flash = function(t, e) {
            flashOverlay.style.display = "block",
            flashOverlay.style.left = 100 * t + "%",
            flashOverlay.style.top = 100 * (1 - e) + "%",
            b = 100
        }
        ,
        this.updateLightMap = function(t) {
            this.skyLight && (this.skyLight.shadow.camera.right = t.shadWidth,
            this.skyLight.shadow.camera.left = -t.shadWidth,
            this.skyLight.shadow.camera.top = t.shadLength,
            this.skyLight.shadow.camera.bottom = -t.shadLength)
        }
        ,
        this.useDepthMap = 0,
        this.toggleDepthMap = function(n) {
            if (this.useDepthMap = n,
            this.scene) {
                var r = n && "0" != n;
                this.scene.overrideMaterial = r ? p : null,
                r ? (this.scene.fog = new e.Fog(0,0,n),
                this.renderer.setClearColor(0)) : t.exports.initScene.call(this, i)
            }
        }
        ,
        this.greenScreen = !1,
        this.updateGreenScreen = function(t) {
            g.greenScreen && !t.noGreen ? (t.realMat = t.material,
            t.material = u) : t.material = t.realMat || t.material
        }
        ,
        this.toggleGreenscreen = function(t) {
            this.greenScreen = t,
            this.scene && (t ? (this.renderer.setClearColor(65280),
            this.scene.fog.near = .1,
            this.scene.fog.far = 0) : (this.scene.fog.near = 1,
            this.scene.fog.far = i.fogD,
            this.renderer.setClearColor(i.sky)),
            this.scene.traverse(function(t) {
                g.updateGreenScreen(t)
            }))
        }
        ,
        this.renderer = new e.WebGLRenderer({
            precision: "mediump",
            powerPreference: "high-performance",
            antialias: !1
        }),
        this.renderer.shadowMap.enabled = !0,
        this.renderer.shadowMap.autoUpdate = !1,
        this.renderer.shadowMap.type = e.BasicShadowMap,
        this.renderer.setPixelRatio(window.devicePixelRatio),
        this.renderer.setSize(window.innerWidth, window.innerHeight),
        this.renderer.autoClear = !1,
        document.body.appendChild(this.renderer.domElement),
        this.updateShadowMap = function() {
            this.renderer.shadowMap.needsUpdate = !0
        }
        ,
        this.postprocessing = {
            enabled: !1
        },
        this.initShaders = function() {
            var t = new e.RenderPass(this.scene,this.camera);
            (w = new e.SSAOPass(this.scene,this.camera)).renderToScreen = !0,
            (x = new e.EffectComposer(this.renderer)).addPass(t),
            x.addPass(w),
            this.resizeShaders()
        }
        ,
        this.resizeShaders = function() {
            if (w && w.setSize(window.innerWidth, window.innerHeight),
            x) {
                var t = this.renderer.getPixelRatio()
                  , e = Math.floor(window.innerWidth / t) || 1
                  , n = Math.floor(window.innerHeight / t) || 1;
                x.setSize(e, n)
            }
        }
        ,
        this.zoom = function(t) {
            this.camera.fov = this.fov / t,
            this.camera.updateProjectionMatrix()
        }
        ,
        this.setFov = function(t) {
            this.fov = t,
            this.camera.fov = t
        }
        ,
        this.setFov(s.fov),
        this.resize = function() {
            this.camera.aspect = window.innerWidth / window.innerHeight,
            this.camera.updateProjectionMatrix(),
            this.renderer.setSize(window.innerWidth, window.innerHeight),
            this.resizeShaders()
        }
        ,
        this.setResMlt = function(t) {
            this.renderer.setPixelRatio(window.devicePixelRatio * t),
            this.renderer.setSize(window.innerWidth, window.innerHeight)
        }
        ,
        this.updateFrustum = function() {
            this.frustum.setFromMatrix(y.multiplyMatrices(this.camera.projectionMatrix, this.camera.matrixWorldInverse))
        }
        ;
        var M = 0
          , _ = 0;
        this.shakeX = 0,
        this.shakeY = 0,
        this.updateShake = function(t) {
            M && (M *= Math.pow(.99, t),
            _ += r.randFloat(-Math.PI, Math.PI),
            this.shakeX = Math.cos(_) * M,
            this.shakeY = Math.sin(_) * M,
            M <= .01 && (M = 0,
            this.shakeX = this.shakeY = 0))
        }
        ,
        this.shake = function(t) {
            M = t
        }
        ,
        this.render = function(t) {
            this.scene && (this.postprocessing.enabled ? x.render() : (this.renderer.clear(),
            this.renderer.render(this.scene, this.camera)),
            b && (b -= t) <= 0 && (b = 0,
            flashOverlay.style.display = "none"),
            this.updateShake(t))
        }
        ,
        this.updateTexture = function(t, n) {
            var i = m[t];
            i ? i.image = n : (i = new e.Texture(n),
            m[t] = i),
            i.needsUpdate = !0
        }
        ,
        this.loadTexture = function(t, n, i, r) {
            return m[n] ? m[n].mats ? m[n].mats.push(t) : (t[r || "map"] = m[n],
            t.needsUpdate = !0) : (m[n] = {
                mats: [t]
            },
            i = i || {},
            h.load("/textures/" + n + ".png", function(t) {
                t.wrapS = e.RepeatWrapping,
                t.wrapT = e.RepeatWrapping,
                t.repeat.set(i.repeatX || 1, i.repeatY || 1),
                t.minFilter = e.NearestFilter,
                t.magFilter = e.NearestFilter,
                t.needsUpdate = !0;
                for (var s = 0; s < m[n].mats.length; ++s)
                    m[n].mats[s][r || "map"] = t,
                    m[n].mats[s].needsUpdate = !0;
                m[n] = t
            })),
            t
        }
        ,
        this.getMat = function(t, n) {
            var i = (n && n.texSrc || t) + (n ? (n.rotation || "x") + (n.noFog || "y") + (n.opacity || "z") + (n.color || "b") + (n.ao || "a") + (n.emissive || "e") + (n.glowText || "g") + (void 0 != n.depthWrite ? n.depthWrite : "d") : "")
              , r = f[i];
            return r || (r = new ((n = n || {}).mat ? n.mat : e.MeshLambertMaterial)(n),
            t && "default" != t && this.loadTexture(r, n.texSrc || t, n),
            n && n.emissive && this.loadTexture(r, (n.glowText && n.texSrc || t) + "_e", n, "emissiveMap"),
            n && n.ao && (this.loadTexture(r, t + "_ao", n, "aoMap"),
            r.aoMapIntensity = 1.3),
            n && n.normal && this.loadTexture(r, t + "_n", n, "normalMap"),
            "default" == t && (r.vertexColors = e.VertexColors),
            n && n.noFog && (r.fog = !1),
            f[i] = r),
            r
        }
        ,
        this.offsetMesh = function(t, e) {
            t.translateZ(e)
        }
        ,
        this.genColorCube = function(t, n, i, r, s) {
            for (var a = "", c = 0; c < r.length; ++c)
                a += r[c] + "_";
            var l = d[a];
            if (!l) {
                l = new e.Geometry;
                var h = .5 + (s || 0);
                for (c = 0; c < r.length; ) {
                    var p = r[c + 1]
                      , u = new e.BoxGeometry(1 * (4 == c ? .9 : 1),p,1 * (4 == c ? .9 : 1));
                    o.colorize(u, r[c]);
                    var f = new e.Mesh(u);
                    this.moveMesh(f, 0, h - p / 2, 0),
                    this.merge(l, f),
                    h -= p,
                    c += 2
                }
                d[a] = l
            }
            return f = new e.Mesh(l,this.getMat("default")),
            this.scaleMesh(f, t, n, i),
            f
        }
        ;
        var S = {};
        this.genBody = function(t, n, i, r) {
            var o = S[t];
            if (!o) {
                o = new e.Geometry;
                var a = s.playerHeight - s.headScale - s.legHeight
                  , c = this.genColorCube(s.chestWidth, a, s.chestScale, [t, .8, n, .2]);
                this.moveMesh(c, 0, a / 2, 0),
                this.merge(o, c);
                var l = this.genColorCube(s.headScale, s.headScale, s.headScale, [i, .2, r, .8]);
                this.moveMesh(l, 0, s.playerHeight - s.headScale / 2 - s.legHeight, 0),
                this.merge(o, l),
                S[t] = o
            }
            var h = new e.Mesh(o,this.getMat("default"));
            return h.receiveShadow = !0,
            h.noGreen = !0,
            h
        }
        ;
        var E = {};
        this.genLeg = function(t, n, i, r) {
            var o = s.legScale
              , a = null;
            if (r) {
                var c = n + "-" + (r || "");
                if (!(a = E[c])) {
                    var l = s.legHeight / 2
                      , h = o / 2
                      , p = [.5, 2]
                      , u = this.genColorCube(o, l, o, [n, 1]);
                    this.moveMesh(u, 0, -l / 2 * Math.cos(p[1]), -l / 2 * Math.sin(p[1])),
                    this.rotateMesh(u, 0, p[1], 0);
                    var d = Math.sqrt(h * h + h * h - 2 * h * h * Math.cos(p[0] - p[1]))
                      , f = 2 * Math.sqrt(h * h - d / 2 * (d / 2))
                      , m = this.genColorCube(o, d, f, [n, 1]);
                    this.moveMesh(m, 0, -l * Math.cos(p[1]), -l * Math.sin(p[1])),
                    this.rotateMesh(m, 0, (p[1] + p[0]) / 2, 0);
                    var g = this.genColorCube(o, l, o, [n, .5, i, .5]);
                    this.moveMesh(g, 0, -l * Math.cos(p[1]) - l / 2 * Math.cos(p[0]), -l * Math.sin(p[1]) - l / 2 * Math.sin(p[0])),
                    this.rotateMesh(g, 0, p[0], 0),
                    a = new e.Geometry,
                    this.merge(a, u),
                    this.merge(a, m),
                    this.merge(a, g),
                    E[c] = a
                }
                a = new e.Mesh(a,this.getMat("default")),
                this.moveMesh(a, s.legScale / 2 * (t ? -1 : 1), s.legHeight - s.crouchDst + .5, 0)
            } else
                a = this.genColorCube(o, s.legHeight, o, [n, .75, i, .25], -.5),
                this.moveMesh(a, s.legScale / 2 * (t ? -1 : 1), s.legHeight, 0);
            return a.receiveShadow = !0,
            a.noGreen = !0,
            a
        }
        ;
        var T = {};
        this.genArms = function(t, n, i, r, o, a) {
            var c = T[t.name + "-" + i + "-" + a + "-" + (o || 0)];
            if (!c) {
                c = new e.Geometry;
                var l = (-s.chestWidth + s.armScale / 2 - s.armInset) * (a ? t.holdW || .4 : 1);
                o && 1 != o || this.merge(c, this.genArm(l, s.armOff, t, !0, n, i, r, a)),
                o && 2 != o || this.merge(c, this.genArm(-l, s.armOff, t, !1, n, i, r, a)),
                T[t.name + "-" + i + "-" + a + "-" + (o || 0)] = c
            }
            return (c = new e.Mesh(c,this.getMat("default"))).noGreen = !0,
            c.receiveShadow = !0,
            c
        }
        ,
        this.genArm = function(t, n, i, o, a, c, l, h) {
            var p = o ? i.leftHoldY : i.rightHoldY
              , u = o ? i.leftHoldZ : i.rightHoldZ
              , d = o ? i.leftHoldX || 0 : i.rightHoldX || 0
              , f = s.armScale * (h ? .75 : 1)
              , m = Math.min(s.uArmLength + s.lArmLength - .01, r.getDistance3D(t, n, 0, (i.xOff - d) * (o && i.akimbo ? -1 : 1), i.yOff + p, i.zOff - u))
              , g = r.getAnglesSSS(m, s.uArmLength, s.lArmLength)
              , v = Math.PI / 2;
            if (!h) {
                var y = this.genColorCube(f, s.uArmLength, f, [a, 1]);
                this.moveMesh(y, 0, -s.uArmLength / 2 * Math.cos(v), -s.uArmLength / 2 * Math.sin(v)),
                this.rotateMesh(y, 0, v, 0);
                var x = f / 2
                  , w = Math.sqrt(x * x + x * x - 2 * x * x * Math.cos(Math.PI + g[0] + Math.PI / 2))
                  , b = 2 * Math.sqrt(x * x - w / 2 * (w / 2))
                  , M = this.genColorCube(f, w, b, [a, 1]);
                this.moveMesh(M, 0, -s.uArmLength * Math.cos(v), -s.uArmLength * Math.sin(v)),
                this.rotateMesh(M, 0, (v + g[0]) / 2, 0)
            }
            var _ = this.genColorCube(f, s.lArmLength, f, [a, .65, c, .15, l, .2])
              , S = s.lArmLength / 2;
            this.moveMesh(_, 0, -s.uArmLength * Math.cos(v) - S * Math.cos(g[0]), -s.uArmLength * Math.sin(v) - S * Math.sin(g[0])),
            this.rotateMesh(_, 0, g[0], 0);
            var E = new e.Geometry;
            if (h) {
                if (o) {
                    var T = this.genColorCube(f, 20, f, [a, 1]);
                    this.moveMesh(T, 0, -s.uArmLength * Math.cos(v) - -10 * Math.cos(g[0]), -s.uArmLength * Math.sin(v) - -10 * Math.sin(g[0])),
                    this.rotateMesh(T, 0, g[0], 0),
                    this.merge(E, T)
                }
            } else
                this.merge(E, y),
                this.merge(E, M);
            return this.merge(E, _),
            E = new e.Mesh(E),
            this.moveMesh(E, t - i.xOff, n - i.yOff, -i.zOff),
            E.rotation.order = "YXZ",
            E.rotation.x = -g[1] - r.getDirection(0, n, i.zOff - u, i.yOff + p),
            E.rotation.y = r.getDirection(-t, 0, (o && i.akimbo ? 1 : -1) * (i.xOff - d), i.zOff - u) - Math.PI / 2,
            E
        }
        ,
        this.addCube = function(t, n, i, r, s, a, c, l) {
            l = l || {};
            var h = new e.Mesh(o.generateCube(c, r, s, a, l));
            return this.moveMesh(h, t, n, i),
            h.rotateY(l.xR || 0),
            h.rotateX(l.yR || 0),
            h.rotateZ(l.zR || 0),
            h.scale.set(r, s, a),
            l.src && !l.noGroup ? this.meshGroup(h, l) : this.add(h, l),
            h
        }
        ;
        var A = [];
        this.addSpray = function(t, n, i, o, a, c, h, p) {
            tmpObj = null;
            for (var u = 0; u < A.length; ++u)
                if (A[u].sid == t) {
                    tmpObj = A[u];
                    break
                }
            tmpObj || (tmpObj = new e.Mesh(l),
            tmpObj.sid = t,
            tmpObj.scale.set(s.sprayScale, s.sprayScale, 1),
            tmpObj.receiveShadow = !0,
            A.push(tmpObj),
            this.add(tmpObj)),
            this.moveMesh(tmpObj, i, o, a),
            tmpObj.rotation.y = r.toRad(c),
            tmpObj.rotation.x = r.toRad(h),
            tmpObj.material = this.getMat("sprays/" + n, {
                depthWrite: !1,
                opacity: p,
                transparent: !0
            })
        }
        ,
        this.clearSprays = function() {
            for (var t = 0; t < A.length; ++t)
                A[t] && A[t].material.map && A[t].material.map.dispose(),
                this.scene.remove(A[t]);
            A.length = 0
        }
        ,
        this.addPlane = function(t, n, i, r, s, a, c, l, h) {
            (a = a || {}).premultipliedAlpha = !0;
            var p = new e.Mesh(o.generatePlane(s, r, a));
            return a.euler && (p.eulerOrder = a.euler),
            this.moveMesh(p, t, n, i),
            p.rotateY(c || 0),
            p.rotateX((l || 0) - Math.PI / 2),
            p.rotateZ(h || 0),
            p.scale.set(2 * r, 2 * s, 1),
            a.dontAdd ? a.src && (p.material = this.getMat(a.src, a)) : a.src && !a.noGroup ? this.meshGroup(p, a, 1) : this.add(p, a),
            p
        }
        ,
        this.addRamp = function(t, n, i, r, s, a, c, l, h) {
            l = l || {};
            var p = new e.Mesh(o.generatePlane(2 * a, r, l));
            this.moveMesh(p, t, n + s / 2, i),
            a *= 2;
            var u = Math.sqrt(s * s + a * a);
            return p.scale.set(r, u, 2),
            p.rotateY(-Math.PI / 2 - c),
            p.rotateX(Math.asin(s / u) - Math.PI / 2),
            p.rotateZ(h || 0),
            l.src ? this.meshGroup(p, l, 1) : this.add(p, l),
            p
        }
        ;
        var L = []
          , R = [];
        this.loadMesh = function(t, n, i, r, s, o, a, l) {
            var h = this.getMat(t.src, t)
              , p = L[t.src];
            if (p) {
                if (t.centerZ) {
                    p.computeBoundingBox();
                    var u = p.boundingBox.getCenter();
                    a.translateZ(u.x * o)
                }
            } else
                p = l ? new e.Geometry : new e.BufferGeometry,
                L[t.src] = p,
                c.load("/models/" + t.src + ".obj", function(n) {
                    if (n.children[0].geometry.computeVertexNormals(),
                    p.copy(l ? (new e.Geometry).fromBufferGeometry(n.children[0].geometry) : n.children[0].geometry),
                    t.uv2 && p.addAttribute("uv2", new e.BufferAttribute(p.attributes.uv.array,2)),
                    l) {
                        for (var i = new e.Geometry, r = 0; r < R[t.src].length; ++r)
                            g.merge(i, R[t.src][r]);
                        g.add(new e.Mesh(i,h), t),
                        R[t.src].loaded = !0
                    }
                    if (t.centerZ) {
                        p.computeBoundingBox();
                        var s = p.boundingBox.getCenter();
                        a.translateZ(s.x * o)
                    }
                });
            var d = new e.Mesh(p,h);
            d.receiveShadow = !0,
            d.noGreen = t.noGreen,
            d.castShadow = t.shadows,
            d.rotation.y = s || 0,
            g.moveMesh(d, n, i, r),
            g.scaleMesh(d, o || 1, o || 1, o || 1),
            l ? R[t.src] ? R[t.src].loaded ? this.meshGroup(d, t) : R[t.src].push(d) : R[t.src] = [d] : a.add(d)
        }
        ,
        this.genObj3D = function(t, n, i) {
            var r = new e.Object3D;
            return this.moveMesh(r, t || 0, n || 0, i || 0),
            r
        }
        ,
        this.merge = function(t, e, n) {
            e.updateMatrix(),
            t.merge(e.geometry, e.matrix, n)
        }
        ,
        this.meshGroup = function(t, n) {
            var i = n.src + "-" + (n.shadowsR || "a") + (n.emissive || "e") + (n.opacity || "o");
            v[i] || (v[i] = new e.Geometry,
            v[i].data = n),
            t.updateMatrix(),
            v[i].merge(t.geometry, t.matrix)
        }
        ,
        this.addMeshGroups = function() {
            for (var t in v)
                if (v.hasOwnProperty(t)) {
                    var n = new e.Mesh((new e.BufferGeometry).fromGeometry(v[t]));
                    n.groupSrc = v[t].data.src,
                    n.visible = !P[n.groupSrc],
                    n.matrixAutoUpdate = !1,
                    this.add(n, v[t].data)
                }
            v = {}
        }
        ;
        var P = {};
        this.toggleMeshGroup = function(t, n) {
            P[t] = !n,
            this.scene && this.scene.traverse(function(i) {
                i instanceof e.Mesh && i.groupSrc == t && (i.visible = n)
            })
        }
        ,
        this.add = function(t, e) {
            e && (t.castShadow = e.shadows,
            t.receiveShadow = e.shadows || e.shadowsR,
            t.material = this.getMat(e.src, e)),
            this.updateGreenScreen(t),
            this.scene.add(t),
            this.updateShadowMap()
        }
        ,
        this.remove = function(t) {
            this.scene.remove(t)
        }
        ,
        this.moveMesh = function(t, e, n, i) {
            void 0 != e && (t.position.x = e),
            void 0 != n && (t.position.y = n),
            void 0 != i && (t.position.z = i)
        }
        ,
        this.scaleMesh = function(t, e, n, i) {
            t.scale.set(e, n, i)
        }
        ,
        this.rotateMesh = function(t, e, n, i) {
            (e || 0 == e) && (t.rotation.y = e),
            (n || 0 == n) && (t.rotation.x = n),
            (i || 0 == i) && (t.rotation.z = i)
        }
    }
    ,
    t.exports.initScene = function(t) {
        if (i = t,
        t.ambient && (this.ambientLight = new s.AmbientLight(t.ambient),
        this.ambientLight.name = "ambLight",
        this.scene.getObjectByName("ambLight") || this.scene.add(this.ambientLight)),
        t.light) {
            this.skyLight = new s.DirectionalLight(t.light,1.1),
            this.skyLight.name = "skyLight",
            this.scene.getObjectByName("skyLight") || this.scene.add(this.skyLight);
            var e = -.3 * Math.PI
              , n = 2 * Math.PI * -.25;
            this.skyLight.position.x = r.lightDistance * Math.cos(n),
            this.skyLight.position.y = r.lightDistance * Math.sin(n) * Math.sin(e),
            this.skyLight.position.z = r.lightDistance * Math.sin(n) * Math.cos(e),
            this.skyLight.castShadow = !0,
            this.skyLight.shadow.mapSize.width = r.shadowRes,
            this.skyLight.shadow.mapSize.height = r.shadowRes,
            this.skyLight.shadow.camera.far = r.shadowDst
        }
        this.scene.fog = new s.Fog(t.fog,1,t.fogD),
        this.renderer.setClearColor(t.sky),
        this.useDepthMap && "0" != this.useDepthMap && this.toggleDepthMap(this.useDepthMap),
        this.greenScreen && this.toggleGreenscreen(this.greenScreen)
    }
}
, function(t, e, n) {
    var i, r, s = 0, o = function(t) {
        this.sid = s++,
        this.width = t.w,
        this.length = t.l,
        this.height = t.h,
        this.x = t.x,
        this.y = t.y,
        this.z = t.z,
        this.dir = t.d,
        this.src = t.src,
        this.ramp = t.ramp,
        this.ladder = t.ladder,
        this.jumpPad = t.jumpPad,
        this.noShoot = t.noShoot,
        this.stepSrc = t.s,
        this.score = t.score,
        this.kill = t.kill,
        this.dummy = t.dummy,
        this.noVis = t.noVis,
        this.complexMesh = t.complexMesh,
        this.penetrable = t.penetrable,
        this.boost = t.boost
    };
    t.exports.manager = function(t, e, s) {
        var a;
        t && (i = n(7).prefabs,
        r = n(2)),
        this.objects = [],
        this.objectives = [],
        this.collision = function(t, e, n) {
            return t.x - t.width - n <= e.x + e.width && t.x + t.width + n >= e.x - e.width && t.z - t.length - n <= e.z + e.length && t.z + t.length + n >= e.z - e.length && t.y - t.height - n <= e.y + e.height && t.y + t.height + n >= e.y - e.height
        }
        ,
        this.checkPos = function(t, n, i, r, s) {
            for (var o = 0; o < this.objects.length; ++o)
                if (this.objects[o] != r && this.objects[o] != s && !this.objects[o].ramp && e.pointInBox3D(t, n, i, this.objects[o]))
                    return !1;
            return !0
        }
        ,
        this.addCylinder = function(e, n, i, r, s, o) {
            t && (o.shadows = !0,
            t.addCylinder(e, n, i, r, s, o))
        }
        ,
        this.addObjective = function(e, n, i, s, o, a) {
            var c;
            t && ((c = t.addCube(e, n, i, s, a, o, [1, 1, 0, 0, 1, 1], {
                src: "objective_0",
                noGroup: !0,
                mat: r.MeshBasicMaterial,
                transparent: !0,
                depthWrite: !1,
                side: 2
            })).visible = !1),
            this.objectives.push({
                x: e,
                z: i,
                y: n + a / 2,
                mesh: c,
                width: s / 2,
                length: o / 2,
                height: a / 2
            })
        }
        ,
        this.addDeathZone = function(t, e, n, i, r, s) {
            this.objects.push(new o({
                x: t,
                z: n,
                y: e + s / 2,
                w: i / 2,
                l: r / 2,
                h: s / 2,
                kill: !0,
                noShoot: !0,
                complexMesh: !0
            }))
        }
        ,
        this.addScoreZone = function(t, e, n, i, r, s) {
            this.objects.push(new o({
                x: t,
                z: n,
                y: e + s / 2,
                w: i / 2,
                l: r / 2,
                h: s / 2,
                score: !0,
                noShoot: !0,
                complexMesh: !0
            }))
        }
        ,
        this.addLadder = function(n, i, c, l, h, p) {
            var u = s.ladderScale
              , d = s.ladderScale;
            if (0 == h || h == Math.PI ? d = s.ladderWidth : u = s.ladderWidth,
            a = new o({
                ladder: !0,
                complexMesh: !0,
                noShoot: !0,
                d: h,
                x: n + s.ladderScale * Math.cos(h),
                z: c + s.ladderScale * Math.sin(h),
                y: i,
                w: u,
                l: d,
                h: l
            }),
            this.objects.push(a),
            t && !p) {
                var f = {
                    src: "floor_0",
                    vertexColors: r.VertexColors,
                    scale: .02,
                    shadows: !0
                };
                t.addCube(a.x + s.ladderWidth * Math.sin(h), a.y, a.z + s.ladderWidth * Math.cos(h), 2 * s.ladderScale, l + 2, 2 * s.ladderScale, [1, 1, 1, 1, 1, 1], f),
                t.addCube(a.x - s.ladderWidth * Math.sin(h), a.y, a.z - s.ladderWidth * Math.cos(h), 2 * s.ladderScale, l + 2, 2 * s.ladderScale, [1, 1, 1, 1, 1, 1], f);
                for (var m = Math.floor(l / 6), g = 0; g < m; ++g)
                    t.addPlane(a.x, i + 6 * (g + 1) + e.randFloat(-1, 1), a.z, s.ladderWidth, s.ladderScale, f, -h + Math.PI / 2, Math.PI / 2, e.randFloat(-.1, .1))
            }
        }
        ,
        this.addRamp = function(e, n, i, a, c, l, h, p, u, d, f) {
            var m = 0 != h && h != Math.PI
              , g = (m ? l : a) / 2
              , v = Math.sqrt(c * c + l * l)
              , y = Math.asin(c / v);
            if (this.objects.push(new o({
                x: e,
                z: i,
                y: n + c / 2,
                w: a / 2,
                l: l / 2,
                h: c / 2,
                d: h,
                noShoot: !0,
                complexMesh: !0,
                boost: p ? y : null,
                ramp: {
                    sX: e - g * Math.cos(h),
                    sZ: i - g * Math.sin(h),
                    eX: e + g * Math.cos(h),
                    eZ: i + g * Math.sin(h)
                }
            })),
            t && !d) {
                t.addRamp(e, n, i, m ? a : l, c, (m ? l : a) / 2, h, {
                    src: u || "default",
                    colr: f,
                    scale: 1,
                    shadowsR: !0
                }),
                n += s.ambOff;
                var x = (m ? a : l) / 2 - s.ambScale;
                m ? a = 2 * s.ambScale : l = 2 * s.ambScale;
                for (var w = 0; w < 2; ++w) {
                    var b = w ? 1 : -1;
                    t.addRamp(e + x * b * Math.cos(h + Math.PI / 2), n, i + x * b * Math.sin(h + Math.PI / 2), m ? a : l, c, (m ? l : a) / 2, h, {
                        src: "ambient_1",
                        euler: "ZYX",
                        depthWrite: !1,
                        side: r.DoubleSide,
                        transparent: !0
                    }, w ? 0 : Math.PI)
                }
            }
        }
        ,
        this.addBlock = function(e, n, i, s, a, c, l, h) {
            (h = h || {}).src = h.src || "wall_0",
            h.noCol || this.objects.push(new o({
                x: e,
                z: i,
                y: n + c / 2,
                w: s / 2,
                l: a / 2,
                h: c / 2,
                s: h.sound,
                src: h.src,
                noVis: h.noVis,
                penetrable: h.penetrable,
                complexMesh: h.xR || h.yR || h.zR,
                ter: !0
            })),
            t && !h.noVis && (h.vertexColors = r.VertexColors,
            h.scale = void 0 == h.scale ? 1 : h.scale,
            h.shadows = !h.shadowsR,
            t.addCube(e, n, i, s, c, a, l, h))
        }
        ,
        this.addMesh = function(e, n, r, a, c, l, h, p, u) {
            n += l,
            u || this.objects.push(new o({
                complexMesh: !!i && i[p.toUpperCase()].complex,
                x: e,
                z: r,
                y: n,
                w: c,
                l: h,
                h: l,
                ter: !0
            })),
            t && t.loadMesh({
                src: p + "_0",
                emissive: s.propGlows[p] ? 16777215 : null,
                shadows: !0
            }, e, n, r, a, s[p + "Scale"], t.scene, !0)
        }
        ,
        this.addPlane = function(e, n, i, s, a, c, l, h, p) {
            if ((c = c || {}).col && this.objects.push(new o({
                x: e,
                z: i,
                y: n,
                w: a,
                l: s,
                h: 0,
                s: c.sound,
                penetrable: c.penetrable,
                noVis: c.noVis
            })),
            t && !c.noVis)
                return c.transparent = !0,
                c.side = r.DoubleSide,
                t.addPlane(e, n, i, a, s, c, l, (h || 0) + Math.PI / 2, p)
        }
        ,
        this.addAmbient = function(t, e, n, i, r, s, o, a, c) {
            this.addPlane(t, e, n, o, a, {
                src: "ambient_" + (c || 0),
                euler: "ZYX",
                depthWrite: !1
            }, i, r, s)
        }
        ,
        this.limitAmb = function(t, n, i, r, s, o, a) {
            var c = [e.cdv[r]]
              , l = [e.cdv[s]];
            return i == -Math.PI / 2 || i == Math.PI + Math.PI / 2 ? Math.min(t, (n[s] - Math.min(o[s] - o[l], a[s] - a[l])) / 2) : i == Math.PI / 2 ? Math.min(t, (Math.max(o[s] + o[l], a[s] + a[l]) - n[s]) / 2) : 0 == i ? Math.min(t, (Math.max(o[r] + o[c], a[r] + a[c]) - n[r]) / 2) : Math.min(t, (n[r] - Math.min(o[r] - o[c], a[r] - a[c])) / 2)
        }
        ,
        this.removeAll = function() {
            this.objects.length = 0,
            this.objectives.length = 0
        }
    }
}
, function(t, e, n) {
    !function(e) {
        t.exports = e;
        var n = "listeners"
          , i = {
            on: function(t, e) {
                return o(this, t).push(e),
                this
            },
            once: function(t, e) {
                var n = this;
                return i.originalListener = e,
                o(n, t).push(i),
                n;
                function i() {
                    s.call(n, t, i),
                    e.apply(this, arguments)
                }
            },
            off: s,
            emit: function(t, e) {
                var n = this
                  , i = o(n, t, !0);
                if (!i)
                    return !1;
                var r = arguments.length;
                if (1 === r)
                    i.forEach(function(t) {
                        t.call(n)
                    });
                else if (2 === r)
                    i.forEach(function(t) {
                        t.call(n, e)
                    });
                else {
                    var s = Array.prototype.slice.call(arguments, 1);
                    i.forEach(function(t) {
                        t.apply(n, s)
                    })
                }
                return !!i.length
            }
        };
        function r(t) {
            for (var e in i)
                t[e] = i[e];
            return t
        }
        function s(t, e) {
            var i;
            if (arguments.length) {
                if (e) {
                    if (i = o(this, t, !0)) {
                        if (!(i = i.filter(function(t) {
                            return t !== e && t.originalListener !== e
                        })).length)
                            return s.call(this, t);
                        this[n][t] = i
                    }
                } else if ((i = this[n]) && (delete i[t],
                !Object.keys(i).length))
                    return s.call(this)
            } else
                delete this[n];
            return this
        }
        function o(t, e, i) {
            if (!i || t[n]) {
                var r = t[n] || (t[n] = {});
                return r[e] || (r[e] = [])
            }
        }
        r(e.prototype),
        e.mixin = r
    }(function t() {
        if (!(this instanceof t))
            return new t
    })
}
, function(t, e, n) {
    var i = n(12)
      , r = n(10)
      , s = r.Uint64BE
      , o = r.Int64BE;
    e.getReadFormat = function(t) {
        var e = a.hasArrayBuffer && t && t.binarraybuffer
          , n = t && t.int64;
        return {
            map: l && t && t.usemap ? u : p,
            array: d,
            str: f,
            bin: e ? g : m,
            ext: v,
            uint8: y,
            uint16: w,
            uint32: M,
            uint64: S(8, n ? A : E),
            int8: x,
            int16: b,
            int32: _,
            int64: S(8, n ? L : T),
            float32: S(4, R),
            float64: S(8, P)
        }
    }
    ,
    e.readUint8 = y;
    var a = n(0)
      , c = n(11)
      , l = "undefined" != typeof Map
      , h = !0;
    function p(t, e) {
        var n, i = {}, r = new Array(e), s = new Array(e), o = t.codec.decode;
        for (n = 0; n < e; n++)
            r[n] = o(t),
            s[n] = o(t);
        for (n = 0; n < e; n++)
            i[r[n]] = s[n];
        return i
    }
    function u(t, e) {
        var n, i = new Map, r = new Array(e), s = new Array(e), o = t.codec.decode;
        for (n = 0; n < e; n++)
            r[n] = o(t),
            s[n] = o(t);
        for (n = 0; n < e; n++)
            i.set(r[n], s[n]);
        return i
    }
    function d(t, e) {
        for (var n = new Array(e), i = t.codec.decode, r = 0; r < e; r++)
            n[r] = i(t);
        return n
    }
    function f(t, e) {
        var n = t.reserve(e)
          , i = n + e;
        return c.toString.call(t.buffer, "utf-8", n, i)
    }
    function m(t, e) {
        var n = t.reserve(e)
          , i = n + e
          , r = c.slice.call(t.buffer, n, i);
        return a.from(r)
    }
    function g(t, e) {
        var n = t.reserve(e)
          , i = n + e
          , r = c.slice.call(t.buffer, n, i);
        return a.Uint8Array.from(r).buffer
    }
    function v(t, e) {
        var n = t.reserve(e + 1)
          , i = t.buffer[n++]
          , r = n + e
          , s = t.codec.getExtUnpacker(i);
        if (!s)
            throw new Error("Invalid ext type: " + (i ? "0x" + i.toString(16) : i));
        return s(c.slice.call(t.buffer, n, r))
    }
    function y(t) {
        var e = t.reserve(1);
        return t.buffer[e]
    }
    function x(t) {
        var e = t.reserve(1)
          , n = t.buffer[e];
        return 128 & n ? n - 256 : n
    }
    function w(t) {
        var e = t.reserve(2)
          , n = t.buffer;
        return n[e++] << 8 | n[e]
    }
    function b(t) {
        var e = t.reserve(2)
          , n = t.buffer
          , i = n[e++] << 8 | n[e];
        return 32768 & i ? i - 65536 : i
    }
    function M(t) {
        var e = t.reserve(4)
          , n = t.buffer;
        return 16777216 * n[e++] + (n[e++] << 16) + (n[e++] << 8) + n[e]
    }
    function _(t) {
        var e = t.reserve(4)
          , n = t.buffer;
        return n[e++] << 24 | n[e++] << 16 | n[e++] << 8 | n[e]
    }
    function S(t, e) {
        return function(n) {
            var i = n.reserve(t);
            return e.call(n.buffer, i, h)
        }
    }
    function E(t) {
        return new s(this,t).toNumber()
    }
    function T(t) {
        return new o(this,t).toNumber()
    }
    function A(t) {
        return new s(this,t)
    }
    function L(t) {
        return new o(this,t)
    }
    function R(t) {
        return i.read(this, t, !1, 23, 4)
    }
    function P(t) {
        return i.read(this, t, !1, 52, 8)
    }
}
, function(t, e, n) {
    e.DecodeBuffer = r;
    var i = n(9).preset;
    function r(t) {
        if (!(this instanceof r))
            return new r(t);
        if (t && (this.options = t,
        t.codec)) {
            var e = this.codec = t.codec;
            e.bufferish && (this.bufferish = e.bufferish)
        }
    }
    n(22).FlexDecoder.mixin(r.prototype),
    r.prototype.codec = i,
    r.prototype.fetch = function() {
        return this.codec.decode(this)
    }
}
, function(t, e, n) {
    e.decode = function(t, e) {
        var n = new i(e);
        return n.write(t),
        n.read()
    }
    ;
    var i = n(20).DecodeBuffer
}
, function(t, e, n) {
    e.FlexDecoder = s,
    e.FlexEncoder = o;
    var i = n(0)
      , r = "BUFFER_SHORTAGE";
    function s() {
        if (!(this instanceof s))
            return new s
    }
    function o() {
        if (!(this instanceof o))
            return new o
    }
    function a() {
        throw new Error("method not implemented: write()")
    }
    function c() {
        throw new Error("method not implemented: fetch()")
    }
    function l() {
        return this.buffers && this.buffers.length ? (this.flush(),
        this.pull()) : this.fetch()
    }
    function h(t) {
        (this.buffers || (this.buffers = [])).push(t)
    }
    function p() {
        return (this.buffers || (this.buffers = [])).shift()
    }
    function u(t) {
        return function(e) {
            for (var n in t)
                e[n] = t[n];
            return e
        }
    }
    s.mixin = u({
        bufferish: i,
        write: function(t) {
            var e = this.offset ? i.prototype.slice.call(this.buffer, this.offset) : this.buffer;
            this.buffer = e ? t ? this.bufferish.concat([e, t]) : e : t,
            this.offset = 0
        },
        fetch: c,
        flush: function() {
            for (; this.offset < this.buffer.length; ) {
                var t, e = this.offset;
                try {
                    t = this.fetch()
                } catch (t) {
                    if (t && t.message != r)
                        throw t;
                    this.offset = e;
                    break
                }
                this.push(t)
            }
        },
        push: h,
        pull: p,
        read: l,
        reserve: function(t) {
            var e = this.offset
              , n = e + t;
            if (n > this.buffer.length)
                throw new Error(r);
            return this.offset = n,
            e
        },
        offset: 0
    }),
    s.mixin(s.prototype),
    o.mixin = u({
        bufferish: i,
        write: a,
        fetch: function() {
            var t = this.start;
            if (t < this.offset) {
                var e = this.start = this.offset;
                return i.prototype.slice.call(this.buffer, t, e)
            }
        },
        flush: function() {
            for (; this.start < this.offset; ) {
                var t = this.fetch();
                t && this.push(t)
            }
        },
        push: h,
        pull: function() {
            var t = this.buffers || (this.buffers = [])
              , e = t.length > 1 ? this.bufferish.concat(t) : t[0];
            return t.length = 0,
            e
        },
        read: l,
        reserve: function(t) {
            var e = 0 | t;
            if (this.buffer) {
                var n = this.buffer.length
                  , i = 0 | this.offset
                  , r = i + e;
                if (r < n)
                    return this.offset = r,
                    i;
                this.flush(),
                t = Math.max(t, Math.min(2 * n, this.maxBufferSize))
            }
            return t = Math.max(t, this.minBufferSize),
            this.buffer = this.bufferish.alloc(t),
            this.start = 0,
            this.offset = e,
            0
        },
        send: function(t) {
            var e = t.length;
            if (e > this.minBufferSize)
                this.flush(),
                this.push(t);
            else {
                var n = this.reserve(e);
                i.prototype.copy.call(t, this.buffer, n)
            }
        },
        maxBufferSize: 65536,
        minBufferSize: 2048,
        offset: 0,
        start: 0
    }),
    o.mixin(o.prototype)
}
, function(t, e) {
    for (var n = e.uint8 = new Array(256), i = 0; i <= 255; i++)
        n[i] = r(i);
    function r(t) {
        return function(e) {
            var n = e.reserve(1);
            e.buffer[n] = t
        }
    }
}
, function(t, e, n) {
    "use strict";
    (function(t) {
        var i = n(47)
          , r = n(12)
          , s = n(5);
        function o() {
            return c.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823
        }
        function a(t, e) {
            if (o() < e)
                throw new RangeError("Invalid typed array length");
            return c.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = c.prototype : (null === t && (t = new c(e)),
            t.length = e),
            t
        }
        function c(t, e, n) {
            if (!(c.TYPED_ARRAY_SUPPORT || this instanceof c))
                return new c(t,e,n);
            if ("number" == typeof t) {
                if ("string" == typeof e)
                    throw new Error("If encoding is specified then the first argument must be a string");
                return p(this, t)
            }
            return l(this, t, e, n)
        }
        function l(t, e, n, i) {
            if ("number" == typeof e)
                throw new TypeError('"value" argument must not be a number');
            return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function(t, e, n, i) {
                if (e.byteLength,
                n < 0 || e.byteLength < n)
                    throw new RangeError("'offset' is out of bounds");
                if (e.byteLength < n + (i || 0))
                    throw new RangeError("'length' is out of bounds");
                return e = void 0 === n && void 0 === i ? new Uint8Array(e) : void 0 === i ? new Uint8Array(e,n) : new Uint8Array(e,n,i),
                c.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = c.prototype : t = u(t, e),
                t
            }(t, e, n, i) : "string" == typeof e ? function(t, e, n) {
                if ("string" == typeof n && "" !== n || (n = "utf8"),
                !c.isEncoding(n))
                    throw new TypeError('"encoding" must be a valid string encoding');
                var i = 0 | f(e, n)
                  , r = (t = a(t, i)).write(e, n);
                return r !== i && (t = t.slice(0, r)),
                t
            }(t, e, n) : function(t, e) {
                if (c.isBuffer(e)) {
                    var n = 0 | d(e.length);
                    return 0 === (t = a(t, n)).length ? t : (e.copy(t, 0, 0, n),
                    t)
                }
                if (e) {
                    if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length"in e)
                        return "number" != typeof e.length || function(t) {
                            return t != t
                        }(e.length) ? a(t, 0) : u(t, e);
                    if ("Buffer" === e.type && s(e.data))
                        return u(t, e.data)
                }
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")
            }(t, e)
        }
        function h(t) {
            if ("number" != typeof t)
                throw new TypeError('"size" argument must be a number');
            if (t < 0)
                throw new RangeError('"size" argument must not be negative')
        }
        function p(t, e) {
            if (h(e),
            t = a(t, e < 0 ? 0 : 0 | d(e)),
            !c.TYPED_ARRAY_SUPPORT)
                for (var n = 0; n < e; ++n)
                    t[n] = 0;
            return t
        }
        function u(t, e) {
            var n = e.length < 0 ? 0 : 0 | d(e.length);
            t = a(t, n);
            for (var i = 0; i < n; i += 1)
                t[i] = 255 & e[i];
            return t
        }
        function d(t) {
            if (t >= o())
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o().toString(16) + " bytes");
            return 0 | t
        }
        function f(t, e) {
            if (c.isBuffer(t))
                return t.length;
            if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer))
                return t.byteLength;
            "string" != typeof t && (t = "" + t);
            var n = t.length;
            if (0 === n)
                return 0;
            for (var i = !1; ; )
                switch (e) {
                case "ascii":
                case "latin1":
                case "binary":
                    return n;
                case "utf8":
                case "utf-8":
                case void 0:
                    return F(t).length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return 2 * n;
                case "hex":
                    return n >>> 1;
                case "base64":
                    return H(t).length;
                default:
                    if (i)
                        return F(t).length;
                    e = ("" + e).toLowerCase(),
                    i = !0
                }
        }
        function m(t, e, n) {
            var i = t[e];
            t[e] = t[n],
            t[n] = i
        }
        function g(t, e, n, i, r) {
            if (0 === t.length)
                return -1;
            if ("string" == typeof n ? (i = n,
            n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648),
            n = +n,
            isNaN(n) && (n = r ? 0 : t.length - 1),
            n < 0 && (n = t.length + n),
            n >= t.length) {
                if (r)
                    return -1;
                n = t.length - 1
            } else if (n < 0) {
                if (!r)
                    return -1;
                n = 0
            }
            if ("string" == typeof e && (e = c.from(e, i)),
            c.isBuffer(e))
                return 0 === e.length ? -1 : v(t, e, n, i, r);
            if ("number" == typeof e)
                return e &= 255,
                c.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? r ? Uint8Array.prototype.indexOf.call(t, e, n) : Uint8Array.prototype.lastIndexOf.call(t, e, n) : v(t, [e], n, i, r);
            throw new TypeError("val must be string, number or Buffer")
        }
        function v(t, e, n, i, r) {
            var s, o = 1, a = t.length, c = e.length;
            if (void 0 !== i && ("ucs2" === (i = String(i).toLowerCase()) || "ucs-2" === i || "utf16le" === i || "utf-16le" === i)) {
                if (t.length < 2 || e.length < 2)
                    return -1;
                o = 2,
                a /= 2,
                c /= 2,
                n /= 2
            }
            function l(t, e) {
                return 1 === o ? t[e] : t.readUInt16BE(e * o)
            }
            if (r) {
                var h = -1;
                for (s = n; s < a; s++)
                    if (l(t, s) === l(e, -1 === h ? 0 : s - h)) {
                        if (-1 === h && (h = s),
                        s - h + 1 === c)
                            return h * o
                    } else
                        -1 !== h && (s -= s - h),
                        h = -1
            } else
                for (n + c > a && (n = a - c),
                s = n; s >= 0; s--) {
                    for (var p = !0, u = 0; u < c; u++)
                        if (l(t, s + u) !== l(e, u)) {
                            p = !1;
                            break
                        }
                    if (p)
                        return s
                }
            return -1
        }
        function y(t, e, n, i) {
            n = Number(n) || 0;
            var r = t.length - n;
            i ? (i = Number(i)) > r && (i = r) : i = r;
            var s = e.length;
            if (s % 2 != 0)
                throw new TypeError("Invalid hex string");
            i > s / 2 && (i = s / 2);
            for (var o = 0; o < i; ++o) {
                var a = parseInt(e.substr(2 * o, 2), 16);
                if (isNaN(a))
                    return o;
                t[n + o] = a
            }
            return o
        }
        function x(t, e, n, i) {
            return G(F(e, t.length - n), t, n, i)
        }
        function w(t, e, n, i) {
            return G(function(t) {
                for (var e = [], n = 0; n < t.length; ++n)
                    e.push(255 & t.charCodeAt(n));
                return e
            }(e), t, n, i)
        }
        function b(t, e, n, i) {
            return w(t, e, n, i)
        }
        function M(t, e, n, i) {
            return G(H(e), t, n, i)
        }
        function _(t, e, n, i) {
            return G(function(t, e) {
                for (var n, i, r, s = [], o = 0; o < t.length && !((e -= 2) < 0); ++o)
                    i = (n = t.charCodeAt(o)) >> 8,
                    r = n % 256,
                    s.push(r),
                    s.push(i);
                return s
            }(e, t.length - n), t, n, i)
        }
        function S(t, e, n) {
            return 0 === e && n === t.length ? i.fromByteArray(t) : i.fromByteArray(t.slice(e, n))
        }
        function E(t, e, n) {
            n = Math.min(t.length, n);
            for (var i = [], r = e; r < n; ) {
                var s, o, a, c, l = t[r], h = null, p = l > 239 ? 4 : l > 223 ? 3 : l > 191 ? 2 : 1;
                if (r + p <= n)
                    switch (p) {
                    case 1:
                        l < 128 && (h = l);
                        break;
                    case 2:
                        128 == (192 & (s = t[r + 1])) && (c = (31 & l) << 6 | 63 & s) > 127 && (h = c);
                        break;
                    case 3:
                        s = t[r + 1],
                        o = t[r + 2],
                        128 == (192 & s) && 128 == (192 & o) && (c = (15 & l) << 12 | (63 & s) << 6 | 63 & o) > 2047 && (c < 55296 || c > 57343) && (h = c);
                        break;
                    case 4:
                        s = t[r + 1],
                        o = t[r + 2],
                        a = t[r + 3],
                        128 == (192 & s) && 128 == (192 & o) && 128 == (192 & a) && (c = (15 & l) << 18 | (63 & s) << 12 | (63 & o) << 6 | 63 & a) > 65535 && c < 1114112 && (h = c)
                    }
                null === h ? (h = 65533,
                p = 1) : h > 65535 && (h -= 65536,
                i.push(h >>> 10 & 1023 | 55296),
                h = 56320 | 1023 & h),
                i.push(h),
                r += p
            }
            return function(t) {
                var e = t.length;
                if (e <= T)
                    return String.fromCharCode.apply(String, t);
                for (var n = "", i = 0; i < e; )
                    n += String.fromCharCode.apply(String, t.slice(i, i += T));
                return n
            }(i)
        }
        e.Buffer = c,
        e.SlowBuffer = function(t) {
            return +t != t && (t = 0),
            c.alloc(+t)
        }
        ,
        e.INSPECT_MAX_BYTES = 50,
        c.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function() {
            try {
                var t = new Uint8Array(1);
                return t.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function() {
                        return 42
                    }
                },
                42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength
            } catch (t) {
                return !1
            }
        }(),
        e.kMaxLength = o(),
        c.poolSize = 8192,
        c._augment = function(t) {
            return t.__proto__ = c.prototype,
            t
        }
        ,
        c.from = function(t, e, n) {
            return l(null, t, e, n)
        }
        ,
        c.TYPED_ARRAY_SUPPORT && (c.prototype.__proto__ = Uint8Array.prototype,
        c.__proto__ = Uint8Array,
        "undefined" != typeof Symbol && Symbol.species && c[Symbol.species] === c && Object.defineProperty(c, Symbol.species, {
            value: null,
            configurable: !0
        })),
        c.alloc = function(t, e, n) {
            return function(t, e, n, i) {
                return h(e),
                e <= 0 ? a(t, e) : void 0 !== n ? "string" == typeof i ? a(t, e).fill(n, i) : a(t, e).fill(n) : a(t, e)
            }(null, t, e, n)
        }
        ,
        c.allocUnsafe = function(t) {
            return p(null, t)
        }
        ,
        c.allocUnsafeSlow = function(t) {
            return p(null, t)
        }
        ,
        c.isBuffer = function(t) {
            return !(null == t || !t._isBuffer)
        }
        ,
        c.compare = function(t, e) {
            if (!c.isBuffer(t) || !c.isBuffer(e))
                throw new TypeError("Arguments must be Buffers");
            if (t === e)
                return 0;
            for (var n = t.length, i = e.length, r = 0, s = Math.min(n, i); r < s; ++r)
                if (t[r] !== e[r]) {
                    n = t[r],
                    i = e[r];
                    break
                }
            return n < i ? -1 : i < n ? 1 : 0
        }
        ,
        c.isEncoding = function(t) {
            switch (String(t).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return !0;
            default:
                return !1
            }
        }
        ,
        c.concat = function(t, e) {
            if (!s(t))
                throw new TypeError('"list" argument must be an Array of Buffers');
            if (0 === t.length)
                return c.alloc(0);
            var n;
            if (void 0 === e)
                for (e = 0,
                n = 0; n < t.length; ++n)
                    e += t[n].length;
            var i = c.allocUnsafe(e)
              , r = 0;
            for (n = 0; n < t.length; ++n) {
                var o = t[n];
                if (!c.isBuffer(o))
                    throw new TypeError('"list" argument must be an Array of Buffers');
                o.copy(i, r),
                r += o.length
            }
            return i
        }
        ,
        c.byteLength = f,
        c.prototype._isBuffer = !0,
        c.prototype.swap16 = function() {
            var t = this.length;
            if (t % 2 != 0)
                throw new RangeError("Buffer size must be a multiple of 16-bits");
            for (var e = 0; e < t; e += 2)
                m(this, e, e + 1);
            return this
        }
        ,
        c.prototype.swap32 = function() {
            var t = this.length;
            if (t % 4 != 0)
                throw new RangeError("Buffer size must be a multiple of 32-bits");
            for (var e = 0; e < t; e += 4)
                m(this, e, e + 3),
                m(this, e + 1, e + 2);
            return this
        }
        ,
        c.prototype.swap64 = function() {
            var t = this.length;
            if (t % 8 != 0)
                throw new RangeError("Buffer size must be a multiple of 64-bits");
            for (var e = 0; e < t; e += 8)
                m(this, e, e + 7),
                m(this, e + 1, e + 6),
                m(this, e + 2, e + 5),
                m(this, e + 3, e + 4);
            return this
        }
        ,
        c.prototype.toString = function() {
            var t = 0 | this.length;
            return 0 === t ? "" : 0 === arguments.length ? E(this, 0, t) : function(t, e, n) {
                var i = !1;
                if ((void 0 === e || e < 0) && (e = 0),
                e > this.length)
                    return "";
                if ((void 0 === n || n > this.length) && (n = this.length),
                n <= 0)
                    return "";
                if ((n >>>= 0) <= (e >>>= 0))
                    return "";
                for (t || (t = "utf8"); ; )
                    switch (t) {
                    case "hex":
                        return R(this, e, n);
                    case "utf8":
                    case "utf-8":
                        return E(this, e, n);
                    case "ascii":
                        return A(this, e, n);
                    case "latin1":
                    case "binary":
                        return L(this, e, n);
                    case "base64":
                        return S(this, e, n);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return P(this, e, n);
                    default:
                        if (i)
                            throw new TypeError("Unknown encoding: " + t);
                        t = (t + "").toLowerCase(),
                        i = !0
                    }
            }
            .apply(this, arguments)
        }
        ,
        c.prototype.equals = function(t) {
            if (!c.isBuffer(t))
                throw new TypeError("Argument must be a Buffer");
            return this === t || 0 === c.compare(this, t)
        }
        ,
        c.prototype.inspect = function() {
            var t = ""
              , n = e.INSPECT_MAX_BYTES;
            return this.length > 0 && (t = this.toString("hex", 0, n).match(/.{2}/g).join(" "),
            this.length > n && (t += " ... ")),
            "<Buffer " + t + ">"
        }
        ,
        c.prototype.compare = function(t, e, n, i, r) {
            if (!c.isBuffer(t))
                throw new TypeError("Argument must be a Buffer");
            if (void 0 === e && (e = 0),
            void 0 === n && (n = t ? t.length : 0),
            void 0 === i && (i = 0),
            void 0 === r && (r = this.length),
            e < 0 || n > t.length || i < 0 || r > this.length)
                throw new RangeError("out of range index");
            if (i >= r && e >= n)
                return 0;
            if (i >= r)
                return -1;
            if (e >= n)
                return 1;
            if (e >>>= 0,
            n >>>= 0,
            i >>>= 0,
            r >>>= 0,
            this === t)
                return 0;
            for (var s = r - i, o = n - e, a = Math.min(s, o), l = this.slice(i, r), h = t.slice(e, n), p = 0; p < a; ++p)
                if (l[p] !== h[p]) {
                    s = l[p],
                    o = h[p];
                    break
                }
            return s < o ? -1 : o < s ? 1 : 0
        }
        ,
        c.prototype.includes = function(t, e, n) {
            return -1 !== this.indexOf(t, e, n)
        }
        ,
        c.prototype.indexOf = function(t, e, n) {
            return g(this, t, e, n, !0)
        }
        ,
        c.prototype.lastIndexOf = function(t, e, n) {
            return g(this, t, e, n, !1)
        }
        ,
        c.prototype.write = function(t, e, n, i) {
            if (void 0 === e)
                i = "utf8",
                n = this.length,
                e = 0;
            else if (void 0 === n && "string" == typeof e)
                i = e,
                n = this.length,
                e = 0;
            else {
                if (!isFinite(e))
                    throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                e |= 0,
                isFinite(n) ? (n |= 0,
                void 0 === i && (i = "utf8")) : (i = n,
                n = void 0)
            }
            var r = this.length - e;
            if ((void 0 === n || n > r) && (n = r),
            t.length > 0 && (n < 0 || e < 0) || e > this.length)
                throw new RangeError("Attempt to write outside buffer bounds");
            i || (i = "utf8");
            for (var s = !1; ; )
                switch (i) {
                case "hex":
                    return y(this, t, e, n);
                case "utf8":
                case "utf-8":
                    return x(this, t, e, n);
                case "ascii":
                    return w(this, t, e, n);
                case "latin1":
                case "binary":
                    return b(this, t, e, n);
                case "base64":
                    return M(this, t, e, n);
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return _(this, t, e, n);
                default:
                    if (s)
                        throw new TypeError("Unknown encoding: " + i);
                    i = ("" + i).toLowerCase(),
                    s = !0
                }
        }
        ,
        c.prototype.toJSON = function() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        }
        ;
        var T = 4096;
        function A(t, e, n) {
            var i = "";
            n = Math.min(t.length, n);
            for (var r = e; r < n; ++r)
                i += String.fromCharCode(127 & t[r]);
            return i
        }
        function L(t, e, n) {
            var i = "";
            n = Math.min(t.length, n);
            for (var r = e; r < n; ++r)
                i += String.fromCharCode(t[r]);
            return i
        }
        function R(t, e, n) {
            var i = t.length;
            (!e || e < 0) && (e = 0),
            (!n || n < 0 || n > i) && (n = i);
            for (var r = "", s = e; s < n; ++s)
                r += z(t[s]);
            return r
        }
        function P(t, e, n) {
            for (var i = t.slice(e, n), r = "", s = 0; s < i.length; s += 2)
                r += String.fromCharCode(i[s] + 256 * i[s + 1]);
            return r
        }
        function C(t, e, n) {
            if (t % 1 != 0 || t < 0)
                throw new RangeError("offset is not uint");
            if (t + e > n)
                throw new RangeError("Trying to access beyond buffer length")
        }
        function I(t, e, n, i, r, s) {
            if (!c.isBuffer(t))
                throw new TypeError('"buffer" argument must be a Buffer instance');
            if (e > r || e < s)
                throw new RangeError('"value" argument is out of bounds');
            if (n + i > t.length)
                throw new RangeError("Index out of range")
        }
        function O(t, e, n, i) {
            e < 0 && (e = 65535 + e + 1);
            for (var r = 0, s = Math.min(t.length - n, 2); r < s; ++r)
                t[n + r] = (e & 255 << 8 * (i ? r : 1 - r)) >>> 8 * (i ? r : 1 - r)
        }
        function D(t, e, n, i) {
            e < 0 && (e = 4294967295 + e + 1);
            for (var r = 0, s = Math.min(t.length - n, 4); r < s; ++r)
                t[n + r] = e >>> 8 * (i ? r : 3 - r) & 255
        }
        function k(t, e, n, i, r, s) {
            if (n + i > t.length)
                throw new RangeError("Index out of range");
            if (n < 0)
                throw new RangeError("Index out of range")
        }
        function B(t, e, n, i, s) {
            return s || k(t, 0, n, 4),
            r.write(t, e, n, i, 23, 4),
            n + 4
        }
        function N(t, e, n, i, s) {
            return s || k(t, 0, n, 8),
            r.write(t, e, n, i, 52, 8),
            n + 8
        }
        c.prototype.slice = function(t, e) {
            var n, i = this.length;
            if (t = ~~t,
            e = void 0 === e ? i : ~~e,
            t < 0 ? (t += i) < 0 && (t = 0) : t > i && (t = i),
            e < 0 ? (e += i) < 0 && (e = 0) : e > i && (e = i),
            e < t && (e = t),
            c.TYPED_ARRAY_SUPPORT)
                (n = this.subarray(t, e)).__proto__ = c.prototype;
            else {
                var r = e - t;
                n = new c(r,void 0);
                for (var s = 0; s < r; ++s)
                    n[s] = this[s + t]
            }
            return n
        }
        ,
        c.prototype.readUIntLE = function(t, e, n) {
            t |= 0,
            e |= 0,
            n || C(t, e, this.length);
            for (var i = this[t], r = 1, s = 0; ++s < e && (r *= 256); )
                i += this[t + s] * r;
            return i
        }
        ,
        c.prototype.readUIntBE = function(t, e, n) {
            t |= 0,
            e |= 0,
            n || C(t, e, this.length);
            for (var i = this[t + --e], r = 1; e > 0 && (r *= 256); )
                i += this[t + --e] * r;
            return i
        }
        ,
        c.prototype.readUInt8 = function(t, e) {
            return e || C(t, 1, this.length),
            this[t]
        }
        ,
        c.prototype.readUInt16LE = function(t, e) {
            return e || C(t, 2, this.length),
            this[t] | this[t + 1] << 8
        }
        ,
        c.prototype.readUInt16BE = function(t, e) {
            return e || C(t, 2, this.length),
            this[t] << 8 | this[t + 1]
        }
        ,
        c.prototype.readUInt32LE = function(t, e) {
            return e || C(t, 4, this.length),
            (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3]
        }
        ,
        c.prototype.readUInt32BE = function(t, e) {
            return e || C(t, 4, this.length),
            16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3])
        }
        ,
        c.prototype.readIntLE = function(t, e, n) {
            t |= 0,
            e |= 0,
            n || C(t, e, this.length);
            for (var i = this[t], r = 1, s = 0; ++s < e && (r *= 256); )
                i += this[t + s] * r;
            return i >= (r *= 128) && (i -= Math.pow(2, 8 * e)),
            i
        }
        ,
        c.prototype.readIntBE = function(t, e, n) {
            t |= 0,
            e |= 0,
            n || C(t, e, this.length);
            for (var i = e, r = 1, s = this[t + --i]; i > 0 && (r *= 256); )
                s += this[t + --i] * r;
            return s >= (r *= 128) && (s -= Math.pow(2, 8 * e)),
            s
        }
        ,
        c.prototype.readInt8 = function(t, e) {
            return e || C(t, 1, this.length),
            128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
        }
        ,
        c.prototype.readInt16LE = function(t, e) {
            e || C(t, 2, this.length);
            var n = this[t] | this[t + 1] << 8;
            return 32768 & n ? 4294901760 | n : n
        }
        ,
        c.prototype.readInt16BE = function(t, e) {
            e || C(t, 2, this.length);
            var n = this[t + 1] | this[t] << 8;
            return 32768 & n ? 4294901760 | n : n
        }
        ,
        c.prototype.readInt32LE = function(t, e) {
            return e || C(t, 4, this.length),
            this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24
        }
        ,
        c.prototype.readInt32BE = function(t, e) {
            return e || C(t, 4, this.length),
            this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]
        }
        ,
        c.prototype.readFloatLE = function(t, e) {
            return e || C(t, 4, this.length),
            r.read(this, t, !0, 23, 4)
        }
        ,
        c.prototype.readFloatBE = function(t, e) {
            return e || C(t, 4, this.length),
            r.read(this, t, !1, 23, 4)
        }
        ,
        c.prototype.readDoubleLE = function(t, e) {
            return e || C(t, 8, this.length),
            r.read(this, t, !0, 52, 8)
        }
        ,
        c.prototype.readDoubleBE = function(t, e) {
            return e || C(t, 8, this.length),
            r.read(this, t, !1, 52, 8)
        }
        ,
        c.prototype.writeUIntLE = function(t, e, n, i) {
            t = +t,
            e |= 0,
            n |= 0,
            i || I(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var r = 1
              , s = 0;
            for (this[e] = 255 & t; ++s < n && (r *= 256); )
                this[e + s] = t / r & 255;
            return e + n
        }
        ,
        c.prototype.writeUIntBE = function(t, e, n, i) {
            t = +t,
            e |= 0,
            n |= 0,
            i || I(this, t, e, n, Math.pow(2, 8 * n) - 1, 0);
            var r = n - 1
              , s = 1;
            for (this[e + r] = 255 & t; --r >= 0 && (s *= 256); )
                this[e + r] = t / s & 255;
            return e + n
        }
        ,
        c.prototype.writeUInt8 = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 1, 255, 0),
            c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
            this[e] = 255 & t,
            e + 1
        }
        ,
        c.prototype.writeUInt16LE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 2, 65535, 0),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t,
            this[e + 1] = t >>> 8) : O(this, t, e, !0),
            e + 2
        }
        ,
        c.prototype.writeUInt16BE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 2, 65535, 0),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8,
            this[e + 1] = 255 & t) : O(this, t, e, !1),
            e + 2
        }
        ,
        c.prototype.writeUInt32LE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 4, 4294967295, 0),
            c.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24,
            this[e + 2] = t >>> 16,
            this[e + 1] = t >>> 8,
            this[e] = 255 & t) : D(this, t, e, !0),
            e + 4
        }
        ,
        c.prototype.writeUInt32BE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 4, 4294967295, 0),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24,
            this[e + 1] = t >>> 16,
            this[e + 2] = t >>> 8,
            this[e + 3] = 255 & t) : D(this, t, e, !1),
            e + 4
        }
        ,
        c.prototype.writeIntLE = function(t, e, n, i) {
            if (t = +t,
            e |= 0,
            !i) {
                var r = Math.pow(2, 8 * n - 1);
                I(this, t, e, n, r - 1, -r)
            }
            var s = 0
              , o = 1
              , a = 0;
            for (this[e] = 255 & t; ++s < n && (o *= 256); )
                t < 0 && 0 === a && 0 !== this[e + s - 1] && (a = 1),
                this[e + s] = (t / o >> 0) - a & 255;
            return e + n
        }
        ,
        c.prototype.writeIntBE = function(t, e, n, i) {
            if (t = +t,
            e |= 0,
            !i) {
                var r = Math.pow(2, 8 * n - 1);
                I(this, t, e, n, r - 1, -r)
            }
            var s = n - 1
              , o = 1
              , a = 0;
            for (this[e + s] = 255 & t; --s >= 0 && (o *= 256); )
                t < 0 && 0 === a && 0 !== this[e + s + 1] && (a = 1),
                this[e + s] = (t / o >> 0) - a & 255;
            return e + n
        }
        ,
        c.prototype.writeInt8 = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 1, 127, -128),
            c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
            t < 0 && (t = 255 + t + 1),
            this[e] = 255 & t,
            e + 1
        }
        ,
        c.prototype.writeInt16LE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 2, 32767, -32768),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t,
            this[e + 1] = t >>> 8) : O(this, t, e, !0),
            e + 2
        }
        ,
        c.prototype.writeInt16BE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 2, 32767, -32768),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8,
            this[e + 1] = 255 & t) : O(this, t, e, !1),
            e + 2
        }
        ,
        c.prototype.writeInt32LE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 4, 2147483647, -2147483648),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t,
            this[e + 1] = t >>> 8,
            this[e + 2] = t >>> 16,
            this[e + 3] = t >>> 24) : D(this, t, e, !0),
            e + 4
        }
        ,
        c.prototype.writeInt32BE = function(t, e, n) {
            return t = +t,
            e |= 0,
            n || I(this, t, e, 4, 2147483647, -2147483648),
            t < 0 && (t = 4294967295 + t + 1),
            c.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24,
            this[e + 1] = t >>> 16,
            this[e + 2] = t >>> 8,
            this[e + 3] = 255 & t) : D(this, t, e, !1),
            e + 4
        }
        ,
        c.prototype.writeFloatLE = function(t, e, n) {
            return B(this, t, e, !0, n)
        }
        ,
        c.prototype.writeFloatBE = function(t, e, n) {
            return B(this, t, e, !1, n)
        }
        ,
        c.prototype.writeDoubleLE = function(t, e, n) {
            return N(this, t, e, !0, n)
        }
        ,
        c.prototype.writeDoubleBE = function(t, e, n) {
            return N(this, t, e, !1, n)
        }
        ,
        c.prototype.copy = function(t, e, n, i) {
            if (n || (n = 0),
            i || 0 === i || (i = this.length),
            e >= t.length && (e = t.length),
            e || (e = 0),
            i > 0 && i < n && (i = n),
            i === n)
                return 0;
            if (0 === t.length || 0 === this.length)
                return 0;
            if (e < 0)
                throw new RangeError("targetStart out of bounds");
            if (n < 0 || n >= this.length)
                throw new RangeError("sourceStart out of bounds");
            if (i < 0)
                throw new RangeError("sourceEnd out of bounds");
            i > this.length && (i = this.length),
            t.length - e < i - n && (i = t.length - e + n);
            var r, s = i - n;
            if (this === t && n < e && e < i)
                for (r = s - 1; r >= 0; --r)
                    t[r + e] = this[r + n];
            else if (s < 1e3 || !c.TYPED_ARRAY_SUPPORT)
                for (r = 0; r < s; ++r)
                    t[r + e] = this[r + n];
            else
                Uint8Array.prototype.set.call(t, this.subarray(n, n + s), e);
            return s
        }
        ,
        c.prototype.fill = function(t, e, n, i) {
            if ("string" == typeof t) {
                if ("string" == typeof e ? (i = e,
                e = 0,
                n = this.length) : "string" == typeof n && (i = n,
                n = this.length),
                1 === t.length) {
                    var r = t.charCodeAt(0);
                    r < 256 && (t = r)
                }
                if (void 0 !== i && "string" != typeof i)
                    throw new TypeError("encoding must be a string");
                if ("string" == typeof i && !c.isEncoding(i))
                    throw new TypeError("Unknown encoding: " + i)
            } else
                "number" == typeof t && (t &= 255);
            if (e < 0 || this.length < e || this.length < n)
                throw new RangeError("Out of range index");
            if (n <= e)
                return this;
            var s;
            if (e >>>= 0,
            n = void 0 === n ? this.length : n >>> 0,
            t || (t = 0),
            "number" == typeof t)
                for (s = e; s < n; ++s)
                    this[s] = t;
            else {
                var o = c.isBuffer(t) ? t : F(new c(t,i).toString())
                  , a = o.length;
                for (s = 0; s < n - e; ++s)
                    this[s + e] = o[s % a]
            }
            return this
        }
        ;
        var U = /[^+\/0-9A-Za-z-_]/g;
        function z(t) {
            return t < 16 ? "0" + t.toString(16) : t.toString(16)
        }
        function F(t, e) {
            var n;
            e = e || 1 / 0;
            for (var i = t.length, r = null, s = [], o = 0; o < i; ++o) {
                if ((n = t.charCodeAt(o)) > 55295 && n < 57344) {
                    if (!r) {
                        if (n > 56319) {
                            (e -= 3) > -1 && s.push(239, 191, 189);
                            continue
                        }
                        if (o + 1 === i) {
                            (e -= 3) > -1 && s.push(239, 191, 189);
                            continue
                        }
                        r = n;
                        continue
                    }
                    if (n < 56320) {
                        (e -= 3) > -1 && s.push(239, 191, 189),
                        r = n;
                        continue
                    }
                    n = 65536 + (r - 55296 << 10 | n - 56320)
                } else
                    r && (e -= 3) > -1 && s.push(239, 191, 189);
                if (r = null,
                n < 128) {
                    if ((e -= 1) < 0)
                        break;
                    s.push(n)
                } else if (n < 2048) {
                    if ((e -= 2) < 0)
                        break;
                    s.push(n >> 6 | 192, 63 & n | 128)
                } else if (n < 65536) {
                    if ((e -= 3) < 0)
                        break;
                    s.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128)
                } else {
                    if (!(n < 1114112))
                        throw new Error("Invalid code point");
                    if ((e -= 4) < 0)
                        break;
                    s.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128)
                }
            }
            return s
        }
        function H(t) {
            return i.toByteArray(function(t) {
                if ((t = function(t) {
                    return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
                }(t).replace(U, "")).length < 2)
                    return "";
                for (; t.length % 4 != 0; )
                    t += "=";
                return t
            }(t))
        }
        function G(t, e, n, i) {
            for (var r = 0; r < i && !(r + n >= e.length || r >= t.length); ++r)
                e[r + n] = t[r];
            return r
        }
    }
    ).call(this, n(28))
}
, function(t, e, n) {
    e.EncodeBuffer = r;
    var i = n(14).preset;
    function r(t) {
        if (!(this instanceof r))
            return new r(t);
        if (t && (this.options = t,
        t.codec)) {
            var e = this.codec = t.codec;
            e.bufferish && (this.bufferish = e.bufferish)
        }
    }
    n(22).FlexEncoder.mixin(r.prototype),
    r.prototype.codec = i,
    r.prototype.write = function(t) {
        this.codec.encode(this, t)
    }
}
, function(t, e, n) {
    e.encode = function(t, e) {
        var n = new i(e);
        return n.write(t),
        n.read()
    }
    ;
    var i = n(25).EncodeBuffer
}
, function(t, e) {
    t.exports = function(t) {
        return function() {
            var e = /^[og]\s*(.+)?/
              , n = /^mtllib /
              , i = /^usemtl /;
            function r(e) {
                this.manager = void 0 !== e ? e : t.DefaultLoadingManager,
                this.materials = null
            }
            return r.prototype = {
                constructor: r,
                load: function(e, n, i, r) {
                    var s = this
                      , o = new t.FileLoader(s.manager);
                    o.setPath(this.path),
                    o.load(e, function(t) {
                        n(s.parse(t))
                    }, i, r)
                },
                setPath: function(t) {
                    return this.path = t,
                    this
                },
                setMaterials: function(t) {
                    return this.materials = t,
                    this
                },
                parse: function(r) {
                    console.time("OBJLoader");
                    var s = new function() {
                        var t = {
                            objects: [],
                            object: {},
                            vertices: [],
                            normals: [],
                            colors: [],
                            uvs: [],
                            materialLibraries: [],
                            startObject: function(t, e) {
                                if (this.object && !1 === this.object.fromDeclaration)
                                    return this.object.name = t,
                                    void (this.object.fromDeclaration = !1 !== e);
                                var n = this.object && "function" == typeof this.object.currentMaterial ? this.object.currentMaterial() : void 0;
                                if (this.object && "function" == typeof this.object._finalize && this.object._finalize(!0),
                                this.object = {
                                    name: t || "",
                                    fromDeclaration: !1 !== e,
                                    geometry: {
                                        vertices: [],
                                        normals: [],
                                        colors: [],
                                        uvs: []
                                    },
                                    materials: [],
                                    smooth: !0,
                                    startMaterial: function(t, e) {
                                        var n = this._finalize(!1);
                                        n && (n.inherited || n.groupCount <= 0) && this.materials.splice(n.index, 1);
                                        var i = {
                                            index: this.materials.length,
                                            name: t || "",
                                            mtllib: Array.isArray(e) && e.length > 0 ? e[e.length - 1] : "",
                                            smooth: void 0 !== n ? n.smooth : this.smooth,
                                            groupStart: void 0 !== n ? n.groupEnd : 0,
                                            groupEnd: -1,
                                            groupCount: -1,
                                            inherited: !1,
                                            clone: function(t) {
                                                var e = {
                                                    index: "number" == typeof t ? t : this.index,
                                                    name: this.name,
                                                    mtllib: this.mtllib,
                                                    smooth: this.smooth,
                                                    groupStart: 0,
                                                    groupEnd: -1,
                                                    groupCount: -1,
                                                    inherited: !1
                                                };
                                                return e.clone = this.clone.bind(e),
                                                e
                                            }
                                        };
                                        return this.materials.push(i),
                                        i
                                    },
                                    currentMaterial: function() {
                                        if (this.materials.length > 0)
                                            return this.materials[this.materials.length - 1]
                                    },
                                    _finalize: function(t) {
                                        var e = this.currentMaterial();
                                        if (e && -1 === e.groupEnd && (e.groupEnd = this.geometry.vertices.length / 3,
                                        e.groupCount = e.groupEnd - e.groupStart,
                                        e.inherited = !1),
                                        t && this.materials.length > 1)
                                            for (var n = this.materials.length - 1; n >= 0; n--)
                                                this.materials[n].groupCount <= 0 && this.materials.splice(n, 1);
                                        return t && 0 === this.materials.length && this.materials.push({
                                            name: "",
                                            smooth: this.smooth
                                        }),
                                        e
                                    }
                                },
                                n && n.name && "function" == typeof n.clone) {
                                    var i = n.clone(0);
                                    i.inherited = !0,
                                    this.object.materials.push(i)
                                }
                                this.objects.push(this.object)
                            },
                            finalize: function() {
                                this.object && "function" == typeof this.object._finalize && this.object._finalize(!0)
                            },
                            parseVertexIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 3 * (n >= 0 ? n - 1 : n + e / 3)
                            },
                            parseNormalIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 3 * (n >= 0 ? n - 1 : n + e / 3)
                            },
                            parseUVIndex: function(t, e) {
                                var n = parseInt(t, 10);
                                return 2 * (n >= 0 ? n - 1 : n + e / 2)
                            },
                            addVertex: function(t, e, n) {
                                var i = this.vertices
                                  , r = this.object.geometry.vertices;
                                r.push(i[t + 0], i[t + 1], i[t + 2]),
                                r.push(i[e + 0], i[e + 1], i[e + 2]),
                                r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addVertexPoint: function(t) {
                                var e = this.vertices;
                                this.object.geometry.vertices.push(e[t + 0], e[t + 1], e[t + 2])
                            },
                            addVertexLine: function(t) {
                                var e = this.vertices;
                                this.object.geometry.vertices.push(e[t + 0], e[t + 1], e[t + 2])
                            },
                            addNormal: function(t, e, n) {
                                var i = this.normals
                                  , r = this.object.geometry.normals;
                                r.push(i[t + 0], i[t + 1], i[t + 2]),
                                r.push(i[e + 0], i[e + 1], i[e + 2]),
                                r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addColor: function(t, e, n) {
                                var i = this.colors
                                  , r = this.object.geometry.colors;
                                r.push(i[t + 0], i[t + 1], i[t + 2]),
                                r.push(i[e + 0], i[e + 1], i[e + 2]),
                                r.push(i[n + 0], i[n + 1], i[n + 2])
                            },
                            addUV: function(t, e, n) {
                                var i = this.uvs
                                  , r = this.object.geometry.uvs;
                                r.push(i[t + 0], i[t + 1]),
                                r.push(i[e + 0], i[e + 1]),
                                r.push(i[n + 0], i[n + 1])
                            },
                            addUVLine: function(t) {
                                var e = this.uvs;
                                this.object.geometry.uvs.push(e[t + 0], e[t + 1])
                            },
                            addFace: function(t, e, n, i, r, s, o, a, c) {
                                var l = this.vertices.length
                                  , h = this.parseVertexIndex(t, l)
                                  , p = this.parseVertexIndex(e, l)
                                  , u = this.parseVertexIndex(n, l);
                                if (this.addVertex(h, p, u),
                                void 0 !== i && "" !== i) {
                                    var d = this.uvs.length;
                                    h = this.parseUVIndex(i, d),
                                    p = this.parseUVIndex(r, d),
                                    u = this.parseUVIndex(s, d),
                                    this.addUV(h, p, u)
                                }
                                if (void 0 !== o && "" !== o) {
                                    var f = this.normals.length;
                                    h = this.parseNormalIndex(o, f),
                                    p = o === a ? h : this.parseNormalIndex(a, f),
                                    u = o === c ? h : this.parseNormalIndex(c, f),
                                    this.addNormal(h, p, u)
                                }
                                this.colors.length > 0 && this.addColor(h, p, u)
                            },
                            addPointGeometry: function(t) {
                                this.object.geometry.type = "Points";
                                for (var e = this.vertices.length, n = 0, i = t.length; n < i; n++)
                                    this.addVertexPoint(this.parseVertexIndex(t[n], e))
                            },
                            addLineGeometry: function(t, e) {
                                this.object.geometry.type = "Line";
                                for (var n = this.vertices.length, i = this.uvs.length, r = 0, s = t.length; r < s; r++)
                                    this.addVertexLine(this.parseVertexIndex(t[r], n));
                                var o = 0;
                                for (s = e.length; o < s; o++)
                                    this.addUVLine(this.parseUVIndex(e[o], i))
                            }
                        };
                        return t.startObject("", !1),
                        t
                    }
                    ;
                    -1 !== r.indexOf("\r\n") && (r = r.replace(/\r\n/g, "\n")),
                    -1 !== r.indexOf("\\\n") && (r = r.replace(/\\\n/g, ""));
                    for (var o = r.split("\n"), a = "", c = "", l = [], h = "function" == typeof "".trimLeft, p = 0, u = o.length; p < u; p++)
                        if (a = o[p],
                        0 !== (a = h ? a.trimLeft() : a.trim()).length && "#" !== (c = a.charAt(0)))
                            if ("v" === c) {
                                var d = a.split(/\s+/);
                                switch (d[0]) {
                                case "v":
                                    s.vertices.push(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3])),
                                    8 === d.length && s.colors.push(parseFloat(d[4]), parseFloat(d[5]), parseFloat(d[6]));
                                    break;
                                case "vn":
                                    s.normals.push(parseFloat(d[1]), parseFloat(d[2]), parseFloat(d[3]));
                                    break;
                                case "vt":
                                    s.uvs.push(parseFloat(d[1]), parseFloat(d[2]))
                                }
                            } else if ("f" === c) {
                                for (var f = a.substr(1).trim().split(/\s+/), m = [], g = 0, v = f.length; g < v; g++) {
                                    var y = f[g];
                                    if (y.length > 0) {
                                        var x = y.split("/");
                                        m.push(x)
                                    }
                                }
                                var w = m[0];
                                for (g = 1,
                                v = m.length - 1; g < v; g++) {
                                    var b = m[g]
                                      , M = m[g + 1];
                                    s.addFace(w[0], b[0], M[0], w[1], b[1], M[1], w[2], b[2], M[2])
                                }
                            } else if ("l" === c) {
                                var _ = a.substring(1).trim().split(" ")
                                  , S = []
                                  , E = [];
                                if (-1 === a.indexOf("/"))
                                    S = _;
                                else
                                    for (var T = 0, A = _.length; T < A; T++) {
                                        var L = _[T].split("/");
                                        "" !== L[0] && S.push(L[0]),
                                        "" !== L[1] && E.push(L[1])
                                    }
                                s.addLineGeometry(S, E)
                            } else if ("p" === c) {
                                var R = a.substr(1).trim().split(" ");
                                s.addPointGeometry(R)
                            } else if (null !== (l = e.exec(a))) {
                                var P = (" " + l[0].substr(1).trim()).substr(1);
                                s.startObject(P)
                            } else if (i.test(a))
                                s.object.startMaterial(a.substring(7).trim(), s.materialLibraries);
                            else if (n.test(a))
                                s.materialLibraries.push(a.substring(7).trim());
                            else {
                                if ("s" !== c) {
                                    if ("\0" === a)
                                        continue;
                                    throw new Error('THREE.OBJLoader: Unexpected line: "' + a + '"')
                                }
                                if ((l = a.split(" ")).length > 1) {
                                    var C = l[1].trim().toLowerCase();
                                    s.object.smooth = "0" !== C && "off" !== C
                                } else
                                    s.object.smooth = !0;
                                (W = s.object.currentMaterial()) && (W.smooth = s.object.smooth)
                            }
                    s.finalize();
                    var I = new t.Group;
                    for (I.materialLibraries = [].concat(s.materialLibraries),
                    p = 0,
                    u = s.objects.length; p < u; p++) {
                        var O = s.objects[p]
                          , D = O.geometry
                          , k = O.materials
                          , B = "Line" === D.type
                          , N = "Points" === D.type
                          , U = !1;
                        if (0 !== D.vertices.length) {
                            var z = new t.BufferGeometry;
                            z.addAttribute("position", new t.Float32BufferAttribute(D.vertices,3)),
                            D.normals.length > 0 ? z.addAttribute("normal", new t.Float32BufferAttribute(D.normals,3)) : z.computeVertexNormals(),
                            D.colors.length > 0 && (U = !0,
                            z.addAttribute("color", new t.Float32BufferAttribute(D.colors,3))),
                            D.uvs.length > 0 && z.addAttribute("uv", new t.Float32BufferAttribute(D.uvs,2));
                            for (var F, H = [], G = 0, j = k.length; G < j; G++) {
                                var V = k[G]
                                  , W = void 0;
                                if (null !== this.materials)
                                    if (W = this.materials.create(V.name),
                                    !B || !W || W instanceof t.LineBasicMaterial) {
                                        if (N && W && !(W instanceof t.PointsMaterial)) {
                                            var Y = new t.PointsMaterial({
                                                size: 10,
                                                sizeAttenuation: !1
                                            });
                                            q.copy(W),
                                            W = Y
                                        }
                                    } else {
                                        var q = new t.LineBasicMaterial;
                                        q.copy(W),
                                        q.lights = !1,
                                        W = q
                                    }
                                W || ((W = B ? new t.LineBasicMaterial : N ? new t.PointsMaterial({
                                    size: 1,
                                    sizeAttenuation: !1
                                }) : new t.MeshPhongMaterial).name = V.name),
                                W.flatShading = !V.smooth,
                                W.vertexColors = U ? t.VertexColors : t.NoColors,
                                H.push(W)
                            }
                            if (H.length > 1) {
                                for (G = 0,
                                j = k.length; G < j; G++)
                                    V = k[G],
                                    z.addGroup(V.groupStart, V.groupCount, G);
                                F = B ? new t.LineSegments(z,H) : N ? new t.Points(z,H) : new t.Mesh(z,H)
                            } else
                                F = B ? new t.LineSegments(z,H[0]) : N ? new t.Points(z,H[0]) : new t.Mesh(z,H[0]);
                            F.name = O.name,
                            I.add(F)
                        }
                    }
                    return console.timeEnd("OBJLoader"),
                    I
                }
            },
            r
        }()
    }
}
, function(t, e) {
    var n;
    n = function() {
        return this
    }();
    try {
        n = n || Function("return this")() || (0,
        eval)("this")
    } catch (t) {
        "object" == typeof window && (n = window)
    }
    t.exports = n
}
, , function(t, e) {
    var n = ["Double Kill", "Triple Kill", "Quad Kill", "Multi Kill", "Mega Kill", "Ultra Kill", "Super Kill"]
      , i = [];
    t.exports.reward = function(t, e, r, s, o) {
        if (i.length = 0,
        e.weapon.melee)
            i.push("Execution", 300);
        else {
            e.weapon.kill ? i.push(e.weapon.kill[0], e.weapon.kill[1]) : e.weapon.scope && 1 == e.aimVal ? i.push("No Scope", 100) : !e.weapon.scope || 0 == e.aimVal && e.aimTime > 180 || 1 == e.aimDir ? i.push("", 50) : i.push("Quick Scope", 75),
            o.kills <= 1 && i.push("First Blood", 25);
            var a = t.getSpin(e);
            e.weapon.nSkill || a >= 360 && i.push("360!", 50),
            s.headShot && i.push("Headshot", 50),
            !e.weapon.scope && s.dst * e.weapon.range > 200 && i.push("Longshot", 25)
        }
        e.airTime >= 400 && i.push("Mid Air", 25);
        for (var c = n.length - 1; c >= 0; --c)
            if (e.streak > c) {
                i.push(n[c], 50 * (c + 1));
                break
            }
        return i.length ? i : null
    }
    ,
    t.exports.getScore = function(t) {
        var e = 0;
        if (t)
            for (var n = 1; n < t.length; n += 2)
                e += t[n];
        return e
    }
}
, function(t, e, n) {
    var i;
    try {
        window && (i = n(2))
    } catch (t) {}
    t.exports.manager = function(t, e, r, s, o, a, c) {
        var l, h, p, u;
        this.list = [],
        i && (u = new i.Vector3);
        var d = n(30);
        this.hasServer = c ? 1 : 0,
        this.setTeam = function(e) {
            if (!t.waitTimers && t.mode.convTeam)
                e.team = t.mode.convTeam;
            else if (t.mode.startTeam)
                e.team = t.mode.startTeam;
            else if (t.mode.friendly)
                e.team = 1;
            else if (t.mode.clanWar)
                e.team = e.account && e.account.clan ? e.account.clan : 1;
            else if (!e.team && t.mode.teams) {
                for (var n = 0, i = 0, r = 0; r < this.list.length; ++r)
                    1 == this.list[r].team && n++,
                    2 == this.list[r].team && i++;
                e.team = n >= i ? 2 : 1
            }
        }
        ,
        this.update = function(n) {
            e && (h = e.camera.getWorldPosition());
            for (var i = 0; i < this.list.length; ++i)
                if ((l = this.list[i]).active && (l.update(t, n),
                c && (this.tickPlayer(l, n),
                this.storeState(l),
                l.y <= a.deathY && this.kill(l)),
                e && (this.updateMesh(l),
                l.isYou || this.updateHeight(l)),
                !l.isYou && l.objInstances && (f = document.getElementById("pInfo" + l.sid))))
                    if (l.isVisible) {
                        (g = l.objInstances.position.clone()).y += a.playerHeight + a.nameOffset - l.crouchVal * a.crouchDst,
                        l.hatIndex >= 0 && (g.y += a.nameOffsetHat);
                        var r = 20 * (v = Math.max(.3, 1 - o.getDistance3D(h.x, h.y, h.z, g.x, g.y, g.z) / 600))
                          , s = r >= 1 && e.frustum.containsPoint(g);
                        if (f.style.display = s ? "block" : "none",
                        s) {
                            g.project(e.camera),
                            g.x = (g.x + 1) / 2,
                            g.y = (g.y + 1) / 2;
                            var p = 14 * v
                              , d = 22 * v;
                            f.style.left = 100 * g.x + "%",
                            f.style.marginLeft = -f.offsetWidth / 2 + "px",
                            f.style.top = 100 * (1 - g.y) + "%",
                            f.style.marginTop = -(p + d + (l.level ? 32 * v : r) / 2) + "px",
                            (f = document.getElementById("pInfoH" + l.sid)) && (f.style.fontSize = r + "px"),
                            (f = document.getElementById("pInfoHB" + l.sid)) && (f.style.width = 120 * v + "px",
                            f.style.height = p + "px",
                            f.style.marginTop = d + "px"),
                            l.level && (f = document.getElementById("pInfoR" + l.sid)) && (f.style.fontSize = 32 * v + "px",
                            f.style.marginRight = 10 * v + "px")
                        }
                    } else
                        f.style.display = "none";
            var f;
            if (!c && (f = document.getElementById("objectiveIcon"))) {
                var m = !0
                  , g = t.map.manager.objectives[t.activeObjective];
                for (i = 0; i < t.map.manager.objectives.length; ++i)
                    if (l = t.map.manager.objectives[i],
                    i == t.activeObjective && o.pointInBox3D(h.x, h.y, h.z, l)) {
                        m = !1;
                        break
                    }
                if (g && m) {
                    u.set(g.x, g.y + 7, g.z);
                    var v, y = 70 * (v = Math.max(.3, 1 - o.getDistance3D(h.x, h.y, h.z, u.x, u.y, u.z) / 600));
                    s = y >= 1 && e.frustum.containsPoint(u),
                    f.style.display = s ? "inline-block" : "none",
                    s && (u.project(e.camera),
                    u.x = (u.x + 1) / 2,
                    u.y = (u.y + 1) / 2,
                    f.style.left = 100 * u.x + "%",
                    f.style.top = 100 * (1 - u.y) + "%",
                    f.style.width = y + "px",
                    f.style.height = f.style.width,
                    f.style.marginLeft = -y / 2 + "px",
                    f.style.marginTop = -y / 2 + "px")
                } else
                    f.style.display = "none"
            }
        }
        ,
        this.playerCollisions = function(e) {
            if (c && t.mode.convTeam && !t.waitTimers)
                for (var n = 0; n < this.list.length; ++n)
                    if (e.active && this.list[n].active && e.team == t.mode.convTeam && e.team != this.list[n].team) {
                        var i = a.playerHeight / 2;
                        o.getDistance3D(e.x, e.y + i, e.z, this.list[n].x, this.list[n].y + i, this.list[n].z) <= 2.4 * i && (c.broadcast("game" + t.sid, "ac", e.sid, this.list[n].sid, t.mode.convWord),
                        this.score(e, 100),
                        e.convs++,
                        t.updateTeam(this.list[n], e.team),
                        t.mode.killConv && this.kill(this.list[n], null, null, !0),
                        t.gameTimer += 1e4)
                    }
        }
        ,
        this.activeCount = function() {
            for (var t = 0, e = 0; e < this.list.length; ++e)
                this.list[e].active && t++;
            return t
        }
        ,
        this.forcePos = function() {
            for (var t = 0; t < this.list.length; ++t)
                this.list[t].forcePos = !0,
                this.list[t].objInstances && (this.list[t].objInstances.visible = !1,
                this.list[t].isVisible = !1)
        }
        ,
        this.saveSpin = function(t, e) {
            c && (t.spins.unshift(e),
            t.spins.length > a.spinTimer / a.serverTickRate && (t.spins.length = Math.round(a.spinTimer / a.serverTickRate)))
        }
        ,
        this.getSpin = function(t) {
            for (var e = 0, n = 0; n < t.spins.length; ++n)
                e += t.spins[n];
            return Math.abs(e * (180 / Math.PI))
        }
        ,
        this.storeState = function(e) {
            e.stateHistory.unshift({
                time: t.now,
                x: e.x,
                y: e.y,
                z: e.z
            });
            for (var n = e.stateHistory.length - 1; n >= 0; --n)
                t.now - e.stateHistory[n].time >= a.stateHistory && e.stateHistory.splice(n, 1)
        }
        ,
        this.fetchState = function(e, n) {
            for (var i = t.now - (n + a.serverSendRate * a.interpolation), r = 0; r < e.stateHistory.length; ++r)
                if (e.stateHistory[r].time <= i)
                    return e.stateHistory[r];
            return e.stateHistory[e.stateHistory.length - 1]
        }
        ,
        this.updateMesh = function(t) {
            if (t.objInstances) {
                var n = (1 - (1 - a.aimAnimMlt) * (1 - t.aimVal)) * a.animMult * e.weaponLean
                  , i = 1 - .1 * (1 - t.aimVal)
                  , r = 1 - .3 * (1 - t.aimVal)
                  , s = Math.sin(t.stepVal) * a.stepAnim
                  , o = Math.cos(2 * t.stepVal) / 2 * a.stepAnim
                  , c = -Math.sin(t.stepChase) * a.stepAnim
                  , l = -Math.cos(2 * t.stepChase) / 2 * a.stepAnim
                  , h = 1 - t.aimVal
                  , p = .35 * (h <= .5 ? h : .5 - (h - .5))
                  , u = t.swapTime / t.weapon.swapTime
                  , d = t.weapon.xOff
                  , f = 0;
                t.reloadTimer > 0 && (f = (f = 1 - t.reloadTimer / t.weapon.reload) > .5 ? .5 - (f - .5) : f),
                e.moveMesh(t.objInstances, t.x, t.y + (t.isYou ? 0 : Math.abs(3.5 * s)), t.z),
                e.rotateMesh(t.objInstances, t.xDire + (t.isYou ? 0 : 2 * -s)),
                o -= o * (t.crouchVal * a.crouchAnimMlt),
                s -= s * (t.crouchVal * a.crouchAnimMlt);
                for (var m = 0; m < t.legMeshes.length; ++m)
                    t.legMeshes[m].rotation.x = s * (1 == m || 3 == m ? 1 : -1) * 7 + (m > 1 ? -.6 : 0);
                for (m = 0; m < t.armMeshes.length; ++m)
                    t.armMeshes[m].position.z = s * (m ? -1 : 1) * 12;
                e.rotateMesh(t.upperBody, -1 * f, -2.8 * f + t.yDire * (t.isYou ? 1 : .5) + (-Math.PI / 4 * u + .6 * t.landAnim + t.recoilAnimY * a.recoilMlt - t.bobAnimY * n)),
                e.moveMesh(t.upperBody, 0, t.height - a.cameraHeight - a.legHeight, 0),
                e.rotateMesh(t.weaponMeshes[t.weaponIndex], (t.leanAnimX * (t.weapon.leanMlt || 0) + .4 * c + .2 * t.leanAnimZ) * n, (t.recoilAnim * ((t.weapon.recoilY || 0) * i) + 2 * t.leanAnimY - .5 * l) * n, p + t.leanAnimZ * r + .5 * c * n),
                e.moveMesh(t.weaponMeshes[t.weaponIndex], (1.2 * t.leanAnimZ + 1.5 * s) * t.aimVal * n + d - (d - t.weapon.xOrg) * h, (o + t.bobAnimY) * n + t.weapon.yOff - (t.weapon.yOff - t.weapon.yOrg) * h, t.weapon.zOff - (t.weapon.zOff - t.weapon.zOrg) * h + t.bobAnimZ * n + t.recoilAnim * (t.weapon.recoilZ || 0) * i)
            }
        }
        ,
        this.updateHeight = function(t) {
            var n = a.crouchDst * t.crouchVal;
            if (e && !t.isYou) {
                var i = a.crouchLean * t.crouchVal;
                e.rotateMesh(t.lowerBody, 0, i + .5 * t.yDire, 0),
                t.upperBody.rotation.x -= i,
                e.moveMesh(t.lowerBody, 0, a.legHeight - n, 0);
                for (var r = 0; r < 4; ++r)
                    t.legMeshes[r].visible = r <= 1 ? !t.crouchVal : !!t.crouchVal
            } else
                t.height = a.playerHeight - n
        }
        ,
        this.generateMeshes = function(n, r) {
            var o = t.classes[n.classIndex].colors;
            if (n.objInstances = e.genObj3D(n.x, n.y, n.z),
            n.lowerBody = e.genObj3D(0, a.legHeight, 0),
            r || n.lowerBody.add(e.genBody(o[1], o[2], o[4], o[0])),
            n.upperBody = e.genObj3D(0, 0, 0),
            n.lowerBody.add(n.upperBody),
            n.backIndex >= 0 && !r && (n.backMesh = e.genObj3D(0, (a.playerHeight - a.legHeight - a.headScale) / 2 - (t.store.skins[n.backIndex].sitOff || 0), -(t.store.skins[n.backIndex].sitOffZ || 0)),
            n.lowerBody.add(n.backMesh),
            e.loadMesh({
                src: "body/body_" + t.store.skins[n.backIndex].id,
                texSrc: t.store.skins[n.backIndex].tex ? "body/body_" + t.store.skins[n.backIndex].id + "_" + t.store.skins[n.backIndex].tex : null,
                glowText: t.store.skins[n.backIndex].glow,
                emissive: t.store.skins[n.backIndex].glow ? 16777215 : null,
                noGreen: !0
            }, 0, 0, 0, Math.PI / 2, 2.1 * (t.store.skins[n.backIndex].sclMlt || 1), n.backMesh)),
            n.hatIndex >= 0 && !r && (n.hatMesh = e.genObj3D(0, a.playerHeight - a.legHeight - (t.store.skins[n.hatIndex].sitOff || 0), -(t.store.skins[n.hatIndex].sitOffZ || 0)),
            n.lowerBody.add(n.hatMesh),
            e.loadMesh({
                src: "hats/hat_" + t.store.skins[n.hatIndex].id,
                texSrc: t.store.skins[n.hatIndex].tex ? "hats/hat_" + t.store.skins[n.hatIndex].id + "_" + t.store.skins[n.hatIndex].tex : null,
                glowText: t.store.skins[n.hatIndex].glow,
                emissive: t.store.skins[n.hatIndex].glow ? 16777215 : null,
                noGreen: !0
            }, 0, 0, 0, Math.PI / 2, 2.1 * (t.store.skins[n.hatIndex].sclMlt || 1), n.hatMesh)),
            !r)
                for (var c = 0; c < 4; ++c)
                    n.legMeshes.push(e.genLeg(1 == c || 3 == c, o[2], o[3], c > 1)),
                    c >= 2 && e.rotateMesh(n.legMeshes[c], 2 == c ? -Math.PI / 6 : Math.PI / 8, 0, 0),
                    n.legMeshes[c].visible = c <= 1,
                    n.objInstances.add(n.legMeshes[c]);
            for (c = 0; c < n.ammos.length; ++c) {
                var l = e.genObj3D(0, 0, 0)
                  , h = t.weapons[n.loadout[c]];
                if (r && h.ammo) {
                    l.muzzles = [],
                    l.casings = [];
                    for (var p = 0; p < 2; ++p)
                        p && !h.akimbo || (l.muzzles.push(new i.Sprite),
                        l.muzzles[p].visible = !1,
                        l.muzzles[p].static = !0,
                        s.particles.push(l.muzzles[p]),
                        l.add(l.muzzles[p]),
                        l.casings.push(e.genObj3D(p ? 2 * -h.xOff : 0, h.caseYOff || 0, h.caseZOff || 0)),
                        l.add(l.casings[p]));
                    l.muzzleFlash = e.genObj3D(0, .4, 0),
                    l.muzzles[0].add(l.muzzleFlash)
                }
                if (h.src || !r)
                    l.add(e.genArms(h, o[1], o[5], o[0], null, r));
                else
                    for (p = 0; p < 2; ++p) {
                        var u = e.genArms(h, o[1], o[5], o[0], p + 1, r);
                        l.add(u),
                        n.armMeshes.push(u)
                    }
                if (n.weaponMeshes.push(l),
                n.weaponMeshes[c].visible = !1,
                n.upperBody.add(n.weaponMeshes[c]),
                h.src) {
                    var d = n.skins[c] >= 0 && t.store.skins[n.skins[c]].glow;
                    for (p = 0; p < 2; ++p)
                        p && !h.akimbo || e.loadMesh({
                            src: "weapons/" + h.src,
                            texSrc: n.skins[c] >= 0 ? "weapons/skins/" + h.src + "_" + t.store.skins[n.skins[c]].id : null,
                            glowText: d,
                            noGreen: !0,
                            uv2: !0,
                            ao: r,
                            shininess: 40,
                            emissive: h.transp || d ? 16777215 : null
                        }, 1 == p ? -2 * h.xOff : 0, 0, 0, Math.PI / 2, h.scale, n.weaponMeshes[c])
                }
            }
            n.objInstances.add(n.lowerBody),
            e.add(n.objInstances)
        }
        ,
        this.hideAll = function() {
            for (var t = 0; t < this.list.length; ++t)
                this.list[t].active && this.list[t].objInstances && (this.list[t].forcePos = !this.list[t].latestData,
                this.list[t].latestData = !1,
                this.list[t].isYou || (this.list[t].objInstances.visible = !1))
        }
        ,
        this.clear = function() {
            if (e)
                for (var t = 0; t < this.list.length; ++t)
                    this.disposeMesh(this.list[t]);
            this.list.length = 0
        }
        ,
        this.toggleLOD = function(t, e) {
            t.objInstances && (t.objInstances.visible = e),
            t.lodActive = !e
        }
        ,
        this.disposeMesh = function(t) {
            e.remove(t.objInstances),
            t.objInstances = null,
            t.hatMesh = null,
            t.backMesh = null,
            t.weaponMeshes.length = 0,
            t.armMeshes.length = 0,
            t.legMeshes.length = 0;
            var n = document.getElementById("pInfo" + t.sid);
            n && n.parentNode.removeChild(n)
        }
        ,
        this.add = function(n, i, r, s, l, h, p, u, d, f, m) {
            for (var g, v = 0; v < this.list.length; ++v)
                if (this.list[v].id == n) {
                    g = this.list[v];
                    break
                }
            return g ? (g.weaponMeshes.length = 0,
            g.legMeshes.length = 0,
            g.armMeshes.length = 0) : ((g = new function(t, e, n, i) {
                var r;
                this.id = t,
                this.sentTo = [],
                this.inputs = [],
                this.spins = [],
                this.stateHistory = [],
                this.weaponMeshes = [],
                this.legMeshes = [],
                this.armMeshes = [],
                this.lastInput = [],
                this.reloads = [],
                this.ammos = [],
                this.ping = 0,
                this.pings = [],
                this.score = 0,
                this.scoreObjs = {},
                this.convs = 0,
                this.timer = null,
                this.gameTimer = null,
                this.kills = 0,
                this.deaths = 0,
                this.level = 0,
                this.deltaAdd = 0,
                this.deltaDiv = 1,
                this.sprayIndex = 0,
                this.hatIndex = -1,
                this.backIndex = -1,
                this.lastSpray = 0,
                this.playTime = 0,
                this.streaks = {},
                this.init = function(t, e, n, r, s) {
                    this.x = t,
                    this.y = e,
                    this.z = n,
                    this.stepSrc = null,
                    this.name = r || "unknown",
                    this.xVel = 0,
                    this.yVel = 0,
                    this.zVel = 0,
                    this.renderMinimal = !1,
                    this.spins.length = 0,
                    this.xDire = 0,
                    this.yDire = 0,
                    this.hitTimer = 0,
                    this.ticker = 0,
                    this.spread = 0,
                    this.spreadPlus = 0,
                    this.aimVal = 1,
                    this.aimDir = 0,
                    this.aimTime = 0,
                    this.streak = 0,
                    this.killStreak = 0,
                    this.lastKill = 0,
                    this.stateHistory.length = 0,
                    this.lastInput.length = 0,
                    this.dmgReceived = {},
                    this.landAnim = 0,
                    this.landVelocity = 0,
                    this.leanAnimX = 0,
                    this.leanAnimY = 0,
                    this.leanAnimZ = 0,
                    this.bobAnimZ = 0,
                    this.bobAnimY = 0,
                    this.stepVal = 0,
                    this.stepChase = 0,
                    this.stepDir = 1,
                    this.stepDirR = 1,
                    this.reward = 0,
                    this.recoilAnim = 0,
                    this.recoilAnimY = 0,
                    this.recoilForce = 0,
                    this.crouchVal = 0,
                    this.onGround = !0,
                    this.onLadder = !1,
                    this.rampFix = null,
                    this.didJump = !1,
                    this.didShoot = !1,
                    this.lodActive = !1,
                    this.locked = !1,
                    this.latestData = !1,
                    this.airTime = 0,
                    this.height = i.playerHeight,
                    this.headScale = i.cameraHeight,
                    this.scale = i.playerScale,
                    this.active = !0,
                    this.interpolate = !1,
                    this.isYou = s,
                    this.sentTo.length = 0,
                    this.inputSN = 0,
                    this.inputs.length = 0,
                    this.weaponIndex = 0,
                    this.swapTime = 0,
                    this.recon = !1,
                    this.isVisible = !1
                }
                ,
                this.setClass = function(t, e, n) {
                    n || (t.config && t.config.classes.indexOf(e) < 0 && (e = t.config.classes[0]),
                    t.mode && (t.mode.noWeap && (e = 9),
                    t.mode.teamClass && t.mode.teamClass[this.team] && (e = t.mode.teamClass[this.team]))),
                    void 0 != e && null != e || (e = t.classes.length - 1),
                    this.classIndex = e,
                    this.reloads.length = 0,
                    this.ammos.length = 0,
                    this.loadout = t.classes[e].loadout,
                    this.speed = t.classes[e].speed || 1;
                    for (var i = 0; i < this.loadout.length; ++i)
                        this.reloads.push(0),
                        this.ammos.push(t.weapons[this.loadout[i]].ammo);
                    this.reloadTimer = 0,
                    this.maxHealth = t.classes[e].health * (t.config && t.config.healthMlt || 1),
                    this.health = this.maxHealth
                }
                ,
                this.resetInputs = function() {
                    this.inputs.length = 0
                }
                ,
                this.procInputs = function(t, s, o) {
                    this.recon = o;
                    var a = Math.min(t[1], i.dltMx) / this.deltaDiv;
                    this.inputSN = t[0];
                    var c = n.getAngleDist(t[2], this.xDire);
                    e.saveSpin(this, c);
                    var l = !o && this.isYou;
                    if (l && (this.leanAnimX -= c * i.leanSens,
                    this.leanAnimX = n.limit(this.leanAnimX, i.leanMax),
                    this.leanAnimY -= n.getAngleDist(t[3], this.yDire) * i.leanSens,
                    this.leanAnimY = n.limit(this.leanAnimY, i.leanMax),
                    this.leanAnimX && (this.leanAnimX *= Math.pow(i.leanPull, a)),
                    this.leanAnimY && (this.leanAnimY *= Math.pow(i.leanPull, a)),
                    this.leanAnimZ && (this.leanAnimZ *= Math.pow(i.leanPullZ, a)),
                    this.bobAnimZ && (this.bobAnimZ *= Math.pow(i.bobPullZ, a)),
                    this.bobAnimY && (this.bobAnimY *= Math.pow(i.bobPullY, a)),
                    this.landAnim += .08 * this.landVelocity * a,
                    this.landVelocity ? (this.landVelocity *= Math.pow(i.landPullV, a),
                    this.landVelocity = n.cropVal(this.landVelocity, .01)) : this.landAnim && (this.landAnim *= Math.pow(i.landPull, a))),
                    t[10] && e.swapWeapon(this, t[10]),
                    o || (this.recoilForce && (this.recoilAnim += this.recoilForce * a,
                    this.recoilAnimY += this.recoilForce * a,
                    this.recoilForce *= Math.pow(this.weapon.recoverF, a)),
                    this.recoilAnim && (this.recoilAnim *= Math.pow(this.weapon.recover, a)),
                    this.recoilAnimY && (this.recoilAnimY *= Math.pow(this.weapon.recoverY || this.weapon.recover, a))),
                    this.xDire = (t[2] || 0).round(3),
                    this.yDire = (t[3] || 0).round(3),
                    this.oldX = this.x,
                    this.oldY = this.y,
                    this.oldZ = this.z,
                    this.weapon.zoom && !this.weapon.noAim) {
                        var h = this.reloadTimer <= 0 && this.swapTime <= 0;
                        t[6] && this.aimVal > 0 && h ? (this.aimDir = 0,
                        this.aimVal -= 1 / (this.weapon.aimSpeed / a),
                        this.aimVal <= 0 && (this.aimVal = 0,
                        this.isYou && !o && e.toggleAim(this, 1)),
                        !this.isYou || o || this.weapon.scope || e.updateAim(this, 1 - this.aimVal)) : (!h || !t[6] && this.aimVal < 1) && (this.aimDir = 1,
                        this.aimVal || !this.isYou || o || e.toggleAim(this, 0),
                        this.aimVal += 1 / (this.weapon.aimSpeed / a),
                        this.aimVal >= 1 && (this.aimVal = 1),
                        !this.isYou || o || this.weapon.scope || e.updateAim(this, 1 - this.aimVal)),
                        0 == this.aimVal ? this.aimTime += a : this.aimTime = 0
                    }
                    t[8] && this.crouchVal < 1 && !this.onLadder ? (this.crouchVal += i.crouchSpeed * a,
                    this.crouchVal >= 1 && (this.crouchVal = 1),
                    this.onGround ? l && (this.bobAnimY -= i.crouchAnim * a) : this.y += i.crouchSpeed * a) : !t[8] && this.crouchVal > 0 && (this.crouchVal -= i.crouchSpeed * a,
                    this.crouchVal <= 0 && (this.crouchVal = 0),
                    this.onGround ? l && (this.bobAnimY += i.crouchAnim * a) : this.y -= i.crouchSpeed * a),
                    this.crouchVal && (this.crouchVal = this.crouchVal.round(3)),
                    e.updateHeight(this);
                    var p = this.onGround || this.onLadder
                      , u = a * (p ? i.playerSpeed * this.speed : i.airSpeed) * (this.aimVal ? 1 : i.aimSlow) * (s.mode.spdMlt && s.mode.spdMlt[this.team] || 1) * (this.crouchVal ? i.crouchSlow : 1) * this.weapon.spdMlt
                      , d = this.onLadder ? i.ladderDecel : this.onGround ? i.groundDecel : i.airDecel;
                    s.lockMove && (u *= 0),
                    this.onGround && e.tryJump(this, t[7]),
                    p || (this.yVel -= a * (i.gravity * (s.config ? s.config.gravMlt : 1)));
                    var f = i.movDirs[t[4]];
                    f != Math.PI && 0 != f && f != Math.PI / 2 && f != -Math.PI / 2 && (u *= s.config ? s.config.strafeSpd : 1),
                    void 0 !== f && (this.xVel += u * Math.cos(f - this.xDire),
                    this.zVel += u * Math.sin(f - this.xDire)),
                    this.xVel && (this.x += this.xVel * a,
                    this.xVel *= Math.pow(d, a),
                    this.xVel = n.cropVal(this.xVel, i.decelMin)),
                    this.yVel && (this.y += this.yVel * a,
                    this.yVel *= Math.pow(d, a),
                    this.yVel = n.cropVal(this.yVel, i.decelMin)),
                    this.zVel && (this.z += this.zVel * a,
                    this.zVel *= Math.pow(d, a),
                    this.zVel = n.cropVal(this.zVel, i.decelMin));
                    var m = this.onGround && !this.didJump
                      , g = !1;
                    this.onGround = !1,
                    this.onLadder = !1;
                    for (var v = 0; v < s.map.manager.objects.length; ++v)
                        if (r = s.map.manager.objects[v],
                        this.collides(r))
                            if (r.score)
                                this.scoreObjs[r.sid] || (this.scoreObjs[r.sid] = 1,
                                e.score(this, 1));
                            else if (r.kill)
                                e.hasServer && e.kill(this);
                            else if (r.ladder) {
                                if (this.y < r.y + r.height && 0 == this.crouchVal && (this.yVel = 0,
                                this.onLadder = !0,
                                this.stepSrc = null,
                                void 0 !== f)) {
                                    var y = (Math.abs(n.getAngleDist(r.dir, f - this.xDire)) - Math.PI / 2) / (Math.PI / 2);
                                    y > 0 && (this.y += i.ladderSpeed * this.weapon.spdMlt * a * y,
                                    this.y <= r.y - r.height ? this.y = r.y - r.height : this.y >= r.y + r.height && (this.y = r.y + r.height))
                                }
                            } else if (r.ramp) {
                                if (this.y < r.y + r.height) {
                                    var x = Math.max(0, Math.min(1, n.progressOnLine(r.ramp.sX, r.ramp.sZ, r.ramp.eX, r.ramp.eZ, this.x + this.scale * Math.cos(r.dir), this.z + this.scale * Math.sin(r.dir))))
                                      , w = r.y - r.height + 2 * r.height * x;
                                    if (this.y <= w || m)
                                        if (r.boost) {
                                            this.y = w;
                                            var b = i.boosterSpd * a;
                                            this.xVel += b * Math.sin(-r.dir + Math.PI / 2) * Math.cos(r.boost),
                                            this.zVel += b * Math.cos(-r.dir + Math.PI / 2) * Math.cos(r.boost),
                                            this.yVel += b * Math.sin(r.boost)
                                        } else
                                            !o && this.oldY > this.y && e.resetStep(this),
                                            this.y = w,
                                            this.yVel = 0,
                                            this.onGround = !0,
                                            g = !0,
                                            this.rampFix = r.y - r.height + 2 * r.height * Math.round(x)
                                }
                            } else
                                this.y < r.y + r.height && r.y + r.height - this.y <= i.climbHeight && this.oldY < r.y + r.height && m ? (this.y += .3 * (r.y + r.height - this.y),
                                this.onGround = !0) : this.oldY >= r.y + r.height ? (this.stepSrc = r.stepSrc,
                                !o && this.oldY > this.y && e.resetStep(this),
                                this.y = r.y + r.height,
                                this.yVel = 0,
                                this.onGround = !0) : this.oldX - this.scale >= r.x + r.width - 1e-5 ? (this.x = r.x + r.width + this.scale,
                                this.xVel = 0) : this.oldX + this.scale <= r.x - r.width + 1e-5 ? (this.x = r.x - r.width - this.scale,
                                this.xVel = 0) : this.oldZ - this.scale >= r.z + r.length - 1e-5 ? (this.z = r.z + r.length + this.scale,
                                this.zVel = 0) : this.oldZ + this.scale <= r.z - r.length + 1e-5 ? (this.z = r.z - r.length - this.scale,
                                this.zVel = 0) : this.oldY + this.height <= r.y - r.height && (this.y = r.y - r.height - this.height,
                                this.yVel = 0);
                    if (!this.didJump && null != this.rampFix && Math.abs(this.y - this.rampFix) <= i.climbHeight ? g || (this.y = this.rampFix,
                    this.onGround = !0,
                    this.yVel = 0,
                    this.rampFix = null) : this.rampFix = null,
                    this.onGround ? this.airTime = 0 : this.airTime += a,
                    !o) {
                        var M = n.getDistance3D(this.oldX, this.oldY, this.oldZ, this.x, this.y, this.z);
                        if (this.isYou && (this.onLadder && (M *= 1.4),
                        n.getDirection(this.oldX, this.oldZ, this.x, this.z),
                        this.bobAnimZ += n.getDistance(this.oldX, this.oldZ, this.x, this.z) * i.bobMltZ,
                        this.bobAnimY -= (this.oldY - this.y) * i.bobMltY,
                        p && void 0 !== f ? (e.playerStep(this, M),
                        this.leanAnimZ -= M * i.leanMltZ * Math.cos(f)) : this.stepVal *= Math.pow(i.stepPull, a),
                        this.stepChase != this.stepVal && (this.stepChase += .2 * (this.stepVal - this.stepChase))),
                        this.spreadPlus += M * i.spreadMove + Math.abs(this.oldY - this.y) * i.spreadFall,
                        this.spreadPlus *= Math.pow(i.spreadRecover, a),
                        this.spread = Math.max(this.weapon.minSpread || 0, (this.weapon.spread - this.weapon.spread * i.crouchSpread * this.crouchVal + this.recoilAnim * (this.weapon.spreadInc || 1) * i.spreadMlt + this.spreadPlus) * this.aimVal),
                        t[9] && e.reload(this),
                        this.reloadTimer > 0) {
                            var _ = this.reloadTimer;
                            this.reloadTimer -= a,
                            this.isYou && _ >= this.weapon.reload / 2 && this.reloadTimer < this.weapon.reload / 2 && e.endReload(this.weapon),
                            this.reloadTimer <= 0 && (this.reloadTimer = 0,
                            this.didShoot = !1,
                            this.ammos[this.weaponIndex] = this.weapon.ammo,
                            e.updatePlayerAmmo(this))
                        }
                        for (this.swapTime > 0 && (this.swapTime -= a,
                        this.swapTime < 0 && (this.swapTime = 0)),
                        v = 0; v < this.reloads.length; ++v)
                            this.reloads[v] > 0 && (this.reloads[v] -= a,
                            this.reloads[v] < 0 && (this.reloads[v] = 0));
                        if (this.weapon && !this.weapon.melee) {
                            var S = !this.weapon.nAuto && t[5];
                            this.didShoot && !t[5] && (this.didShoot = !1),
                            !this.didShoot && t[5] && (S = !0),
                            S && this.reloads[this.weaponIndex] <= 0 && this.swapTime <= 0 && this.reloadTimer <= 0 && (this.ammos[this.weaponIndex] > 0 ? e.shoot(this) : e.reload(this))
                        }
                    }
                    e.playerCollisions(this)
                }
                ,
                this.collides = function(t) {
                    return this.x - this.scale < t.x + t.width && this.x + this.scale > t.x - t.width && this.z - this.scale < t.z + t.length && this.z + this.scale > t.z - t.length && this.y <= t.y + t.height && this.y + this.height >= t.y - t.height
                }
                ,
                this.update = function(t, r) {
                    if (this.active) {
                        if (this.inputs.length) {
                            for (var s = 0; s < this.inputs.length; ++s)
                                this.procInputs(this.inputs[s], t);
                            this.resetInputs()
                        }
                        if (this.interpolate) {
                            this.dt += r;
                            var o = Math.min(1.6, this.dt / (i.serverSendRate * i.interpolation));
                            o /= t.config ? t.config.deltaMlt : 1,
                            this.oldX = this.x,
                            this.oldY = this.y,
                            this.oldZ = this.z,
                            this.x = this.x1 + (this.x2 - this.x1) * o,
                            this.y = this.y1 + (this.y2 - this.y1) * o,
                            this.z = this.z1 + (this.z2 - this.z1) * o,
                            this.onGround && e.playerStep(this, n.getDistance(this.oldX, this.oldZ, this.x, this.z)),
                            this.xDire = Math.lerpAngle(this.xDir2, this.xDir1, Math.min(1, o)),
                            this.yDire = Math.lerpAngle(this.yDir2, this.yDir1, Math.min(1, o))
                        }
                    }
                }
            }
            (n,this,o,a)).sid = i || o.generateSID(this.list),
            this.list.push(g)),
            h || (h = "Guest_" + g.sid),
            g.init(r, s, l, h, m),
            c && void 0 != t.mode && this.setTeam(g),
            g.skins = u || [-1, -1],
            g.hatIndex = d,
            g.backIndex = f,
            g.setClass(t, p, !!e),
            e && this.generateMeshes(g, m),
            this.swapWeapon(g, 0, !0),
            g
        }
        ,
        this.remove = function(e) {
            var n = this.indexBySid(e);
            if (n >= 0) {
                this.list[n].room;
                var i = this.list[n].id;
                if (this.list[n].objInstances && this.disposeMesh(this.list[n]),
                this.list.splice(n, 1),
                c) {
                    for (var r = this.list.length - 1; r >= 0; --r)
                        (n = this.list[r].sentTo.indexOf(i)) >= 0 && this.list[r].sentTo.splice(n, 1);
                    c.broadcast("game" + t.sid, "2", e),
                    this.syncLeaders()
                }
            }
        }
        ;
        var f = [0, 1, 2];
        this.getStepSound = function() {
            var t = o.randInt(0, f.length - 1)
              , e = f[t];
            return f.splice(t, 1),
            f.length <= 0 && f.push(0, 1, 2),
            e
        }
        ,
        this.playerStep = function(e, n) {
            if (n && (!e.isYou && e.crouchVal && (n *= 1.6),
            e.stepVal += n * a.stepMlt * e.stepDir,
            e.stepVal >= Math.PI / 2 && 1 == e.stepDir || e.stepVal <= -Math.PI / 2 && -1 == e.stepDir)) {
                if (r) {
                    var i = .15 * (e.crouchVal < 1 ? 1 : e.isYou ? .5 : 0)
                      , s = (e.crouchVal < 1 ? 1 : .8) * o.randFloat(.8, 1.2)
                      , c = e.stepSrc ? "_" + e.stepSrc : "";
                    e.isYou ? r.play("step_" + this.getStepSound() + c, i, !1, s) : i && t.playerSound("step_" + o.randInt(0, 2) + c, 0, i, e, s, 10)
                }
                e.stepDir *= -1
            }
        }
        ,
        this.resetStep = function(t) {
            r && (t.stepSrc && t.stepSrc,
            r.play("step_" + this.getStepSound(), .5, !1, o.randFloat(.9, 1.2)),
            t.isYou && (t.landVelocity += t.yVel))
        }
        ,
        this.tryJump = function(e, n) {
            t.config && t.config.autoJump && n ? this.jump(e) : (e.didJump && !n && (e.didJump = !1),
            !e.didJump && n && this.jump(e))
        }
        ,
        this.jump = function(e) {
            e.didJump = !0;
            var n = a.jumpVel * (t.config ? t.config.jumpMlt : 1)
              , i = a.jumpPush * (t.config ? t.config.jumpMlt : 1);
            e.yVel += (n - n * (a.crouchJump * e.crouchVal)) * e.weapon.spdMlt * (e.aimVal ? 1 : a.aimJumpSlow);
            var s = o.getDistance(0, 0, e.xVel, e.zVel);
            e.xVel -= i * s * Math.sin(e.xDire),
            e.zVel -= i * s * Math.cos(e.xDire),
            r && !e.recon && r.play("jump_" + o.randInt(0, 1), .1, !1, o.randFloat(.9, 1))
        }
        ,
        this.updateAim = function(t, n) {
            e.zoom(1 + (t.weapon.zoom - 1) * n)
        }
        ,
        this.toggleAim = function(n, i) {
            r && !n.recon && r.play("aim_" + i, .1),
            i || (e.zoom(1),
            aimRecticle.style.opacity = 0),
            n.weapon.scope && (e.zoom(i ? n.weapon.zoom : 1),
            n.weaponMeshes[n.weaponIndex].visible = !t.hideWeapon && !i,
            aimRecticle.style.opacity = i ? 1 : 0)
        }
        ,
        this.reload = function(t) {
            !t.reloadTimer && t.ammos[t.weaponIndex] < t.weapon.ammo && (r && r.play("reload_1", .25),
            t.reloadTimer = t.weapon.reload)
        }
        ,
        this.endReload = function(t) {
            r && r.play("reload_2" + (t.custReload || ""), .25)
        }
        ,
        this.updatePlayerAmmo = function(t) {
            t.isYou && (ammoDisplay.style.display = t.weapon.melee ? "none" : "inline-block",
            t.weapon.melee ? reloadMsg.style.display = "none" : (ammoVal.innerHTML = t.ammos[t.weaponIndex] + " <span id='ammoMax'> | " + t.weapon.ammo + "</span>",
            t.ammos[t.weaponIndex] <= 0 ? (reloadMsg.innerHTML = "[R] Reload",
            reloadMsg.style.display = "block") : reloadMsg.style.display = "none"))
        }
        ;
        var m = [];
        this.shoot = function(n) {
            if (n.reloads[n.weaponIndex] = n.weapon.rate,
            n.ammos[n.weaponIndex]--,
            n.didShoot = !0,
            this.updatePlayerAmmo(n),
            t.playSound && t.playSound(n.weapon.sound, .85, n, !1, o.randFloat(.9, 1)),
            n.recoilForce += n.weapon.recoil * (1 - .3 * n.crouchVal),
            n.isYou) {
                var i = o.randInt(0, 1) ? -n.weapon.recoilR : n.weapon.recoilR;
                n.leanAnimZ += i,
                n.leanAnimX += i
            }
            if (n.isYou && !t.hideWeapon) {
                var l = n.weaponMeshes[n.weaponIndex]
                  , p = 0 == n.aimVal && n.weapon.scope;
                if (0 == e.useDepthMap || "0" == e.useDepthMap) {
                    for (var u = 0; u < l.muzzles.length; ++u)
                        l.muzzles[u].visible = !0,
                        s.setMaterial(l.muzzles[u], 2, 1, !0),
                        l.muzzles[u].init(u ? -2 * n.weapon.xOff : 0, n.weapon.muzOffY || 0, -n.weapon.muzOff, 0, 0, 0, 4 * (n.weapon.muzMlt || 1), 1);
                    p || ((d = n.weaponMeshes[n.weaponIndex].muzzles[0].getWorldPosition().clone()).project(e.camera),
                    d.x = (d.x + 1) / 2,
                    d.y = (d.y + 1) / 2,
                    e.flash(d.x, d.y))
                }
                if (!n.weapon.nCase)
                    for (u = 0; u < n.weaponMeshes[n.weaponIndex].casings.length; ++u) {
                        var d = n.weaponMeshes[n.weaponIndex].casings[u].getWorldPosition();
                        r && r.play3D("case_" + o.randInt(0, 1), d.x, d.y, d.z, .4, o.randFloat(.8, 1.3)),
                        p || s.physObj(d.x, d.y, d.z, n.xDire - Math.PI / 2 * (u ? -1 : 1), Math.PI / 5 * o.randFloat(.4, 1.2), 25, n.weapon.caseInd || 1, n)
                    }
            }
            if (void 0 != n.weapon.projectile) {
                if (c) {
                    var f = (n.spread + (n.weapon.innac || 0)) * a.spreadAdj
                      , g = n.xDire + o.randFloat(-f, f)
                      , v = n.yDire + n.recoilAnimY * a.recoilMlt + o.randFloat(-f, f);
                    t.projectiles.init(n.x, n.y + n.height - a.cameraHeight, n.z, g, v, n.weapon.projectile, n)
                }
            } else
                for (var y = 0; y < (n.weapon.shots || 1); ++y) {
                    f = (n.spread + (n.weapon.innac || 0)) * a.spreadAdj,
                    g = n.xDire + o.randFloat(-f, f),
                    v = n.yDire + n.recoilAnimY * a.recoilMlt + o.randFloat(-f, f),
                    m.length = 0;
                    for (var x = 0, w = 1 / (n.weapon.range * Math.sin(g + Math.PI) * Math.cos(v)), b = 1 / (n.weapon.range * Math.cos(g + Math.PI) * Math.cos(v)), M = 1 / (n.weapon.range * Math.sin(v)), _ = 0; _ < t.map.manager.objects.length; ++_)
                        (h = t.map.manager.objects[_]).noShoot || (x = o.lineInRect(n.x, n.z, n.y + n.height - a.cameraHeight, w, b, M, h.x - h.width, h.z - h.length, h.y - h.height, h.x + h.width, h.z + h.length, h.y + h.height)) && x <= 1 && m.push({
                            obj: h,
                            dst: x
                        });
                    if (c)
                        for (_ = 0; _ < this.list.length; ++_)
                            !this.list[_].active || n == this.list[_] || n.team && n.team == this.list[_].team || (h = this.fetchState(this.list[_], n.ping)) && (x = o.lineInRect(n.x, n.z, n.y + n.height - a.cameraHeight, w, b, M, h.x - this.list[_].scale - a.hitBoxPad, h.z - this.list[_].scale - a.hitBoxPad, h.y, h.x + this.list[_].scale + a.hitBoxPad, h.z + this.list[_].scale + a.hitBoxPad, h.y + this.list[_].height + a.hitBoxPad)) && x <= 1 && m.push({
                                player: !0,
                                obj: this.list[_],
                                dst: x
                            });
                    var S = n.weapon.range;
                    if (m.length) {
                        m.sort(o.orderByDst);
                        var E = n.weapon.dmg;
                        for (_ = 0; _ < m.length && (h = m[_],
                        S = n.weapon.range * h.dst,
                        c); ++_) {
                            var T = n.weapon.dropStart || 0
                              , A = Math.min(1, 1 - (1 - h.dst) * n.weapon.range / (n.weapon.range - T))
                              , L = E - n.weapon.dmgDrop * A
                              , R = !1
                              , P = !1;
                            if (h.player) {
                                var C = n.y + n.height - a.cameraHeight + S * Math.sin(v);
                                R = h.obj.y + h.obj.height - C < a.headScale,
                                P = h.obj.y + a.legHeight > C,
                                L *= R && !n.weapon.noHeadShot ? 1.5 : 1,
                                L *= P ? .5 : 1
                            }
                            if (h.player || h.obj.dummy) {
                                if (this.changeHealth(h.obj, n, L)) {
                                    var I = {
                                        dst: h.dst,
                                        headShot: R
                                    };
                                    this.kill(h.obj, n, I)
                                }
                                E -= void 0 != n.weapon.pierce ? n.weapon.dmg * a.materialDens.flesh * n.weapon.pierce : E
                            } else {
                                if (!h.obj.penetrable)
                                    break;
                                E -= void 0 != n.weapon.pierce ? n.weapon.dmg * a.materialDens.default * n.weapon.pierce : E
                            }
                            if (E <= 0)
                                break
                        }
                    }
                    S -= .12;
                    var O = n.x + S * Math.sin(g + Math.PI) * Math.cos(v)
                      , D = (C = n.y + n.height - a.cameraHeight + S * Math.sin(v),
                    n.z + S * Math.cos(g + Math.PI) * Math.cos(v))
                      , k = 0
                      , B = 0;
                    if (m.length && (C >= h.obj.y + h.obj.height ? B = Math.PI / 2 : C <= h.obj.y - h.obj.height ? B = -Math.PI / 2 : O <= h.obj.x - h.obj.width ? k = -Math.PI / 2 : O >= h.obj.x + h.obj.width ? k = Math.PI / 2 : D <= h.obj.z - h.obj.length && (k = Math.PI),
                    c || s.effect(O, C, D, k, B, 0)),
                    c && (!m.length || !h.player))
                        for (_ = 0; _ < this.list.length; ++_)
                            this.list[_].active && this.list[_] != n && (m.length ? c.send(this.list[_].id, "9", n.sid, Math.round(O), Math.round(C), Math.round(D), k.round(1), B.round(1)) : c.send(this.list[_].id, "9", n.sid, Math.round(O), Math.round(C), Math.round(D)));
                    if (n.isYou && S >= a.tracerMinDst) {
                        var N = o.randInt(0, n.weaponMeshes[n.weaponIndex].muzzles.length - 1)
                          , U = (d = n.weaponMeshes[n.weaponIndex].muzzles[N].getWorldPosition()).x
                          , z = d.y
                          , F = d.z;
                        o.getDistance3D(U, z, F, O, C, D),
                        k = o.getDirection(F, U, D, O),
                        B = o.getDirection(o.getDistance(U, F, O, D), C, 0, z),
                        s.physObj(U, z, F, k, B, Math.min(S, a.tracerMaxDst), 0)
                    }
                }
        }
        ,
        this.spray = function(e) {
            if (t.now - e.lastSpray >= a.sprayTimer) {
                m.length = 0;
                for (var n = 0, i = 1 / (a.sprayRange * Math.sin(e.xDire + Math.PI) * Math.cos(e.yDire)), r = 1 / (a.sprayRange * Math.cos(e.xDire + Math.PI) * Math.cos(e.yDire)), s = 1 / (a.sprayRange * Math.sin(e.yDire)), l = 0; l < t.map.manager.objects.length; ++l)
                    (h = t.map.manager.objects[l]).noShoot || (n = o.lineInRect(e.x, e.z, e.y + e.height - a.cameraHeight, i, r, s, h.x - h.width, h.z - h.length, h.y - h.height, h.x + h.width, h.z + h.length, h.y + h.height)) && n <= 1 && m.push({
                        obj: h,
                        dst: n
                    });
                if (m.length && (m.sort(o.orderByDst),
                h = m[0].obj)) {
                    var p = a.sprayRange * m[0].dst - .1
                      , u = e.y + e.height - a.cameraHeight + p * Math.sin(e.yDire)
                      , d = e.x + p * Math.sin(e.xDire + Math.PI) * Math.cos(e.yDire)
                      , f = e.z + p * Math.cos(e.xDire + Math.PI) * Math.cos(e.yDire)
                      , g = 0
                      , v = 0;
                    u >= h.y + h.height ? v = -90 : u <= h.y - h.height ? v = 90 : d <= h.x - h.width ? g = -90 : d >= h.x + h.width ? g = 90 : f <= h.z - h.length && (g = 180);
                    var y = a.sprayScale / 2;
                    if (v) {
                        if (h.width < y || h.length < y)
                            return;
                        f - y < h.z - h.length ? f = h.z - h.length + y : f + y > h.z + h.length && (f = h.z + h.length - y),
                        d - y < h.x - h.width ? d = h.x - h.width + y : d + y > h.x + h.width && (d = h.x + h.width - y)
                    } else {
                        if (h.height < y)
                            return;
                        if (90 == g || -90 == g) {
                            if (h.length < y)
                                return;
                            f - y < h.z - h.length ? f = h.z - h.length + y : f + y > h.z + h.length && (f = h.z + h.length - y)
                        } else {
                            if (h.width < y)
                                return;
                            d - y < h.x - h.width ? d = h.x - h.width + y : d + y > h.x + h.width && (d = h.x + h.width - y)
                        }
                        u + y > h.y + h.height && (u = h.y + h.height - y)
                    }
                    e.lastSpray = t.now,
                    t.playSound && t.playSound("spray", .4, e, !0),
                    c.broadcast("game" + t.sid, "sp", e.sid, e.sprayIndex, d.round(2), u.round(2), f.round(2), g, v)
                }
            }
        }
        ;
        var g = [];
        this.syncLeaders = function() {
            p = t.mode.killSort ? this.list.slice().sort(o.orderByKills) : this.list.slice().sort(o.orderByScore),
            g.length = 0;
            for (var e = 0, n = 0; n < p.length; ++n)
                e < 10 && (e++,
                g.push(p[n].sid, p[n].name, p[n].team, t.mode.killSort ? p[n].kills : p[n].score, p[n].account ? p[n].account.clan : 0, p[n].account ? p[n].account.featured : 0));
            c.broadcast("game" + t.sid, "7", g)
        }
        ,
        this.score = function(e, n, i) {
            c && (e.score += n,
            c.send(e.id, "5", n),
            this.syncLeaders(),
            !(t.mode.teams && e.team && t.teams) || i && t.mode.objective || (t.teams[e.team] ? t.teams[e.team] += n : t.teams[e.team] = n,
            c.broadcast("game" + t.sid, "ts", e.team, t.teams[e.team])))
        }
        ,
        this.tickPlayer = function(t, e) {
            t.playTime += e,
            t.hitTimer > 0 && (t.hitTimer -= e),
            t.ticker -= e,
            t.ticker <= 0 && (t.ticker = 500,
            t.hitTimer <= 0 && this.changeHealth(t, null, -t.maxHealth * a.regenVal))
        }
        ,
        this.changeHealth = function(e, n, i, r) {
            if ((!t.waitTimers || t.waitTimers[0].canDMG) && !(i < 0 && e.health == e.maxHealth || (n && n.lastHack && t.now - n.lastHack <= 2e3 && (i *= .1),
            !r && e.team && n && e.team == n.team && i > 0))) {
                if (n && n != e && c.send(n.id, "4"),
                e.dummy)
                    return !0;
                i > 0 && (e.hitTimer = t.mode.regenDelay || a.regenDelay),
                e.health -= i,
                e.health = Math.max(Math.min(e.maxHealth, e.health), 0),
                n ? (c.send(e.id, "h", Math.ceil(e.health), null, Math.round(n.x), Math.round(n.z)),
                n != e && (e.dmgReceived[n.id] ? (e.dmgReceived[n.id].val += i,
                e.dmgReceived[n.id].time = t.now) : e.dmgReceived[n.id] = {
                    time: t.now,
                    val: i
                })) : c.send(e.id, "h", Math.ceil(e.health));
                for (var s = 0; s < this.list.length; ++s)
                    this.list[s] != e && c.send(this.list[s].id, "h", Math.ceil(e.health), e.sid);
                return e.health <= 0
            }
        }
        ,
        this.swapWeapon = function(n, i, r, s) {
            if (!(n.ammos.length <= 1 && i || s > n.ammos.length)) {
                var o = n.weaponIndex;
                if (i && (1 != i && -1 != i && (i = 0),
                n.reloadTimer = 0,
                n.weaponIndex += i,
                n.didShoot = !1,
                n.weaponIndex < 0 && (n.weaponIndex = n.ammos.length - 1),
                n.weaponIndex > n.ammos.length - 1 && (n.weaponIndex = 0)),
                void 0 != s && (n.weaponIndex = s),
                n.weapon = t.weapons[n.loadout[n.weaponIndex]],
                n.weapon || (n.weapon = t.weapons[n.loadout[0]],
                n.weapon && (n.weaponIndex = 0)),
                e && (o != n.weaponIndex || r)) {
                    for (var a = 0; a < n.weaponMeshes.length; ++a)
                        n.weaponMeshes[a].visible = !1;
                    n.weaponMeshes[n.weaponIndex] && (n.weaponMeshes[n.weaponIndex].visible = !t.hideWeapon || !n.isYou)
                }
                if (void 0 == s && n.weapon && (!e || n.isYou) && (n.swapTime = n.weapon.swapTime,
                n.isYou && (o != n.weaponIndex || r))) {
                    var c = "";
                    for (a = n.ammos.length - 1; a >= 0; --a) {
                        var l = a == n.weaponIndex;
                        t.weapons[n.loadout[a]].icon && (c += "<div class='weaponItem'><img style='opacity:" + (l ? 1 : .7) + "' class='weaponIcon' src='./textures/weapons/" + t.weapons[n.loadout[a]].icon + ".png' /></div>")
                    }
                    weaponDisplay.innerHTML = c,
                    this.updatePlayerAmmo(n)
                }
            }
        }
        ,
        this.checkStreak = function(e) {
            for (var n = 0; n < t.streaks.length; ++n)
                e.killStreak == t.streaks[n].kills && this.addStreak(e, n)
        }
        ,
        this.useStreak = function(e, n) {
            e.streaks[n] && e.streaks[n].activate(t, e) && (e.streaks[n] = null,
            c.send(e.id, "st", n, 1))
        }
        ,
        this.addStreak = function(e, n) {
            e.streaks[n] || (e.streaks[n] = t.streaks[n],
            c.send(e.id, "st", n))
        }
        ,
        this.kill = function(e, n, i, r, s) {
            if (e.dummy || (e.active = !1,
            e.isYou && this.toggleAim(e, 0),
            e.objInstances && this.disposeMesh(e)),
            c) {
                var o;
                if (e.deaths++,
                t.kills++,
                n && n != e) {
                    if (e.dummy || n.kills++,
                    n.streak++,
                    n.killStreak++,
                    c) {
                        this.checkStreak(n);
                        var l = 0;
                        5 == n.killStreak ? l = 5 : 10 == n.killStreak ? l = 10 : 15 == n.killStreak ? l = 15 : 20 == n.killStreak ? l = 20 : 25 == n.killStreak ? l = 25 : 30 == n.killStreak && (l = 30),
                        l && c.broadcast("game" + t.sid, "kst", n.sid, l)
                    }
                    t.now - n.lastKill >= a.feedTimer && (n.streak = 0),
                    n.lastKill = t.now,
                    s || ((o = d.reward(this, n, e, i, t)) && c.send(n.id, "6", o, i.headShot ? 1 : 0, n.kills),
                    this.score(n, d.getScore(o), !0))
                }
                if (!e.dummy)
                    for (var h = 0; h < this.list.length; ++h)
                        e.dmgReceived[this.list[h].id] && n != this.list[h] && e.dmgReceived[this.list[h].id].val >= a.assistMin && t.now - e.dmgReceived[this.list[h].id].time <= a.assistTime && (this.score(this.list[h], a.assistScore, !0),
                        c.send(this.list[h].id, "10")),
                        this.list[h] == e ? c.send(e.id, "3", e.sid, n ? n.sid : 0, [n ? n.loadout[n.weaponIndex] : -1, o ? d.getScore(o) : 0], r) : c.send(this.list[h].id, "3", e.sid, n ? n.sid : 0, null, r)
            }
        }
        ,
        this.indexBySid = function(t) {
            for (var e = 0; e < this.list.length; ++e)
                if (this.list[e].sid == t)
                    return e;
            return -1
        }
        ,
        this.findBySid = function(t) {
            for (var e = 0; e < this.list.length; ++e)
                if (this.list[e].sid === t)
                    return this.list[e];
            return null
        }
    }
}
, function(t, e) {
    t.exports = [{
        name: "Triggerman",
        loadout: [1, 2],
        colors: [10975328, 4013373, 2302755, 2631720, 7098434, 12566463],
        health: 100,
        speed: 1.18
    }, {
        name: "Hunter",
        loadout: [0, 2],
        colors: [10975328, 8083261, 6506290, 2631720, 6506290, 6506290],
        health: 60,
        speed: 1.18
    }, {
        name: "Run N Gun",
        loadout: [3],
        colors: [10975328, 4088706, 3099491, 2631720, 6506290, 3099491],
        health: 100,
        speed: 1.18
    }, {
        name: "Spray N Pray",
        loadout: [6],
        colors: [10975328, 5793865, 4806204, 2631720, 2631720, 4806204],
        health: 170,
        speed: 1.18
    }, {
        name: "Vince",
        loadout: [5, 2],
        colors: [8412234, 5526119, 4144461, 2631720, 2631720, 4144461],
        health: 100,
        speed: 1.18
    }, {
        name: "Detective",
        loadout: [4],
        colors: [10975328, 7360054, 6308654, 2631720, 6506290, 6308654],
        health: 100,
        speed: 1.18
    }, {
        name: "Marksman",
        loadout: [7, 2],
        colors: [10975328, 5793865, 4806204, 2631720, 2631720, 4806204],
        health: 100,
        speed: 1.18
    }, {
        name: "Rocketeer",
        loadout: [8, 2],
        colors: [10975328, 5793865, 4806204, 2631720, 7098434, 4806204],
        health: 130,
        speed: 1.18
    }, {
        name: "Agent",
        loadout: [10],
        colors: [10975328, 4013373, 2302755, 2631720, 2631720, 12566463],
        health: 100,
        speed: 1.2
    }, {
        name: "Runner",
        hide: !0,
        loadout: [9],
        colors: [10975328, 4013373, 2302755, 2631720, 2631720, 2302755],
        health: 100,
        speed: 1
    }]
}
, function(t, e) {
    t.exports = [{
        name: "Sniper Rifle",
        src: "weapon_1",
        icon: "icon_1",
        sound: "weapon_1",
        nAuto: !0,
        type: 0,
        scope: !0,
        swapTime: 300,
        aimSpeed: 1,
        spdMlt: .95,
        ammo: Infinity,
        reload: 1500,
        dmg: 100,
        pierce: .2,
        range: 1e3,
        dropStart: 230,
        dmgDrop: 30,
        scale: 1.1,
        leftHoldY: -.7,
        rightHoldY: -.75,
        leftHoldZ: 2.4,
        rightHoldZ: .4,
        xOff: .8,
        yOff: -.75,
        zOff: -2,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.8,
        muzOff: 8,
        muzMlt: 1.6,
        rate: 900,
        spread: 260,
        zoom: 2.7,
        leanMlt: 2,
        recoil: .009,
        recoilR: .02,
        recover: .993,
        recoverY: .997,
        recoverF: .975,
        recoilY: 1,
        recoilZ: 1.8
    }, {
        name: "Assault Rifle",
        src: "weapon_2",
        icon: "icon_2",
        sound: "weapon_2",
        transp: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 1,
        spdMlt: .95,
        ammo: Infinity,
        reload: 1200,
        dmg: 22,
        pierce: 1,
        range: 700,
        dmgDrop: 10,
        scale: 1,
        leftHoldY: -.5,
        rightHoldY: -.7,
        leftHoldZ: 2,
        rightHoldZ: .2,
        xOff: 1.2,
        yOff: -1,
        zOff: -2.5,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.2,
        caseZOff: -1.7,
        caseYOff: -.2,
        muzOff: 5.9,
        muzOffY: .3,
        muzMlt: 1.4,
        rate: 110,
        spread: 120,
        minSpread: 5,
        zoom: 1.6,
        leanMlt: 1,
        recoil: .003,
        recoilR: .012,
        recover: .978,
        recoverY: .995,
        recoverF: .975,
        recoilY: 1,
        recoilZ: 5
    }, {
        name: "Pistol",
        src: "weapon_3",
        icon: "icon_3",
        sound: "weapon_3",
        transp: !0,
        nAuto: !0,
        kill: ["", 75],
        type: 1,
        swapTime: 350,
        aimSpeed: 1,
        spdMlt: 1.05,
        ammo: Infinity,
        reload: 700,
        dmg: 20,
        range: 700,
        dmgDrop: 10,
        scale: .95,
        leftHoldY: -.82,
        rightHoldY: -.62,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: .7,
        yOff: -.95,
        zOff: -4.5,
        xOrg: 0,
        yOrg: -.2,
        zOrg: -4.25,
        caseZOff: .2,
        caseYOff: 0,
        muzOff: 1.5,
        muzOffY: 0,
        muzMlt: .95,
        rate: 150,
        spread: 90,
        zoom: 1.4,
        leanMlt: 1,
        recoil: .006,
        recoilR: .005,
        recover: .98,
        recoverY: .99,
        recoverF: .98,
        recoilY: 3,
        recoilZ: 1
    }, {
        name: "Submachine Gun",
        src: "weapon_4",
        icon: "icon_4",
        sound: "weapon_4",
        transp: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 1,
        spdMlt: 1.04,
        ammo: Infinity,
        reload: 1200,
        dmg: 18,
        pierce: 1,
        range: 700,
        dmgDrop: 12,
        scale: 1,
        leftHoldY: -.35,
        rightHoldY: -.45,
        leftHoldZ: 1.2,
        rightHoldZ: -.2,
        xOff: .95,
        yOff: -.95,
        zOff: -3,
        xOrg: 0,
        yOrg: -.62,
        zOrg: -2.5,
        caseYOff: -.15,
        caseZOff: -.4,
        muzOff: 2.7,
        muzOffY: .1,
        rate: 90,
        spread: 170,
        minSpread: 20,
        zoom: 1.5,
        leanMlt: 1.2,
        recoil: .0034,
        recoilR: .015,
        recover: .978,
        recoverY: .996,
        recoverF: .975,
        recoilY: .3,
        recoilZ: 5.3
    }, {
        name: "Revolver",
        src: "weapon_5",
        icon: "icon_5",
        sound: "weapon_5",
        nAuto: !0,
        nCase: !0,
        transp: !0,
        kill: ["", 50],
        type: 1,
        swapTime: 200,
        aimSpeed: 1,
        spdMlt: 1.04,
        ammo: Infinity,
        reload: 900,
        dmg: 66,
        pierce: .85,
        dmgDrop: 10,
        scale: 1.3,
        leftHoldY: -1,
        rightHoldY: -.8,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: .7,
        yOff: -.8,
        zOff: -4.1,
        xOrg: 0,
        yOrg: -.35,
        zOrg: -3.8,
        muzOff: 2.75,
        muzOffY: .2,
        muzMlt: .95,
        range: 700,
        rate: 300,
        spread: 100,
        zoom: 1.4,
        leanMlt: 1.6,
        recoil: .01,
        recoilR: .01,
        recover: .982,
        recoverY: .994,
        recoverF: .98,
        recoilY: 1.25,
        recoilZ: 2
    }, {
        name: "Shotgun",
        src: "weapon_6",
        icon: "icon_6",
        sound: "weapon_6",
        nAuto: !0,
        nCase: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 1,
        spdMlt: 1,
        ammo: Infinity,
        shots: 5,
        reload: 1100,
        dmg: 50,
        dmgDrop: 40,
        scale: 1.25,
        leftHoldY: -.7,
        rightHoldY: -.9,
        leftHoldZ: 1.2,
        rightHoldZ: -.3,
        xOff: .95,
        yOff: -.8,
        zOff: -3,
        xOrg: 0,
        yOrg: -.2,
        zOrg: -1.5,
        muzOff: 6,
        muzMlt: 1.5,
        range: 240,
        rate: 400,
        innac: 110,
        spread: 120,
        minSpread: 20,
        zoom: 1.25,
        leanMlt: 1.6,
        recoil: .013,
        recoilR: .015,
        recover: .99,
        recoverF: .975,
        recoilY: .8,
        recoilZ: 2
    }, {
        name: "Light Machine Gun",
        src: "weapon_7",
        icon: "icon_7",
        sound: "weapon_7",
        transp: !0,
        type: 0,
        swapTime: 800,
        aimSpeed: 1,
        spdMlt: .79,
        ammo: Infinity,
        reload: 2500,
        dmg: 22,
        pierce: 1,
        range: 700,
        dmgDrop: 10,
        scale: 1.3,
        leftHoldY: -.6,
        leftHoldX: -.5,
        rightHoldY: -.75,
        leftHoldZ: .6,
        rightHoldZ: -.2,
        xOff: .95,
        yOff: -.8,
        zOff: -2.8,
        xOrg: 0,
        yOrg: -.45,
        zOrg: -2,
        caseInd: 2,
        caseZOff: -.5,
        caseYOff: -.1,
        muzOff: 5.5,
        muzMlt: 1.65,
        rate: 120,
        spread: 300,
        minSpread: 15,
        zoom: 1.2,
        leanMlt: 1.6,
        recoil: .0032,
        recoilR: .012,
        recover: .98,
        recoverY: .9975,
        recoverF: .975,
        recoilY: .4,
        recoilZ: 3.8
    }, {
        name: "Semi Auto",
        src: "weapon_8",
        icon: "icon_8",
        sound: "weapon_8",
        nAuto: !0,
        type: 0,
        scope: !0,
        swapTime: 400,
        aimSpeed: 1,
        spdMlt: 1,
        ammo: Infinity,
        reload: 1300,
        dmg: 55,
        pierce: .2,
        range: 1e3,
        dmgDrop: 0,
        scale: 1,
        leftHoldY: -.7,
        rightHoldY: -.75,
        leftHoldZ: 2.4,
        rightHoldZ: .4,
        xOff: .8,
        yOff: -.75,
        zOff: -2,
        xOrg: 0,
        yOrg: -.55,
        zOrg: -.8,
        muzOff: 5.7,
        muzOffY: .5,
        muzMlt: 1.4,
        rate: 330,
        spread: 300,
        zoom: 2.4,
        leanMlt: 2,
        recoil: .01,
        recoilR: .01,
        recover: .984,
        recoverY: .997,
        recoverF: .975,
        recoilY: .4,
        recoilZ: 1.8
    }, {
        name: "Rocket Launcher",
        src: "weapon_9",
        icon: "icon_9",
        sound: "weapon_9",
        nSkill: !0,
        nAuto: !0,
        nCase: !0,
        projectile: 0,
        type: 0,
        swapTime: 600,
        aimSpeed: 1,
        spdMlt: .9,
        ammo: Infinity,
        reload: 1600,
        scale: 1.3,
        leftHoldY: -.5,
        rightHoldY: -.6,
        leftHoldZ: 3.2,
        rightHoldZ: 1.6,
        xOff: .95,
        yOff: -.4,
        zOff: -.7,
        xOrg: 0,
        yOrg: -.6,
        zOrg: -1.5,
        muzOff: 5,
        muzOffY: 0,
        muzMlt: 1.5,
        rate: 1,
        spread: 120,
        minSpread: 15,
        zoom: 1.5,
        leanMlt: 1.4,
        recoil: .008,
        recoilR: .012,
        recover: .99,
        recoverY: .998,
        recoverF: .975,
        recoilY: .8,
        recoilZ: 4
    }, {
        name: "Hands",
        melee: !0,
        type: 1,
        swapTime: 350,
        spdMlt: 1.1,
        spread: 100,
        leftHoldY: -.82,
        leftHoldX: 1.3,
        rightHoldX: -1.3,
        rightHoldY: -.82,
        leftHoldZ: -.5,
        rightHoldZ: -.5,
        xOff: 0,
        yOff: -.95,
        zOff: -3,
        xOrg: 0,
        yOrg: 0,
        zOrg: 0,
        leanMlt: 1
    }, {
        name: "Akimbo Uzi",
        src: "weapon_10",
        icon: "icon_10",
        sound: "weapon_10",
        noAim: !0,
        akimbo: !0,
        type: 0,
        swapTime: 300,
        aimSpeed: 120,
        spdMlt: 1.04,
        ammo: Infinity,
        reload: 1200,
        dmg: 18,
        pierce: 1,
        range: 700,
        dmgDrop: 12,
        scale: .9,
        rightHoldY: -.55,
        leftHoldZ: .3,
        leftHoldX: -.25,
        leftHoldY: -.55,
        rightHoldZ: .3,
        rightHoldX: -.25,
        holdW: 1.3,
        xOff: 1.5,
        yOff: -.95,
        zOff: -3.3,
        xOrg: 0,
        yOrg: -.62,
        zOrg: -2.5,
        caseYOff: -.15,
        caseZOff: -.4,
        muzOff: 3.6,
        rate: 60,
        spread: 50,
        spreadInc: 1.5,
        minSpread: 10,
        zoom: 1.5,
        leanMlt: 1,
        recoil: .0034,
        recoilR: .015,
        recover: .978,
        recoverY: .996,
        recoverF: .975,
        recoilY: .3,
        recoilZ: 5
    }]
}
, function(t, e, n) {
    n(9),
    n(14),
    e.codec = {
        preset: n(4).preset
    }
}
, function(t, e, n) {
    n(9),
    n(14),
    e.createCodec = n(4).createCodec
}
, function(t, e, n) {
    e.Decoder = s;
    var i = n(18)
      , r = n(20).DecodeBuffer;
    function s(t) {
        if (!(this instanceof s))
            return new s(t);
        r.call(this, t)
    }
    s.prototype = new r,
    i.mixin(s.prototype),
    s.prototype.decode = function(t) {
        arguments.length && this.write(t),
        this.flush()
    }
    ,
    s.prototype.push = function(t) {
        this.emit("data", t)
    }
    ,
    s.prototype.end = function(t) {
        this.decode(t),
        this.emit("end")
    }
}
, function(t, e, n) {
    e.Encoder = s;
    var i = n(18)
      , r = n(25).EncodeBuffer;
    function s(t) {
        if (!(this instanceof s))
            return new s(t);
        r.call(this, t)
    }
    s.prototype = new r,
    i.mixin(s.prototype),
    s.prototype.encode = function(t) {
        this.write(t),
        this.emit("data", this.read())
    }
    ,
    s.prototype.end = function(t) {
        arguments.length && this.encode(t),
        this.flush(),
        this.emit("end")
    }
}
, function(t, e, n) {
    var i = n(19);
    function r(t) {
        var e, n = new Array(256);
        for (e = 0; e <= 127; e++)
            n[e] = s(e);
        for (e = 128; e <= 143; e++)
            n[e] = a(e - 128, t.map);
        for (e = 144; e <= 159; e++)
            n[e] = a(e - 144, t.array);
        for (e = 160; e <= 191; e++)
            n[e] = a(e - 160, t.str);
        for (n[192] = s(null),
        n[193] = null,
        n[194] = s(!1),
        n[195] = s(!0),
        n[196] = o(t.uint8, t.bin),
        n[197] = o(t.uint16, t.bin),
        n[198] = o(t.uint32, t.bin),
        n[199] = o(t.uint8, t.ext),
        n[200] = o(t.uint16, t.ext),
        n[201] = o(t.uint32, t.ext),
        n[202] = t.float32,
        n[203] = t.float64,
        n[204] = t.uint8,
        n[205] = t.uint16,
        n[206] = t.uint32,
        n[207] = t.uint64,
        n[208] = t.int8,
        n[209] = t.int16,
        n[210] = t.int32,
        n[211] = t.int64,
        n[212] = a(1, t.ext),
        n[213] = a(2, t.ext),
        n[214] = a(4, t.ext),
        n[215] = a(8, t.ext),
        n[216] = a(16, t.ext),
        n[217] = o(t.uint8, t.str),
        n[218] = o(t.uint16, t.str),
        n[219] = o(t.uint32, t.str),
        n[220] = o(t.uint16, t.array),
        n[221] = o(t.uint32, t.array),
        n[222] = o(t.uint16, t.map),
        n[223] = o(t.uint32, t.map),
        e = 224; e <= 255; e++)
            n[e] = s(e - 256);
        return n
    }
    function s(t) {
        return function() {
            return t
        }
    }
    function o(t, e) {
        return function(n) {
            var i = t(n);
            return e(n, i)
        }
    }
    function a(t, e) {
        return function(n) {
            return e(n, t)
        }
    }
    e.getReadToken = function(t) {
        var e = i.getReadFormat(t);
        return t && t.useraw ? function(t) {
            var e, n = r(t).slice();
            for (n[217] = n[196],
            n[218] = n[197],
            n[219] = n[198],
            e = 160; e <= 191; e++)
                n[e] = a(e - 160, t.bin);
            return n
        }(e) : r(e)
    }
}
, function(t, e, n) {
    e.setExtUnpackers = function(t) {
        t.addExtUnpacker(14, [a, l(Error)]),
        t.addExtUnpacker(1, [a, l(EvalError)]),
        t.addExtUnpacker(2, [a, l(RangeError)]),
        t.addExtUnpacker(3, [a, l(ReferenceError)]),
        t.addExtUnpacker(4, [a, l(SyntaxError)]),
        t.addExtUnpacker(5, [a, l(TypeError)]),
        t.addExtUnpacker(6, [a, l(URIError)]),
        t.addExtUnpacker(10, [a, c]),
        t.addExtUnpacker(11, [a, h(Boolean)]),
        t.addExtUnpacker(12, [a, h(String)]),
        t.addExtUnpacker(13, [a, h(Date)]),
        t.addExtUnpacker(15, [a, h(Number)]),
        "undefined" != typeof Uint8Array && (t.addExtUnpacker(17, h(Int8Array)),
        t.addExtUnpacker(18, h(Uint8Array)),
        t.addExtUnpacker(19, [p, h(Int16Array)]),
        t.addExtUnpacker(20, [p, h(Uint16Array)]),
        t.addExtUnpacker(21, [p, h(Int32Array)]),
        t.addExtUnpacker(22, [p, h(Uint32Array)]),
        t.addExtUnpacker(23, [p, h(Float32Array)]),
        "undefined" != typeof Float64Array && t.addExtUnpacker(24, [p, h(Float64Array)]),
        "undefined" != typeof Uint8ClampedArray && t.addExtUnpacker(25, h(Uint8ClampedArray)),
        t.addExtUnpacker(26, p),
        t.addExtUnpacker(29, [p, h(DataView)])),
        r.hasBuffer && t.addExtUnpacker(27, h(s))
    }
    ;
    var i, r = n(0), s = r.global, o = {
        name: 1,
        message: 1,
        stack: 1,
        columnNumber: 1,
        fileName: 1,
        lineNumber: 1
    };
    function a(t) {
        return i || (i = n(21).decode),
        i(t)
    }
    function c(t) {
        return RegExp.apply(null, t)
    }
    function l(t) {
        return function(e) {
            var n = new t;
            for (var i in o)
                n[i] = e[i];
            return n
        }
    }
    function h(t) {
        return function(e) {
            return new t(e)
        }
    }
    function p(t) {
        return new Uint8Array(t).buffer
    }
}
, function(t, e, n) {
    var i = n(12)
      , r = n(10)
      , s = r.Uint64BE
      , o = r.Int64BE
      , a = n(23).uint8
      , c = n(0)
      , l = c.global
      , h = c.hasBuffer && "TYPED_ARRAY_SUPPORT"in l && !l.TYPED_ARRAY_SUPPORT
      , p = c.hasBuffer && l.prototype || {};
    function u() {
        var t = a.slice();
        return t[196] = d(196),
        t[197] = f(197),
        t[198] = m(198),
        t[199] = d(199),
        t[200] = f(200),
        t[201] = m(201),
        t[202] = g(202, 4, p.writeFloatBE || x, !0),
        t[203] = g(203, 8, p.writeDoubleBE || w, !0),
        t[204] = d(204),
        t[205] = f(205),
        t[206] = m(206),
        t[207] = g(207, 8, v),
        t[208] = d(208),
        t[209] = f(209),
        t[210] = m(210),
        t[211] = g(211, 8, y),
        t[217] = d(217),
        t[218] = f(218),
        t[219] = m(219),
        t[220] = f(220),
        t[221] = m(221),
        t[222] = f(222),
        t[223] = m(223),
        t
    }
    function d(t) {
        return function(e, n) {
            var i = e.reserve(2)
              , r = e.buffer;
            r[i++] = t,
            r[i] = n
        }
    }
    function f(t) {
        return function(e, n) {
            var i = e.reserve(3)
              , r = e.buffer;
            r[i++] = t,
            r[i++] = n >>> 8,
            r[i] = n
        }
    }
    function m(t) {
        return function(e, n) {
            var i = e.reserve(5)
              , r = e.buffer;
            r[i++] = t,
            r[i++] = n >>> 24,
            r[i++] = n >>> 16,
            r[i++] = n >>> 8,
            r[i] = n
        }
    }
    function g(t, e, n, i) {
        return function(r, s) {
            var o = r.reserve(e + 1);
            r.buffer[o++] = t,
            n.call(r.buffer, s, o, i)
        }
    }
    function v(t, e) {
        new s(this,e,t)
    }
    function y(t, e) {
        new o(this,e,t)
    }
    function x(t, e) {
        i.write(this, t, e, !1, 23, 4)
    }
    function w(t, e) {
        i.write(this, t, e, !1, 52, 8)
    }
    e.getWriteToken = function(t) {
        return t && t.uint8array ? function() {
            var t = u();
            return t[202] = g(202, 4, x),
            t[203] = g(203, 8, w),
            t
        }() : h || c.hasBuffer && t && t.safe ? function() {
            var t = a.slice();
            return t[196] = g(196, 1, l.prototype.writeUInt8),
            t[197] = g(197, 2, l.prototype.writeUInt16BE),
            t[198] = g(198, 4, l.prototype.writeUInt32BE),
            t[199] = g(199, 1, l.prototype.writeUInt8),
            t[200] = g(200, 2, l.prototype.writeUInt16BE),
            t[201] = g(201, 4, l.prototype.writeUInt32BE),
            t[202] = g(202, 4, l.prototype.writeFloatBE),
            t[203] = g(203, 8, l.prototype.writeDoubleBE),
            t[204] = g(204, 1, l.prototype.writeUInt8),
            t[205] = g(205, 2, l.prototype.writeUInt16BE),
            t[206] = g(206, 4, l.prototype.writeUInt32BE),
            t[207] = g(207, 8, v),
            t[208] = g(208, 1, l.prototype.writeInt8),
            t[209] = g(209, 2, l.prototype.writeInt16BE),
            t[210] = g(210, 4, l.prototype.writeInt32BE),
            t[211] = g(211, 8, y),
            t[217] = g(217, 1, l.prototype.writeUInt8),
            t[218] = g(218, 2, l.prototype.writeUInt16BE),
            t[219] = g(219, 4, l.prototype.writeUInt32BE),
            t[220] = g(220, 2, l.prototype.writeUInt16BE),
            t[221] = g(221, 4, l.prototype.writeUInt32BE),
            t[222] = g(222, 2, l.prototype.writeUInt16BE),
            t[223] = g(223, 4, l.prototype.writeUInt32BE),
            t
        }() : u()
    }
}
, function(t, e, n) {
    var i = n(5)
      , r = n(10)
      , s = r.Uint64BE
      , o = r.Int64BE
      , a = n(0)
      , c = n(11)
      , l = n(40)
      , h = n(23).uint8
      , p = n(13).ExtBuffer
      , u = "undefined" != typeof Uint8Array
      , d = "undefined" != typeof Map
      , f = [];
    f[1] = 212,
    f[2] = 213,
    f[4] = 214,
    f[8] = 215,
    f[16] = 216,
    e.getWriteType = function(t) {
        var e = l.getWriteToken(t)
          , n = t && t.useraw
          , r = u && t && t.binarraybuffer
          , m = r ? a.isArrayBuffer : a.isBuffer
          , g = r ? function(t, e) {
            w(t, new Uint8Array(e))
        }
        : w
          , v = d && t && t.usemap ? function(t, n) {
            if (!(n instanceof Map))
                return b(t, n);
            var i = n.size;
            e[i < 16 ? 128 + i : i <= 65535 ? 222 : 223](t, i);
            var r = t.codec.encode;
            n.forEach(function(e, n, i) {
                r(t, n),
                r(t, e)
            })
        }
        : b;
        return {
            boolean: function(t, n) {
                e[n ? 195 : 194](t, n)
            },
            function: x,
            number: function(t, n) {
                var i = 0 | n;
                n === i ? e[-32 <= i && i <= 127 ? 255 & i : 0 <= i ? i <= 255 ? 204 : i <= 65535 ? 205 : 206 : -128 <= i ? 208 : -32768 <= i ? 209 : 210](t, i) : e[203](t, n)
            },
            object: n ? function(t, n) {
                if (m(n))
                    return function(t, n) {
                        var i = n.length;
                        e[i < 32 ? 160 + i : i <= 65535 ? 218 : 219](t, i),
                        t.send(n)
                    }(t, n);
                y(t, n)
            }
            : y,
            string: function(t) {
                return function(n, i) {
                    var r = i.length
                      , s = 5 + 3 * r;
                    n.offset = n.reserve(s);
                    var o = n.buffer
                      , a = t(r)
                      , l = n.offset + a;
                    r = c.write.call(o, i, l);
                    var h = t(r);
                    if (a !== h) {
                        var p = l + h - a
                          , u = l + r;
                        c.copy.call(o, o, p, l, u)
                    }
                    e[1 === h ? 160 + r : h <= 3 ? 215 + h : 219](n, r),
                    n.offset += r
                }
            }(n ? function(t) {
                return t < 32 ? 1 : t <= 65535 ? 3 : 5
            }
            : function(t) {
                return t < 32 ? 1 : t <= 255 ? 2 : t <= 65535 ? 3 : 5
            }
            ),
            symbol: x,
            undefined: x
        };
        function y(t, n) {
            if (null === n)
                return x(t, n);
            if (m(n))
                return g(t, n);
            if (i(n))
                return function(t, n) {
                    var i = n.length;
                    e[i < 16 ? 144 + i : i <= 65535 ? 220 : 221](t, i);
                    for (var r = t.codec.encode, s = 0; s < i; s++)
                        r(t, n[s])
                }(t, n);
            if (s.isUint64BE(n))
                return function(t, n) {
                    e[207](t, n.toArray())
                }(t, n);
            if (o.isInt64BE(n))
                return function(t, n) {
                    e[211](t, n.toArray())
                }(t, n);
            var r = t.codec.getExtPacker(n);
            if (r && (n = r(n)),
            n instanceof p)
                return function(t, n) {
                    var i = n.buffer
                      , r = i.length
                      , s = f[r] || (r < 255 ? 199 : r <= 65535 ? 200 : 201);
                    e[s](t, r),
                    h[n.type](t),
                    t.send(i)
                }(t, n);
            v(t, n)
        }
        function x(t, n) {
            e[192](t, n)
        }
        function w(t, n) {
            var i = n.length;
            e[i < 255 ? 196 : i <= 65535 ? 197 : 198](t, i),
            t.send(n)
        }
        function b(t, n) {
            var i = Object.keys(n)
              , r = i.length;
            e[r < 16 ? 128 + r : r <= 65535 ? 222 : 223](t, r);
            var s = t.codec.encode;
            i.forEach(function(e) {
                s(t, e),
                s(t, n[e])
            })
        }
    }
}
, function(t, e, n) {
    e.setExtPackers = function(t) {
        t.addExtPacker(14, Error, [p, c]),
        t.addExtPacker(1, EvalError, [p, c]),
        t.addExtPacker(2, RangeError, [p, c]),
        t.addExtPacker(3, ReferenceError, [p, c]),
        t.addExtPacker(4, SyntaxError, [p, c]),
        t.addExtPacker(5, TypeError, [p, c]),
        t.addExtPacker(6, URIError, [p, c]),
        t.addExtPacker(10, RegExp, [h, c]),
        t.addExtPacker(11, Boolean, [l, c]),
        t.addExtPacker(12, String, [l, c]),
        t.addExtPacker(13, Date, [Number, c]),
        t.addExtPacker(15, Number, [l, c]),
        "undefined" != typeof Uint8Array && (t.addExtPacker(17, Int8Array, o),
        t.addExtPacker(18, Uint8Array, o),
        t.addExtPacker(19, Int16Array, o),
        t.addExtPacker(20, Uint16Array, o),
        t.addExtPacker(21, Int32Array, o),
        t.addExtPacker(22, Uint32Array, o),
        t.addExtPacker(23, Float32Array, o),
        "undefined" != typeof Float64Array && t.addExtPacker(24, Float64Array, o),
        "undefined" != typeof Uint8ClampedArray && t.addExtPacker(25, Uint8ClampedArray, o),
        t.addExtPacker(26, ArrayBuffer, o),
        t.addExtPacker(29, DataView, o)),
        r.hasBuffer && t.addExtPacker(27, s, r.from)
    }
    ;
    var i, r = n(0), s = r.global, o = r.Uint8Array.from, a = {
        name: 1,
        message: 1,
        stack: 1,
        columnNumber: 1,
        fileName: 1,
        lineNumber: 1
    };
    function c(t) {
        return i || (i = n(26).encode),
        i(t)
    }
    function l(t) {
        return t.valueOf()
    }
    function h(t) {
        (t = RegExp.prototype.toString.call(t).split("/")).shift();
        var e = [t.pop()];
        return e.unshift(t.join("/")),
        e
    }
    function p(t) {
        var e = {};
        for (var n in a)
            e[n] = t[n];
        return e
    }
}
, function(t, e) {
    e.copy = function(t, e, n, i) {
        var r;
        n || (n = 0),
        i || 0 === i || (i = this.length),
        e || (e = 0);
        var s = i - n;
        if (t === this && n < e && e < i)
            for (r = s - 1; r >= 0; r--)
                t[r + e] = this[r + n];
        else
            for (r = 0; r < s; r++)
                t[r + e] = this[r + n];
        return s
    }
    ,
    e.toString = function(t, e, n) {
        var i = 0 | e;
        n || (n = this.length);
        for (var r = "", s = 0; i < n; )
            (s = this[i++]) < 128 ? r += String.fromCharCode(s) : (192 == (224 & s) ? s = (31 & s) << 6 | 63 & this[i++] : 224 == (240 & s) ? s = (15 & s) << 12 | (63 & this[i++]) << 6 | 63 & this[i++] : 240 == (248 & s) && (s = (7 & s) << 18 | (63 & this[i++]) << 12 | (63 & this[i++]) << 6 | 63 & this[i++]),
            s >= 65536 ? (s -= 65536,
            r += String.fromCharCode(55296 + (s >>> 10), 56320 + (1023 & s))) : r += String.fromCharCode(s));
        return r
    }
    ,
    e.write = function(t, e) {
        for (var n = e || (e |= 0), i = t.length, r = 0, s = 0; s < i; )
            (r = t.charCodeAt(s++)) < 128 ? this[n++] = r : r < 2048 ? (this[n++] = 192 | r >>> 6,
            this[n++] = 128 | 63 & r) : r < 55296 || r > 57343 ? (this[n++] = 224 | r >>> 12,
            this[n++] = 128 | r >>> 6 & 63,
            this[n++] = 128 | 63 & r) : (r = 65536 + (r - 55296 << 10 | t.charCodeAt(s++) - 56320),
            this[n++] = 240 | r >>> 18,
            this[n++] = 128 | r >>> 12 & 63,
            this[n++] = 128 | r >>> 6 & 63,
            this[n++] = 128 | 63 & r);
        return n - e
    }
}
, function(t, e, n) {
    var i = n(0);
    function r(t) {
        return new Uint8Array(t)
    }
    (e = t.exports = i.hasArrayBuffer ? r(0) : []).alloc = r,
    e.concat = i.concat,
    e.from = function(t) {
        if (i.isView(t)) {
            var n = t.byteOffset
              , r = t.byteLength;
            (t = t.buffer).byteLength !== r && (t.slice ? t = t.slice(n, n + r) : (t = new Uint8Array(t)).byteLength !== r && (t = Array.prototype.slice.call(t, n, n + r)))
        } else {
            if ("string" == typeof t)
                return i.from.call(e, t);
            if ("number" == typeof t)
                throw new TypeError('"value" argument must not be a number')
        }
        return new Uint8Array(t)
    }
}
, function(t, e, n) {
    var i = n(0)
      , r = i.global;
    function s(t) {
        return new r(t)
    }
    (e = t.exports = i.hasBuffer ? s(0) : []).alloc = i.hasBuffer && r.alloc || s,
    e.concat = i.concat,
    e.from = function(t) {
        if (!i.isBuffer(t) && i.isView(t))
            t = i.Uint8Array.from(t);
        else if (i.isArrayBuffer(t))
            t = new Uint8Array(t);
        else {
            if ("string" == typeof t)
                return i.from.call(e, t);
            if ("number" == typeof t)
                throw new TypeError('"value" argument must not be a number')
        }
        return r.from && 1 !== r.from.length ? r.from(t) : new r(t)
    }
}
, function(t, e, n) {
    var i = n(0);
    function r(t) {
        return new Array(t)
    }
    (e = t.exports = r(0)).alloc = r,
    e.concat = i.concat,
    e.from = function(t) {
        if (!i.isBuffer(t) && i.isView(t))
            t = i.Uint8Array.from(t);
        else if (i.isArrayBuffer(t))
            t = new Uint8Array(t);
        else {
            if ("string" == typeof t)
                return i.from.call(e, t);
            if ("number" == typeof t)
                throw new TypeError('"value" argument must not be a number')
        }
        return Array.prototype.slice.call(t)
    }
}
, function(t, e, n) {
    "use strict";
    e.byteLength = function(t) {
        var e = l(t)
          , n = e[0]
          , i = e[1];
        return 3 * (n + i) / 4 - i
    }
    ,
    e.toByteArray = function(t) {
        for (var e, n = l(t), i = n[0], o = n[1], a = new s(3 * (i + o) / 4 - o), c = 0, h = o > 0 ? i - 4 : i, p = 0; p < h; p += 4)
            e = r[t.charCodeAt(p)] << 18 | r[t.charCodeAt(p + 1)] << 12 | r[t.charCodeAt(p + 2)] << 6 | r[t.charCodeAt(p + 3)],
            a[c++] = e >> 16 & 255,
            a[c++] = e >> 8 & 255,
            a[c++] = 255 & e;
        return 2 === o && (e = r[t.charCodeAt(p)] << 2 | r[t.charCodeAt(p + 1)] >> 4,
        a[c++] = 255 & e),
        1 === o && (e = r[t.charCodeAt(p)] << 10 | r[t.charCodeAt(p + 1)] << 4 | r[t.charCodeAt(p + 2)] >> 2,
        a[c++] = e >> 8 & 255,
        a[c++] = 255 & e),
        a
    }
    ,
    e.fromByteArray = function(t) {
        for (var e, n = t.length, r = n % 3, s = [], o = 0, a = n - r; o < a; o += 16383)
            s.push(p(t, o, o + 16383 > a ? a : o + 16383));
        return 1 === r ? (e = t[n - 1],
        s.push(i[e >> 2] + i[e << 4 & 63] + "==")) : 2 === r && (e = (t[n - 2] << 8) + t[n - 1],
        s.push(i[e >> 10] + i[e >> 4 & 63] + i[e << 2 & 63] + "=")),
        s.join("")
    }
    ;
    for (var i = [], r = [], s = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, c = o.length; a < c; ++a)
        i[a] = o[a],
        r[o.charCodeAt(a)] = a;
    function l(t) {
        var e = t.length;
        if (e % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
        var n = t.indexOf("=");
        return -1 === n && (n = e),
        [n, n === e ? 0 : 4 - n % 4]
    }
    function h(t) {
        return i[t >> 18 & 63] + i[t >> 12 & 63] + i[t >> 6 & 63] + i[63 & t]
    }
    function p(t, e, n) {
        for (var i, r = [], s = e; s < n; s += 3)
            i = (t[s] << 16 & 16711680) + (t[s + 1] << 8 & 65280) + (255 & t[s + 2]),
            r.push(h(i));
        return r.join("")
    }
    r["-".charCodeAt(0)] = 62,
    r["_".charCodeAt(0)] = 63
}
, function(t, e, n) {
    (function(e) {
        function n(t) {
            return t && t.isBuffer && t
        }
        t.exports = n(void 0 !== e && e) || n(this.Buffer) || n("undefined" != typeof window && window.Buffer) || this.Buffer
    }
    ).call(this, n(24).Buffer)
}
, function(t, e, n) {
    e.encode = n(26).encode,
    e.decode = n(21).decode,
    e.Encoder = n(37).Encoder,
    e.Decoder = n(36).Decoder,
    e.createCodec = n(35).createCodec,
    e.codec = n(34).codec
}
, function(t, e, n) {
    var i = n(49)
      , r = n(1);
    t.exports = {
        socket: null,
        connected: !1,
        socketId: -1,
        connect: function(t, e, n) {
            if (!this.socket) {
                var s = r.enableHttps ? "wss:" : "ws:"
                  , o = this;
                try {
                    var a = !1
                      , c = s + t;
                    this.socket = new WebSocket(c),
                    this.socket.binaryType = "arraybuffer",
                    this.socket.onmessage = function(t) {
                        var e = new Uint8Array(t.data)
                          , r = i.decode(e)
                          , s = r[0];
                        e = r[1],
                        "io-init" == s ? o.socketId = e[0] : n[s].apply(void 0, e)
                    }
                    ,
                    this.socket.onopen = function() {
                        o.connected = !0,
                        e()
                    }
                    ,
                    this.socket.onclose = function() {
                        o.connected = !1,
                        a || e("Disconnected. Try connecting to another server.")
                    }
                    ,
                    this.socket.onerror = function(t) {
                        this.socket.readyState != WebSocket.OPEN && (a = !0,
                        console.error("Socket error", arguments),
                        e("Socket error"))
                    }
                } catch (t) {
                    console.error("Socket connection error:", t),
                    e(t)
                }
            }
        },
        send: function(t) {
            var e = Array.prototype.slice.call(arguments, 1)
              , n = i.encode([t, e]);
            this.socket.send(n)
        },
        socketReady: function() {
            return this.socket && this.connected
        }
    }
}
, function(t, e, n) {
    var i = n(2)
      , r = n(3)
      , s = new i.Vector3;
    function o() {
        i.Object3D.call(this),
        this.largeSpawnCount = 8,
        this.smallSpawnCount = 15,
        this.emissiveness = .55,
        this.velocityDamping = 3,
        this.lifeSpeedMin = 2.2,
        this.lifeSpeedRange = 3;
        var t = new i.Geometry({
            dynamic: !0
        })
          , e = new i.Color(12303291);
        this.mesh = new i.Mesh(t,new i.MeshLambertMaterial({
            color: e,
            emissive: e.multiplyScalar(this.emissiveness),
            shading: i.FlatShading
        })),
        this.mesh.castShadow = !0,
        this.mesh.receiveShadow = !0,
        this.add(this.mesh),
        this.cubeTemplate = new i.BoxGeometry(1,1,1);
        for (var n = 0; n < this.cubeTemplate.faces.length; n++)
            this.cubeTemplate.faces[n].materialIndex = 0;
        this.cubeTemplate.faceVertexUvs = [[]],
        this.entities = []
    }
    o.staticMatrix = new i.Matrix4,
    o.prototype = Object.create(i.Object3D.prototype),
    Object.defineProperty(o, "finished", function() {
        return 0 === this.entities.length
    }),
    o.prototype.explodeAt = function(t, e, n, i) {
        this.sizeMin = .35 * i,
        this.sizeRange = 2.2 * i,
        this.velocityMin = 30 * i,
        this.velocityRange = 17 * i,
        s.set(t, e, n);
        for (var r = 0; r < this.largeSpawnCount; r++)
            this.spawnEntity(.1 * Math.random() + .9, s, !1);
        for (r = 0; r < this.smallSpawnCount; r++)
            this.spawnEntity(.9 * Math.random(), s, !1)
    }
    ,
    o.prototype.spawnEntity = function(t, e) {
        for (var n = Math.pow(t, 2.5), i = n * this.sizeRange + this.sizeMin, r = (1 - n) * this.velocityRange + this.velocityMin, s = this._randomVector().normalize().multiplyScalar(r), a = n * this.lifeSpeedRange + this.lifeSpeedMin, c = 0; ; ) {
            for (var l = !0, h = 0; h < this.entities.length; h++)
                if (this.entities[h].index === c) {
                    l = !1;
                    break
                }
            if (l)
                break;
            c++
        }
        8 * c > this.mesh.geometry.vertices.length - 1 && this.mesh.geometry.merge(this.cubeTemplate, o.emptyMatrix),
        this.entities.push({
            index: c,
            rank: n,
            rankSeed: t,
            life: 0,
            lifeSpeed: a,
            size: i,
            position: e.clone(),
            velocity: s
        })
    }
    ,
    o.prototype.destroyEntity = function(t) {
        this.entities.splice(this.entities.indexOf(t), 1);
        for (var e = 8 * t.index; e < 8 * (t.index + 1); e++)
            this.mesh.geometry.vertices[e].set(0, 0, 0);
        this.mesh.geometry.verticesNeedUpdate = !0,
        this.mesh.geometry.elementsNeedUpdate = !0,
        this._cleanGeometry()
    }
    ,
    o.prototype.update = function(t) {
        for (var e of (t /= 1e3,
        this.entities)) {
            e.life += t * e.lifeSpeed,
            e.velocity.multiplyScalar(1 - this.velocityDamping * t),
            e.position.add(e.velocity.clone().multiplyScalar(t));
            var n = 2 - Math.pow(e.life / Math.sqrt(2), 2);
            n *= e.size;
            for (var i = 8 * e.index; i < 8 * (e.index + 1); i++) {
                var r = this.mesh.geometry.vertices[i]
                  , s = this.cubeTemplate.vertices[i % 8];
                r.set(e.position.x, e.position.y, e.position.z).addScaledVector(s, n)
            }
            n <= 0 && this.destroyEntity(e)
        }
        this.mesh.geometry.verticesNeedUpdate = !0,
        this.mesh.geometry.elementsNeedUpdate = !0,
        this.mesh.geometry.computeBoundingSphere()
    }
    ,
    o.prototype._cleanGeometry = function() {
        for (var t = this.mesh.geometry.vertices, e = this.mesh.geometry.faces, n = -1, i = 0; i < this.entities.length; i++) {
            var r = this.entities[i];
            r.index > n && (n = r.index)
        }
        var s = n + 1;
        t.splice(8 * s, t.length - 8 * s),
        e.splice(12 * s, e.length - 12 * s)
    }
    ,
    o.prototype._randomVector = function() {
        return new i.Vector3(Math.random() - .5,Math.random() - .5,Math.random() - .5)
    }
    ;
    var a = [{
        mat: i.MeshBasicMaterial,
        spd: 1.7,
        scale: 1.4,
        length: 10,
        color: 16777179
    }, {
        spd: [.03, .04],
        grav: 4e-4,
        spn: [.03, .05],
        scale: .15,
        length: .5,
        color: 10124094
    }, {
        spd: [.03, .04],
        grav: 4e-4,
        spn: [.03, .05],
        scale: .11,
        length: .4,
        color: 12816686
    }];
    i.Sprite.prototype.init = function(t, e, n, i, r, s, o, a, c, l) {
        this.position.x = t,
        this.position.y = e,
        this.position.z = n,
        this.xVel = i,
        this.yVel = r,
        this.zVel = s,
        this.scale.x = this.scale.y = o,
        this.life = a || 0,
        this.grav = c || 0,
        this.area = l,
        this.updC = 0
    }
    ,
    i.Sprite.prototype.update = function(t) {
        if (this.visible) {
            if (this.position.x += this.xVel * t,
            this.position.y += this.yVel * t,
            this.yVel -= this.grav * t,
            this.position.z += this.zVel * t,
            this.area) {
                var e = this.scale.x / 2;
                this.position.x - e >= this.area.x + this.area.w ? this.position.x = this.area.x - this.area.w - e : this.position.x + e <= this.area.x - this.area.w && (this.position.x = this.area.x + this.area.w + e),
                this.position.z - e >= this.area.z + this.area.l ? this.position.z = this.area.z - this.area.l - e : this.position.z + e <= this.area.z - this.area.l && (this.position.z = this.area.z + this.area.l + e),
                this.position.y - e >= this.area.y + this.area.h ? this.position.y = this.area.y - e : this.position.y + e <= this.area.y && (this.position.y = this.area.y + this.area.h + e)
            }
            this.life > 0 ? (this.life -= t,
            this.life <= 0 && this.updC && (this.visible = !1),
            this.updC++) : this.life <= 0 && this.updC && (this.visible = !1)
        }
    }
    ;
    var c = [Math.PI / 3, -Math.PI / 3]
      , l = [{
        hole: !0,
        count: 2,
        grav: -2e-5,
        scale: [5, 9],
        speed: [0, .025],
        spread: [-.4, .4],
        life: [300, 500]
    }, {}, {
        count: 1,
        blending: 2,
        scale: [5, 7],
        speed: [0, 0],
        spread: [0, 0],
        life: [30, 35]
    }, {
        count: 1,
        blending: 2,
        scale: [2e3, 2e3],
        speed: [0, 0],
        spread: [0, 0]
    }, {
        count: 4,
        src: "0",
        scale: [5, 6],
        speed: [0, .01],
        spread: [-1, 1],
        life: [600, 800]
    }];
    t.exports = function(t, e) {
        var n, s;
        this.particles = [],
        this.physObjs = [],
        this.areas = [],
        this.active = !0,
        this.ExplosionManager = new o,
        this.area = function(t, e, n, i, s, o, a, c) {
            i /= 2,
            o /= 2,
            this.areas.push({
                f: c,
                x: t,
                y: e,
                z: n,
                w: i,
                h: s,
                l: o
            });
            for (var l = 0; l < a.count; ++l)
                this.add(a.src, t + r.randInt(-i, i), e + r.randInt(0, s), n + r.randInt(-o, o), a.spd * Math.sin(a.dir), a.grav ? r.randFloat(a.grav[0], a.grav[1]) : 0, a.spd * Math.cos(a.dir), r.randFloat(a.scl[0], a.scl[1]), 0, 0, a.blending, this.areas[this.areas.length - 1])
        }
        ,
        this.effect = function(e, s, o, a, c, h) {
            if (this.active && (0 == t.useDepthMap || "0" == t.useDepthMap)) {
                n = l[h];
                for (var p = 0; p < n.count; ++p) {
                    var u = r.randFloat(n.speed[0], n.speed[1])
                      , d = a + r.randFloat(n.spread[0], n.spread[1])
                      , f = c + r.randFloat(n.spread[0], n.spread[1]);
                    this.add(h, e, s, o, u * Math.sin(d) * Math.cos(f), u * Math.sin(f), u * Math.cos(d) * Math.cos(f), r.randFloat(n.scale[0], n.scale[1]), n.life ? r.randInt(n.life[0], n.life[1]) : 0, n.grav, n.blending, null, n.src)
                }
                n.hole && this.add(1, e, s, o, 0, 0, 0, r.randFloat(.4, 1), 5e3, 0, i.SubtractiveBlending)
            }
        }
        ,
        this.add = function(e, n, r, o, a, c, l, h, p, u, d, f, m) {
            s = null;
            for (var g = 0; g < this.particles.length; ++g)
                if (!this.particles[g].visible && !this.particles[g].static) {
                    s = this.particles[g];
                    break
                }
            s || (s = new i.Sprite,
            this.particles.push(s),
            t.scene.add(s)),
            this.setMaterial(s, m || e, d, !0),
            s.visible = !0,
            s.init(n, r, o, a, c, l, h, p, u, f)
        }
        ,
        this.setMaterial = function(e, n, s, o) {
            e.material = t.getMat("particles/" + n, {
                mat: i.SpriteMaterial,
                depthWrite: !1,
                blending: s || i.NormalBlending,
                rotation: o ? c[r.randInt(0, 2)] : 0
            })
        }
        ,
        this.physObj = function(e, n, o, c, l, h, p, u, d, f) {
            if (0 == t.useDepthMap || "0" == t.useDepthMap) {
                s = null;
                for (var m = 0; m < this.physObjs.length; ++m)
                    if (!this.physObjs[m].mesh.visible) {
                        s = this.physObjs[m];
                        break
                    }
                s || (s = new function(t) {
                    this.mesh = new i.Mesh(t.cubeGeo),
                    this.init = function(e, n, s, o, a, c, l, h) {
                        this.dst = c,
                        this.spd = l.spd[1] ? r.randFloat(l.spd[0], l.spd[1]) : l.spd,
                        o -= Math.PI,
                        this.xS = this.spd * Math.sin(o) * Math.cos(a) + (h ? h.xVel : 0),
                        this.zS = this.spd * Math.cos(o) * Math.cos(a) + (h ? h.zVel : 0),
                        this.yS = this.spd * Math.sin(a) + (h ? h.yVel : 0),
                        this.grav = l.grav,
                        this.spin = l.spn ? l.spn[1] ? r.randFloat(l.spn[0], l.spn[1]) : l.spn : 0,
                        this.mesh.receiveShadow = l.mat != i.MeshBasicMaterial,
                        this.mesh.material = t.getMat("default", {
                            fog: l.mat != i.MeshBasicMaterial,
                            color: l.color,
                            emissive: l.emis,
                            mat: l.mat
                        }),
                        t.moveMesh(this.mesh, e, n, s),
                        this.mesh.lookAt(e + this.xS, n + this.yS, s + this.zS),
                        t.scaleMesh(this.mesh, l.scale, l.scale, l.length)
                    }
                    ,
                    this.update = function(t) {
                        this.mesh.visible && (this.mesh.position.x += this.xS * t,
                        this.mesh.position.z += this.zS * t,
                        this.mesh.position.y += this.yS * t,
                        this.spin && (this.mesh.rotation.x += this.spin * t),
                        this.yS -= (this.grav || 0) * t,
                        this.dst -= this.spd * t,
                        this.dst <= 0 && (this.mesh.visible = !1))
                    }
                }
                (t),
                this.physObjs.push(s),
                t.scene.add(s.mesh)),
                s.sid = void 0 != f ? f : null,
                s.mesh.visible = !0,
                s.init(e, n, o, c, l, h, d || a[p], u)
            }
        }
        ,
        this.disablePhys = function(t) {
            for (var e = 0; e < this.physObjs.length; ++e)
                this.physObjs[e].sid == t && (this.physObjs[e].mesh.visible = !1)
        }
        ,
        this.update = function(t, e) {
            if (e && e.active)
                for (var n = 0; n < this.areas.length; ++n)
                    this.areas[n].f && (this.areas[n].x = e.x,
                    this.areas[n].y = e.y,
                    this.areas[n].z = e.z);
            for (n = 0; n < this.particles.length; ++n)
                this.particles[n].update(t);
            for (n = 0; n < this.physObjs.length; ++n)
                this.physObjs[n].update(t);
            this.ExplosionManager.update(t)
        }
        ,
        this.reset = function() {
            this.particles.length = 0,
            this.physObjs.length = 0,
            this.areas.length = 0
        }
    }
}
, function(t, e) {
    var n = {
        utf8: {
            stringToBytes: function(t) {
                return n.bin.stringToBytes(unescape(encodeURIComponent(t)))
            },
            bytesToString: function(t) {
                return decodeURIComponent(escape(n.bin.bytesToString(t)))
            }
        },
        bin: {
            stringToBytes: function(t) {
                for (var e = [], n = 0; n < t.length; n++)
                    e.push(255 & t.charCodeAt(n));
                return e
            },
            bytesToString: function(t) {
                for (var e = [], n = 0; n < t.length; n++)
                    e.push(String.fromCharCode(t[n]));
                return e.join("")
            }
        }
    };
    t.exports = n
}
, , , , , function(t, e) {
    t.exports = function(t, e, n, i) {
        n = n || {},
        this.id = t,
        this.name = e,
        this.score = n.player_score || 0,
        this.kills = n.player_kills || 0,
        this.deaths = n.player_deaths || 0,
        this.wins = n.player_wins || 0,
        this.games = n.player_games_played || 0,
        this.clan = n.player_clanid,
        this.funds = n.player_funds || 0,
        this.featured = n.player_featured || 0,
        this.clan = n.player_clan || null,
        this.timePlayed = n.player_timeplayed || 0,
        this.skins = n.skins || [],
        this.setData = function(t) {
            this.kills = t[1],
            this.wins = t[2],
            this.games = t[3],
            this.deaths = t[4],
            this.funds = t[5],
            this.score = t[6],
            this.updateLevel(),
            this.clan = t[7],
            this.timePlayed = t[8],
            this.featured = t[9],
            this.skins = t[10]
        }
        ,
        this.updateLevel = function() {
            var t = i.rankVar * Math.sqrt(this.score);
            this.level = Math.floor(t),
            this.levelProg = Math.round(100 * (t - this.level)),
            this.level = Math.max(1, this.level)
        }
        ,
        this.updateLevel(),
        this.getData = function() {
            return [this.id, this.kills, this.wins, this.games, this.deaths, this.funds, this.score, this.clan, this.timePlayed, this.featured, this.skins]
        }
    }
}
, function(t, e, n) {
    n(2),
    t.exports = function(t, e, n, i, r, s, o) {
        var a = this
          , c = t.renderer.domElement;
        if (this.hasPointerlock = "pointerLockElement"in document || "mozPointerLockElement"in document || "webkitPointerLockElement"in document,
        this.hasPointerlock) {
            c.requestPointerLock = c.requestPointerLock || c.mozRequestPointerLock || c.webkitRequestPointerLock;
            var l = function(t) {
                a.enabled = document.pointerLockElement === c || document.mozPointerLockElement === c || document.webkitPointerLockElement === c,
                (o.connected || r.singlePlayer) && (a.enabled && enterGame(),
                n.toggleControlUI(a.enabled))
            };
            document.addEventListener("pointerlockchange", l, !1),
            document.addEventListener("mozpointerlockchange", l, !1),
            document.addEventListener("webkitpointerlockchange", l, !1)
        }
        this.isn = 0,
        this.tmpInputs = [],
        this.getISN = function() {
            return this.isn++
        }
        ,
        this.masterLock = !0,
        this.sensMlt = 1,
        this.sensAimMlt = 1,
        this.locked = !1,
        this.enabled = !1,
        t.camera.rotation.set(0, 0, 0),
        this.pitchObject = new e.Object3D,
        this.pitchObject.add(t.camera),
        this.object = new e.Object3D,
        this.object.add(this.pitchObject);
        var h = Math.PI / 2;
        c.addEventListener("mousemove", function(e) {
            if (a.enabled && !window.locked) {
                e.preventDefault(),
                window.idleTimer = 0;
                var n = e.movementX || e.mozMovementX || e.webkitMovementX || 0
                  , i = e.movementY || e.mozMovementY || e.webkitMovementY || 0
                  , r = a.mouseDownR ? a.sensAimMlt : a.sensMlt
                  , o = s.mouseSens * r * (a.target ? s.camChaseSen : 1) * (t.camera.fov / t.fov);
                a.pitchObject.rotation.x -= i * o * (a.invertY ? -1 : 1),
                a.unlockView || (a.pitchObject.rotation.x = Math.max(-h, Math.min(h, a.pitchObject.rotation.x)));
                var c = Math.abs(a.pitchObject.rotation.x % (2 * Math.PI));
                dirFlip = c > Math.PI / 2 && c < Math.PI + Math.PI / 2 ? -1 : 1,
                a.object.rotation.y -= n * o * dirFlip,
                a.yDr = (a.pitchObject.rotation.x % Math.PI2).round(3),
                a.xDr = (a.object.rotation.y % Math.PI2).round(3)
            }
        }, !1),
        c.addEventListener("mousedown", function(t) {
            if (!a.masterLock)
                switch (a.enabled || a.toggle(!0),
                document.activeElement == chatInput && chatInput.blur(),
                t.which) {
                case 3:
                    a.mouseDownR = 1;
                    break;
                default:
                    a.mouseDownL = 1
                }
        }, !1),
        c.addEventListener("mouseup", function(t) {
            if (!a.locked)
                switch (t.which) {
                case 3:
                    a.mouseDownR = 0;
                    break;
                default:
                    a.mouseDownL = 0
                }
        }, !1);
        var p = function(t) {
            return t = window.event || t,
            a.skipScroll ? a.skipScroll = !1 : a.scrollDelta = -Math.max(-1, Math.min(1, t.wheelDelta || -t.detail)),
            !1
        };
        function u(t, e) {
            if (window.idleTimer = 0,
            a.keys) {
                if (e && a.keys[t] !== e && null != a.inputChanger)
                    a.moveKeys[a.inputChanger] ? a.moveKeys[a.inputChanger] = t : a[a.inputChanger] = t,
                    saveVal("cont_" + a.inputChanger, t),
                    "recordKey" == a.inputChanger ? showWindow(12, !0) : showWindow(7, !0),
                    a.inputChanger = null;
                else if (!a.enabled)
                    return;
                a.keys[t] !== e && (a.keys[t] = e,
                t == a.voiceKey ? toggleRecord(e) : a.moveKeys.indexOf(t) >= 0 && a.updateMoveDir(),
                e && (t == a.swapKeyU ? a.scrollDelta = 1 : t == a.swapKeyD ? a.scrollDelta = -1 : window.pressButton(t)))
            }
        }
        c.addEventListener ? (c.addEventListener("mousewheel", p, !1),
        c.addEventListener("DOMMouseScroll", p, !1)) : myitem.attachEvent("onmousewheel", p),
        this.update = function(e) {
            if (this.target) {
                var n = i.getAngleDist(this.object.rotation.y, this.target.yD);
                this.object.rotation.y += n * e * s.camChaseTrn,
                n = i.getAngleDist(a.pitchObject.rotation.x, this.target.xD),
                this.pitchObject.rotation.x += n * e * s.camChaseTrn,
                n = i.getDistance3D(this.object.position.x, this.object.position.y, this.object.position.z, this.target.x, this.target.y, this.target.z) * e * s.camChaseSpd;
                var r = i.getDirection(this.object.position.z, this.object.position.x, this.target.z, this.target.x)
                  , o = i.getXDir(this.object.position.x, this.object.position.y, this.object.position.z, this.target.x, this.target.y, this.target.z);
                this.object.position.x -= n * Math.sin(r) * Math.cos(o),
                this.object.position.y += n * Math.sin(o),
                this.object.position.z -= n * Math.cos(r) * Math.cos(o),
                t.updateFrustum()
            }
        }
        ,
        this.camLookAt = function(t, e, n) {
            var r = i.getXDir(this.object.position.x, this.object.position.y, this.object.position.z, t, e, n)
              , o = i.getDirection(this.object.position.z, this.object.position.x, n, t);
            this.target = {
                xD: r,
                yD: o,
                x: t + s.camChaseDst * Math.sin(o) * Math.cos(r),
                y: e - s.camChaseDst * Math.sin(r),
                z: n + s.camChaseDst * Math.cos(o) * Math.cos(r)
            }
        }
        ,
        this.moveCam = function(e, n, i) {
            a.object.position.set(e, n, i),
            t.camera.updateProjectionMatrix(),
            t.updateFrustum()
        }
        ,
        this.rotateCam = function(e, n, i) {
            t.camera.rotation.y = e,
            t.camera.rotation.x = n,
            t.camera.rotation.z = i
        }
        ,
        this.jumpKey = parseInt(getSavedVal("cont_jumpKey") || 32),
        this.crouchKey = parseInt(getSavedVal("cont_crouchKey") || 16),
        this.swapKeyD = parseInt(getSavedVal("cont_swapKeyD") || 81),
        this.swapKeyU = parseInt(getSavedVal("cont_swapKeyU") || 69),
        this.reloadKey = parseInt(getSavedVal("cont_reloadKey") || 82),
        this.sprayKey = parseInt(getSavedVal("cont_sprayKey") || 70),
        this.aimKey = parseInt(getSavedVal("cont_aimKey") || 67),
        this.chatKey = parseInt(getSavedVal("cont_chatKey") || 13),
        this.voiceKey = parseInt(getSavedVal("cont_voiceKey") || 86),
        this.recordKey = parseInt(getSavedVal("cont_recordKey") || 84),
        this.moveKeys = [parseInt(getSavedVal("cont_0") || 87), parseInt(getSavedVal("cont_1") || 83), parseInt(getSavedVal("cont_2") || 65), parseInt(getSavedVal("cont_3") || 68)],
        this.moveDirs = [[0, -1], [0, 1], [-1, 0], [1, 0]],
        this.updateMoveDir = function() {
            for (var t = 0, e = 0, n = 0; n < a.moveKeys.length; ++n)
                a.keys[a.moveKeys[n]] && (t += a.moveDirs[n][0],
                e += a.moveDirs[n][1]);
            this.moveDir = 0 == t && 0 == e ? null : Math.atan2(e, t)
        }
        ,
        window.addEventListener("keydown", function(t) {
            (t.which || t.keyCode) == a.chatKey ? window.pressButton(t.which || t.keyCode) : document.activeElement != chatInput && (a.enabled && t.preventDefault(),
            u(t.which || t.keyCode || 0, 1))
        }, !1),
        window.addEventListener("keyup", function(t) {
            a.enabled && t.preventDefault(),
            u(t.which || t.keyCode || 0, 0)
        }, !1),
        this.toggle = function(t) {
            this.locked || this.masterLock || ("block" == windowHolder.style.display ? t && n.toggleWindow(!1) : t ? c.requestPointerLock() : document.exitPointerLock())
        }
        ,
        this.disable = function() {
            a.toggle(!1),
            a.locked = !0
        }
        ,
        this.reset = function() {
            this.mouseDownL = 0,
            this.mouseDownR = 0,
            this.keys = {},
            this.tmpInputs.length = 0,
            this.scrollDelta = 0,
            this.xDr = 0,
            this.yDr = 0,
            this.isn = 0,
            this.moveDir = null,
            this.skipScroll = !1,
            this.inputChanger = null,
            this.target = null,
            this.locked = !1,
            a.pitchObject.rotation.x = 0,
            a.object.rotation.y = 0,
            t.camera.rotation.set(0, 0, 0)
        }
    }
}
, function(t, e, n) {
    var i = n(3)
      , r = n(1);
    t.exports = function(t, e) {
        var s, o, a = e ? {} : n(2), c = [];
        this.projectiles = [],
        this.types = [{
            mat: a.MeshBasicMaterial,
            color: 16777179,
            explode: 50,
            dmg: 125,
            spd: .5,
            scale: 1.4,
            length: 10,
            range: 600
        }],
        this.update = function(n) {
            for (var a = 0; a < this.projectiles.length; ++a)
                if ((s = this.projectiles[a]).active) {
                    if (s.update(n),
                    s.active) {
                        c.length = 0;
                        for (var l = 1 / (s.spd * n * Math.sin(s.xD) * Math.cos(s.yD)), h = 1 / (s.spd * n * Math.cos(s.xD) * Math.cos(s.yD)), p = 1 / (s.spd * n * Math.sin(s.yD)), u = 0; u < t.map.manager.objects.length; ++u)
                            (o = t.map.manager.objects[u]).noShoot || (tmpDst = i.lineInRect(s.x, s.z, s.y, l, h, p, o.x - o.width, o.z - o.length, o.y - o.height, o.x + o.width, o.z + o.length, o.y + o.height),
                            tmpDst && tmpDst <= 1 && c.push(tmpDst));
                        for (u = 0; u < t.players.list.length; ++u)
                            (o = t.players.list[u]).active && o != s.owner && (tmpDst = i.lineInRect(s.x, s.z, s.y, l, h, p, o.x - o.scale - r.hitBoxPad, o.z - o.scale - r.hitBoxPad, o.y, o.x + o.scale + r.hitBoxPad, o.z + o.scale + r.hitBoxPad, o.y + o.height + r.hitBoxPad),
                            tmpDst && tmpDst <= 1 && c.push(tmpDst));
                        c.length && (c.sort(i.orderByNum),
                        s.active = !1,
                        s.x += c[0] * (s.xS * n),
                        s.y += c[0] * (s.yS * n),
                        s.z += c[0] * (s.zS * n))
                    }
                    if (!s.active)
                        for (s.expl && t.explosion(s.x, s.y, s.z, s.expl, s.dmg, s.owner),
                        u = 0; u < t.players.list.length; ++u)
                            e.send(t.players.list[u].id, "pre", s.sid)
                }
        }
        ,
        this.init = function(n, i, r, o, a, c, l) {
            n = n.round(1),
            i = i.round(1),
            r = r.round(1),
            o = o.round(3),
            a = a.round(3),
            s = null;
            for (var h = 0; h < this.projectiles.length; ++h)
                if (!this.projectiles[h].active) {
                    s = this.projectiles[h];
                    break
                }
            if (s || ((s = new function() {
                this.init = function(t, e, n, i, r, s, o) {
                    this.x = t,
                    this.y = e,
                    this.z = n,
                    i -= Math.PI,
                    this.xD = i,
                    this.yD = r,
                    this.spd = s.spd,
                    this.range = s.range,
                    this.dmg = s.dmg,
                    this.owner = o,
                    this.skipMove = !0,
                    this.expl = s.explode,
                    this.xS = this.spd * Math.sin(i) * Math.cos(r),
                    this.zS = this.spd * Math.cos(i) * Math.cos(r),
                    this.yS = this.spd * Math.sin(r),
                    this.active = !0
                }
                ,
                this.update = function(t) {
                    this.active && (this.skipMove ? this.skipMove = !1 : (this.x += this.xS * t,
                    this.z += this.zS * t,
                    this.y += this.yS * t,
                    this.range -= this.spd * t,
                    this.range <= 0 && (this.active = !1)))
                }
            }
            ).sid = this.projectiles.length,
            this.projectiles.push(s)),
            s.init(n, i, r, o, a, this.types[c], l),
            e)
                for (h = 0; h < t.players.list.length; ++h)
                    t.players.list[h].active && e.send(t.players.list[h].id, "pr", n, i, r, o, a, c, s.sid)
        }
    }
}
, function(t, e) {
    t.exports = [{
        name: "Krunker",
        opacity: .6
    }, {
        name: "Target",
        opacity: .6
    }, {
        name: "GG",
        opacity: .6
    }, {
        name: "Pumpkin",
        opacity: .6
    }, {
        name: "Spooky",
        opacity: .6
    }, {
        name: "Ded",
        opacity: .6
    }, {
        name: "Sadface",
        opacity: .6
    }, {
        name: "xD",
        opacity: .7
    }, {
        name: "Sid",
        opacity: .6
    }, {
        name: "Vince",
        opacity: .6
    }, {
        name: "Kiki",
        opacity: .6
    }, {
        name: "Ladder",
        opacity: 1
    }, {
        name: "Dummy",
        opacity: 1
    }, {
        name: "8 Ball",
        opacity: .6
    }]
}
, function(t, e) {
    t.exports = [{
        name: "Nuke",
        kills: 25,
        activate: function(t, e) {
            return !t.nukeTimer && (t.startNuke(e),
            !0)
        }
    }]
}
, function(t, e) {
    t.exports.wheels = [{
        name: "Starter",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 50,
        rarities: [75, 22, 3, 0, 0, 0]
    }, {
        name: "Elite",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 100,
        rarities: [50, 30, 15, 5, 0, 0]
    }, {
        name: "Heroic",
        lab: {
            nm: "Any",
            col: "#E040FB"
        },
        price: 500,
        rarities: [5, 45, 34, 14, 2, 0]
    }, {
        name: "Attire",
        lab: {
            nm: "Outfits Only!",
            col: "#ed4242"
        },
        itemTypes: [1, 2],
        price: 750,
        rarities: [43, 33, 17, 6, 1, 0]
    }],
    t.exports.types = ["weapons/weapon_", "hats/hat_", "body/body_"],
    t.exports.purchases = [{
        val: 300,
        price: .99
    }, {
        val: 600,
        price: 1.79
    }, {
        val: 2600,
        tag: "Popular!",
        tagCol: "#ed4242",
        price: 7.49
    }, {
        val: 7e3,
        tag: "20% Off",
        tagCol: "#E040FB",
        price: 15.99
    }, {
        val: 2e4,
        tag: "30% Off",
        tagCol: "#fab640",
        price: 34.99
    }],
    t.exports.rarities = [{
        name: "Uncommon",
        color: "#b2f252"
    }, {
        name: "Rare",
        color: "#2196F3"
    }, {
        name: "Epic",
        color: "#E040FB"
    }, {
        name: "Legendary",
        color: "#FBC02D"
    }, {
        name: "Relic",
        color: "#ed4242"
    }, {
        name: "Contraband",
        color: "#474747"
    }],
    t.exports.previews = {
        1: {
            xOff: -1.5,
            scl: 1.2
        },
        2: {
            xOff: -.8,
            scl: 1.15
        },
        3: {
            xOff: 0,
            yOff: 1,
            scl: 1.8
        },
        4: {
            xOff: -1.2,
            scl: 1.4
        },
        5: {
            xOff: -.8,
            yOff: .5,
            scl: 2
        },
        6: {
            xOff: -1,
            scl: 1.7
        },
        7: {
            xOff: -1,
            scl: 1.6
        },
        8: {
            xOff: -1,
            scl: 1.2
        },
        9: {
            xOff: -1.2,
            yOff: -1,
            scl: 1.6
        }
    },
    t.exports.skins = [{
        name: "Arctic Hunt",
        id: 0,
        weapon: 1,
        rarity: 1
    }, {
        name: "Autumn Hunt",
        id: 1,
        weapon: 1,
        rarity: 1
    }, {
        name: "Reticle Blaze",
        id: 2,
        weapon: 1,
        rarity: 2
    }, {
        name: "Digital Hunt",
        id: 3,
        weapon: 1,
        rarity: 0
    }, {
        name: "Moon Dragon",
        id: 4,
        weapon: 1,
        rarity: 3
    }, {
        name: "Scharfschütze",
        id: 5,
        weapon: 1,
        rarity: 1
    }, {
        name: "Woodland Sniper",
        id: 6,
        weapon: 1,
        rarity: 0
    }, {
        name: "Hazard Reticle",
        id: 7,
        weapon: 1,
        rarity: 1
    }, {
        name: "Kodac Reticle",
        id: 8,
        weapon: 1,
        rarity: 1
    }, {
        name: "Seafarer",
        id: 9,
        weapon: 1,
        rarity: 0
    }, {
        name: "Acid Breath",
        id: 10,
        weapon: 1,
        rarity: 3
    }, {
        name: "Trail Scout",
        id: 11,
        weapon: 1,
        rarity: 0
    }, {
        name: "Arctic AK",
        id: 0,
        weapon: 2,
        rarity: 1
    }, {
        name: "Autumn AK",
        id: 1,
        weapon: 2,
        rarity: 1
    }, {
        name: "Blaze AK",
        id: 2,
        weapon: 2,
        rarity: 2
    }, {
        name: "Digital AK",
        id: 3,
        weapon: 2,
        rarity: 0
    }, {
        name: "Luna Dragon",
        id: 4,
        weapon: 2,
        rarity: 3
    }, {
        name: "Flecken AK",
        id: 5,
        weapon: 2,
        rarity: 1
    }, {
        name: "Woodland AK",
        id: 6,
        weapon: 2,
        rarity: 0
    }, {
        name: "Hazard AK",
        id: 7,
        weapon: 2,
        rarity: 1
    }, {
        name: "Kodac AK",
        id: 8,
        weapon: 2,
        rarity: 1
    }, {
        name: "Seafarer AK",
        id: 9,
        weapon: 2,
        rarity: 0
    }, {
        name: "Trail AK",
        id: 10,
        weapon: 2,
        rarity: 0
    }, {
        name: "Arctic SMG",
        id: 0,
        weapon: 4,
        rarity: 1
    }, {
        name: "Autumn SMG",
        id: 1,
        weapon: 4,
        rarity: 1
    }, {
        name: "Blaze SMG",
        id: 2,
        weapon: 4,
        rarity: 2
    }, {
        name: "Digital SMG",
        id: 3,
        weapon: 4,
        rarity: 0
    }, {
        name: "Flecken SMG",
        id: 4,
        weapon: 4,
        rarity: 1
    }, {
        name: "Woodland SMG",
        id: 5,
        weapon: 4,
        rarity: 0
    }, {
        name: "Hazard SMG",
        id: 6,
        weapon: 4,
        rarity: 1
    }, {
        name: "Kodac SMG",
        id: 7,
        weapon: 4,
        rarity: 1
    }, {
        name: "Seafarer SMG",
        id: 8,
        weapon: 4,
        rarity: 0
    }, {
        name: "Trail SMG",
        id: 9,
        weapon: 4,
        rarity: 0
    }, {
        name: "Arctic Python",
        id: 0,
        weapon: 5,
        rarity: 1
    }, {
        name: "Autumn Python",
        id: 1,
        weapon: 5,
        rarity: 1
    }, {
        name: "Blaze Python",
        id: 2,
        weapon: 5,
        rarity: 2
    }, {
        name: "Digital Python",
        id: 3,
        weapon: 5,
        rarity: 0
    }, {
        name: "Flecken Python",
        id: 4,
        weapon: 5,
        rarity: 1
    }, {
        name: "Woodland",
        id: 5,
        weapon: 5,
        rarity: 0
    }, {
        name: "Hazard Python",
        id: 6,
        weapon: 5,
        rarity: 1
    }, {
        name: "Kodac Python",
        id: 7,
        weapon: 5,
        rarity: 1
    }, {
        name: "Seafarer",
        id: 8,
        weapon: 5,
        rarity: 0
    }, {
        name: "Trail Python",
        id: 9,
        weapon: 5,
        rarity: 0
    }, {
        name: "Arctic Slug",
        id: 0,
        weapon: 6,
        rarity: 1
    }, {
        name: "Autumn Slug",
        id: 1,
        weapon: 6,
        rarity: 1
    }, {
        name: "Blaze Slug",
        id: 2,
        weapon: 6,
        rarity: 2
    }, {
        name: "Digital Slug",
        id: 3,
        weapon: 6,
        rarity: 0
    }, {
        name: "Flecken Slug",
        id: 4,
        weapon: 6,
        rarity: 1
    }, {
        name: "Woodland Slug",
        id: 5,
        weapon: 6,
        rarity: 0
    }, {
        name: "Hazard Slug",
        id: 6,
        weapon: 6,
        rarity: 1
    }, {
        name: "Kodac Slug",
        id: 7,
        weapon: 6,
        rarity: 1
    }, {
        name: "Seafarer Slug",
        id: 8,
        weapon: 6,
        rarity: 0
    }, {
        name: "Trail Slug",
        id: 9,
        weapon: 6,
        rarity: 0
    }, {
        name: "Arctic LMG",
        id: 0,
        weapon: 7,
        rarity: 1
    }, {
        name: "Autumn LMG",
        id: 1,
        weapon: 7,
        rarity: 1
    }, {
        name: "Blaze LMG",
        id: 2,
        weapon: 7,
        rarity: 2
    }, {
        name: "Digital LMG",
        id: 3,
        weapon: 7,
        rarity: 0
    }, {
        name: "Flecken LMG",
        id: 4,
        weapon: 7,
        rarity: 1
    }, {
        name: "Woodland LMG",
        id: 5,
        weapon: 7,
        rarity: 0
    }, {
        name: "Hazard LMG",
        id: 6,
        weapon: 7,
        rarity: 1
    }, {
        name: "Kodac LMG",
        id: 7,
        weapon: 7,
        rarity: 1
    }, {
        name: "Seafarer LMG",
        id: 8,
        weapon: 7,
        rarity: 0
    }, {
        name: "Trail LMG",
        id: 9,
        weapon: 7,
        rarity: 0
    }, {
        name: "Arctic Auto",
        id: 0,
        weapon: 8,
        rarity: 1
    }, {
        name: "Autumn Auto",
        id: 1,
        weapon: 8,
        rarity: 1
    }, {
        name: "Blaze Auto",
        id: 2,
        weapon: 8,
        rarity: 2
    }, {
        name: "Digital Auto",
        id: 3,
        weapon: 8,
        rarity: 0
    }, {
        name: "Flecken Auto",
        id: 4,
        weapon: 8,
        rarity: 1
    }, {
        name: "Woodland Auto",
        id: 5,
        weapon: 8,
        rarity: 0
    }, {
        name: "Hazard Auto",
        id: 6,
        weapon: 8,
        rarity: 1
    }, {
        name: "Kodac Auto",
        id: 7,
        weapon: 8,
        rarity: 1
    }, {
        name: "Seafarer Auto",
        id: 8,
        weapon: 8,
        rarity: 0
    }, {
        name: "Trail Auto",
        id: 9,
        weapon: 8,
        rarity: 0
    }, {
        name: "Mach Auto",
        id: 10,
        creator: "AtarSt",
        weapon: 8,
        rarity: 1
    }, {
        name: "Arctic RL",
        id: 0,
        weapon: 9,
        rarity: 1
    }, {
        name: "Autumn RL",
        id: 1,
        weapon: 9,
        rarity: 1
    }, {
        name: "Blaze RL",
        id: 2,
        weapon: 9,
        rarity: 2
    }, {
        name: "Digital RL",
        id: 3,
        weapon: 9,
        rarity: 0
    }, {
        name: "Flecken RL",
        id: 4,
        weapon: 9,
        rarity: 1
    }, {
        name: "Woodland RL",
        id: 5,
        weapon: 9,
        rarity: 0
    }, {
        name: "Hazard RL",
        id: 6,
        weapon: 9,
        rarity: 1
    }, {
        name: "Kodac RL",
        id: 7,
        weapon: 9,
        rarity: 1
    }, {
        name: "Seafarer RL",
        id: 8,
        weapon: 9,
        rarity: 0
    }, {
        name: "Trail RL",
        id: 9,
        weapon: 9,
        rarity: 0
    }, {
        name: "101 Skullbreaker",
        id: 12,
        weapon: 1,
        rarity: 3
    }, {
        name: "Reticle Faded",
        id: 13,
        weapon: 1,
        rarity: 0
    }, {
        name: "Puma Sniper",
        id: 14,
        weapon: 1,
        rarity: 1
    }, {
        name: "Scoped Elite",
        id: 15,
        weapon: 1,
        rarity: 3
    }, {
        name: "Faded AK",
        id: 11,
        weapon: 2,
        rarity: 0
    }, {
        name: "Puma AR",
        id: 12,
        weapon: 2,
        rarity: 1
    }, {
        name: "Faded SMG",
        id: 10,
        weapon: 4,
        rarity: 0
    }, {
        name: "Puma SMG",
        id: 11,
        weapon: 4,
        rarity: 1
    }, {
        name: "Faded Python",
        id: 10,
        weapon: 5,
        rarity: 0
    }, {
        name: "Puma Python",
        id: 11,
        weapon: 5,
        rarity: 1
    }, {
        name: "Faded Slug",
        id: 10,
        weapon: 6,
        rarity: 0
    }, {
        name: "Puma Slug",
        id: 11,
        weapon: 6,
        rarity: 1
    }, {
        name: "Faded LMG",
        id: 10,
        weapon: 7,
        rarity: 0
    }, {
        name: "Puma LMG",
        id: 11,
        weapon: 7,
        rarity: 1
    }, {
        name: "Faded MMR",
        id: 11,
        weapon: 8,
        rarity: 0
    }, {
        name: "Puma MMR",
        id: 12,
        weapon: 8,
        rarity: 1
    }, {
        name: "Faded RTL",
        id: 10,
        weapon: 9,
        rarity: 0
    }, {
        name: "Puma RTL",
        id: 11,
        weapon: 9,
        rarity: 1
    }, {
        name: "Scoped Carbon",
        id: 16,
        weapon: 1,
        rarity: 0
    }, {
        name: "Carbon AK",
        id: 13,
        weapon: 2,
        rarity: 0
    }, {
        name: "Carbon SMG",
        id: 12,
        weapon: 4,
        rarity: 0
    }, {
        name: "Carbon Python",
        id: 12,
        weapon: 5,
        rarity: 0
    }, {
        name: "Carbon Slug",
        id: 12,
        weapon: 6,
        rarity: 0
    }, {
        name: "Carbon LMG",
        id: 12,
        weapon: 7,
        rarity: 0
    }, {
        name: "Carbon MMR",
        id: 13,
        weapon: 8,
        rarity: 0
    }, {
        name: "Carbon RTL",
        id: 12,
        weapon: 9,
        rarity: 0
    }, {
        name: "Neon Ripper",
        id: 14,
        glow: !0,
        weapon: 2,
        rarity: 4
    }, {
        name: "Top Hat",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -4,
        id: 1,
        rarity: 2
    }, {
        name: "SMG Spitfire",
        id: 13,
        weapon: 4,
        rarity: 3
    }, {
        name: "Cowboy Hat",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        id: 0,
        rarity: 0
    }, {
        name: "Flame Tamer",
        id: 13,
        weapon: 5,
        glow: !0,
        rarity: 4
    }, {
        name: "Cool Cap",
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        id: 2,
        rarity: 1
    }, {
        name: "Jack O' Lantern",
        type: 1,
        scl: 2.8,
        glow: !0,
        sclMlt: 1.4,
        sitOff: 2.05,
        yOff: -4,
        id: 3,
        rarity: 3
    }, {
        name: "Medic Helmet",
        type: 1,
        scl: 2.8,
        sclMlt: 1,
        sitOff: .65,
        yOff: -2.5,
        id: 4,
        rarity: 2
    }, {
        name: "Neon Reaver",
        creator: "Electrode_",
        id: 17,
        glow: !0,
        weapon: 1,
        rarity: 4
    }, {
        name: "Sun Glasses",
        type: 1,
        scl: 2.8,
        sclMlt: 1,
        sitOff: 2.3,
        yOff: -5,
        xOff: 2,
        id: 5,
        rarity: 0
    }, {
        name: "Afro",
        type: 1,
        scl: 2,
        sclMlt: .9,
        sitOff: 1.4,
        yOff: -4,
        id: 6,
        rarity: 0
    }, {
        name: "Hard Hat",
        type: 1,
        scl: 3,
        sitOff: .4,
        yOff: -3,
        id: 7,
        rarity: 0
    }, {
        name: "Zombie Head",
        type: 1,
        scl: 2.8,
        glow: !0,
        sclMlt: 1.2,
        sitOff: 2.05,
        yOff: -4,
        id: 8,
        rarity: 3
    }, {
        name: "Barbed Rifle",
        id: 18,
        weapon: 1,
        rarity: 2
    }, {
        name: "Blushed Sniper",
        id: 19,
        weapon: 1,
        rarity: 0
    }, {
        name: "AWP Mech",
        id: 20,
        weapon: 1,
        rarity: 1
    }, {
        name: "Olympus Rifle",
        id: 21,
        weapon: 1,
        rarity: 2
    }, {
        name: "Scoped Tuscan",
        id: 22,
        weapon: 1,
        rarity: 1
    }, {
        name: "AWP Pacemaker",
        id: 23,
        weapon: 1,
        rarity: 4,
        glow: !0
    }, {
        name: "AR Wired",
        id: 15,
        weapon: 2,
        rarity: 2
    }, {
        name: "Blushed AK",
        id: 16,
        weapon: 2,
        rarity: 0
    }, {
        name: "Mach Rifle",
        id: 17,
        weapon: 2,
        rarity: 1
    }, {
        name: "Olympus Rifle",
        id: 18,
        weapon: 2,
        rarity: 2
    }, {
        name: "AR Tuscan",
        id: 19,
        weapon: 2,
        rarity: 1
    }, {
        name: "Barbed MG",
        id: 14,
        weapon: 4,
        rarity: 2
    }, {
        name: "Blushed SMG",
        id: 15,
        weapon: 4,
        rarity: 0
    }, {
        name: "Machinist SMG",
        id: 16,
        weapon: 4,
        rarity: 1
    }, {
        name: "Olympus MG",
        id: 17,
        weapon: 4,
        rarity: 2
    }, {
        name: "Tuscan SMG",
        id: 18,
        weapon: 4,
        rarity: 1
    }, {
        name: "Barbed Python",
        id: 14,
        weapon: 5,
        rarity: 2
    }, {
        name: "Blushed Revolver",
        id: 15,
        weapon: 5,
        rarity: 0
    }, {
        name: "Machinist Python",
        id: 16,
        weapon: 5,
        rarity: 1
    }, {
        name: "REV Olympus",
        id: 17,
        weapon: 5,
        rarity: 2
    }, {
        name: "Tuscan Revolver",
        id: 18,
        weapon: 5,
        rarity: 1
    }, {
        name: "Barbed Slugger",
        id: 13,
        weapon: 6,
        rarity: 2
    }, {
        name: "Blushed Shotty",
        id: 14,
        weapon: 6,
        rarity: 0
    }, {
        name: "Machinist Shotty",
        id: 15,
        weapon: 6,
        rarity: 1
    }, {
        name: "Olympus Slug",
        id: 16,
        weapon: 6,
        rarity: 2
    }, {
        name: "Tuscan Slug",
        id: 17,
        weapon: 6,
        rarity: 1
    }, {
        name: "Blushed LMG",
        id: 13,
        weapon: 7,
        rarity: 0
    }, {
        name: "Machinist LMG",
        id: 14,
        weapon: 7,
        rarity: 1
    }, {
        name: "Olympus LMG",
        id: 15,
        weapon: 7,
        rarity: 2
    }, {
        name: "Tuscan LMG",
        id: 16,
        weapon: 7,
        rarity: 1
    }, {
        name: "Barbed Auto",
        id: 14,
        weapon: 8,
        rarity: 2
    }, {
        name: "Blushed MMA",
        id: 15,
        weapon: 8,
        rarity: 0
    }, {
        name: "Auto Machinist",
        id: 16,
        weapon: 8,
        rarity: 1
    }, {
        name: "Olympus MMA",
        id: 17,
        weapon: 8,
        rarity: 2
    }, {
        name: "Tuscan MMA",
        id: 18,
        weapon: 8,
        rarity: 1
    }, {
        name: "Barbed Laucher",
        id: 13,
        weapon: 9,
        rarity: 2
    }, {
        name: "Blushed Laucher",
        id: 14,
        weapon: 9,
        rarity: 0
    }, {
        name: "Machinist Laucher",
        id: 15,
        weapon: 9,
        rarity: 1
    }, {
        name: "Olympus Laucher",
        id: 16,
        weapon: 9,
        rarity: 2
    }, {
        name: "Tuscan Laucher",
        id: 17,
        weapon: 9,
        rarity: 1
    }, {
        name: "AWP Paranoya",
        id: 24,
        creator: "Cowboy",
        weapon: 1,
        rarity: 3
    }, {
        name: "Scoped Moss",
        id: 25,
        weapon: 1,
        rarity: 1
    }, {
        name: "Swamped Scope",
        id: 26,
        weapon: 1,
        rarity: 0
    }, {
        name: "Tiger Bolt",
        id: 27,
        weapon: 1,
        rarity: 2
    }, {
        name: "Zebra Bolt",
        id: 28,
        weapon: 1,
        rarity: 2
    }, {
        name: "Necron Bolt",
        id: 29,
        weapon: 1,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Bolt",
        id: 30,
        weapon: 1,
        rarity: 3
    }, {
        name: "Sky Bolt",
        id: 31,
        weapon: 1,
        rarity: 2
    }, {
        name: "Bark Bolt",
        id: 32,
        weapon: 1,
        rarity: 0
    }, {
        name: "Bolt Wanderer",
        id: 33,
        weapon: 1,
        rarity: 0
    }, {
        name: "Mossy Rifle",
        id: 20,
        weapon: 2,
        rarity: 1
    }, {
        name: "Swamped AK",
        id: 21,
        weapon: 2,
        rarity: 0
    }, {
        name: "Tiger Rifle",
        id: 22,
        weapon: 2,
        rarity: 2
    }, {
        name: "Zebra Rifle",
        id: 23,
        weapon: 2,
        rarity: 2
    }, {
        name: "Plasma Rifle",
        id: 24,
        weapon: 2,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Rifle",
        id: 25,
        weapon: 2,
        rarity: 3
    }, {
        name: "Sky Rifle",
        id: 26,
        weapon: 2,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark AK",
        id: 27,
        weapon: 2,
        rarity: 0
    }, {
        name: "Rifle Wanderer",
        id: 28,
        weapon: 2,
        rarity: 0
    }, {
        name: "Mossy SMG",
        id: 19,
        weapon: 4,
        rarity: 1
    }, {
        name: "Swamped SMG",
        id: 20,
        weapon: 4,
        rarity: 0
    }, {
        name: "Tiger SMG",
        id: 21,
        weapon: 4,
        rarity: 2
    }, {
        name: "Zebra SMG",
        id: 22,
        weapon: 4,
        rarity: 2
    }, {
        name: "Rapid Plasma",
        id: 23,
        weapon: 4,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava SMG",
        id: 24,
        weapon: 4,
        rarity: 3
    }, {
        name: "Sky SMG",
        id: 25,
        weapon: 4,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark SMG",
        id: 26,
        weapon: 4,
        rarity: 0
    }, {
        name: "Wanderer SMG",
        id: 27,
        weapon: 4,
        rarity: 0
    }, {
        name: "Mossy Python",
        id: 19,
        weapon: 5,
        rarity: 1
    }, {
        name: "Swamped Revolver",
        id: 20,
        weapon: 5,
        rarity: 0
    }, {
        name: "Tiger Python",
        id: 21,
        weapon: 5,
        rarity: 2
    }, {
        name: "Zebra Python",
        id: 22,
        weapon: 5,
        rarity: 2
    }, {
        name: "Venomous",
        creator: "Rengar",
        glow: !0,
        id: 23,
        weapon: 5,
        rarity: 3
    }, {
        name: "Lava Revolver",
        id: 24,
        weapon: 5,
        rarity: 3
    }, {
        name: "Sky Python",
        id: 25,
        weapon: 5,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark Python",
        id: 26,
        weapon: 5,
        rarity: 0
    }, {
        name: "Wanderer Python",
        id: 27,
        weapon: 5,
        rarity: 0
    }, {
        name: "Mossy Barrel",
        id: 19,
        weapon: 6,
        rarity: 1
    }, {
        name: "Swamped Shotgun",
        id: 20,
        weapon: 6,
        rarity: 0
    }, {
        name: "Tiger Slug",
        id: 21,
        weapon: 6,
        rarity: 2
    }, {
        name: "Zebra Slug",
        id: 22,
        weapon: 6,
        rarity: 2
    }, {
        name: "Plasma Slug",
        id: 23,
        weapon: 6,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Slug",
        id: 24,
        weapon: 6,
        rarity: 3
    }, {
        name: "Sky Pump",
        id: 25,
        weapon: 6,
        rarity: 2
    }, {
        name: "Bark Slug",
        id: 26,
        weapon: 6,
        rarity: 0
    }, {
        name: "Slug Wanderer",
        id: 27,
        weapon: 6,
        rarity: 0
    }, {
        name: "Mossy LMG",
        id: 17,
        weapon: 7,
        rarity: 1
    }, {
        name: "Swamped LMG",
        id: 18,
        weapon: 7,
        rarity: 0
    }, {
        name: "Tiger LMG",
        id: 19,
        weapon: 7,
        rarity: 2
    }, {
        name: "Zebra LMG",
        id: 20,
        weapon: 7,
        rarity: 2
    }, {
        name: "Heavy Plasma",
        id: 21,
        weapon: 7,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava LMG",
        id: 22,
        weapon: 7,
        rarity: 3
    }, {
        name: "Sky LMG",
        id: 23,
        weapon: 7,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark LMG",
        id: 24,
        weapon: 7,
        rarity: 0
    }, {
        name: "LMG Wanderer",
        id: 25,
        weapon: 7,
        rarity: 0
    }, {
        name: "Mossy MMA",
        id: 19,
        weapon: 8,
        rarity: 1
    }, {
        name: "Swamped AUTO",
        id: 20,
        weapon: 8,
        rarity: 0
    }, {
        name: "Tiger MMA",
        id: 21,
        weapon: 8,
        rarity: 2
    }, {
        name: "Zebra MMA",
        id: 22,
        weapon: 8,
        rarity: 2
    }, {
        name: "MMA Plasma",
        id: 23,
        weapon: 8,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava MMA",
        id: 24,
        weapon: 8,
        rarity: 3
    }, {
        name: "Sky AUTO",
        id: 25,
        weapon: 8,
        rarity: 2,
        glow: !0
    }, {
        name: "Bark AUTO",
        id: 26,
        weapon: 8,
        rarity: 0
    }, {
        name: "MMA Wanderer",
        id: 27,
        weapon: 8,
        rarity: 0
    }, {
        name: "Mossy Rocket",
        id: 18,
        weapon: 9,
        rarity: 1
    }, {
        name: "Swamped Laucher",
        id: 19,
        weapon: 9,
        rarity: 0
    }, {
        name: "Tiger Rocket",
        id: 20,
        weapon: 9,
        rarity: 2
    }, {
        name: "Zebra Laucher",
        id: 21,
        weapon: 9,
        rarity: 2
    }, {
        name: "Plasma Nuke",
        id: 22,
        weapon: 9,
        rarity: 4,
        glow: !0
    }, {
        name: "Lava Rocket",
        id: 23,
        weapon: 9,
        rarity: 3
    }, {
        name: "Sky Laucher",
        id: 24,
        weapon: 9,
        rarity: 2
    }, {
        name: "Bark Laucher",
        id: 25,
        weapon: 9,
        rarity: 0
    }, {
        name: "Wanderer Rocket",
        id: 26,
        weapon: 9,
        rarity: 0
    }, {
        name: "Purple Cap",
        id: 2,
        tex: 1,
        type: 1,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        rarity: 0
    }, {
        name: "Bear Mask",
        id: 9,
        type: 1,
        scl: 2.5,
        sclMlt: 1.3,
        sitOff: 2.05,
        yOff: -4,
        xOff: 1,
        rarity: 2
    }, {
        name: "Panda Mask",
        id: 9,
        tex: 1,
        type: 1,
        scl: 2.5,
        sclMlt: 1.3,
        sitOff: 2.05,
        yOff: -4,
        xOff: 1,
        rarity: 2
    }, {
        name: "Brown Beard",
        id: 11,
        type: 1,
        scl: 2.8,
        sclMlt: .9,
        sitOff: 2,
        yOff: -3,
        rarity: 2
    }, {
        name: "Blonde Beard",
        id: 11,
        tex: 1,
        type: 1,
        scl: 2.8,
        sclMlt: .9,
        sitOff: 2,
        yOff: -3,
        rarity: 2
    }, {
        name: "Skull Mask",
        id: 12,
        type: 1,
        scl: 3,
        glow: !0,
        sclMlt: 1.05,
        sitOff: 2.5,
        sitOffZ: 1.1,
        yOff: -4.5,
        xOff: -3,
        tex: 0,
        rarity: 3
    }, {
        name: "Red Beanie",
        id: 13,
        type: 1,
        scl: 3,
        sclMlt: 1.1,
        sitOff: .4,
        yOff: -3,
        tex: 0,
        rarity: 0
    }, {
        name: "Blue Beanie",
        id: 13,
        type: 1,
        scl: 3,
        sclMlt: 1.1,
        sitOff: .4,
        yOff: -3,
        tex: 1,
        rarity: 0
    }, {
        name: "Krunk Headset",
        id: 14,
        type: 1,
        scl: 2,
        sclMlt: .9,
        sitOff: 1.4,
        yOff: -4,
        rarity: 2
    }, {
        name: "Cherry Headset",
        id: 14,
        type: 1,
        tex: 1,
        scl: 2,
        sclMlt: 1.1,
        sitOff: 1.4,
        yOff: -4,
        rarity: 2
    }, {
        name: "Demonic Wings",
        id: 0,
        type: 2,
        glow: !0,
        scl: 3.5,
        sclMlt: 3,
        xOff: -1.5,
        sitOff: -1.3,
        sitOffZ: -1.4,
        yOff: -2,
        rarity: 4
    }, {
        name: "Bass Guitar",
        id: 1,
        type: 2,
        scl: 4,
        sclMlt: 3.8,
        sitOff: -1.3,
        sitOffZ: -1,
        yOff: -2,
        rarity: 2
    }, {
        name: "Samurai Blades",
        id: 2,
        type: 2,
        glow: !0,
        scl: 4.5,
        sclMlt: 3.8,
        sitOff: -1.3,
        sitOffZ: -.95,
        yOff: -1,
        xOff: -.5,
        rarity: 3
    }, {
        name: "Blood Harvest",
        id: 3,
        type: 2,
        glow: !0,
        scl: 5.1,
        sclMlt: 5,
        sitOff: -1.3,
        sitOffZ: -.95,
        yOff: -1,
        rarity: 3
    }, {
        name: "Panda Body",
        id: 4,
        type: 2,
        scl: 2.1,
        sclMlt: 1.3,
        sitOff: 2.2,
        sitOffZ: 0,
        yOff: -5,
        rarity: 3
    }, {
        name: "Bear Body",
        id: 4,
        tex: 1,
        type: 2,
        scl: 2.1,
        sclMlt: 1.3,
        sitOff: 2.2,
        sitOffZ: 0,
        yOff: -5,
        rarity: 3
    }, {
        name: "Angelic Wings",
        id: 5,
        type: 2,
        glow: !0,
        scl: 3.5,
        sclMlt: 3.6,
        xOff: -1.5,
        sitOff: -1.3,
        sitOffZ: -1.4,
        yOff: -2,
        rarity: 4
    }, {
        name: "Ninja Mask",
        id: 15,
        glow: !0,
        type: 1,
        scl: 2.5,
        sclMlt: 1.1,
        sitOff: 2.05,
        yOff: -4,
        xOff: 0,
        rarity: 3
    }, {
        name: "Halo",
        id: 16,
        glow: !0,
        type: 1,
        scl: 3.5,
        sclMlt: 1.1,
        sitOff: -.65,
        yOff: -1,
        rarity: 3
    }, {
        name: "Welder Mask",
        type: 1,
        scl: 2.5,
        sitOff: 2.1,
        yOff: -3,
        xOff: 1,
        id: 17,
        rarity: 1
    }, {
        name: "Diver Goggles",
        type: 1,
        scl: 2.5,
        sclMlt: .9,
        sitOff: 1,
        yOff: -1,
        id: 18,
        rarity: 1
    }, {
        name: "Mad Cap",
        type: 1,
        tex: 2,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        id: 2,
        rarity: 1
    }, {
        name: "Ace Cap",
        type: 1,
        tex: 3,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        id: 2,
        rarity: 1
    }, {
        name: "Ice Cap",
        type: 1,
        tex: 4,
        scl: 2.5,
        sitOff: .4,
        yOff: -3,
        xOff: 2,
        id: 2,
        rarity: 1
    }, {
        name: "Soldier Pack",
        id: 6,
        type: 2,
        glow: !0,
        scl: 2.6,
        sclMlt: 1.8,
        xOff: 1,
        sitOff: 1.3,
        sitOffZ: -1.75,
        yOff: -5,
        rarity: 1
    }, {
        name: "Robo Wings",
        id: 7,
        type: 2,
        glow: !0,
        scl: 5,
        sclMlt: 3.9,
        xOff: -3.5,
        sitOff: -1.3,
        sitOffZ: -.75,
        yOff: -4,
        rarity: 4
    }, {
        name: "Basket",
        id: 8,
        type: 2,
        scl: 3.5,
        sclMlt: 2,
        xOff: -1.5,
        sitOff: .75,
        sitOffZ: -.8,
        yOff: -4,
        rarity: 1
    }, {
        name: "Baby Panda",
        id: 9,
        type: 2,
        scl: 3.5,
        sclMlt: 2,
        xOff: 1,
        sitOff: .75,
        sitOffZ: -.8,
        yOff: -5,
        xRot: Math.PI,
        rarity: 3
    }, {
        name: "Sturm Helmet",
        type: 1,
        tex: 1,
        scl: 2.8,
        sclMlt: 1,
        sitOff: .65,
        yOff: -2.5,
        id: 4,
        rarity: 1
    }, {
        name: "Brown Afro",
        type: 1,
        tex: 1,
        scl: 2,
        sclMlt: .9,
        sitOff: 1.4,
        yOff: -4,
        id: 6,
        rarity: 0
    }, {
        name: "Acid Skull",
        id: 12,
        type: 1,
        tex: 1,
        scl: 3,
        glow: !0,
        sclMlt: 1.05,
        sitOff: 2.5,
        sitOffZ: 1.1,
        yOff: -4.5,
        xOff: -3,
        rarity: 3
    }, {
        name: "Uranium",
        type: 1,
        tex: 1,
        scl: 2.5,
        sitOff: 2.1,
        yOff: -3,
        xOff: 1,
        id: 17,
        rarity: 2
    }, {
        name: "Panda King",
        id: 19,
        glow: !0,
        type: 1,
        scl: 2.5,
        sclMlt: 1.3,
        sitOff: 2.05,
        yOff: -4,
        xOff: 1,
        rarity: 3
    }, {
        name: "Kolt Rifle",
        creator: "iSpy",
        id: 35,
        weapon: 1,
        rarity: 3
    }, {
        name: "Pace Dore",
        creator: "hoodgail",
        id: 34,
        glow: !0,
        weapon: 1,
        rarity: 4
    }, {
        name: "Shot Element",
        creator: "Electrode_",
        glow: !0,
        id: 28,
        weapon: 6,
        rarity: 3
    }, {
        name: "Warp Sequence",
        creator: "Electrode_",
        id: 28,
        glow: !0,
        weapon: 4,
        rarity: 4
    }, {
        name: "Radioactive",
        creator: "Electrode_",
        glow: !0,
        id: 29,
        weapon: 5,
        rarity: 4
    }, {
        name: "Targeted",
        creator: "Subza",
        glow: !0,
        id: 28,
        weapon: 5,
        rarity: 3
    }, {
        name: "Robot Helmet",
        type: 1,
        glow: !0,
        scl: 2.4,
        sclMlt: 1,
        sitOff: 2,
        yOff: -3.4,
        id: 20,
        rarity: 3
    }, {
        name: "Knight Helmet",
        type: 1,
        scl: 2.3,
        sclMlt: 1,
        sitOff: 2,
        yOff: -3.2,
        id: 21,
        rarity: 3
    }, {
        name: "Cat Ears",
        type: 1,
        scl: 2.5,
        sclMlt: 1.2,
        sitOff: 1.65,
        yOff: -3.2,
        id: 22,
        rarity: 2
    }, {
        name: "Snowman",
        type: 1,
        scl: 2.2,
        sclMlt: 1,
        sitOff: 2.05,
        yOff: -3.2,
        id: 23,
        rarity: 2
    }, {
        name: "Trendy Biker",
        type: 1,
        scl: 2.2,
        sclMlt: 1,
        sitOff: 1.8,
        yOff: -3.2,
        id: 24,
        rarity: 3
    }, {
        name: "Golden Crown",
        type: 1,
        glow: !0,
        scl: 2.4,
        sclMlt: 1,
        sitOff: .65,
        yOff: -3.2,
        id: 25,
        rarity: 3
    }, {
        name: "Master Drinker",
        type: 1,
        scl: 2.4,
        sclMlt: 1,
        sitOff: .65,
        yOff: -2.7,
        id: 26,
        rarity: 3
    }, {
        name: "Pig Head",
        type: 1,
        scl: 2.5,
        sclMlt: 1,
        sitOff: 2.05,
        yOff: -3.2,
        id: 27,
        rarity: 3
    }, {
        name: "Red Bandana",
        type: 1,
        scl: 2.2,
        sclMlt: 1,
        sitOff: 1.6,
        yOff: -3.2,
        id: 28,
        rarity: 1
    }, {
        name: "Sheriff",
        type: 1,
        scl: 2.2,
        sclMlt: 1,
        sitOff: 2.05,
        yOff: -3.2,
        id: 29,
        rarity: 4
    }, {
        name: "Bandit",
        type: 1,
        glow: !0,
        scl: 2.2,
        sclMlt: 1,
        sitOff: 2.05,
        yOff: -3.2,
        id: 30,
        rarity: 4
    }]
}
, function(t, e, n) {
    var i = n(8)
      , r = n(3)
      , s = n(1);
    t.exports.validMap = function(t, e) {
        if (!r.isString(t.name) || !t.name.replace(/\s/g, "").length)
            return "Missing map name.";
        if (-1 !== t.name.indexOf("<") || -1 !== t.name.indexOf(">"))
            return "Illegal characters in map name.";
        if (t.name.length > 16)
            return "Map name too long.";
        if (!r.isArray(t.spawns) || !t.spawns.length)
            return "Missing spawn points.";
        if (t.spawns.length > s.spawnLimit)
            return "Too many spawn points.";
        for (var n = 0; n < t.spawns.length; ++n) {
            var i = t.spawns[n];
            if (!r.isArray(i) || !i.length || 3 != i.length && 4 != i.length)
                return "Spawn point error.";
            for (var o = 0; o < i.length; ++o) {
                if (o < 3 && !r.isNumber(i[o]))
                    return "Spawn point error.";
                if (3 == o && void 0 == i[o] && 1 == i[o] && 2 == i[o])
                    return "Spawn team error."
            }
        }
        if (!r.isArray(t.objects) || !t.objects.length)
            return "Missing objects.";
        if (t.objects.length > (e ? s.objectLimitF : s.objectLimit))
            return "Map exceeds object limit.";
        for (n = 0; n < t.objects.length; ++n) {
            var a = t.objects[n];
            if (!r.isArray(a.s) || 3 != a.s.length || !r.arrayInts(a.s))
                return "Object scale error.";
            if (!r.isArray(a.p) || 3 != a.p.length || !r.arrayInts(a.p))
                return "Object position error.";
            if (r.isArray(a.r)) {
                if (3 != a.r.length || !r.arrayInts(a.r))
                    return "Object rotation value error."
            } else if (void 0 != a.r)
                return "Object rotation error.";
            if (void 0 != a.d && !r.isNumber(a.d))
                return "Object direction error.";
            a.col = !!a.col
        }
        return null
    }
    ,
    t.exports.obj = function(e, o, a, c, l, h, p) {
        this.index = e,
        this.connectedClients = 0,
        this.password = void 0,
        this.map = new i.manager(a,l,r,s),
        this.store = n(62),
        this.weapons = n(33),
        this.classes = n(32),
        this.streaks = n(61),
        this.sprays = n(60),
        this.projectiles = new (n(59))(this,h),
        this.players = new (n(31).manager)(this,a,c,l,r,s,h),
        this.endData = [],
        this.endTimer = 0,
        this.banList = [];
        var u, d, f, m = this;
        this.applyConfig = function(t, e) {
            t = t || {},
            this.config = {};
            for (var n = 0; n < s.serverConfig.length; ++n) {
                var i = s.serverConfig[n];
                if (i.bool)
                    this.config[i.varN] = !!t[i.varN];
                else {
                    var o = t[i.varN];
                    r.isNumber(o) || (o = i.def),
                    this.config[i.varN] = r.limitMM(o, i.min, e && i.maxF || i.max)
                }
            }
            if (this.config.maps = t.maps,
            !r.isArray(this.config.maps) || !this.config.maps.length || this.config.maps.length > this.map.maps.length)
                for (this.config.maps = [],
                n = 0; n < this.map.maps.length; n++)
                    this.config.maps.push(n);
            else
                for (n = 0; n < this.config.maps.length; n++)
                    if (!this.map.maps[this.config.maps[n]]) {
                        this.config.maps = [0];
                        break
                    }
            if (this.config.modes = t.modes,
            !r.isArray(this.config.modes) || !this.config.modes.length || this.config.modes.length > this.map.modes.length)
                this.config.modes = null;
            else
                for (n = 0; n < this.config.modes.length; n++)
                    if (!this.map.modes[this.config.modes[n]]) {
                        this.config.modes = null;
                        break
                    }
            var a = !1;
            if (this.config.classes = t.classes,
            !r.isArray(this.config.classes) || !this.config.classes.length || this.config.classes.length > this.classes.length)
                a = !0;
            else
                for (n = 0; n < this.config.classes.length; n++)
                    if (!this.classes[this.config.classes[n]]) {
                        a = !0;
                        break
                    }
            if (a)
                for (this.config.classes = [],
                n = 0; n < this.classes.length; n++)
                    this.config.classes.push(n)
        }
        ,
        this.applyConfig(),
        this.getInfo = function() {
            return this.mode.alias + "_" + this.map.maps[this.mapIndex].name
        }
        ,
        this.customMap = function(e, n, i, r, o) {
            if (e)
                try {
                    var a = JSON.parse(e);
                    if (h && (this.customMapData = {
                        data: e,
                        id: n,
                        featured: r,
                        creator: i
                    }),
                    !o) {
                        var c = t.exports.validMap(a, r);
                        if (c)
                            return c
                    }
                    for (var l = 0; l < a.objects.length; ++l) {
                        if (a.objects[l].id = s.prefabIDS[a.objects[l].id || 0],
                        !a.objects[l].id)
                            return "Object ID error.";
                        if (a.objects[l].t = s.textureIDS[a.objects[l].t || 0],
                        !a.objects[l].t)
                            return "Object Texture error."
                    }
                    a.creator = i,
                    this.map.setMaps([a]),
                    this.config.maps = [0]
                } catch (t) {
                    return "Map error occured."
                }
        }
        ,
        this.playSound = function(t, e, n, i, r) {
            if (c)
                c.play(t, e, !1, r);
            else
                for (var s = 0; s < this.players.list.length; ++s)
                    (u = this.players.list[s]).active && (n != u || i) && h.send(u.id, "s", t, n.sid)
        }
        ,
        this.playerSound = function(t, e, n, i, r) {
            (u = i || this.players.findBySid(e)) && c.play3D(t, u.x, u.y, u.z, n || 1, r)
        }
        ,
        this.explosion = function(t, e, n, i, s, o) {
            for (var a = 0; a < this.players.list.length; ++a)
                if ((u = this.players.list[a]).active) {
                    h.send(u.id, "ex", Math.round(t), Math.round(e), Math.round(n), Math.round(i));
                    var c = r.getDistance3D(t, e, n, u.x, u.y, u.z)
                      , l = 1 - c / i;
                    l > 0 && this.players.changeHealth(u, o, s * l, o == u) && this.players.kill(u, o, {
                        dst: c
                    })
                }
        }
        ;
        var g = [];
        this.getSpawnPoint = function(t, e) {
            if (e)
                return this.map.spawns[0];
            g.length = 0;
            for (var n, i = 0; i < this.map.spawns.length; ++i) {
                this.map.spawns[i].dst = 0;
                for (var o = 0; o < this.players.list.length; ++o)
                    !(u = this.players.list[o]).active || t && u.team == t || this.canSee(u, this.map.spawns[i].x, this.map.spawns[i].y + s.playerHeight, this.map.spawns[i].z) || this.map.spawns[i].dst++
            }
            for (this.map.spawns.sort(r.orderByDst),
            n = this.map.spawns[0].dst,
            i = 0; i < this.map.spawns.length; ++i)
                if (this.map.spawns[i].dst == n) {
                    for (this.map.spawns[i].dst = 0,
                    o = 0; o < this.players.list.length; ++o)
                        !(u = this.players.list[o]).active || t && u.team == t || (this.map.spawns[i].dst += r.getDistance3D(this.map.spawns[i].x, this.map.spawns[i].y, this.map.spawns[i].z, u.x, u.y, u.z));
                    (t && this.map.spawns[i].team == t || !this.map.spawns[i].team) && g.push(this.map.spawns[i])
                }
            return g.sort(r.orderByDst),
            g.reverse(),
            g[0] || this.map.spawns[0]
        }
        ,
        this.canSee = function(t, e, n, i, o) {
            o = o || 0;
            for (var a = r.getDistance3D(t.x, t.y, t.z, e, n, i), c = r.getDirection(t.z, t.x, i, e), l = r.getDirection(r.getDistance(t.x, t.z, e, i), n, 0, t.y), h = 1 / (a * Math.sin(c - Math.PI) * Math.cos(l)), p = 1 / (a * Math.cos(c - Math.PI) * Math.cos(l)), u = 1 / (a * Math.sin(l)), d = 0; d < this.map.manager.objects.length; ++d) {
                var f = this.map.manager.objects[d];
                if (!f.noShoot) {
                    var m = r.lineInRect(t.x, t.z, t.y + t.height - s.cameraHeight, h, p, u, f.x - Math.max(0, f.width - o), f.z - Math.max(0, f.length - o), f.y - Math.max(0, f.height - o), f.x + Math.max(0, f.width - o), f.z + Math.max(0, f.length - o), f.y + Math.max(0, f.height - o));
                    if (m && m < 1)
                        return m
                }
            }
            return null
        }
        ,
        this.updateAccounts = function() {
            for (var t = 0; t < this.players.list.length; ++t)
                (u = this.players.list[t]).account && (u.account.timePlayed += u.playTime || 0,
                void 0 == this.host && (u.account.games++,
                u.account.kills += u.kills,
                u.account.deaths += u.deaths,
                u.account.score += u.score,
                u.didWin && u.account.wins++),
                h.send(u.id, "ua", u.account.getData()),
                this.addFunds(u, u.reward))
        }
        ,
        this.addFunds = function(t, e) {
            t.account && e && o.call(20, [t.account.id, e], function(e, n) {
                if (t && t.account && !e && n && n[0] && n[0][0]) {
                    var i = n[0][0].funds;
                    null != i && void 0 != i && (t.account.funds = i,
                    h.send(t.id, "uf", i))
                }
            })
        }
        ,
        this.savePlayerData = function(t) {
            if (o && t.account) {
                var e = t.account;
                o.call(2, [e.id, e.kills, e.wins, e.games, e.deaths, e.score, e.clan, e.timePlayed])
            }
        }
        ,
        this.lockPlayer = function(t, e) {
            t.locked = e,
            h.send(u.id, "lock", e)
        }
        ,
        this.updateTeam = function(t, e) {
            t.team = e;
            for (var n = 0; n < t.sentTo.length; ++n)
                h.send(t.sentTo[n], "tm", t.sid, e);
            this.players.syncLeaders()
        }
        ,
        this.startNuke = function(t) {
            this.nukeTimer = 1e4,
            this.nukePlayer = t,
            h.broadcast("game" + this.sid, "n", 0)
        }
        ;
        var v = [];
        this.infectRandom = function() {
            v.length = 0;
            for (var t = 0; t < this.players.list.length; ++t)
                this.players.list[t].active && v.push(t);
            var e = 1;
            for (v.length >= 14 ? e = 3 : v.length >= 8 && (e = 2),
            t = 0; t < e; ++t) {
                var n = r.randInt(0, v.length - 1);
                (u = this.players.list[v[n]]) && (this.players.kill(u, null, null, !0),
                h.broadcast("game" + this.sid, "ac", u.sid, null, "got infected")),
                v.splice(n, 1)
            }
        }
        ,
        this.pickBoss = function() {
            v.length = 0;
            for (var t = 0; t < this.players.list.length; ++t)
                this.players.list[t].active && v.push(t);
            (u = this.players.list[v[r.randInt(0, v.length - 1)]]) && (this.updateTeam(u, "boss"),
            u.maxHealth = 5e3,
            u.health = u.maxHealth,
            h.send(u.id, "h", u.health))
        }
        ,
        this.pickSeeker = function() {
            v.length = 0;
            for (var t = 0; t < this.players.list.length; ++t)
                this.players.list[t].active && v.push(t);
            (u = this.players.list[v[r.randInt(0, v.length - 1)]]) && (this.updateTeam(u, "seek"),
            this.lockPlayer(u, !0))
        }
        ,
        this.releaseSeeker = function() {
            for (var t = 0; t < this.players.list.length; ++t)
                "seek" == (u = this.players.list[t]).team && this.lockPlayer(u, !1)
        }
        ,
        this.setObjective = function(t) {
            try {
                m.activeObjective = t;
                for (var e = 0; e < m.map.manager.objectives.length; ++e)
                    m.map.manager.objectives[e].mesh.visible = t == e
            } catch (t) {}
        }
        ,
        this.nextObjective = function(t) {
            this.activeObjective++,
            this.activeObjective >= this.map.manager.objectives.length && (this.activeObjective = 0),
            h.broadcast("game" + this.sid, "obj", this.activeObjective),
            this.map.manager.objectives.length > 1 && (this.waitTimers = [{
                time: 6e4 - (t || 0),
                contTime: !0,
                canDMG: !0,
                msg: "next objective ",
                trigger: function(t, e) {
                    t.nextObjective(e)
                }
            }])
        }
        ,
        this.updateUI = function() {
            killCount.style.display = this.mode.friendly ? "none" : "inline-block"
        }
        ,
        this.init = function(t, e, n) {
            if (this.players.clear(),
            this.teams = {},
            this.mapIndex = void 0 != t ? t : this.config.maps[r.randInt(0, this.config.maps.length - 1)],
            this.modeIndex = void 0 != e ? e : this.config.modes ? this.config.modes[r.randInt(0, this.config.modes.length - 1)] : i.mapModes[this.mapIndex][r.randInt(0, i.mapModes[this.mapIndex].length - 1)],
            this.mode = i.modes[this.modeIndex],
            this.map.generate(this.mapIndex, this.mode, n),
            this.nukeTimer = 0,
            this.objectiveTimer = 0,
            this.activeObjective = null,
            this.gameTimer = void 0 != this.mode.gameTime ? this.mode.gameTime : 6e4 * this.config.gameTime,
            this.lastTimer = 0,
            this.lastTimerW = 0,
            this.waitTimers = null,
            this.mode.waitTimers) {
                this.waitTimers = [];
                for (var s = 0; s < this.mode.waitTimers.length; ++s)
                    this.waitTimers.push({
                        time: this.mode.waitTimers[s].time,
                        trigger: this.mode.waitTimers[s].trigger,
                        msg: this.mode.waitTimers[s].msg
                    })
            }
            this.kills = 0,
            h && this.mode.gameStart && this.mode.gameStart(this),
            c && c.play("ambient_1", .12, !0),
            this.earnKR = !1,
            p && p.updateGameData(this.index, this.maxPlayers, this.private, this.earnKR, this.getInfo())
        }
        ,
        this.getTeamScores = function() {
            var t = null;
            return this.mode && this.mode.teams && this.teams && (t = [[1, this.teams[1] || 0], [2, this.teams[2] || 0]]),
            t
        }
        ,
        this.endGame = function() {
            if (this.endTimer = s.endTimer,
            this.waitTimers = null,
            this.mode.endSort ? this.players.list.sort(this.mode.endSort) : this.players.list.sort(r.orderByScore),
            void 0 == this.host || this.earnKR)
                for (var t = 0; t < this.players.list.length; ++t)
                    (u = this.players.list[t]).reward = 0,
                    u.account && (u.reward = Math.min(25, Math.floor(u.score / 100)));
            this.endData.length = 0;
            var e = this.mode.endStats || s.endStats;
            for (t = 0; t < this.players.list.length; ++t)
                for (var n = 0; n < e.length; ++n)
                    this.endData.push(s.endForm[e[n]] ? s.endForm[e[n]](this.players.list[t][e[n]], this, this.players.list[t]) : this.players.list[t][e[n]]);
            if (this.mode.winCondition)
                this.winner = this.mode.winCondition(this);
            else if (this.mode.teams && this.teams) {
                var i = 0
                  , o = null;
                for (var a in this.teams)
                    this.teams.hasOwnProperty(a) && this.teams[a] >= i && (i = this.teams[a],
                    o = a);
                this.winner = o
            } else
                this.winner = this.players.list[0];
            for (t = 0; t < this.players.list.length; ++t)
                (u = this.players.list[t]).didWin = u.team && u.team == this.winner || u == this.winner,
                h.send(u.id, "end", !1, u.didWin, this.endData);
            this.updateAccounts(),
            this.init()
        }
        ,
        this.update = function(t, e, n) {
            if (this.now = e,
            h) {
                var i = !0;
                if (this.endTimer > 0 ? (i = !1,
                this.endTimer -= t,
                this.endTimer <= 0 ? (this.endTimer = 0,
                h.broadcast("game" + this.sid, "init", this.mapIndex, this.modeIndex, this.getTeamScores(), this.activeObjective, this.host, this.config, 0, this.customMapData ? 1 : null)) : (f = r.getTime(this.endTimer)) != this.lastTimer && (this.lastTimer = f,
                h.broadcast("game" + this.sid, "t", f, 1))) : this.waitTimers && (i = !1,
                this.mode.minPlayers && this.players.activeCount() < this.mode.minPlayers || (this.waitTimers[0].time -= t,
                this.waitTimers[0].time <= 0 ? (this.waitTimers[0].trigger && this.waitTimers[0].trigger(this, -this.waitTimers[0].time),
                this.waitTimers[0].time <= 0 && (this.waitTimers.splice(0, 1),
                this.waitTimers.length || (this.waitTimers = null,
                h.broadcast("game" + this.sid, "gmsg")))) : (f = r.getTime(this.waitTimers[0].time)) != this.lastTimerW && (this.lastTimerW = f,
                h.broadcast("game" + this.sid, "gmsg", this.waitTimers[0].msg + f)))),
                this.endTimer <= 0 && (i || this.waitTimers && this.waitTimers[0].contTime) && (this.mode.condition && !this.mode.condition(this) && (this.gameTimer = "skip"),
                "skip" != this.gameTimer && this.mode.timed ? (this.gameTimer += t,
                (f = r.getTime(this.gameTimer)) != this.lastTimer && (this.lastTimer = f,
                h.broadcast("game" + this.sid, "t", f))) : (this.gameTimer > 0 || "skip" == this.gameTimer) && ("skip" != this.gameTimer && (this.gameTimer -= t),
                "skip" == this.gameTimer || this.gameTimer <= 0 ? (this.gameTimer = 0,
                this.endGame()) : (f = r.getTime(this.gameTimer)) != this.lastTimer && (this.lastTimer = f,
                h.broadcast("game" + this.sid, "t", f)))),
                this.endTimer <= 0 && this.nukeTimer && (this.nukeTimer -= t,
                this.nukeTimer <= 0 && (this.nukeTimer = 0,
                h.broadcast("game" + this.sid, "n", 1),
                this.nukePlayer))) {
                    for (var s = 0, o = 0; o < this.players.list.length; ++o)
                        !(u = this.players.list[o]).active || u == this.nukePlayer || u.team && this.nukePlayer.team == u.team || (s += 50,
                        this.players.kill(u, this.nukePlayer, null, !1, !0));
                    s && (h.send(this.nukePlayer.id, "6", ["Nuke", s], 0, this.nukePlayer.kills),
                    h.send(this.nukePlayer.id, "4"),
                    this.players.score(this.nukePlayer, s))
                }
            }
            if (this.players.update(t * this.config.deltaMlt),
            h && this.mode.objective && this.map.manager.objectives.length && (this.objectiveTimer -= t,
            this.objectiveTimer <= 0))
                for (this.objectiveTimer = 1500,
                o = 0; o < this.map.manager.objectives.length; ++o)
                    if (u = this.map.manager.objectives[o],
                    o == this.activeObjective)
                        for (var c = 0; c < this.players.list.length; ++c)
                            (d = this.players.list[c]).active && d.collides(u) && this.players.score(d, 10);
            this.projectiles.update(t * this.config.deltaMlt),
            l && l.update(t * this.config.deltaMlt, n),
            a && a.render(t * this.config.deltaMlt)
        }
    }
}
, function(t, e) {
    t.exports = function(t, e) {
        var n;
        this.divs = [],
        this.update = function(t) {
            for (var e = this.divs.length - 1; e >= 0; --e)
                if ((n = this.divs[e]).delay > 0)
                    n.delay -= t,
                    n.delay <= 0 && (n.style.display = "inline-block");
                else {
                    if (n.scale > n.minScale && (n.scale -= n.scaleSpeed * t,
                    n.scale <= n.minScale && (n.scale = n.minScale),
                    n.style.fontSize = n.scale + "px"),
                    n.scaleSpd && (n.startS += n.scaleSpd * t,
                    n.style.width = n.startS + "vh",
                    n.style.height = n.startS + "vh"),
                    n.life -= t,
                    n.life <= 0) {
                        n.style.display = "none";
                        var i = n.callback;
                        this.divs.splice(e, 1),
                        i && i()
                    }
                    n.fade && n.life <= n.fade && (n.style.opacity = n.life / n.fade)
                }
        }
        ,
        this.animateText = function(t, e, n, i, r, s, o, a) {
            this.divs.indexOf(t) < 0 && this.divs.push(t),
            t.delay = o,
            o || (t.style.display = "inline-block"),
            t.style.fontSize = n + "px",
            t.scale = n,
            t.minScale = i ? .4 * n : n,
            t.innerHTML = e,
            t.scaleSpeed = i,
            t.life = r,
            t.fade = s,
            t.style.opacity = 1,
            t.callback = a
        }
        ,
        this.animateDiv = function(t, e, n, i, r) {
            this.divs.indexOf(t) < 0 && this.divs.push(t),
            t.style.display = "block",
            t.life = e,
            t.maxLife = e,
            t.style.opacity = 1,
            t.fade = n,
            i && (t.style.width = i + "vh",
            t.style.height = i + "vh",
            t.startS = i,
            t.scaleSpd = r)
        }
        ,
        this.reset = function() {
            for (var t = 0; t < this.divs.length; ++t)
                this.divs[t].style.display = "none";
            this.divs.length = 0
        }
    }
}
, function(t, e) {
    var n = t.exports;
    n.active = !0,
    n.toggleMenu = function(t) {
        menuHolder.style.display = t ? "block" : "none",
        speakerDisplay.style.display = t ? "none" : "block",
        chatHolder.style.bottom = (t ? 20 : 88) + "px",
        voiceDisplay.style.bottom = (t ? 18 : 84) + "px",
        t && (endUI.style.display = "none",
        instructionHolder.style.display = "block"),
        n.active = !0
    }
    ,
    n.hideUI = function() {
        n.toggleMenu(!1),
        inGameUI.style.display = "none",
        aimRecticle.style.display = "none",
        instructionHolder.style.display = "none",
        chatHolder.style.bottom = "20px",
        voiceDisplay.style.bottom = "18px",
        speakerDisplay.style.right = "20px",
        purchaseHolder.style.display = "none",
        consentBlock.style.display = "none",
        n.active = !1
    }
    ,
    n.hideDiscon = function() {
        chatHolder.style.display = "none",
        voiceDisplay.style.display = "none",
        speakerDisplay.style.display = "none",
        rightHolder.style.display = "none",
        followHolder.style.display = "none",
        purchaseHolder.style.display = "none"
    }
    ,
    n.showEndScreen = function() {
        endTable.style.display = "none",
        endUI.style.display = "block",
        n.hideUI()
    }
    ,
    n.toggleWindow = function(t) {
        windowHolder.style.display = t ? "block" : "none",
        instructions.innerHTML = t ? "" : "CLICK TO PLAY"
    }
    ,
    n.showError = function(t) {
        n.toggleMenu(!0),
        instructions.innerHTML = t
    }
    ,
    n.toggleGameUI = function(t) {
        topRight.style.display = t ? "block" : "none",
        crosshair.style.display = t ? "block" : "none",
        reloadMsg.style.display = t ? "block" : "none",
        healthHolder.style.display = t ? "block" : "none",
        weaponDisplay.style.display = t ? "block" : "none",
        bottomRight.style.display = t ? "block" : "none",
        killCardHolder.style.display = t ? "none" : "block",
        speakerDisplay.style.right = (t ? 360 : 20) + "px",
        chatHolder.style.bottom = (t ? 88 : 20) + "px",
        voiceDisplay.style.bottom = (t ? 84 : 18) + "px"
    }
    ,
    n.toggleControlUI = function(t) {
        window.loading && (t = !1),
        inGameUI.style.display = t && n.active && !n.hideGameUI ? "block" : "none",
        aimRecticle.style.display = t && n.active ? "block" : "none",
        instructionHolder.style.display = !t && n.active ? "block" : "none",
        aHolder.style.display = t ? "none" : "block",
        toggleAd(!t),
        infoHolder.style.display = t ? "none" : "block",
        chatHolder.style.bottom = (t ? 88 : 20) + "px",
        voiceDisplay.style.bottom = (t ? 84 : 18) + "px",
        speakerDisplay.style.display = t && n.active ? "block" : "none",
        "block" != endUI.style.display && (menuHolder.style.display = t ? "none" : "block")
    }
    ;
    var i = 0
      , r = 0;
    n.updateCrosshair = function(t, e) {
        i == Math.round(t) && r == e.round(1) || (r = e.round(1),
        i = Math.round(t),
        crosshair.style.width = i + "px",
        crosshair.style.height = i + "px",
        crosshair.style.opacity = r)
    }
}
, function(t, e) {
    t.exports = function(t, e) {
        var n;
        this.sounds = [],
        this.listener = {},
        this.setVolume = function(t) {
            Howler.volume(t)
        }
        ,
        this.getSound = function(t, e) {
            var i = t + (e || "");
            (n = this.sounds[i]) || (n = new Howl({
                src: ".././sound/" + t + ".mp3"
            }),
            this.sounds[i] = n)
        }
        ,
        this.play = function(t, e, i, r) {
            if (this.getSound(t),
            !i || !n.isPlaying) {
                n.isPlaying = !0;
                var s = n.play();
                n.volume(e || 1, s),
                n.loop(i, s),
                n.rate(r || 1, s)
            }
        }
        ,
        this.stop = function(t) {
            this.getSound(t),
            n && n.stop()
        }
        ,
        this.play3D = function(t, i, r, s, o, a, c, l) {
            this.getSound(t, "3d");
            var h = n.play();
            o = (o || 1) * e.otherSoundMlt,
            n.volume(o, h),
            n.rate(a || 1, h),
            n.pos(i, r, s, h),
            n.pannerAttr({
                refDistance: c || 25,
                rolloffFactor: l || 1
            }, h)
        }
    }
}
, function(t, e) {
    t.exports = function(t) {
        t.THREEx = {},
        t.THREEx.RendererStats = function() {
            var e = document.createElement("div");
            e.style.cssText = "width:80px;opacity:0.9;cursor:pointer";
            var n = document.createElement("div");
            n.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#200;",
            e.appendChild(n);
            var i = document.createElement("div");
            i.style.cssText = "color:#f00;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",
            i.innerHTML = "WebGLRenderer",
            n.appendChild(i);
            var r = [];
            for (i = 0; 9 > i; i++)
                r[i] = document.createElement("div"),
                r[i].style.cssText = "color:#f00;background-color:#311;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px",
                n.appendChild(r[i]),
                r[i].innerHTML = "-";
            var s = Date.now();
            return {
                domElement: e,
                update: function(e) {
                    if (console.assert(e instanceof t.WebGLRenderer),
                    !(Date.now() - s < 1e3 / 30)) {
                        s = Date.now();
                        var n = 0;
                        r[n++].textContent = "== Memory =====",
                        r[n++].textContent = "Programs: " + e.info.memory.programs,
                        r[n++].textContent = "Geometries: " + e.info.memory.geometries,
                        r[n++].textContent = "Textures: " + e.info.memory.textures,
                        r[n++].textContent = "== Render =====",
                        r[n++].textContent = "Calls: " + e.info.render.calls,
                        r[n++].textContent = "Vertices: " + e.info.render.vertices,
                        r[n++].textContent = "Faces: " + e.info.render.faces,
                        r[n++].textContent = "Points: " + e.info.render.points
                    }
                }
            }
        }
        ,
        t.SSAOShader = {
            uniforms: {
                tDiffuse: {
                    value: null
                },
                tDepth: {
                    value: null
                },
                size: {
                    value: new t.Vector2(64,64)
                },
                cameraNear: {
                    value: 1
                },
                cameraFar: {
                    value: 100
                },
                radius: {
                    value: 40
                },
                onlyAO: {
                    value: 0
                },
                aoClamp: {
                    value: 1
                },
                lumInfluence: {
                    value: .7
                }
            },
            vertexShader: "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform float cameraNear;\nuniform float cameraFar;\n#ifdef USE_LOGDEPTHBUF\nuniform float logDepthBufFC;\n#endif\nuniform float radius;\nuniform bool onlyAO;\nuniform vec2 size;\nuniform float aoClamp;\nuniform float lumInfluence;\nuniform sampler2D tDiffuse;\nuniform sampler2D tDepth;\nvarying vec2 vUv;\n#define DL 2.399963229728653\n#define EULER 2.718281828459045\nconst int samples = 8;\nconst bool useNoise = true;\nconst float noiseAmount = 0.0004;\nconst float diffArea = 0.4;\nconst float gDisplace = 0.4;\n#include <packing>\nvec2 rand( const vec2 coord ) {\nvec2 noise;\nif ( useNoise ) {\nfloat nx = dot ( coord, vec2( 12.9898, 78.233 ) );\nfloat ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\nnoise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\n} else {\nfloat ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\nfloat gg = fract( coord.t * ( size.y / 2.0 ) );\nnoise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\n}\nreturn ( noise * 2.0  - 1.0 ) * noiseAmount;\n}\nfloat readDepth( const in vec2 coord ) {\nfloat cameraFarPlusNear = cameraFar + cameraNear;\nfloat cameraFarMinusNear = cameraFar - cameraNear;\nfloat cameraCoef = 2.0 * cameraNear;\n#ifdef USE_LOGDEPTHBUF\nfloat logz = unpackRGBAToDepth( texture2D( tDepth, coord ) );\nfloat w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\nfloat z = (logz / w) + 1.0;\n#else\nfloat z = unpackRGBAToDepth( texture2D( tDepth, coord ) );\n#endif\nreturn cameraCoef / ( cameraFarPlusNear - z * cameraFarMinusNear );\n}\nfloat compareDepths( const in float depth1, const in float depth2, inout int far ) {\nfloat garea = 8.0;\nfloat diff = ( depth1 - depth2 ) * 100.0;\nif ( diff < gDisplace ) {\ngarea = diffArea;\n} else {\nfar = 1;\n}\nfloat dd = diff - gDisplace;\nfloat gauss = pow( EULER, -2.0 * ( dd * dd ) / ( garea * garea ) );\nreturn gauss;\n}\nfloat calcAO( float depth, float dw, float dh ) {\nvec2 vv = vec2( dw, dh );\nvec2 coord1 = vUv + radius * vv;\nvec2 coord2 = vUv - radius * vv;\nfloat temp1 = 0.0;\nfloat temp2 = 0.0;\nint far = 0;\ntemp1 = compareDepths( depth, readDepth( coord1 ), far );\nif ( far > 0 ) {\ntemp2 = compareDepths( readDepth( coord2 ), depth, far );\ntemp1 += ( 1.0 - temp1 ) * temp2;\n}\nreturn temp1;\n}\nvoid main() {\nvec2 noise = rand( vUv );\nfloat depth = readDepth( vUv );\nfloat tt = clamp( depth, aoClamp, 1.0 );\nfloat w = ( 1.0 / size.x ) / tt + ( noise.x * ( 1.0 - noise.x ) );\nfloat h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\nfloat ao = 0.0;\nfloat dz = 1.0 / float( samples );\nfloat l = 0.0;\nfloat z = 1.0 - dz / 2.0;\nfor ( int i = 0; i <= samples; i ++ ) {\nfloat r = sqrt( 1.0 - z );\nfloat pw = cos( l ) * r;\nfloat ph = sin( l ) * r;\nao += calcAO( depth, pw * w, ph * h );\nz = z - dz;\nl = l + DL;\n}\nao /= float( samples );\nao = 1.0 - ao;\nvec3 color = texture2D( tDiffuse, vUv ).rgb;\nvec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\nfloat lum = dot( color.rgb, lumcoeff );\nvec3 luminance = vec3( lum );\nvec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\nif ( onlyAO ) {\nfinal = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\n}\ngl_FragColor = vec4( final, 0.5 );\n}"
        },
        t.CopyShader = {
            uniforms: {
                tDiffuse: {
                    value: null
                },
                opacity: {
                    value: 1
                }
            },
            vertexShader: "varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
            fragmentShader: "uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"
        },
        t.EffectComposer = function(e, n) {
            if (this.renderer = e,
            void 0 === n) {
                var i = {
                    minFilter: t.LinearFilter,
                    magFilter: t.LinearFilter,
                    format: t.RGBAFormat,
                    stencilBuffer: !1
                }
                  , r = e.getDrawingBufferSize();
                (n = new t.WebGLRenderTarget(r.width,r.height,i)).texture.name = "EffectComposer.rt1"
            }
            this.renderTarget1 = n,
            this.renderTarget2 = n.clone(),
            this.renderTarget2.texture.name = "EffectComposer.rt2",
            this.writeBuffer = this.renderTarget1,
            this.readBuffer = this.renderTarget2,
            this.passes = [],
            void 0 === t.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader"),
            void 0 === t.ShaderPass && console.error("THREE.EffectComposer relies on THREE.ShaderPass"),
            this.copyPass = new t.ShaderPass(t.CopyShader)
        }
        ,
        Object.assign(t.EffectComposer.prototype, {
            swapBuffers: function() {
                var t = this.readBuffer;
                this.readBuffer = this.writeBuffer,
                this.writeBuffer = t
            },
            addPass: function(t) {
                this.passes.push(t);
                var e = this.renderer.getDrawingBufferSize();
                t.setSize(e.width, e.height)
            },
            insertPass: function(t, e) {
                this.passes.splice(e, 0, t)
            },
            render: function(e) {
                var n, i = !1, r = this.passes.length;
                for (n = 0; n < r; n++) {
                    var s = this.passes[n];
                    if (!1 !== s.enabled) {
                        if (s.render(this.renderer, this.writeBuffer, this.readBuffer, e, i),
                        s.needsSwap) {
                            if (i) {
                                var o = this.renderer.context;
                                o.stencilFunc(o.NOTEQUAL, 1, 4294967295),
                                this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, e),
                                o.stencilFunc(o.EQUAL, 1, 4294967295)
                            }
                            this.swapBuffers()
                        }
                        void 0 !== t.MaskPass && (s instanceof t.MaskPass ? i = !0 : s instanceof t.ClearMaskPass && (i = !1))
                    }
                }
            },
            reset: function(t) {
                if (void 0 === t) {
                    var e = this.renderer.getDrawingBufferSize();
                    (t = this.renderTarget1.clone()).setSize(e.width, e.height)
                }
                this.renderTarget1.dispose(),
                this.renderTarget2.dispose(),
                this.renderTarget1 = t,
                this.renderTarget2 = t.clone(),
                this.writeBuffer = this.renderTarget1,
                this.readBuffer = this.renderTarget2
            },
            setSize: function(t, e) {
                this.renderTarget1.setSize(t, e),
                this.renderTarget2.setSize(t, e);
                for (var n = 0; n < this.passes.length; n++)
                    this.passes[n].setSize(t, e)
            }
        }),
        t.Pass = function() {
            this.needsSwap = this.enabled = !0,
            this.renderToScreen = this.clear = !1
        }
        ,
        Object.assign(t.Pass.prototype, {
            setSize: function(t, e) {},
            render: function(t, e, n, i, r) {
                console.error("THREE.Pass: .render() must be implemented in derived pass.")
            }
        }),
        t.RenderPass = function(e, n, i, r, s) {
            t.Pass.call(this),
            this.scene = e,
            this.camera = n,
            this.overrideMaterial = i,
            this.clearColor = r,
            this.clearAlpha = void 0 !== s ? s : 0,
            this.clear = !0,
            this.needsSwap = this.clearDepth = !1
        }
        ,
        t.RenderPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.RenderPass,
            render: function(t, e, n, i, r) {
                if (e = t.autoClear,
                t.autoClear = !1,
                this.scene.overrideMaterial = this.overrideMaterial,
                this.clearColor) {
                    var s = t.getClearColor().getHex()
                      , o = t.getClearAlpha();
                    t.setClearColor(this.clearColor, this.clearAlpha)
                }
                this.clearDepth && t.clearDepth(),
                t.render(this.scene, this.camera, this.renderToScreen ? null : n, this.clear),
                this.clearColor && t.setClearColor(s, o),
                this.scene.overrideMaterial = null,
                t.autoClear = e
            }
        }),
        t.ShaderPass = function(e, n) {
            t.Pass.call(this),
            this.textureID = void 0 !== n ? n : "tDiffuse",
            e instanceof t.ShaderMaterial ? (this.uniforms = e.uniforms,
            this.material = e) : e && (this.uniforms = t.UniformsUtils.clone(e.uniforms),
            this.material = new t.ShaderMaterial({
                defines: Object.assign({}, e.defines),
                uniforms: this.uniforms,
                vertexShader: e.vertexShader,
                fragmentShader: e.fragmentShader
            })),
            this.camera = new t.OrthographicCamera(-1,1,1,-1,0,1),
            this.scene = new t.Scene,
            this.quad = new t.Mesh(new t.PlaneBufferGeometry(2,2),null),
            this.quad.frustumCulled = !1,
            this.scene.add(this.quad)
        }
        ,
        t.ShaderPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.ShaderPass,
            render: function(t, e, n, i, r) {
                this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = n.texture),
                this.quad.material = this.material,
                this.renderToScreen ? t.render(this.scene, this.camera) : t.render(this.scene, this.camera, e, this.clear)
            }
        }),
        t.MaskPass = function(e, n) {
            t.Pass.call(this),
            this.scene = e,
            this.camera = n,
            this.clear = !0,
            this.inverse = this.needsSwap = !1
        }
        ,
        t.MaskPass.prototype = Object.assign(Object.create(t.Pass.prototype), {
            constructor: t.MaskPass,
            render: function(t, e, n, i, r) {
                if (i = t.context,
                (r = t.state).buffers.color.setMask(!1),
                r.buffers.depth.setMask(!1),
                r.buffers.color.setLocked(!0),
                r.buffers.depth.setLocked(!0),
                this.inverse)
                    var s = 0
                      , o = 1;
                else
                    s = 1,
                    o = 0;
                r.buffers.stencil.setTest(!0),
                r.buffers.stencil.setOp(i.REPLACE, i.REPLACE, i.REPLACE),
                r.buffers.stencil.setFunc(i.ALWAYS, s, 4294967295),
                r.buffers.stencil.setClear(o),
                t.render(this.scene, this.camera, n, this.clear),
                t.render(this.scene, this.camera, e, this.clear),
                r.buffers.color.setLocked(!1),
                r.buffers.depth.setLocked(!1),
                r.buffers.stencil.setFunc(i.EQUAL, 1, 4294967295),
                r.buffers.stencil.setOp(i.KEEP, i.KEEP, i.KEEP)
            }
        }),
        t.ClearMaskPass = function() {
            t.Pass.call(this),
            this.needsSwap = !1
        }
        ,
        t.ClearMaskPass.prototype = Object.create(t.Pass.prototype),
        Object.assign(t.ClearMaskPass.prototype, {
            render: function(t, e, n, i, r) {
                t.state.buffers.stencil.setTest(!1)
            }
        }),
        t.SSAOPass = function(e, n, i, r) {
            if (void 0 === t.SSAOShader)
                return console.warn("THREE.SSAOPass depends on THREE.SSAOShader"),
                new t.ShaderPass;
            t.ShaderPass.call(this, t.SSAOShader),
            this.width = void 0 !== i ? i : 128,
            this.height = void 0 !== r ? r : 128,
            this.renderToScreen = !1,
            this.camera2 = n,
            this.scene2 = e,
            this.depthMaterial = new t.MeshDepthMaterial,
            this.depthMaterial.depthPacking = t.RGBADepthPacking,
            this.depthMaterial.blending = t.NoBlending,
            this.depthRenderTarget = new t.WebGLRenderTarget(this.width,this.height,{
                minFilter: t.LinearFilter,
                magFilter: t.LinearFilter
            }),
            this.uniforms.tDepth.value = this.depthRenderTarget.texture,
            this.uniforms.size.value.set(this.width, this.height),
            this.uniforms.cameraNear.value = this.camera2.near,
            this.uniforms.cameraFar.value = this.camera2.far,
            this.uniforms.radius.value = 4,
            this.uniforms.onlyAO.value = !1,
            this.uniforms.aoClamp.value = .25,
            this.uniforms.lumInfluence.value = .7,
            Object.defineProperties(this, {
                radius: {
                    get: function() {
                        return this.uniforms.radius.value
                    },
                    set: function(t) {
                        this.uniforms.radius.value = t
                    }
                },
                onlyAO: {
                    get: function() {
                        return this.uniforms.onlyAO.value
                    },
                    set: function(t) {
                        this.uniforms.onlyAO.value = t
                    }
                },
                aoClamp: {
                    get: function() {
                        return this.uniforms.aoClamp.value
                    },
                    set: function(t) {
                        this.uniforms.aoClamp.value = t
                    }
                },
                lumInfluence: {
                    get: function() {
                        return this.uniforms.lumInfluence.value
                    },
                    set: function(t) {
                        this.uniforms.lumInfluence.value = t
                    }
                }
            })
        }
        ,
        t.SSAOPass.prototype = Object.create(t.ShaderPass.prototype),
        t.SSAOPass.prototype.render = function(e, n, i, r, s) {
            this.scene2.overrideMaterial = this.depthMaterial,
            e.render(this.scene2, this.camera2, this.depthRenderTarget, !0),
            this.scene2.overrideMaterial = null,
            t.ShaderPass.prototype.render.call(this, e, n, i, r, s)
        }
        ,
        t.SSAOPass.prototype.setScene = function(t) {
            this.scene2 = t
        }
        ,
        t.SSAOPass.prototype.setCamera = function(t) {
            this.camera2 = t,
            this.uniforms.cameraNear.value = this.camera2.near,
            this.uniforms.cameraFar.value = this.camera2.far
        }
        ,
        t.SSAOPass.prototype.setSize = function(t, e) {
            this.width = t,
            this.height = e,
            this.uniforms.size.value.set(this.width, this.height),
            this.depthRenderTarget.setSize(this.width, this.height)
        }
    }
}
, function(t, e) {
    function n(t) {
        return !!t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)
    }
    t.exports = function(t) {
        return null != t && (n(t) || function(t) {
            return "function" == typeof t.readFloatLE && "function" == typeof t.slice && n(t.slice(0, 0))
        }(t) || !!t._isBuffer)
    }
}
, function(t, e) {
    !function() {
        var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
          , n = {
            rotl: function(t, e) {
                return t << e | t >>> 32 - e
            },
            rotr: function(t, e) {
                return t << 32 - e | t >>> e
            },
            endian: function(t) {
                if (t.constructor == Number)
                    return 16711935 & n.rotl(t, 8) | 4278255360 & n.rotl(t, 24);
                for (var e = 0; e < t.length; e++)
                    t[e] = n.endian(t[e]);
                return t
            },
            randomBytes: function(t) {
                for (var e = []; t > 0; t--)
                    e.push(Math.floor(256 * Math.random()));
                return e
            },
            bytesToWords: function(t) {
                for (var e = [], n = 0, i = 0; n < t.length; n++,
                i += 8)
                    e[i >>> 5] |= t[n] << 24 - i % 32;
                return e
            },
            wordsToBytes: function(t) {
                for (var e = [], n = 0; n < 32 * t.length; n += 8)
                    e.push(t[n >>> 5] >>> 24 - n % 32 & 255);
                return e
            },
            bytesToHex: function(t) {
                for (var e = [], n = 0; n < t.length; n++)
                    e.push((t[n] >>> 4).toString(16)),
                    e.push((15 & t[n]).toString(16));
                return e.join("")
            },
            hexToBytes: function(t) {
                for (var e = [], n = 0; n < t.length; n += 2)
                    e.push(parseInt(t.substr(n, 2), 16));
                return e
            },
            bytesToBase64: function(t) {
                for (var n = [], i = 0; i < t.length; i += 3)
                    for (var r = t[i] << 16 | t[i + 1] << 8 | t[i + 2], s = 0; s < 4; s++)
                        8 * i + 6 * s <= 8 * t.length ? n.push(e.charAt(r >>> 6 * (3 - s) & 63)) : n.push("=");
                return n.join("")
            },
            base64ToBytes: function(t) {
                t = t.replace(/[^A-Z0-9+\/]/gi, "");
                for (var n = [], i = 0, r = 0; i < t.length; r = ++i % 4)
                    0 != r && n.push((e.indexOf(t.charAt(i - 1)) & Math.pow(2, -2 * r + 8) - 1) << 2 * r | e.indexOf(t.charAt(i)) >>> 6 - 2 * r);
                return n
            }
        };
        t.exports = n
    }()
}
, function(t, e, n) {
    !function() {
        var e = n(69)
          , i = n(52).utf8
          , r = n(68)
          , s = n(52).bin
          , o = function(t, n) {
            t.constructor == String ? t = n && "binary" === n.encoding ? s.stringToBytes(t) : i.stringToBytes(t) : r(t) ? t = Array.prototype.slice.call(t, 0) : Array.isArray(t) || (t = t.toString());
            for (var a = e.bytesToWords(t), c = 8 * t.length, l = 1732584193, h = -271733879, p = -1732584194, u = 271733878, d = 0; d < a.length; d++)
                a[d] = 16711935 & (a[d] << 8 | a[d] >>> 24) | 4278255360 & (a[d] << 24 | a[d] >>> 8);
            a[c >>> 5] |= 128 << c % 32,
            a[14 + (c + 64 >>> 9 << 4)] = c;
            var f = o._ff
              , m = o._gg
              , g = o._hh
              , v = o._ii;
            for (d = 0; d < a.length; d += 16) {
                var y = l
                  , x = h
                  , w = p
                  , b = u;
                h = v(h = v(h = v(h = v(h = g(h = g(h = g(h = g(h = m(h = m(h = m(h = m(h = f(h = f(h = f(h = f(h, p = f(p, u = f(u, l = f(l, h, p, u, a[d + 0], 7, -680876936), h, p, a[d + 1], 12, -389564586), l, h, a[d + 2], 17, 606105819), u, l, a[d + 3], 22, -1044525330), p = f(p, u = f(u, l = f(l, h, p, u, a[d + 4], 7, -176418897), h, p, a[d + 5], 12, 1200080426), l, h, a[d + 6], 17, -1473231341), u, l, a[d + 7], 22, -45705983), p = f(p, u = f(u, l = f(l, h, p, u, a[d + 8], 7, 1770035416), h, p, a[d + 9], 12, -1958414417), l, h, a[d + 10], 17, -42063), u, l, a[d + 11], 22, -1990404162), p = f(p, u = f(u, l = f(l, h, p, u, a[d + 12], 7, 1804603682), h, p, a[d + 13], 12, -40341101), l, h, a[d + 14], 17, -1502002290), u, l, a[d + 15], 22, 1236535329), p = m(p, u = m(u, l = m(l, h, p, u, a[d + 1], 5, -165796510), h, p, a[d + 6], 9, -1069501632), l, h, a[d + 11], 14, 643717713), u, l, a[d + 0], 20, -373897302), p = m(p, u = m(u, l = m(l, h, p, u, a[d + 5], 5, -701558691), h, p, a[d + 10], 9, 38016083), l, h, a[d + 15], 14, -660478335), u, l, a[d + 4], 20, -405537848), p = m(p, u = m(u, l = m(l, h, p, u, a[d + 9], 5, 568446438), h, p, a[d + 14], 9, -1019803690), l, h, a[d + 3], 14, -187363961), u, l, a[d + 8], 20, 1163531501), p = m(p, u = m(u, l = m(l, h, p, u, a[d + 13], 5, -1444681467), h, p, a[d + 2], 9, -51403784), l, h, a[d + 7], 14, 1735328473), u, l, a[d + 12], 20, -1926607734), p = g(p, u = g(u, l = g(l, h, p, u, a[d + 5], 4, -378558), h, p, a[d + 8], 11, -2022574463), l, h, a[d + 11], 16, 1839030562), u, l, a[d + 14], 23, -35309556), p = g(p, u = g(u, l = g(l, h, p, u, a[d + 1], 4, -1530992060), h, p, a[d + 4], 11, 1272893353), l, h, a[d + 7], 16, -155497632), u, l, a[d + 10], 23, -1094730640), p = g(p, u = g(u, l = g(l, h, p, u, a[d + 13], 4, 681279174), h, p, a[d + 0], 11, -358537222), l, h, a[d + 3], 16, -722521979), u, l, a[d + 6], 23, 76029189), p = g(p, u = g(u, l = g(l, h, p, u, a[d + 9], 4, -640364487), h, p, a[d + 12], 11, -421815835), l, h, a[d + 15], 16, 530742520), u, l, a[d + 2], 23, -995338651), p = v(p, u = v(u, l = v(l, h, p, u, a[d + 0], 6, -198630844), h, p, a[d + 7], 10, 1126891415), l, h, a[d + 14], 15, -1416354905), u, l, a[d + 5], 21, -57434055), p = v(p, u = v(u, l = v(l, h, p, u, a[d + 12], 6, 1700485571), h, p, a[d + 3], 10, -1894986606), l, h, a[d + 10], 15, -1051523), u, l, a[d + 1], 21, -2054922799), p = v(p, u = v(u, l = v(l, h, p, u, a[d + 8], 6, 1873313359), h, p, a[d + 15], 10, -30611744), l, h, a[d + 6], 15, -1560198380), u, l, a[d + 13], 21, 1309151649), p = v(p, u = v(u, l = v(l, h, p, u, a[d + 4], 6, -145523070), h, p, a[d + 11], 10, -1120210379), l, h, a[d + 2], 15, 718787259), u, l, a[d + 9], 21, -343485551),
                l = l + y >>> 0,
                h = h + x >>> 0,
                p = p + w >>> 0,
                u = u + b >>> 0
            }
            return e.endian([l, h, p, u])
        };
        o._ff = function(t, e, n, i, r, s, o) {
            var a = t + (e & n | ~e & i) + (r >>> 0) + o;
            return (a << s | a >>> 32 - s) + e
        }
        ,
        o._gg = function(t, e, n, i, r, s, o) {
            var a = t + (e & i | n & ~i) + (r >>> 0) + o;
            return (a << s | a >>> 32 - s) + e
        }
        ,
        o._hh = function(t, e, n, i, r, s, o) {
            var a = t + (e ^ n ^ i) + (r >>> 0) + o;
            return (a << s | a >>> 32 - s) + e
        }
        ,
        o._ii = function(t, e, n, i, r, s, o) {
            var a = t + (n ^ (e | ~i)) + (r >>> 0) + o;
            return (a << s | a >>> 32 - s) + e
        }
        ,
        o._blocksize = 16,
        o._digestsize = 16,
        t.exports = function(t, n) {
            if (void 0 === t || null === t)
                throw new Error("Illegal argument " + t);
            var i = e.wordsToBytes(o(t, n));
            return n && n.asBytes ? i : n && n.asString ? s.bytesToString(i) : e.bytesToHex(i)
        }
    }()
}
, function(t, e, n) {
    "use strict";
    var i = function(t) {
        switch (typeof t) {
        case "string":
            return t;
        case "boolean":
            return t ? "true" : "false";
        case "number":
            return isFinite(t) ? t : "";
        default:
            return ""
        }
    };
    t.exports = function(t, e, n, a) {
        return e = e || "&",
        n = n || "=",
        null === t && (t = void 0),
        "object" == typeof t ? s(o(t), function(o) {
            var a = encodeURIComponent(i(o)) + n;
            return r(t[o]) ? s(t[o], function(t) {
                return a + encodeURIComponent(i(t))
            }).join(e) : a + encodeURIComponent(i(t[o]))
        }).join(e) : a ? encodeURIComponent(i(a)) + n + encodeURIComponent(i(t)) : ""
    }
    ;
    var r = Array.isArray || function(t) {
        return "[object Array]" === Object.prototype.toString.call(t)
    }
    ;
    function s(t, e) {
        if (t.map)
            return t.map(e);
        for (var n = [], i = 0; i < t.length; i++)
            n.push(e(t[i], i));
        return n
    }
    var o = Object.keys || function(t) {
        var e = [];
        for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && e.push(n);
        return e
    }
}
, function(t, e, n) {
    "use strict";
    function i(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }
    t.exports = function(t, e, n, s) {
        e = e || "&",
        n = n || "=";
        var o = {};
        if ("string" != typeof t || 0 === t.length)
            return o;
        var a = /\+/g;
        t = t.split(e);
        var c = 1e3;
        s && "number" == typeof s.maxKeys && (c = s.maxKeys);
        var l = t.length;
        c > 0 && l > c && (l = c);
        for (var h = 0; h < l; ++h) {
            var p, u, d, f, m = t[h].replace(a, "%20"), g = m.indexOf(n);
            g >= 0 ? (p = m.substr(0, g),
            u = m.substr(g + 1)) : (p = m,
            u = ""),
            d = decodeURIComponent(p),
            f = decodeURIComponent(u),
            i(o, d) ? r(o[d]) ? o[d].push(f) : o[d] = [o[d], f] : o[d] = f
        }
        return o
    }
    ;
    var r = Array.isArray || function(t) {
        return "[object Array]" === Object.prototype.toString.call(t)
    }
}
, function(t, e, n) {
    "use strict";
    e.decode = e.parse = n(72),
    e.encode = e.stringify = n(71)
}
, function(t, e, n) {
    "use strict";
    t.exports = {
        isString: function(t) {
            return "string" == typeof t
        },
        isObject: function(t) {
            return "object" == typeof t && null !== t
        },
        isNull: function(t) {
            return null === t
        },
        isNullOrUndefined: function(t) {
            return null == t
        }
    }
}
, function(t, e) {
    t.exports = function(t) {
        return t.webpackPolyfill || (t.deprecate = function() {}
        ,
        t.paths = [],
        t.children || (t.children = []),
        Object.defineProperty(t, "loaded", {
            enumerable: !0,
            get: function() {
                return t.l
            }
        }),
        Object.defineProperty(t, "id", {
            enumerable: !0,
            get: function() {
                return t.i
            }
        }),
        t.webpackPolyfill = 1),
        t
    }
}
, function(t, e, n) {
    (function(t, i) {
        var r;
        !function(s) {
            "object" == typeof e && e && e.nodeType,
            "object" == typeof t && t && t.nodeType;
            var o = "object" == typeof i && i;
            o.global !== o && o.window !== o && o.self;
            var a, c = 2147483647, l = 36, h = 1, p = 26, u = 38, d = 700, f = 72, m = 128, g = "-", v = /^xn--/, y = /[^\x20-\x7E]/, x = /[\x2E\u3002\uFF0E\uFF61]/g, w = {
                overflow: "Overflow: input needs wider integers to process",
                "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                "invalid-input": "Invalid input"
            }, b = l - h, M = Math.floor, _ = String.fromCharCode;
            function S(t) {
                throw new RangeError(w[t])
            }
            function E(t, e) {
                for (var n = t.length, i = []; n--; )
                    i[n] = e(t[n]);
                return i
            }
            function T(t, e) {
                var n = t.split("@")
                  , i = "";
                return n.length > 1 && (i = n[0] + "@",
                t = n[1]),
                i + E((t = t.replace(x, ".")).split("."), e).join(".")
            }
            function A(t) {
                for (var e, n, i = [], r = 0, s = t.length; r < s; )
                    (e = t.charCodeAt(r++)) >= 55296 && e <= 56319 && r < s ? 56320 == (64512 & (n = t.charCodeAt(r++))) ? i.push(((1023 & e) << 10) + (1023 & n) + 65536) : (i.push(e),
                    r--) : i.push(e);
                return i
            }
            function L(t) {
                return E(t, function(t) {
                    var e = "";
                    return t > 65535 && (e += _((t -= 65536) >>> 10 & 1023 | 55296),
                    t = 56320 | 1023 & t),
                    e + _(t)
                }).join("")
            }
            function R(t) {
                return t - 48 < 10 ? t - 22 : t - 65 < 26 ? t - 65 : t - 97 < 26 ? t - 97 : l
            }
            function P(t, e) {
                return t + 22 + 75 * (t < 26) - ((0 != e) << 5)
            }
            function C(t, e, n) {
                var i = 0;
                for (t = n ? M(t / d) : t >> 1,
                t += M(t / e); t > b * p >> 1; i += l)
                    t = M(t / b);
                return M(i + (b + 1) * t / (t + u))
            }
            function I(t) {
                var e, n, i, r, s, o, a, u, d, v, y = [], x = t.length, w = 0, b = m, _ = f;
                for ((n = t.lastIndexOf(g)) < 0 && (n = 0),
                i = 0; i < n; ++i)
                    t.charCodeAt(i) >= 128 && S("not-basic"),
                    y.push(t.charCodeAt(i));
                for (r = n > 0 ? n + 1 : 0; r < x; ) {
                    for (s = w,
                    o = 1,
                    a = l; r >= x && S("invalid-input"),
                    ((u = R(t.charCodeAt(r++))) >= l || u > M((c - w) / o)) && S("overflow"),
                    w += u * o,
                    !(u < (d = a <= _ ? h : a >= _ + p ? p : a - _)); a += l)
                        o > M(c / (v = l - d)) && S("overflow"),
                        o *= v;
                    _ = C(w - s, e = y.length + 1, 0 == s),
                    M(w / e) > c - b && S("overflow"),
                    b += M(w / e),
                    w %= e,
                    y.splice(w++, 0, b)
                }
                return L(y)
            }
            function O(t) {
                var e, n, i, r, s, o, a, u, d, v, y, x, w, b, E, T = [];
                for (x = (t = A(t)).length,
                e = m,
                n = 0,
                s = f,
                o = 0; o < x; ++o)
                    (y = t[o]) < 128 && T.push(_(y));
                for (i = r = T.length,
                r && T.push(g); i < x; ) {
                    for (a = c,
                    o = 0; o < x; ++o)
                        (y = t[o]) >= e && y < a && (a = y);
                    for (a - e > M((c - n) / (w = i + 1)) && S("overflow"),
                    n += (a - e) * w,
                    e = a,
                    o = 0; o < x; ++o)
                        if ((y = t[o]) < e && ++n > c && S("overflow"),
                        y == e) {
                            for (u = n,
                            d = l; !(u < (v = d <= s ? h : d >= s + p ? p : d - s)); d += l)
                                E = u - v,
                                b = l - v,
                                T.push(_(P(v + E % b, 0))),
                                u = M(E / b);
                            T.push(_(P(u, 0))),
                            s = C(n, w, i == r),
                            n = 0,
                            ++i
                        }
                    ++n,
                    ++e
                }
                return T.join("")
            }
            a = {
                version: "1.4.1",
                ucs2: {
                    decode: A,
                    encode: L
                },
                decode: I,
                encode: O,
                toASCII: function(t) {
                    return T(t, function(t) {
                        return y.test(t) ? "xn--" + O(t) : t
                    })
                },
                toUnicode: function(t) {
                    return T(t, function(t) {
                        return v.test(t) ? I(t.slice(4).toLowerCase()) : t
                    })
                }
            },
            void 0 === (r = function() {
                return a
            }
            .call(e, n, e, t)) || (t.exports = r)
        }()
    }
    ).call(this, n(75)(t), n(28))
}
, function(t, e, n) {
    "use strict";
    var i = n(76)
      , r = n(74);
    function s() {
        this.protocol = null,
        this.slashes = null,
        this.auth = null,
        this.host = null,
        this.port = null,
        this.hostname = null,
        this.hash = null,
        this.search = null,
        this.query = null,
        this.pathname = null,
        this.path = null,
        this.href = null
    }
    e.parse = x,
    e.resolve = function(t, e) {
        return x(t, !1, !0).resolve(e)
    }
    ,
    e.resolveObject = function(t, e) {
        return t ? x(t, !1, !0).resolveObject(e) : e
    }
    ,
    e.format = function(t) {
        return r.isString(t) && (t = x(t)),
        t instanceof s ? t.format() : s.prototype.format.call(t)
    }
    ,
    e.Url = s;
    var o = /^([a-z0-9.+-]+:)/i
      , a = /:[0-9]*$/
      , c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/
      , l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"])
      , h = ["'"].concat(l)
      , p = ["%", "/", "?", ";", "#"].concat(h)
      , u = ["/", "?", "#"]
      , d = /^[+a-z0-9A-Z_-]{0,63}$/
      , f = /^([+a-z0-9A-Z_-]{0,63})(.*)$/
      , m = {
        javascript: !0,
        "javascript:": !0
    }
      , g = {
        javascript: !0,
        "javascript:": !0
    }
      , v = {
        http: !0,
        https: !0,
        ftp: !0,
        gopher: !0,
        file: !0,
        "http:": !0,
        "https:": !0,
        "ftp:": !0,
        "gopher:": !0,
        "file:": !0
    }
      , y = n(73);
    function x(t, e, n) {
        if (t && r.isObject(t) && t instanceof s)
            return t;
        var i = new s;
        return i.parse(t, e, n),
        i
    }
    s.prototype.parse = function(t, e, n) {
        if (!r.isString(t))
            throw new TypeError("Parameter 'url' must be a string, not " + typeof t);
        var s = t.indexOf("?")
          , a = -1 !== s && s < t.indexOf("#") ? "?" : "#"
          , l = t.split(a);
        l[0] = l[0].replace(/\\/g, "/");
        var x = t = l.join(a);
        if (x = x.trim(),
        !n && 1 === t.split("#").length) {
            var w = c.exec(x);
            if (w)
                return this.path = x,
                this.href = x,
                this.pathname = w[1],
                w[2] ? (this.search = w[2],
                this.query = e ? y.parse(this.search.substr(1)) : this.search.substr(1)) : e && (this.search = "",
                this.query = {}),
                this
        }
        var b = o.exec(x);
        if (b) {
            var M = (b = b[0]).toLowerCase();
            this.protocol = M,
            x = x.substr(b.length)
        }
        if (n || b || x.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var _ = "//" === x.substr(0, 2);
            !_ || b && g[b] || (x = x.substr(2),
            this.slashes = !0)
        }
        if (!g[b] && (_ || b && !v[b])) {
            for (var S, E, T = -1, A = 0; A < u.length; A++)
                -1 !== (L = x.indexOf(u[A])) && (-1 === T || L < T) && (T = L);
            for (-1 !== (E = -1 === T ? x.lastIndexOf("@") : x.lastIndexOf("@", T)) && (S = x.slice(0, E),
            x = x.slice(E + 1),
            this.auth = decodeURIComponent(S)),
            T = -1,
            A = 0; A < p.length; A++) {
                var L;
                -1 !== (L = x.indexOf(p[A])) && (-1 === T || L < T) && (T = L)
            }
            -1 === T && (T = x.length),
            this.host = x.slice(0, T),
            x = x.slice(T),
            this.parseHost(),
            this.hostname = this.hostname || "";
            var R = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
            if (!R)
                for (var P = this.hostname.split(/\./), C = (A = 0,
                P.length); A < C; A++) {
                    var I = P[A];
                    if (I && !I.match(d)) {
                        for (var O = "", D = 0, k = I.length; D < k; D++)
                            I.charCodeAt(D) > 127 ? O += "x" : O += I[D];
                        if (!O.match(d)) {
                            var B = P.slice(0, A)
                              , N = P.slice(A + 1)
                              , U = I.match(f);
                            U && (B.push(U[1]),
                            N.unshift(U[2])),
                            N.length && (x = "/" + N.join(".") + x),
                            this.hostname = B.join(".");
                            break
                        }
                    }
                }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(),
            R || (this.hostname = i.toASCII(this.hostname));
            var z = this.port ? ":" + this.port : ""
              , F = this.hostname || "";
            this.host = F + z,
            this.href += this.host,
            R && (this.hostname = this.hostname.substr(1, this.hostname.length - 2),
            "/" !== x[0] && (x = "/" + x))
        }
        if (!m[M])
            for (A = 0,
            C = h.length; A < C; A++) {
                var H = h[A];
                if (-1 !== x.indexOf(H)) {
                    var G = encodeURIComponent(H);
                    G === H && (G = escape(H)),
                    x = x.split(H).join(G)
                }
            }
        var j = x.indexOf("#");
        -1 !== j && (this.hash = x.substr(j),
        x = x.slice(0, j));
        var V = x.indexOf("?");
        if (-1 !== V ? (this.search = x.substr(V),
        this.query = x.substr(V + 1),
        e && (this.query = y.parse(this.query)),
        x = x.slice(0, V)) : e && (this.search = "",
        this.query = {}),
        x && (this.pathname = x),
        v[M] && this.hostname && !this.pathname && (this.pathname = "/"),
        this.pathname || this.search) {
            z = this.pathname || "";
            var W = this.search || "";
            this.path = z + W
        }
        return this.href = this.format(),
        this
    }
    ,
    s.prototype.format = function() {
        var t = this.auth || "";
        t && (t = (t = encodeURIComponent(t)).replace(/%3A/i, ":"),
        t += "@");
        var e = this.protocol || ""
          , n = this.pathname || ""
          , i = this.hash || ""
          , s = !1
          , o = "";
        this.host ? s = t + this.host : this.hostname && (s = t + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"),
        this.port && (s += ":" + this.port)),
        this.query && r.isObject(this.query) && Object.keys(this.query).length && (o = y.stringify(this.query));
        var a = this.search || o && "?" + o || "";
        return e && ":" !== e.substr(-1) && (e += ":"),
        this.slashes || (!e || v[e]) && !1 !== s ? (s = "//" + (s || ""),
        n && "/" !== n.charAt(0) && (n = "/" + n)) : s || (s = ""),
        i && "#" !== i.charAt(0) && (i = "#" + i),
        a && "?" !== a.charAt(0) && (a = "?" + a),
        e + s + (n = n.replace(/[?#]/g, function(t) {
            return encodeURIComponent(t)
        })) + (a = a.replace("#", "%23")) + i
    }
    ,
    s.prototype.resolve = function(t) {
        return this.resolveObject(x(t, !1, !0)).format()
    }
    ,
    s.prototype.resolveObject = function(t) {
        if (r.isString(t)) {
            var e = new s;
            e.parse(t, !1, !0),
            t = e
        }
        for (var n = new s, i = Object.keys(this), o = 0; o < i.length; o++) {
            var a = i[o];
            n[a] = this[a]
        }
        if (n.hash = t.hash,
        "" === t.href)
            return n.href = n.format(),
            n;
        if (t.slashes && !t.protocol) {
            for (var c = Object.keys(t), l = 0; l < c.length; l++) {
                var h = c[l];
                "protocol" !== h && (n[h] = t[h])
            }
            return v[n.protocol] && n.hostname && !n.pathname && (n.path = n.pathname = "/"),
            n.href = n.format(),
            n
        }
        if (t.protocol && t.protocol !== n.protocol) {
            if (!v[t.protocol]) {
                for (var p = Object.keys(t), u = 0; u < p.length; u++) {
                    var d = p[u];
                    n[d] = t[d]
                }
                return n.href = n.format(),
                n
            }
            if (n.protocol = t.protocol,
            t.host || g[t.protocol])
                n.pathname = t.pathname;
            else {
                for (var f = (t.pathname || "").split("/"); f.length && !(t.host = f.shift()); )
                    ;
                t.host || (t.host = ""),
                t.hostname || (t.hostname = ""),
                "" !== f[0] && f.unshift(""),
                f.length < 2 && f.unshift(""),
                n.pathname = f.join("/")
            }
            if (n.search = t.search,
            n.query = t.query,
            n.host = t.host || "",
            n.auth = t.auth,
            n.hostname = t.hostname || t.host,
            n.port = t.port,
            n.pathname || n.search) {
                var m = n.pathname || ""
                  , y = n.search || "";
                n.path = m + y
            }
            return n.slashes = n.slashes || t.slashes,
            n.href = n.format(),
            n
        }
        var x = n.pathname && "/" === n.pathname.charAt(0)
          , w = t.host || t.pathname && "/" === t.pathname.charAt(0)
          , b = w || x || n.host && t.pathname
          , M = b
          , _ = n.pathname && n.pathname.split("/") || []
          , S = (f = t.pathname && t.pathname.split("/") || [],
        n.protocol && !v[n.protocol]);
        if (S && (n.hostname = "",
        n.port = null,
        n.host && ("" === _[0] ? _[0] = n.host : _.unshift(n.host)),
        n.host = "",
        t.protocol && (t.hostname = null,
        t.port = null,
        t.host && ("" === f[0] ? f[0] = t.host : f.unshift(t.host)),
        t.host = null),
        b = b && ("" === f[0] || "" === _[0])),
        w)
            n.host = t.host || "" === t.host ? t.host : n.host,
            n.hostname = t.hostname || "" === t.hostname ? t.hostname : n.hostname,
            n.search = t.search,
            n.query = t.query,
            _ = f;
        else if (f.length)
            _ || (_ = []),
            _.pop(),
            _ = _.concat(f),
            n.search = t.search,
            n.query = t.query;
        else if (!r.isNullOrUndefined(t.search))
            return S && (n.hostname = n.host = _.shift(),
            (R = !!(n.host && n.host.indexOf("@") > 0) && n.host.split("@")) && (n.auth = R.shift(),
            n.host = n.hostname = R.shift())),
            n.search = t.search,
            n.query = t.query,
            r.isNull(n.pathname) && r.isNull(n.search) || (n.path = (n.pathname ? n.pathname : "") + (n.search ? n.search : "")),
            n.href = n.format(),
            n;
        if (!_.length)
            return n.pathname = null,
            n.search ? n.path = "/" + n.search : n.path = null,
            n.href = n.format(),
            n;
        for (var E = _.slice(-1)[0], T = (n.host || t.host || _.length > 1) && ("." === E || ".." === E) || "" === E, A = 0, L = _.length; L >= 0; L--)
            "." === (E = _[L]) ? _.splice(L, 1) : ".." === E ? (_.splice(L, 1),
            A++) : A && (_.splice(L, 1),
            A--);
        if (!b && !M)
            for (; A--; A)
                _.unshift("..");
        !b || "" === _[0] || _[0] && "/" === _[0].charAt(0) || _.unshift(""),
        T && "/" !== _.join("/").substr(-1) && _.push("");
        var R, P = "" === _[0] || _[0] && "/" === _[0].charAt(0);
        return S && (n.hostname = n.host = P ? "" : _.length ? _.shift() : "",
        (R = !!(n.host && n.host.indexOf("@") > 0) && n.host.split("@")) && (n.auth = R.shift(),
        n.host = n.hostname = R.shift())),
        (b = b || n.host && _.length) && !P && _.unshift(""),
        _.length ? n.pathname = _.join("/") : (n.pathname = null,
        n.path = null),
        r.isNull(n.pathname) && r.isNull(n.search) || (n.path = (n.pathname ? n.pathname : "") + (n.search ? n.search : "")),
        n.auth = t.auth || n.auth,
        n.slashes = n.slashes || t.slashes,
        n.href = n.format(),
        n
    }
    ,
    s.prototype.parseHost = function() {
        var t = this.host
          , e = a.exec(t);
        e && (":" !== (e = e[0]) && (this.port = e.substr(1)),
        t = t.substr(0, t.length - e.length)),
        t && (this.hostname = t)
    }
}
, function(t, e, n) {
    var i = n(77)
      , r = n(70)
      , s = n(1);
    function o(t, e, n) {
        "localhost" == location.hostname && (window.location.hostname = "127.0.0.1"),
        this.debugLog = !1,
        this.baseUrl = t,
        this.devPort = e,
        this.rawIPs = !!n,
        this.server = void 0,
        this.gameIndex = void 0,
        this.callback = void 0,
        this.errorCallback = void 0,
        this.processServers(vultr.servers)
    }
    o.prototype.regionInfo = {
        0: {
            name: "Local",
            latitude: 0,
            longitude: 0
        },
        1: {
            name: "New Jersey",
            latitude: 40.1393329,
            longitude: -75.8521818
        },
        2: {
            name: "Chicago",
            latitude: 41.8339037,
            longitude: -87.872238
        },
        3: {
            name: "Dallas",
            latitude: 32.8208751,
            longitude: -96.8714229
        },
        4: {
            name: "Seattle",
            latitude: 47.6149942,
            longitude: -122.4759879
        },
        5: {
            name: "Los Angeles",
            latitude: 34.0207504,
            longitude: -118.691914
        },
        6: {
            name: "Atlanta",
            latitude: 33.7676334,
            longitude: -84.5610332
        },
        7: {
            name: "Amsterdam",
            latitude: 52.3745287,
            longitude: 4.7581878
        },
        8: {
            name: "London",
            latitude: 51.5283063,
            longitude: -.382486
        },
        9: {
            name: "Frankfurt",
            latitude: 50.1211273,
            longitude: 8.496137
        },
        12: {
            name: "Silicon Valley",
            latitude: 37.4024714,
            longitude: -122.3219752
        },
        19: {
            name: "Sydney",
            latitude: -33.8479715,
            longitude: 150.651084
        },
        24: {
            name: "Paris",
            latitude: 48.8588376,
            longitude: 2.2773454
        },
        25: {
            name: "Tokyo",
            latitude: 35.6732615,
            longitude: 139.569959
        },
        39: {
            name: "Miami",
            latitude: 25.7823071,
            longitude: -80.3012156
        },
        40: {
            name: "Singapore",
            latitude: 1.3147268,
            longitude: 103.7065876
        }
    },
    o.prototype.start = function(t, e) {
        this.callback = t,
        this.errorCallback = e;
        var n = this.parseServerQuery();
        n ? (this.log("Found server in query."),
        this.password = n[3],
        this.connect(n[0], n[1], n[2])) : (this.log("Pinging servers..."),
        this.pingServers())
    }
    ,
    o.prototype.parseServerQuery = function() {
        var t = i.parse(location.href, !0)
          , e = t.query.server;
        if ("string" == typeof e) {
            var n = e.split(":");
            if (3 == n.length)
                return [parseInt(n[0]), parseInt(n[1]), parseInt(n[2]), t.query.password];
            this.errorCallback("Invalid number of server parameters in " + e)
        }
    }
    ,
    o.prototype.findServer = function(t, e) {
        var n = this.servers[t];
        if (Array.isArray(n)) {
            for (var i = 0; i < n.length; i++) {
                var r = n[i];
                if (r.index == e)
                    return r
            }
            console.warn("Could not find server in region " + t + " with index " + e + ".")
        } else
            this.errorCallback("No server list for region " + t)
    }
    ,
    o.prototype.pingServers = function() {
        var t = this
          , e = [];
        for (var n in this.servers)
            if (this.servers.hasOwnProperty(n)) {
                var i = this.servers[n]
                  , r = i[Math.floor(Math.random() * i.length)];
                void 0 != r ? function(i, r) {
                    var s = new XMLHttpRequest;
                    s.onreadystatechange = function(i) {
                        var s = i.target;
                        if (4 == s.readyState)
                            if (200 == s.status) {
                                for (var o = 0; o < e.length; o++)
                                    e[o].abort();
                                t.log("Connecting to region", r.region);
                                var a = t.seekServer(r.region);
                                t.connect(a[0], a[1], a[2])
                            } else
                                console.warn("Error pinging " + r.ip + " in region " + n)
                    }
                    ;
                    var o = "//" + t.serverAddress(r.ip, !0) + ":" + t.serverPort(r) + "/ping";
                    s.open("GET", o, !0),
                    s.send(null),
                    t.log("Pinging", o),
                    e.push(s)
                }(0, r) : console.log("No target server for region " + n)
            }
    }
    ,
    o.prototype.seekServer = function(t) {
        var e, n = this.servers[t].map(function(t) {
            for (var e = 0, n = 0; n < t.games.length; ++n)
                t.games[n].custom || (e += t.games[n].playerCount);
            return {
                index: t.index,
                region: t.region,
                space: s.maxPlayers * s.gamesPerServer - e,
                playerCount: e
            }
        }).filter(function(t) {
            return t.space > s.minServerSpace
        }).sort(function(t, e) {
            return e.playerCount - t.playerCount
        });
        return 0 == n.length ? (n = this.servers[t],
        serverIndex = Math.floor(Math.random() * n.length)) : serverIndex = Math.min(Math.floor(Math.random() * s.serverSpread), n.length - 1),
        [(e = n[serverIndex]).region, e.index, 0]
    }
    ,
    o.prototype.connect = function(t, e, n) {
        if (!this.connected) {
            var i = this.findServer(t, e);
            void 0 != i ? (this.log("Connecting to server", i, "with game index", n),
            window.history.replaceState(document.title, document.title, this.generateHref(t, e, n, this.password)),
            this.server = i,
            this.gameIndex = n,
            this.callback(this.serverAddress(i.ip), this.serverPort(i), n)) : this.errorCallback("Failed to find server for region " + t + " and index " + e)
        }
    }
    ,
    o.prototype.switchServer = function(t, e, n, i) {
        this.switchingServers = !0,
        window.location.href = this.generateHref(t, e, n, i)
    }
    ,
    o.prototype.generateHref = function(t, e, n, i) {
        var r = "/?server=" + t + ":" + e + ":" + n;
        return i && (r += "&password=" + encodeURIComponent(i)),
        r
    }
    ,
    o.prototype.serverAddress = function(t, e) {
        return "127.0.0.1" == t || "7f000001" == t || "903d62ef5d1c2fecdcaeb5e7dd485eff" == t ? window.location.hostname : this.rawIPs ? e ? "ip_" + this.hashIP(t) + "." + this.baseUrl : t : "ip_" + t + "." + this.baseUrl
    }
    ,
    o.prototype.serverPort = function(t) {
        return 0 == t.region ? this.devPort : location.protocol.startsWith("https") ? 443 : 80
    }
    ,
    o.prototype.processServers = function(t) {
        for (var e = {}, n = 0; n < t.length; n++) {
            var i = t[n]
              , r = e[i.region];
            void 0 == r && (r = [],
            e[i.region] = r),
            r.push(i)
        }
        for (var s in e)
            e[s] = e[s].sort(function(t, e) {
                return t.index - e.index
            });
        this.servers = e
    }
    ,
    o.prototype.ipToHex = function(t) {
        return t.split(".").map(t=>("00" + parseInt(t).toString(16)).substr(-2)).join("").toLowerCase()
    }
    ,
    o.prototype.hashIP = function(t) {
        return r(this.ipToHex(t))
    }
    ,
    o.prototype.log = function() {
        return this.debugLog ? console.log.apply(void 0, arguments) : console.verbose ? console.verbose.apply(void 0, arguments) : void 0
    }
    ;
    var a = function(t, e) {
        return t.concat(e)
    };
    Array.prototype.flatMap = function(t) {
        return function(t, e) {
            return e.map(t).reduce(a, [])
        }(t, this)
    }
    ,
    t.exports = o
}
, function(t, e, n) {
    var i = n(1)
      , r = "undefined" != typeof Storage;
    function s(t) {
        r && localStorage.removeItem(t)
    }
    window.saveVal = function(t, e) {
        r && localStorage.setItem(t, e)
    }
    ,
    window.getSavedVal = function(t) {
        return r ? localStorage.getItem(t) : null
    }
    ,
    window.openURL = function(t) {
        window.open(t, "_blank")
    }
    ;
    let o = !1;
    setTimeout(()=>{
        !function t() {
            (o = o || null != window.hack) && (localStorage.dismotherfuckerishacking = "true",
            g.socket && g.socket.close()),
            setTimeout(()=>t(), 2e3)
        }()
    }
    , 2500);
    var a = new (n(78))("krunker.io",3e3,!1);
    function c(t, e) {
        hostGameMsg && (hostGameMsg.innerHTML = t),
        e && l(e),
        bt = null
    }
    function l(t) {
        var e = a.generateHref(a.server.region, a.server.index, t);
        window.history.replaceState({}, "Krunker", e),
        a.gameIndex = t,
        windows[1].lastLoadTime = 0
    }
    window.switchServer = function(t, e, n) {
        a.switchServer(t, e, n)
    }
    ,
    window.createPrivateRoom = function() {
        for (var t = [], e = 0; e < E.length; e++)
            document.getElementById("gameMap" + e).checked && t.push(e);
        if (0 != t.length || bt || "" != rawMapData.value) {
            var n = [];
            for (e = 0; e < T.length; e++)
                document.getElementById("gameMode" + e).checked && n.push(e);
            if (0 != n.length) {
                var r = [];
                for (e = 0; e < v.classes.length; e++)
                    document.getElementById("gameClass" + e).checked && r.push(e);
                if (0 != r.length) {
                    var s = {
                        customMap: bt,
                        rawMapData: rawMapData.value,
                        private: makePrivate.checked,
                        maps: t,
                        modes: n,
                        modURL: hostModURL.value,
                        classes: r
                    };
                    for (e = 0; e < i.serverConfig.length; e++) {
                        var o = document.getElementById("customS" + i.serverConfig[e].varN);
                        i.serverConfig[e].bool ? tmpV = o ? o.checked : 0 : tmpV = o ? parseFloat(o.value) : 0,
                        s[i.serverConfig[e].varN] = tmpV
                    }
                    g.send("custom", s),
                    hostGameMsg.innerHTML = "Please wait..."
                } else
                    hostGameMsg.innerHTML = "<span class='error'>Select at least one class</span>"
            } else
                hostGameMsg.innerHTML = "<span class='error'>Select at least one Mode</span>"
        } else
            hostGameMsg.innerHTML = "<span class='error'>Select at least one Map</span>"
    }
    ,
    Object.defineProperty(console, "_commandLineAPI", {
        get: function() {
            throw ""
        }
    });
    var h = n(2);
    h.OBJLoader = n(27)(h),
    h.Shaders = n(67)(h);
    var p = n(3)
      , u = new (n(16))(h,p,i);
    window.SOUND = new (n(66))(p,i);
    var d = new (n(51))(u,i)
      , f = n(65)
      , m = new (n(64))(u,i)
      , g = n(50)
      , v = n(63).obj;
    v = new v(0,null,u,SOUND,d);
    var y, x, w, b, M, _, S = new (n(58))(u,h,f,p,v,i,g), E = n(8).maps, T = n(8).modes, A = n(57), L = !1, R = !1, P = !1;
    window.locked = !1;
    var C, I, O, D, k = [], B = !0, N = 0, U = 0, z = 0, F = 0;
    window.idleTimer = 0,
    twitterHolder.innerHTML = "<a href='https://twitter.com/" + (p.randInt(0, 1) ? "Sidney_de_Vries" : "EatMyAppless") + "' class='twitter-follow-button' data-show-screen-name='false' data-size='large' data-show-count='true'>Follow</a>",
    window.checkTerms = function(t) {
        t ? (consentBlock.style.display = "none",
        saveVal("consent", 1)) : $("#consentShake").effect("shake")
    }
    ,
    Math.PI2 = 2 * Math.PI,
    Math.lerpAngle = function(t, e, n) {
        Math.abs(e - t) > Math.PI && (t > e ? e += Math.PI2 : t += Math.PI2);
        var i = e + (t - e) * n;
        return i >= 0 && i <= Math.PI2 ? i : i % Math.PI2
    }
    ,
    console.warn = function(t) {}
    ,
    console.info = function(t) {}
    ;
    var H, G, j = !1;
    function V() {
        window.innerWidth,
        H = window.innerHeight,
        G = H / 693,
        u.resize()
    }
    window.loading = !1,
    window.enterGame = function() {
        if (v.singlePlayer && !j) {
            ie("0:00");
            var t = v.getSpawnPoint(null, !0);
            de([g.socketId, 1, t.x, t.y, t.z, "TEST", ft, null]),
            j = !0,
            Ee([1, "TEST", 0, 0, 0]),
            f.toggleMenu(!1)
        } else if (g.connected && !j) {
            j = !0,
            window.idleTimer = 0,
            f.toggleMenu(!1),
            instructions.innerHTML = "LOADING...",
            window.loading = !0;
            var e = parseInt(ft)
              , n = v.classes[e].loadout
              , i = [void 0 != dt[n[0]] ? dt[n[0]] : -1, void 0 != dt[n[1]] ? dt[n[1]] : -1];
            g.send("etr", [e, parseInt(le), i, parseInt(pt), parseInt(ht)])
        }
    }
    ,
    window.addEventListener("resize", V),
    V(),
    window.toggleAd = function(t) {}
    ;
    var W = 0
      , Y = StripeCheckout.configure({
        key: "pk_live_ZpOmTmwsx2tvx487Z2Pzrt6A",
        image: "./img/store.png",
        locale: "auto",
        token: function(t) {
            g && g.connected && x && (menuHider.style.display = "none",
            purchaseLoad.style.display = "block",
            purchLoadRing.style.display = "inline-block",
            purchaseLabel.innerHTML = "Completing Purchase...",
            g.send("pr", W, t.id, t.email))
        }
    });
    function q(t) {
        x && (x.funds = t)
    }
    function X(t, e) {
        window.idleTimer = 0,
        t ? purchaseError() : (x && (x.funds = e),
        updateWindow(null, !0),
        menuHider.style.display = "block",
        purchaseLoad.style.display = "none")
    }
    window.cancelPurchase = function() {
        window.idleTimer = 0,
        showWindow(14),
        instructions.style.display = "block",
        W = 0,
        menuHider.style.display = "block",
        purchaseLoad.style.display = "none"
    }
    ,
    window.stripePurchase = function() {
        purchaseHolder.style.display = "none",
        w = v.store.purchases[W],
        Y && Y.open({
            name: "Krunker.io",
            description: "Buy " + w.val + " KR",
            currency: "usd",
            zipCode: !0,
            amount: 100 * w.price
        })
    }
    ,
    window.showPurchase = function(t) {
        window.idleTimer = 0,
        W = t,
        purchaseHolder.style.display = "block";
        var e = document.getElementById("paypal-button");
        e && (e.innerHTML = ""),
        x && paypal.Button.render({
            style: {
                size: "large"
            },
            env: "production",
            commit: !0,
            payment: function(t, e) {
                return purchaseHolder.style.display = "none",
                e.request.post("/my-api/create-payment/", {
                    pIndex: W,
                    acID: x.id
                }).then(function(t) {
                    return t.id
                })
            },
            onAuthorize: function(t, e) {
                return e.request.post("/my-api/execute-payment/", {
                    pIndex: W,
                    acID: x.id,
                    paymentID: t.paymentID,
                    payerID: t.payerID
                }).then(function(t) {
                    t && void 0 != t.funds && null != t.funds ? (x && (x.funds = t.funds),
                    updateWindow(null, !0),
                    menuHider.style.display = "block",
                    purchaseLoad.style.display = "none") : purchaseError()
                })
            },
            onError: function(t) {
                purchaseError()
            }
        }, "#paypal-button")
    }
    ,
    purchaseHolder.onclick = function() {
        purchaseHolder.style.display = "none"
    }
    ,
    window.purchaseError = function() {
        showWindow(),
        instructions.style.display = "none",
        purchaseLoad.style.display = "block",
        purchLoadRing.style.display = "none",
        purchaseLabel.innerHTML = "Payment error occurred <a href='javascript:;' onclick='cancelPurchase()'>click here</a> and try again!"
    }
    ,
    window.addEventListener("popstate", function() {
        Y.close()
    });
    const Z = new FileReader;
    var K, J, Q = !1, tt = 0, et = {};
    function nt() {
        j = !1,
        window.idleTimer = 0,
        f.toggleMenu(!0),
        S.toggle(!1),
        qt = {
            states: []
        }
    }
    window.voiceChat = function(t, e) {
        if (tt)
            try {
                var n = new Howl({
                    src: [t],
                    volume: tt
                });
                n.on("load", function() {
                    n.duration() <= i.voiceChatMaxLength && (n.on("end", function() {
                        if (et[e]--,
                        et[e] <= 0) {
                            var t = document.getElementById("speaker" + e);
                            t && t.parentElement.removeChild(t),
                            delete et[e]
                        }
                    }),
                    et[e] || (et[e] = 0,
                    speakerDisplay.innerHTML += "<div id='speaker" + e + "' class='voiceSpeaker'>" + e + " <i class='material-icons' style='color:#fff;font-size:35px;vertical-align:middle'>volume_down</i></div>"),
                    et[e]++,
                    n.play())
                })
            } catch (t) {}
    }
    ,
    Z.addEventListener("loadend", function(t) {
        var e = Z.result;
        g.send("vc", e)
    }),
    window.toggleRecord = function(t) {
        y && (t && !Q ? (voiceDisplay.style.opacity = .9,
        Q = !0,
        navigator.mediaDevices.getUserMedia({
            audio: !0,
            video: !1
        }).then(function(t) {
            (K = new MediaRecorder(t,{
                mimetype: "audio/ogg",
                bitsPerSecond: 6e3
            })).start();
            const e = [];
            K.addEventListener("dataavailable", function(t) {
                e.push(t.data)
            }),
            K.addEventListener("stop", function() {
                recTimer.style.display = "none",
                voiceDisplay.style.opacity = .3;
                var t = new Blob(e,{
                    type: "audio/ogg; codecs=opus"
                });
                Z.readAsDataURL(t)
            }),
            recTimer.style.display = "inline-block",
            recTimer.innerHTML = i.voiceChatMaxLength;
            var n = i.voiceChatMaxLength;
            J = setInterval(function() {
                n--,
                recTimer.innerHTML = n,
                n <= 0 && (Q = !1,
                K.stop(),
                clearInterval(J))
            }, 1e3)
        }).catch(function(t) {
            Q = !1,
            J && clearInterval(J),
            voiceDisplay.style.opacity = .3
        })) : !t && Q && K && (Q = !1,
        K.stop(),
        clearInterval(J)))
    }
    ,
    window.updateSliderLabel = function(t, e) {
        var n = document.getElementById("customSet" + t);
        n && (n.innerHTML = e)
    }
    ,
    window.setSetting = function(t, e) {
        document.getElementById("slid" + t) && (document.getElementById("slid" + t).innerHTML = e),
        it[t].set(e),
        it[t].val = e,
        saveVal("kro_set_" + t, e)
    }
    ;
    for (var it = [{
        name: "<div style='width:100%'><a href='javascript:;' onclick='showWindow(7);' class='menuLink'>Change Controls</a></div>",
        html: function() {
            return ""
        }
    }, {
        name: "Resolution",
        pre: "<div class='setHed'>Quality</div>",
        val: .7,
        html: function() {
            return "<span class='sliderVal' id='slid1'>" + it[1].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='2' step='0.1' value='" + it[1].val + "' class='sliderM' oninput='setSetting(1, this.value)'></div>"
        },
        set: function(t) {
            u.setResMlt(t)
        }
    }, {
        name: "Particles",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(2, this.checked)' " + (it[2].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            d.active = t
        }
    }, {
        name: "Show UI",
        pre: "<div class='setHed'>Interface</div>",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(3, this.checked)' " + (it[3].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            f.hideGameUI = !t,
            chatUI.style.display = t ? "block" : "none"
        }
    }, {
        name: "Show Chat",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(4, this.checked)' " + (it[4].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            chatHolder.style.display = t ? "block" : "none"
        }
    }, {
        name: "Show Ping",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(5, this.checked)' " + (it[5].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            pingDisplay.style.display = t ? "inline-block" : "none"
        }
    }, {
        name: "Crosshair Color",
        val: "#ffffff",
        html: function() {
            return "<input type='color' id='head' name='color' value='" + it[6].val + "' oninput='setSetting(6, this.value)' style='float:right;margin-top:5px'/>"
        },
        set: function(t) {
            crosshairT.style.backgroundColor = t,
            crosshairB.style.backgroundColor = t,
            crosshairLL.style.backgroundColor = t,
            crosshairRL.style.backgroundColor = t
        }
    }, {
        name: "Sensitivity",
        pre: "<div class='setHed'>Gameplay</div>",
        val: 1,
        html: function() {
            return "<span class='sliderVal' id='slid7'>" + it[7].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='15' step='0.1' value='" + it[7].val + "' class='sliderM' oninput='setSetting(7, this.value)'></div>"
        },
        set: function(t) {
            S.sensMlt = t
        }
    }, {
        name: "Aim Sensitivity",
        val: 1,
        html: function() {
            return "<span class='sliderVal' id='slid8'>" + it[8].val + "</span><div class='slidecontainer'><input type='range' min='0.1' max='15' step='0.1' value='" + it[8].val + "' class='sliderM' oninput='setSetting(8, this.value)'></div>"
        },
        set: function(t) {
            S.sensAimMlt = t
        }
    }, {
        name: "Field of View",
        val: i.fov,
        html: function() {
            return "<span class='sliderVal' id='slid9'>" + it[9].val + "</span><div class='slidecontainer'><input type='range' min='60' max='120' step='5' value='" + it[9].val + "' class='sliderM' oninput='setSetting(9, this.value)'></div>"
        },
        set: function(t) {
            u.setFov(t)
        }
    }, {
        name: "Invert Y-Axis",
        val: !1,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(10, this.checked)' " + (it[10].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            S.invertY = t
        }
    }, {
        name: "Sound",
        pre: "<div class='setHed'>Audio</div>",
        val: 1,
        html: function() {
            return "<span class='sliderVal' id='slid11'>" + it[11].val + "</span><div class='slidecontainer'><input type='range' min='0' max='1' step='0.1' value='" + it[11].val + "' class='sliderM' oninput='setSetting(11, this.value)'></div>"
        },
        set: function(t) {
            SOUND.setVolume(t)
        }
    }, {
        name: "Voice Volume",
        val: 1,
        html: function() {
            return "<span class='sliderVal' id='slid12'>" + it[12].val + "</span><div class='slidecontainer'><input type='range' min='0' max='1' step='0.1' value='" + it[12].val + "' class='sliderM' oninput='setSetting(12, this.value)'></div>"
        },
        set: function(t) {
            tt = t
        }
    }, {
        name: "Weapon Bobbing",
        pre: "<div class='setHed'>Editing</div>",
        val: 1,
        html: function() {
            return "<span class='sliderVal' id='slid13'>" + it[13].val + "</span><div class='slidecontainer'><input type='range' min='0' max='2' step='0.1' value='" + it[13].val + "' class='sliderM' oninput='setSetting(13, this.value)'></div>"
        },
        set: function(t) {
            u.weaponLean = t
        }
    }, {
        name: "Show Weapon",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(14, this.checked)' " + (it[14].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            v.hideWeapon = !t,
            y && y.weaponMeshes[y.weaponIndex] && (y.weaponMeshes[y.weaponIndex].visible = t)
        }
    }, {
        name: "Depth Map",
        val: 0,
        html: function() {
            return "<span class='sliderVal' id='slid15'>" + it[15].val + "</span><div class='slidecontainer'><input type='range' min='0' max='500' step='5' value='" + it[15].val + "' class='sliderM' oninput='setSetting(15, this.value)'></div>"
        },
        set: function(t) {
            u.toggleDepthMap(t)
        }
    }, {
        name: "Green Screen",
        val: !1,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(16, this.checked)' " + (it[16].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            u.toggleGreenscreen(t)
        }
    }, {
        name: "Shading",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(17, this.checked)' " + (it[17].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            u.toggleMeshGroup("ambient_0", t),
            u.toggleMeshGroup("ambient_1", t)
        }
    }, {
        name: "Load Mods",
        pre: "<div class='setHed'>Mods</div>",
        val: !0,
        html: function() {
            return "<label class='switch'><input type='checkbox' onclick='setSetting(18, this.checked)' " + (it[18].val ? "checked" : "") + "><span class='slider'></span></label>"
        },
        set: function(t) {
            B = t
        }
    }], rt = 0; rt < it.length; ++rt)
        if (it[rt].set) {
            var st = getSavedVal("kro_set_" + rt);
            it[rt].val = null !== st ? st : it[rt].val,
            "false" == it[rt].val && (it[rt].val = !1),
            it[rt].set(it[rt].val, !0)
        }
    function ot(t) {
        x && x.setData(t),
        updateWindow(5)
    }
    function at(t) {
        try {
            accResp.innerHTML = t || "",
            accResp.style.display = t ? "block" : "none"
        } catch (t) {}
    }
    function ct(t, e) {
        t >= 0 && at("Please Wait..."),
        g.send("a", t, e)
    }
    function lt(t, e, n, r, s) {
        t ? at(t) : (x = new A(e,n,null,i),
        saveVal("krunker_id", e),
        saveVal("krunker_username", n),
        ot(r),
        s && (saveVal("krunker_token", s),
        loginToken = s),
        updateWindow(null, !0))
    }
    window.changeCont = function(t, e) {
        e || showWindow(7, !0),
        t <= 3 ? S.inputChanger = t : 4 == t ? S.inputChanger = "jumpKey" : 5 == t ? S.inputChanger = "crouchKey" : 6 == t ? S.inputChanger = "swapKeyD" : 7 == t ? S.inputChanger = "swapKeyU" : 8 == t ? S.inputChanger = "reloadKey" : 9 == t ? S.inputChanger = "sprayKey" : 10 == t ? S.inputChanger = "aimKey" : 11 == t ? S.inputChanger = "chatKey" : 12 == t ? S.inputChanger = "voiceKey" : 13 == t && (S.inputChanger = "recordKey"),
        document.getElementById("cont" + t).innerHTML = "Press any Key"
    }
    ,
    window.registerAcc = function() {
        ct(0, [accName.value, accPass.value])
    }
    ,
    window.loginAcc = function() {
        ct(1, [accName.value, accPass.value, null])
    }
    ,
    window.logoutAcc = function() {
        ct(-1),
        at(),
        s("krunker_id"),
        s("krunker_username"),
        s("krunker_token"),
        s("skins"),
        s("hatIndex"),
        s("backIndex"),
        pt = -1,
        ht = -1,
        dt = {},
        windows[12].clanData = null,
        loginToken = null,
        x = null,
        ot()
    }
    ;
    var ht = getSavedVal("backIndex") || -1
      , pt = getSavedVal("hatIndex") || -1
      , ut = getSavedVal("skins")
      , dt = ut ? JSON.parse(ut) : {}
      , ft = getSavedVal("classindex") || 0
      , mt = 0;
    function gt(t, e) {
        var n = "<div class='selItem'><div class='equipBtn' onclick='" + t + "(-1)'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName'>None</div><div class='itemCat'>Default</div></div></div>";
        if (x)
            for (var i = x.skins.slice().sort(function(t, e) {
                return v.store.skins[e.ind] && v.store.skins[t.ind] ? v.store.skins[e.ind].rarity - v.store.skins[t.ind].rarity : 0
            }), r = 0; r < i.length; ++r)
                (w = v.store.skins[i[r].ind]) && w.type == e && (n += "<div class='selItem' style='margin-top:10px'><div class='equipBtn' onclick='" + t + "(" + i[r].ind + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName' style='color:" + v.store.rarities[w.rarity].color + "'>" + w.name + "<span style='color:rgba(0,0,0,0.3)'> x" + i[r].cnt + "</span></div><div class='itemCat'>by " + (w.creator || "Krunker.io") + "</div></div></div>");
        return n
    }
    for (window.selectHat = function(t) {
        saveVal("hatIndex", t),
        pt = t,
        showWindow(3)
    }
    ,
    window.selectBack = function(t) {
        saveVal("backIndex", t),
        ht = t,
        showWindow(3)
    }
    ,
    window.selectClass = function(t) {
        saveVal("classindex", t),
        ft = t,
        showWindow(3)
    }
    ,
    window.skinSelector = function(t) {
        mt = t,
        showWindow(15)
    }
    ,
    window.selectSkin = function(t, e) {
        w = v.store.skins[t],
        dt[e] = w ? t : void 0,
        saveVal("skins", JSON.stringify(dt)),
        showWindow(3)
    }
    ,
    window.windows = [{
        header: "Game Settings",
        gen: function() {
            for (var t = "", e = 0; e < it.length; ++e)
                it[e].pre && (t += it[e].pre),
                t += "<div class='settName'>" + it[e].name + " " + it[e].html() + "</div>";
            return t
        }
    }, {
        header: "Server Browser",
        lastLoadTime: 0,
        gen: function() {
            return Date.now() - this.lastLoadTime < i.serverBrowserRate ? this.genList() : (this.lastLoadTime = Date.now(),
            this.loadData())
        },
        loadData: function() {
            var t = new XMLHttpRequest;
            return t.onreadystatechange = function() {
                4 == this.readyState && (200 == this.status ? (window.vultr = JSON.parse(this.responseText),
                a.processServers(vultr.servers),
                window.showWindow(2, !0)) : console.error("Failed to load server data with status code:", this.status))
            }
            ,
            t.open("GET", "/serverData", !0),
            t.send(),
            "Loading..."
        },
        expandedRegion: -1,
        playerCount: 0,
        serverSearch: null,
        searchList: function(t) {
            this.serverSearch = t && "" != t ? t : null;
            var e = document.getElementById("serverHolder");
            e && (e.innerHTML = this.getServers())
        },
        getServers: function() {
            var t = "";
            this.playerCount = 0;
            var e = {
                custom: {
                    order: 1,
                    name: "Custom Games",
                    players: 0,
                    games: []
                }
            };
            for (var n in a.servers) {
                e[n] || (e[n] = {
                    name: a.regionInfo[n].name,
                    players: 0,
                    games: []
                });
                for (var r = a.servers[n], s = 0; s < r.length; s++)
                    for (var o = 0; o < r[s].games.length; o++)
                        if (r[s].games[o].active) {
                            var c = r[s].games[o].custom ? "custom" : n;
                            (!this.serverSearch || r[s].games[o].gameInfo.indexOf(this.serverSearch) >= 0) && (e[c].players += r[s].games[o].playerCount),
                            this.playerCount += r[s].games[o].playerCount,
                            e[c].games.push({
                                server: r[s].index,
                                index: o,
                                region: n,
                                obj: r[s].games[o]
                            })
                        }
            }
            var l = [];
            for (var n in e)
                e.hasOwnProperty(n) && l.push(e[n]);
            l.sort(function(t, e) {
                return (e.order || -1) - (t.order || -1)
            }),
            l[0].games.sort(function(t, e) {
                return e.obj.playerCount < t.obj.playerCount ? -1 : e.obj.playerCount > t.obj.playerCount ? 1 : 0
            });
            for (var h = 0; h < l.length; h++) {
                var p = (n = l[h]).name + " - " + n.players + " online"
                  , u = this.expandedRegion == h;
                if (t += "<div class='menuSelectorHeader' onclick='setExpandedRegion(" + (u ? -1 : h) + ")' style='cursor: pointer;'>" + (u ? "&#x25BC;" : "&#x25B6;") + " " + p + "</div>",
                u) {
                    t += "<div class='menuSelectorHolder'>";
                    for (var d = 0, f = 0; f < n.games.length; f++) {
                        var m = n.games[f]
                          , g = a.server && a.server.region == m.region && a.server.index == m.server && a.gameIndex == m.index;
                        if (m.obj.active && (!m.obj.private || g) && (!this.serverSearch || m.obj.gameInfo.indexOf(this.serverSearch) >= 0)) {
                            d++,
                            m.server,
                            i.gamesPerServer,
                            m.index;
                            var v = m.obj.gameInfo + (m.obj.reward ? " <i class='material-icons' style='color:#2196F3'>check_circle</i>" : "") + "<div class='serverPCount'>" + m.obj.playerCount + "/" + m.obj.maxPlayers + "</div>";
                            t += "<div class='menuSelector" + (g ? " selectedMenuSelector" : "") + "' onclick='switchServer(" + m.region + "," + m.server + "," + m.index + ")'>" + v + "</div>"
                        }
                    }
                    n.games.length && d || (t += "<div style='margin-left:30px;margin-top:5px'>No Games Found...</div>"),
                    t += "</div>"
                }
            }
            return t
        },
        genList: function() {
            var t = this;
            window.setExpandedRegion = function(e) {
                t.expandedRegion = e,
                t.lastLoadTime = Date.now(),
                showWindow(2, !0)
            }
            ;
            var e = "<div style='font-size:20px'>";
            return e += "<a class='menuLink' onclick='openHostWindow()'>+ Host Game</a><div style='float:right;display:inline-block'><input id='serverSearch'" + (this.serverSearch ? "value='" + this.serverSearch + "'" : "") + " type='text' placeholder='Search' oninput='windows[1].searchList(this.value)'></input></div><div style='height:10px'></div>",
            e += "<div id='serverHolder'>" + this.getServers() + "</div>",
            (e += "<div style='height:10px'></div><b style='color:rgba(0,0,0,0.6)'>" + this.playerCount + " total online</b>") + "</div>"
        }
    }, {
        header: "Change Loadout",
        gen: function() {
            var t = v.classes[ft];
            v.config.classes.indexOf(parseInt(ft)) < 0 && (ft = v.config.classes[0],
            t = v.classes[ft]);
            var e = v.weapons[t.loadout[0]].name
              , n = "#2196F3"
              , i = t.loadout[1] ? v.weapons[t.loadout[1]].name : "None"
              , r = t.loadout[1] ? "#2196F3" : "rgba(0,0,0,0.3)"
              , s = "rgba(0,0,0,0.3)"
              , o = s;
            return x && (void 0 != dt[t.loadout[0]] && (e = v.store.skins[dt[t.loadout[0]]]) && (n = v.store.rarities[e.rarity].color,
            e = e.name),
            t.loadout[1] && void 0 != dt[t.loadout[1]] && (i = v.store.skins[dt[t.loadout[1]]]) && (r = v.store.rarities[i.rarity].color,
            i = i.name),
            pt >= 0 && v.store.skins[pt] && (s = v.store.rarities[v.store.skins[pt].rarity].color),
            ht >= 0 && v.store.skins[ht] && (o = v.store.rarities[v.store.skins[ht].rarity].color)),
            "<div class='settName'>Class<span class='settText floatR' onclick='showWindow(6)'>" + t.name + "</span></div><div class='settName'>Primary<span class='settLabel wepLink' style='color:" + n + "' onclick='skinSelector(" + t.loadout[0] + ")'>" + e + "</span></div><div class='settName'>Secondary<span class='settLabel" + (t.loadout[1] ? " wepLink" : "") + "' " + (t.loadout[1] ? "onclick='skinSelector(" + t.loadout[1] + ")'" : "") + " style='color:" + r + "'>" + i + "</span></div><div class='settName'>Hat<span onclick='showWindow(16)' class='settText floatR' style='color:" + s + "'>" + (v.store.skins[pt] ? v.store.skins[pt].name : "None") + "</span></div><div class='settName'>Back<span onclick='showWindow(17)' class='settText floatR' style='color:" + o + "'>" + (v.store.skins[ht] ? v.store.skins[ht].name : "None") + "</span></div><div class='settName'>Spray<span onclick='showWindow(9)' class='settText floatR'>" + v.sprays[le].name + "</span></div>"
        }
    }, {
        header: "Mod Manager",
        openList: function() {
            P = !1,
            showWindow(18)
        },
        gen: function() {
            return "<div id='modLinks'><a href='./docs/mods.txt' class='menuLink'>Guide</a> | <a href='javascript:;' onclick='windows[3].openList()' class='menuLink'>Mod List</a> | <a href='javascript:;' onclick='showWindow(19)' class='menuLink'>Publish Mod</a></div><form id='modDropper'><input onchange='loadMod()' id='modInput'type='file'><p id='modLInfo'>drop mod file here or click</p></form><input type='text' id='modURL' class='accountInput' style='width:80%' placeholder='Mod Url'><a class='menuLink' style='display:inline-block;margin-left:10px' onclick='loadModURL()'>Load</a>"
        }
    }, {
        header: "Account",
        gen: function() {
            return x ? "<div class='settName' style='width:100%'>Name<a href='/social.html?p=profile&q=" + x.name + "' class='floatR'>" + x.name + "</a></div><div class='settName' style='width:100%'>Clan<a class='floatR' class='menuLink' onclick='showWindow(13)'>" + (x.clan ? "[" + x.clan + "]" : "None") + "</a></div><div class='settName'>Level<span class='floatR'>" + x.level + "</span></div><div class='xpBar'><div class='xpBarB' style='width:" + x.levelProg + "%'></div></div><div class='settName'>Score<span class='floatR'>" + x.score + "</span></div><div class='settName'>KR<span class='floatR'>" + x.funds + "KR</span></div><div class='settName'>Kills<span class='floatR'>" + x.kills + "</span></div><div class='settName'>Deaths<span class='floatR'>" + x.deaths + "</span></div><div class='settName'>KDR<span class='floatR'>" + (x.kills / Math.max(x.deaths, 1)).toFixed(2) + "</span></div><div class='settName'>Games Played<span class='floatR'>" + x.games + "</span></div><div class='settName'>Games Won<span class='floatR'>" + x.wins + "</span></div><div class='settName'>W/L<span class='floatR'>" + (x.wins / Math.max(x.games, 1)).toFixed(2) + "</span></div><div class='settName'>Time Played<span class='floatR'>" + p.getReadableTime(x.timePlayed) + "</span></div><div style='height:10px'></div><a class='menuLink' onclick='logoutAcc()'>Logout</a>" : "<input id='accName' type='text' placeholder='Username' class='accountInput' style='margin-top:0' value='" + (getSavedVal("krunker_username") || "") + "'></input><input id='accPass' type='password' placeholder='Password' class='accountInput'></input><div id='accResp' style='margin-top:10px;color:rgba(0,0,0,0.5);display:none'></div><div class='accountButton' onclick='registerAcc()'>Register</div><div class='accountButton' onclick='loginAcc()' style='margin-left: 20px'>Login</div>"
        }
    }, {
        header: "Select Class",
        gen: function() {
            for (var t = "", e = 0; e < v.classes.length; ++e)
                v.config.classes.indexOf(e) >= 0 && !v.classes[e].hide && (t += "<div class='selItem' style='margin-top:" + (e > 0 ? "10px" : "") + "'><div class='equipBtn' onclick='selectClass(" + e + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src='./textures/classes/icon_" + e + ".png'/></div><div class='itemInfo'><div class='itemName'>" + v.classes[e].name + "</div><div class='itemCat'>" + v.weapons[v.classes[e].loadout[0]].name + "</div></div></div>");
            return t
        }
    }, {
        header: "Change Controls",
        gen: function() {
            var t = "";
            return t += "<div class='settName'>Forward<span class='settText floatR' id='cont0' onclick='changeCont(0)'>" + p.getKeyName(S.moveKeys[0]) + "</span></div>",
            t += "<div class='settName'>Backward<span class='settText floatR' id='cont1' onclick='changeCont(1)'>" + p.getKeyName(S.moveKeys[1]) + "</span></div>",
            t += "<div class='settName'>Left<span class='settText floatR' id='cont2' onclick='changeCont(2)'>" + p.getKeyName(S.moveKeys[2]) + "</span></div>",
            t += "<div class='settName'>Right<span class='settText floatR' id='cont3' onclick='changeCont(3)'>" + p.getKeyName(S.moveKeys[3]) + "</span></div>",
            t += "<div class='settName'>Reload<span class='settText floatR' id='cont8' onclick='changeCont(8)'>" + p.getKeyName(S.reloadKey) + "</span></div>",
            t += "<div class='settName'>Aim<span class='settText floatR' id='cont10' onclick='changeCont(10)'>" + p.getKeyName(S.aimKey) + "</span></div>",
            t += "<div class='settName'>Spray<span class='settText floatR' id='cont9' onclick='changeCont(9)'>" + p.getKeyName(S.sprayKey) + "</span></div>",
            t += "<div class='settName'>Jump<span class='settText floatR' id='cont4' onclick='changeCont(4)'>" + p.getKeyName(S.jumpKey) + "</span></div>",
            t += "<div class='settName'>Crouch<span class='settText floatR' id='cont5' onclick='changeCont(5)'>" + p.getKeyName(S.crouchKey) + "</span></div>",
            t += "<div class='settName'>Next Weapon<span class='settText floatR' id='cont6' onclick='changeCont(6)'>" + p.getKeyName(S.swapKeyD) + "</span></div>",
            t += "<div class='settName'>Previous Weapon<span class='settText floatR' id='cont7' onclick='changeCont(7)'>" + p.getKeyName(S.swapKeyU) + "</span></div>",
            (t += "<div class='settName'>Chat<span class='settText floatR' id='cont11' onclick='changeCont(11)'>" + p.getKeyName(S.chatKey) + "</span></div>") + "<div class='settName'>Voice<span class='settText floatR' id='cont12' onclick='changeCont(12)'>" + p.getKeyName(S.voiceKey) + "</span></div>"
        }
    }, {
        header: "Host Custom Game",
        gen: function() {
            var t = "";
            P = !0,
            t += "<div class='settName b'>Select Maps</div>",
            t += "<div style='margin-top:5px'>";
            for (var e = 0; e < E.length; e++) {
                var n = E[e]
                  , r = "<label class='switch'><input id='gameMap" + e + "' type='checkbox' checked=''><span class='slider'></span></label>";
                t += "<div class='settNameSmall' style='margin:0'>" + p.capFirst(n.name) + r + "</div>"
            }
            for (t += "<div class='settNameSmall' style='margin:0;margin-top:10px'>Community Maps <a href='javascript:;' onclick='showWindow(11);' class='menuLink' style='float:right;font-size:18px'>" + (bt || "Select") + "</a></div><br/>",
            t += "<div class='settNameSmall' style='margin:0;margin-top:-24px;'>Raw Map Data<input id='rawMapData' type='text' class='formInput' placeholder='Map Data' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'></div><br/>",
            t += "</div>",
            t += "<div class='settName b'>Add Mod Pack</div>",
            t += "<div class='settNameSmall' style='margin:0;margin-top:10px'>Community Mods <a href='javascript:;' onclick='showWindow(18);' class='menuLink' style='float:right;font-size:18px'>Select</a></div><br/>",
            t += "<div class='settNameSmall' style='margin:0;margin-top:-24px;'>Mod URL<input id='hostModURL' type='text' class='formInput' placeholder='URL' autocomplete='off' value='" + (Mt || "") + "' autocorrect='off' autocapitalize='off' spellcheck='false'></div><br/>",
            t += "<div class='settName b'>Select Modes</div>",
            t += "<div style='margin-top:5px'>",
            e = 0; e < T.length; e++) {
                var s = T[e];
                r = "<label class='switch'><input id='gameMode" + e + "' type='checkbox' " + (e ? "" : "checked") + "><span class='slider'></span></label>",
                t += "<div class='settNameSmall' style='margin:0'>" + p.capFirst(s.name) + r + "</div>"
            }
            for (t += "<div class='settName b' style='margin-top:20px'>Select Classes</div>",
            t += "<div style='margin-top:5px'>",
            e = 0; e < v.classes.length; e++)
                r = "<label class='switch'><input id='gameClass" + e + "' type='checkbox' checked><span class='slider'></span></label>",
                t += "<div class='settNameSmall' style='margin:0'>" + v.classes[e].name + r + "</div>";
            for (t += "<div class='settName b' style='margin-top:25px'>Settings</div>",
            e = 0; e < i.serverConfig.length; e++)
                (w = i.serverConfig[e]).bool ? t += "<div class='settNameSmall' style='margin:0;margin-bottom:5px;'>" + w.name + " <label class='switch'><input type='checkbox' id='customS" + w.varN + "'><span class='slider'></span></label></div>" : t += "<div class='settNameSmall' style='margin-left:0'>" + w.name + "<span class='sliderVal' id='customSet" + e + "'>" + w.def + "</span><div class='slidecontainer'><input type='range' min='" + w.min + "' max='" + (x && x.featured && w.maxF || w.max) + "' step='" + w.step + "' id='customS" + w.varN + "' value='" + w.def + "' oninput='updateSliderLabel(" + e + ",this.value)' class='sliderM'></div></div>";
            return t += "<div class='settNameSmall' style='margin:0'>Private <label class='switch'><input id='makePrivate' type='checkbox'><span class='slider'></span></label></div>",
            t += "<div style='text-align:left;margin-top:30px'>",
            t += "<div style='color:#919191;margin-bottom:5px' id='hostGameMsg'></div>",
            (t += "<a class='menuLink' onclick='createPrivateRoom()'>Start Game</a><br/>") + "</div>"
        }
    }, {
        header: "Select Spray",
        gen: function() {
            for (var t = "", e = 0; e < v.sprays.length; ++e)
                t += "<div class='selItem' style='margin-top:" + (e > 0 ? "10px" : "") + "'><div class='equipBtn' onclick='selectSpray(" + e + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src='./textures/sprays/" + e + ".png'/></div><div class='itemInfo'><div class='itemName'>" + v.sprays[e].name + "</div><div class='itemCat'>Default Spray</div></div></div>";
            return t
        }
    }, {
        header: "Custom Maps",
        mapsLoaded: function(t, e) {
            if (yourMaps)
                if (t && t.length)
                    if (e)
                        mapsList.innerHTML = e;
                    else {
                        for (var n = "", i = 0; i < t.length; ++i)
                            n += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[i].map_name + "&quot;)'>" + t[i].map_name + "<span style='float:right'>" + t[i].map_votes + "</span></div>";
                        yourMaps.innerHTML = n
                    }
                else
                    yourMaps.innerHTML = "No Maps found"
        },
        gen: function() {
            var t = "<a href='./editor.html' class='menuLink'>Map Editor</a><a href='/social.html?p=maps' target='_blank' class='menuLink' style='float:right'>Map List</a><br/>" + (x ? "<div style='margin-top:30px' class='setHed'>Your Maps</div><div style='color:rgba(0,0,0,0.3)' id='yourMaps'>Loading...</div><div style='margin-top:30px' class='setHed'>Publish Map</div><input id='mapDataNew' type='text' placeholder='Paste Map Data' class='mapInput' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'/><div id='mapUpResp' style='color:rgba(0,0,0,0.3);margin-top:8px'></div><div class='mapLoadButton' style='margin-top:6px' onclick='uploadCustomMap()'>Publish/Update</div>" : "<div style='color:rgba(0,0,0,0.3);margin-top:20px'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to create and upload maps!</div>");
            return x && g.send("getMaps", !0),
            t
        }
    }, {
        header: "Community Maps",
        searchMaps: function() {
            searchResults.innerHTML = "Loading...",
            g.send("srchM", mpSrch.value)
        },
        searchResp: function(t) {
            var e = "";
            if (t.length) {
                e += "<div style='height:10px'></div>";
                for (var n = 0; n < t.length; ++n)
                    e += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[n].map_name + "&quot;)'>" + t[n].map_name + "<span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[n].creatorname + "'>" + t[n].creatorname + "</a></span></a><span style='float:right'>" + t[n].map_votes + "</span></div>"
            } else
                e = "No maps found!";
            document.getElementById("searchResults") && (document.getElementById("searchResults").innerHTML = e)
        },
        mapsLoaded: function(t, e) {
            if (mapsList)
                if (t && t.length)
                    if (e)
                        mapsList.innerHTML = e;
                    else {
                        for (var n = "<div style='margin-bottom:-5px;margin-top:-5px;'>Search</div><input type='text' id='mpSrch' class='smlInput' placeholder='Map Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[10].searchMaps()'>Search</a><div style='color:rgba(0,0,0,0.5);margin-top:5px' id='searchResults'></div>", i = ["<div style='margin-bottom:5px;margin-top:15px'>Hot</div>", "<div style='margin-top:20px;margin-bottom:5px'>New Maps</div>", "<div style='margin-top:20px;margin-bottom:5px'>Your Favorites</div>"], r = 0; r < t.length; ++r)
                            if (t[r]) {
                                t[r].length && (n += i[r]);
                                for (var s = 0; s < t[r].length; ++s)
                                    n += "<div class='mapListItem'><a href='javascript:;' onclick='selectHostMap(&quot;" + t[r][s].map_name + "&quot;)'>" + t[r][s].map_name + "</a><span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[r][s].creatorname + "'>" + t[r][s].creatorname + "</a></span><span style='float:right'>" + t[r][s].map_votes + "</span></div>"
                            }
                        mapsList.innerHTML = n
                    }
                else
                    mapsList.innerHTML = "No Maps found"
        },
        gen: function() {
            return g.send("getMaps"),
            "<div style='color:rgba(0,0,0,0.3)' id='mapsList'>Loading...</div>"
        }
    }, {
        header: "Theatre Mode",
        gen: function() {
            return "<div class='setHed' style='margin-top:0'>Settings</div><div class='settName'>Enable Recording<label class='switch'><input type='checkbox' onclick='enableRecord(this.checked)' " + (Zt ? "checked" : "") + "><span class='slider'></span></label></div><div class='settName'>Record Key<span class='settText floatR' id='cont13' onclick='changeCont(13, true)'>" + p.getKeyName(S.recordKey) + "</span></div><div style='height:20px'></div><a href='./theatre.html' class='menuLink'>Theatre Mode</a>"
        }
    }, {
        header: "Clans",
        clanData: null,
        kickReq: function(t) {
            if (g.send("cln", 5, t),
            this.clanData && this.clanData.members) {
                for (var e = this.clanData.members.length - 1; e >= 0; --e)
                    this.clanData.members[e].player_id == t && this.clanData.members.splice(e, 1);
                updateWindow(13)
            }
        },
        sendReq: function(t, e) {
            var n = document.getElementById("clanErr");
            n && (n.style.color = "rgba(0,0,0,0.6)",
            n.innerHTML = "Loading...");
            var i = (n = document.getElementById("clanInp" + t)) ? n.value : null;
            g.send("cln", t, e || i || 1)
        },
        updReq: function(t, e, n) {
            g.send("clnR", e, n),
            this.clanData.members && 1 == n && this.clanData.members.push({
                player_name: this.clanData.requests[t].player_name
            }),
            this.clanData.requests.splice(t, 1),
            updateWindow(13)
        },
        delReq: function() {
            this.clanData = null,
            x && (x.clan = null),
            g.send("cln", 4, 1),
            showWindow(5)
        },
        resp: function(t, e, n) {
            var i = document.getElementById("clanErr");
            t && i ? (i.style.color = n ? "rgba(0,0,0,0.6)" : "rgba(255,0,0,0.6)",
            i.innerHTML = t) : e && (x && (x.clan = e.clan_name),
            this.clanData = e,
            updateWindow(13))
        },
        gen: function() {
            var t = ""
              , e = "";
            if (this.clanData && this.clanData.members) {
                var n = x && this.clanData.clan_playerid == x.id;
                t = "<div class='setHed' style='margin-top:10px'>Members (" + this.clanData.members.length + ")</div>";
                for (var r = 0; r < this.clanData.members.length; ++r)
                    t += "<div class='settName'><a target='_blank'href='/social.html?p=profile&q=" + this.clanData.members[r].player_name + "'>" + this.clanData.members[r].player_name + "</a>" + (n && this.clanData.clan_playerid != this.clanData.members[r].player_id ? "<i style='font-size:40px;float:right;color:rgba(255,0,0,0.6)'  class='material-icons h' onclick='windows[12].kickReq(" + this.clanData.members[r].player_id + ")'>clear</i>" : "") + "</div>"
            }
            if (this.clanData && this.clanData.requests) {
                for (e = "<div class='setHed' style='margin-top:10px'>Requests</div>",
                r = 0; r < this.clanData.requests.length; ++r)
                    e += "<div class='settName'><a  target='_blank' href='/social.html?p=profile&q=" + this.clanData.requests[r].player_name + "'>" + this.clanData.requests[r].player_name + "</a><span style='float:right'><i style='font-size:40px;color:rgba(255,0,0,0.6)'  class='material-icons h' onclick='windows[12].updReq(" + r + "," + this.clanData.requests[r].cr_playerid + ", 0)'>clear</i><i style='font-size:40px;color:rgba(0,255,0,0.6);margin-left:10px' class='material-icons h' onclick='windows[12].updReq(" + r + "," + this.clanData.requests[r].cr_playerid + ", 1)'>done</i></span></div>";
                this.clanData.requests.length || (e += "<div style='color:rgba(0,0,0,0.4)'>No Requests</div>")
            }
            var s = x ? x.clan ? "<div class='setHed' style='margin-top:0px'>[" + x.clan + "] Clan Page<a style='float:right' href='javascript:;' onclick='windows[12].delReq()' class='menuLink'>" + (this.clanData ? x && this.clanData.clan_playerid == x.id ? "Delete" : "Leave" : "") + "</a></div><div id='clanErr' style='margin-top:0px;color:rgba(0,0,0,0.5)'>" + (this.clanData ? "<div class='settName'>Level<span class='floatR'>" + Math.max(1, Math.floor(i.rankVar * Math.sqrt(this.clanData.clan_score || 0))) + "</span></div><div class='settName'>Score<span class='floatR'>" + (this.clanData.clan_score || 0) + "</span></div>" + t + e : "Loading...") + "</div>" : "<div class='setHed' style='margin-top:-5px'>Create Clan</div><input id='clanInp1' type='text' class='smlInput' maxlength='4' placeholder='Clan Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[12].sendReq(1)'>Create</a><div style='margin-top:0px' class='setHed'>Join Clan <a href='./social.html?q=clan' class='menuLink' style='margin-top:10px;display:inline-block'>View Clans</a></div><input id='clanInp2' type='text' class='smlInput' maxlength='4' placeholder='Clan Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[12].sendReq(2)'>Submit</a><div id='clanErr' style='margin-top:10px'></div>" : "<div style='color:rgba(0,0,0,0.3);margin-top:20px'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to create and join a clan!</div>";
            return x && x.clan && !this.clanData && this.sendReq(3),
            s
        }
    }, {
        header: "Store",
        gen: function() {
            for (var t = "", e = 0; e < v.store.wheels.length; ++e)
                t += "<div><a href='javascript:;' class='menuLink' onclick='prizeWheel(" + e + ")'>" + (w = v.store.wheels[e]).name + " Spin</a> <span style='color:#fff;margin-left:5px;background-color:" + w.lab.col + ";font-size:15px;padding:3px;padding-left:8px;padding-right:8px'> " + w.lab.nm + " </span><span style='float:right;color:rgba(0,0,0,0.3)'>" + w.price + "<span style='color:rgba(0,0,0,0.6)'> KR</span></span></div>";
            var n = "<div style='color:rgba(0,0,0,0.3);font-size:19px;margin-bottom:10px'>By purchasing you agree to the <a href='./docs/terms.txt'>Terms</a></div>";
            for (e = 0; e < v.store.purchases.length; ++e)
                n += "<div><a href='javascript:;' class='menuLink' onclick='showPurchase(" + e + ")'>" + (w = v.store.purchases[e]).val + " KR </a><span style='float:right;color:rgba(0,0,0,0.3)'>" + (w.tag ? "<span style='color:#fff;font-size:15px;padding:10px;padding-top:2px;vertical-align:middle;padding-bottom:2px;background-color:" + w.tagCol + "'>" + w.tag + "</span> " : "") + w.price + "<span style='color:rgba(0,0,0,0.6)'> USD</span></span></div>";
            return x ? "<b style='font-size:22px'>Prize Wheels</b><div style='color:rgba(0,0,0,0.3);margin-bottom:10px'>Unlock new weapon skins and items</div>" + t + "<div style='height:10px;'></div><b style='font-size:22px;margin-bottom:10px'>Purchase KR</b>" + n + "<div style='float:right;margin-top:10px'>" + x.funds + " KR in account</div>" : "<div style='color:rgba(0,0,0,0.3)'><a href='javascript:;' onclick='showWindow(5);' class='menuLink'>Login</a> to buy and unlock items from the store!</div>"
        }
    }, {
        header: "Select Skin",
        gen: function() {
            var t = "<div class='selItem'><div class='equipBtn' onclick='selectSkin(-1," + mt + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName'>Default</div><div class='itemCat'>Default Skin</div></div></div>";
            if (x)
                for (var e = x.skins.slice().sort(function(t, e) {
                    return v.store.skins[e.ind] && v.store.skins[t.ind] ? v.store.skins[e.ind].rarity - v.store.skins[t.ind].rarity : 0
                }), n = 0; n < e.length; ++n)
                    (w = v.store.skins[e[n].ind]) && !w.type && w.weapon == mt + 1 && (t += "<div class='selItem' style='margin-top:10px'><div class='equipBtn' onclick='selectSkin(" + e[n].ind + "," + (w.weapon - 1) + ")'><i class='material-icons'>&#xE037</i></div><div class='itemIcon'><img class='itemIconImg' src=''/></div><div class='itemInfo'><div class='itemName' style='color:" + v.store.rarities[w.rarity].color + "'>" + w.name + "<span style='color:rgba(0,0,0,0.3)'> x" + e[n].cnt + "</span></div><div class='itemCat'>by " + (w.creator || "Krunker.io") + "</div></div></div>");
            return t
        }
    }, {
        header: "Select Hat",
        gen: function() {
            return gt("selectHat", 1)
        }
    }, {
        header: "Select Back",
        gen: function() {
            return gt("selectBack", 2)
        }
    }, {
        header: "Community Mods",
        searchMods: function() {
            searchResults.innerHTML = "Loading...",
            g.send("srchM", moSrch.value, 1)
        },
        searchResp: function(t) {
            var e = "";
            if (t.length) {
                e += "<div style='height:10px'></div>";
                for (var n = 0; n < t.length; ++n)
                    e += "<div class='mapListItem'><a href='javascript:;' onclick='loadUserMod(&quot;" + t[n].mod_name + "&quot;,&quot;" + t[n].mod_url + "&quot;,&quot;" + t[n].mod_id + "&quot;)'>" + t[n].mod_name + "</a><span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[n].creatorname + "'>" + t[n].creatorname + "</a></span><span style='float:right'>" + t[n].mod_votes + "</span></div>"
            } else
                e = "No mods found!";
            document.getElementById("searchResults") && (document.getElementById("searchResults").innerHTML = e)
        },
        resp: function(t, e) {
            if (modsList)
                if (t && t.length)
                    if (e)
                        modsList.innerHTML = e;
                    else {
                        for (var n = "<div style='margin-bottom:-5px;margin-top:-5px;'>Search</div><input type='text' id='moSrch' class='smlInput' placeholder='Mod Name' /><a class='menuLink' style='margin-left:20px' onclick='windows[17].searchMods()'>Search</a><div style='color:rgba(0,0,0,0.5);margin-top:5px' id='searchResults'></div>", i = ["<div style='margin-bottom:5px;margin-top:15px'>Hot</div>", "<div style='margin-top:20px;margin-bottom:5px'>New Mods</div>", "<div style='margin-top:20px;margin-bottom:5px'>Your Favorites</div>"], r = 0; r < t.length; ++r)
                            if (t[r]) {
                                t[r].length && (n += i[r]);
                                for (var s = 0; s < t[r].length; ++s)
                                    n += "<div class='mapListItem'><a href='javascript:;' onclick='loadUserMod(&quot;" + t[r][s].mod_name + "&quot;,&quot;" + t[r][s].mod_url + "&quot;,&quot;" + t[r][s].mod_id + "&quot;)'>" + t[r][s].mod_name + "</a><span style='color:rgba(0,0,0,0.2)'> by <a target='_blank' class='grey' href='/social.html?p=profile&q=" + t[r][s].creatorname + "'>" + t[r][s].creatorname + "</a></span><span style='float:right'>" + t[r][s].mod_votes + "</span></div>"
                            }
                        modsList.innerHTML = n
                    }
                else
                    modsList.innerHTML = "No Mods found"
        },
        gen: function() {
            return g.send("getMods"),
            "<div style='color:rgba(0,0,0,0.3)' id='modsList'>Loading...</div>"
        }
    }, {
        header: "Publish Mod",
        gen: function() {
            return x ? "<div style='margin-top:0px' class='setHed'>Publish Mod</div><input id='pubModName' type='text' placeholder='Mod Name' class='mapInput' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'/><input id='pubModURL' type='text' placeholder='Mod URL' class='mapInput' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false'/><div id='modUpResp' style='color:rgba(0,0,0,0.3);margin-top:8px'></div><div class='mapLoadButton' style='margin-top:6px' onclick='uploadCustomMod()'>Publish/Update</div>" : "<div style='color:rgba(0,0,0,0.3);'><a href='javascript:;' onclick='showWindow(5)' class='menuLink'>Login</a> to publish mods!</div>"
        }
    }],
    rt = 0; rt < windows.length; ++rt)
        windows[rt].html = "";
    var vt = 0;
    window.updateWindow = function(t, e) {
        "block" == windowHolder.style.display && (vt == t && null != t ? showWindow(t, !0) : e && showWindow(vt, !0))
    }
    ,
    window.showWindow = function(t, e) {
        window.idleTimer = 0,
        e || t && ("block" != windowHolder.style.display || t != vt) ? (f.toggleMenu(!0),
        windows[t - 1].gen ? menuWindow.innerHTML = windows[t - 1].gen() : menuWindow.innerHTML = windows[t - 1].html,
        vt = t,
        windowHeader.innerHTML = windows[t - 1].header,
        f.toggleWindow(!0)) : (f.toggleWindow(!1),
        S.inputChanger = null)
    }
    ;
    var yt, xt, wt, bt, Mt, _t = spinWindow, St = _t.getContext("2d"), Et = .95, Tt = .6, At = null, Lt = !1, Rt = 0, Pt = 0, Ct = 0, It = 0, Ot = 0, Dt = 30, kt = 300, Bt = !0, Nt = 0, Ut = 0, zt = new h.PerspectiveCamera(45,1,.1,100), Ft = new h.WebGLRenderer({
        precision: "mediump",
        antialias: !1,
        alpha: !0
    });
    function Ht(t, e) {
        var n = v.store.skins[e];
        n && Fe(null, "<span style='color:#fff'>" + t + "</span> unboxed <span style='color:" + v.store.rarities[n.rarity].color + "'>" + n.name + "</span>", !0)
    }
    function Gt(t, e, n, i) {
        if (Lt = !1,
        i)
            ;
        else {
            if (At = v.store.skins[e],
            spinItemName.innerHTML = At.name + "<div style='color:rgba(255,255,255,0.5)'>by " + (At.creator || "Krunker.io") + "</div>",
            Pt = 2 * Math.PI * (t / 100 + 13) + Math.PI / 2,
            x)
                if (x.funds = n,
                spinKR.innerHTML = x.funds + " KR",
                x.skins.some(t=>t.ind === e)) {
                    var r = x.skins.find(t=>t.ind === e);
                    r && r.cnt++
                } else
                    x.skins.push({
                        ind: e,
                        cnt: 1
                    });
            spinRotation = 0,
            Nt = 0,
            spinCost.innerHTML = "",
            (yt = new h.Scene).add(new h.AmbientLight(5197647));
            var s = new h.DirectionalLight(16777215,.5);
            s.position.set(3, 1, 0),
            yt.add(s);
            var o = At.type ? At : v.store.previews[At.weapon] || {};
            (xt = u.genObj3D(0, 1 + (o.yOff || 0), o.xOff || 0)).rotateX(-Math.PI / 7),
            xt.rotateY(Math.PI + .5),
            xt.rotateZ(-.5),
            u.loadMesh({
                src: v.store.types[At.type || 0] + (At.type ? At.id : At.weapon),
                texSrc: At.type ? At.tex ? (1 == At.type ? "hats/hat_" : "body/body_") + At.id + "_" + At.tex : null : "weapons/skins/weapon_" + At.weapon + "_" + At.id,
                glowText: !At.type && At.glow,
                emissive: At.glow ? 16777215 : null,
                noGreen: !0,
                uv2: !0,
                fillScale: 60,
                centerZ: !0
            }, 0, 0, 0, (At.type ? Math.PI : Math.PI / 2) + (o.xRot || 0), 2.2 * (o.scl || 1), xt),
            yt.add(xt),
            zt.lookAt(yt.position)
        }
    }
    function jt(t, e, n) {
        windows[12].resp(t, e, n)
    }
    function Vt(t, e) {
        windows[17].resp(t, e)
    }
    function Wt(t, e, n) {
        windows[t].mapsLoaded(e, n)
    }
    function Yt(t, e) {
        windows[t].searchResp(e)
    }
    Ft.setPixelRatio(.6 * window.devicePixelRatio),
    zt.position.y = 10,
    spinItemCanvas.appendChild(Ft.domElement),
    window.prizeWheel = function(t) {
        wt = v.store.wheels[t],
        Ct = t,
        showWindow(0),
        Rt = 0,
        Bt = !Lt,
        Pt = 0,
        Ut = 0,
        spinRotation = 0,
        It = Ot = 0,
        menuHider.style.display = "none",
        spinItem.style.display = "none",
        spinItemName.style.display = "none",
        spinUI.style.display = "block",
        zt.position.x = kt,
        spinButton.style.opacity = 1,
        spinText.style.display = "table-cell",
        spinHeader.innerHTML = "SPIN",
        spinCost.innerHTML = "-" + wt.price + "KR";
        for (var e = "<div style='font-size:50px;color:#fff'>" + wt.name.toUpperCase() + "</div>", n = 0; n < v.store.rarities.length; ++n)
            e += "<div style='margin-top:5px;color:#fff'>" + (w = v.store.rarities[n]).name + "<span style='color:rgba(255,255,255,0.5)'>&emsp;" + wt.rarities[n] + "%</span><div class='colCub' style='background-color:" + w.color + "'></div></div>";
        spinInfo.innerHTML = e,
        x && (spinKR.innerHTML = x.funds + " KR")
    }
    ,
    spinButton.onclick = function(t) {
        t.stopPropagation(),
        t.preventDefault(),
        window.idleTimer = 0,
        g && !Lt && Bt && x && x.funds >= wt.price && (Lt = !0,
        Bt = !1,
        g.send("spin", Ct),
        spinHeader.innerHTML = "",
        spinCost.innerHTML = "Purchasing...",
        SOUND.play("buy_1", .1))
    }
    ,
    spinUI.onclick = function(t) {
        showWindow(0),
        menuHider.style.display = "block",
        spinUI.style.display = "none",
        g && g.send("unbx")
    }
    ,
    window.selectHostMap = function(t) {
        bt = t,
        showWindow(8)
    }
    ,
    window.selectHostMod = function(t) {
        Mt = t,
        showWindow(8)
    }
    ,
    window.openHostWindow = function() {
        bt = null,
        Mt = null,
        showWindow(8)
    }
    ;
    var qt, Xt = 1e4, Zt = "true" == getSavedVal("krk_record");
    function Kt(t, e) {
        try {
            mapUpResp && !e && (mapUpResp.innerHTML = t)
        } catch (t) {}
        try {
            modUpResp && e && (modUpResp.innerHTML = t)
        } catch (t) {}
    }
    window.enableRecord = function(t) {
        Zt = t,
        saveVal("krk_record", t)
    }
    ,
    enableRecord(Zt),
    window.uploadCustomMap = function() {
        mapUpResp && (mapUpResp.innerHTML = "Loading..."),
        g.send("uploadM", mapDataNew.value)
    }
    ,
    window.uploadCustomMod = function() {
        modUpResp && (modUpResp.innerHTML = "Loading..."),
        g.send("uploadMo", pubModName.value, pubModURL.value)
    }
    ,
    zip.workerScriptsPath = "./libs/";
    var Jt = new FileReader;
    function Qt(t) {
        this.imgAsDataURL = "",
        this.process = function(e) {
            if (this.imgAsDataURL = URL.createObjectURL(e),
            this.imgAsDataURL && t) {
                try {
                    var n = new Image;
                    n.onload = function() {
                        u.updateTexture(t.replace("textures/", "").replace(".png", ""), this)
                    }
                    ,
                    n.src = this.imgAsDataURL
                } catch (t) {}
                ne.close()
            }
        }
    }
    function $t(t) {
        this.filename = t;
        var e = this;
        this.process = function(t) {
            var n = URL.createObjectURL(t);
            if (n) {
                try {
                    var i = e.filename.split("/")[1];
                    "ambient_1" == i && SOUND.stop("ambient_1"),
                    SOUND.sounds[i] = new Howl({
                        src: [n],
                        format: "mp3"
                    }),
                    SOUND.sounds[i + "3d"] = new Howl({
                        src: [n],
                        format: "mp3"
                    }),
                    "ambient_1" == i && SOUND.play("ambient_1", .12, !0)
                } catch (t) {}
                ne.close()
            }
        }
    }
    Jt.onload = function(t) {
        var e = t.target.result;
        loadModPack(e)
    }
    ;
    var te, ee, ne = new function() {
        this.init = function(t, e) {
            this.numFiles = e,
            this.progress = 0,
            this.reader = t
        }
        ,
        this.close = function() {
            this.reader && (this.progress++,
            document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "extracting " + this.progress + "/" + this.numFiles),
            this.numFiles === this.progress && (spriteIndex = 0,
            document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "success!"),
            this.reader.close(),
            this.reader = void 0))
        }
    }
    ;
    function ie(t, e) {
        z = e,
        ve(),
        ue(t),
        f.toggleMenu(!1),
        function() {
            Ie.length = 0,
            Ue.length = 0,
            f.toggleGameUI(!0),
            m.reset(),
            S.reset(),
            se(!1),
            v.players.forcePos(),
            k.length = 0,
            window.loading = !1,
            window.idleTimer = 0,
            teamName.innerHTML = "",
            instructions.innerHTML = "CLICK TO PLAY",
            _ = null;
            for (var t = 0; t < playerInfos.children.length; t++)
                playerInfos.children[t].style.display = "none"
        }(),
        f.toggleControlUI(S.enabled),
        v.updateUI()
    }
    function re(t, e, n, i, r, s, o, a, c) {
        if (a ? a.data && v.customMap(a.data, a.id, a.creator, null, !0) : v.map.setMaps(),
        L = r && r == g.socketId,
        mapVote.innerHTML = "",
        ee = 0,
        r && a && void 0 != a.id && (mapVote.innerHTML = "<i id='mapVoteD' onclick='voteMap(" + a.id + ",-1)' class='material-icons vote'>thumb_down</i><i id='mapVoteU' onclick='voteMap(" + a.id + ",1)' class='material-icons vote'>thumb_up</i>"),
        v.applyConfig(s, a && a.featured),
        v.init(t, e, c),
        v.setObjective(i),
        teamScores.style.display = "none",
        v.mode.teams && n) {
            teamScores.style.display = "inline-block";
            for (var l = "", h = 0; h < n.length; ++h)
                l += "<div class='tScore'><div id='tScoreC" + n[h][0] + "' class='tScoreC'></div><span class='tScoreT' id='tScoreV" + n[h][0] + "'>" + n[h][1] + "</span></div>";
            teamScores.innerHTML = l
        }
        o && "" != o && loadModPack(o, !0);
        var p = 0;
        for (h = 0; h < v.map.manager.objects.length; ++h)
            v.map.manager.objects[h].score && p++;
        p ? (scoreZoneCount.style.display = "inline-block",
        scoreZoneCount.innerHTML = "<i class='material-icons' style='color:#fff;font-size:35px'>flag</i> " + p) : scoreZoneCount.style.display = "none",
        D = null,
        S.reset();
        var d = v.map.maps[t];
        S.moveCam(d.camPos[0], d.camPos[1], d.camPos[2]),
        S.rotateCam(0, 0, 0),
        u.clearSprays(),
        u.scene.add(S.object),
        y = null,
        playerInfos.innerHTML = "",
        v.mode.objective && v.map.manager.objectives.length > 0 && (playerInfos.innerHTML += "<img id='objectiveIcon' src='./textures/objective_1.png'/>"),
        killStreakHolder.innerHTML = "",
        killsVal.innerHTML = 0,
        U = 0,
        nt(),
        S.masterLock = !1,
        instructions.innerHTML = "CLICK TO PLAY"
    }
    function se(t) {
        window.locked = t,
        blocker.style.display = t ? "block" : "none"
    }
    function oe(t, e, n) {
        instructions.innerHTML = "CLICK TO PLAY",
        victoryText.innerHTML = e ? "VICTORY" : "DEFEAT",
        victorySub.src = "./img/" + (e ? "sub" : "defeat") + ".png",
        y && y.active ? (f.showEndScreen(),
        D = i.endAnim,
        setTimeout(function() {
            g.connected && (S.disable(),
            ae(n))
        }, i.endAnim)) : t && (S.disable(),
        f.showEndScreen(),
        ae(n))
    }
    function ae(t) {
        if (t && t.length) {
            endTable.style.display = "inline-block";
            for (var e = "<tr><th>Rank</th>", n = v.mode.endStats || i.endStats, r = n.length, s = 1; s < r; ++s)
                e += "<th>" + p.capFirst(n[s]) + "</th>";
            e += "</tr>";
            var o = 1;
            for (s = 0; s < t.length; ) {
                if (w = v.players.findBySid(t[s])) {
                    e += "<tr style='" + (s + r >= t.length ? "border-bottom:none" : "") + "'><td style='color:#fff'>" + o + ".</td>";
                    for (var a = 1; a < r; ++a)
                        e += "<td " + (1 != a ? "" : "style='color:" + (y && y.sid == w.sid ? "#fff'" : y && y.team && y.team == w.team ? "rgba(255,255,255,0.6)'" : "#eb5656'")) + ">" + (t[s + a] || 0) + (1 == a && w.clan ? "<span style='color:#fff'> [" + w.clan + "]<span>" : "") + "</td>"
                }
                e += "</tr>",
                o++,
                s += r
            }
            endTable.innerHTML = e
        } else
            endTable.style.display = "none"
    }
    function ce(t, e, n) {
        v.playerSound(t, e, n)
    }
    window.loadUserMod = function(t, e, n) {
        P ? (P = !1,
        selectHostMod(e)) : (showWindow(4),
        document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "loading..."),
        loadModPack(e, !0, t, n))
    }
    ,
    window.loadModURL = function() {
        modURL.value && loadModPack(modURL.value, !0)
    }
    ,
    window.loadModPack = function(t, e, n, i) {
        if (B) {
            modVote.innerHTML = "",
            void 0 != n && void 0 != i && (te = 0,
            modVote.innerHTML = "<i id='modVoteD' onclick='voteMod(" + i + ",-1)' class='material-icons vote'>thumb_down</i><i id='modVoteU' onclick='voteMod(" + i + ",1)' class='material-icons vote'>thumb_up</i></br>" + n + " Mod");
            try {
                t = t.replace("dropbox.com", "dl.dropboxusercontent.com");
                var r = ""
                  , s = e ? new zip.HttpReader(t) : new zip.Data64URIReader(t);
                zip.createReader(s, function(t) {
                    t.getEntries(function(e) {
                        if (e.length) {
                            ne.init(t, e.length);
                            for (var n = 0; n < e.length; n++) {
                                var i = e[n];
                                i.directory ? ne.close() : "textures" == (r = i.filename.split("/")[0]) ? i.getData(new zip.BlobWriter("image/png"), new Qt(i.filename).process, function(t, e) {}) : "sound" == r && i.getData(new zip.BlobWriter("audio/mp3"), new $t(i.filename.replace(".mp3", "")).process, function(t, e) {})
                            }
                        }
                    })
                }, function(t) {
                    document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "mod error!")
                })
            } catch (t) {
                document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "mod error!")
            }
        } else
            document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "mods disabled.")
    }
    ,
    window.loadMod = function() {
        if (modInput.files && modInput.files[0]) {
            var t = modInput.files[0];
            "zip" == t.name.split(".").pop().toLowerCase() ? (document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "loading mod..."),
            Jt.readAsDataURL(t)) : document.getElementById("modLInfo") && (document.getElementById("modLInfo").innerHTML = "invalid mod file!")
        }
    }
    ,
    window.voteMod = function(t, e) {
        if (x) {
            var n = document.getElementById("modVoteU")
              , i = document.getElementById("modVoteD")
              , r = 0;
            1 == e ? (r = 1,
            1 == te && (r = 0)) : -1 == e && (r = -1,
            -1 == te && (r = 0)),
            te = r,
            n.className = 1 == te ? "material-icons vote a" : "material-icons vote",
            i.className = -1 == te ? "material-icons vote a" : "material-icons vote",
            g.send("vote", x.id, loginToken, t, r, 1)
        }
    }
    ,
    window.voteMap = function(t, e) {
        if (x) {
            var n = document.getElementById("mapVoteU")
              , i = document.getElementById("mapVoteD")
              , r = 0;
            1 == e ? (r = 1,
            1 == ee && (r = 0)) : -1 == e && (r = -1,
            -1 == ee && (r = 0)),
            ee = r,
            n.className = 1 == ee ? "material-icons vote a" : "material-icons vote",
            i.className = -1 == ee ? "material-icons vote a" : "material-icons vote",
            g.send("vote", x.id, loginToken, t, r)
        }
    }
    ;
    var le = getSavedVal("sprayindex") || 0;
    function he(t, e, n, i, r, s, o) {
        u.addSpray(t, e, n, i, r, s, o, v.sprays[e].opacity)
    }
    function pe(t) {
        0 == t ? SOUND.play("siren_0") : 1 == t && (SOUND.play("nuke_0"),
        nukeFlash.style.display = "block",
        nukeFlash.style.opacity = 1,
        u.shake(1))
    }
    function ue(t, e) {
        e ? endTimer.innerHTML = "Next Round in " + t : (timerVal.innerHTML = t,
        timerDisplay.style.display = "0:00" == t ? "none" : "inline-block")
    }
    function de(t) {
        for (var e = 0; e < t.length; ) {
            var n = t[e] == g.socketId;
            if ((w = v.players.add(t[e], t[e + 1], t[e + 2], t[e + 3], t[e + 4], t[e + 5], t[e + 6], t[e + 11], t[e + 12], t[e + 13], n)).health = null == t[e + 7] ? w.maxHealth : t[e + 7],
            w.team = t[e + 8],
            w.level = t[e + 9],
            w.clan = t[e + 10],
            n) {
                if (y = w,
                v.mode.showTeam && (teamName.innerHTML = y.team),
                y.team) {
                    var i = document.getElementById("tScoreC" + y.team);
                    i && (i.className = "tScoreC you")
                }
            } else
                playerInfos.innerHTML += "<div id='pInfo" + w.sid + "' class='playerInfo'>" + (w.level ? "<div class='playerRank' id='pInfoR" + w.sid + "'>" + w.level + "</div>" : "") + "<div class='pInfoH' id='pInfoH" + w.sid + "'>" + w.name + (w.clan ? "<span style='color:rgba(255,255,255,0.4)'> [" + w.clan + "]</span>" : "") + "</div><div></div><div class='playerHealth' id='pInfoHB" + w.sid + "'><div class='healthBar" + (z && z == w.team ? "" : "E") + "' id='healthBarE" + w.sid + "'></div></div></div>";
            Ne(w.health, w.sid, null, null),
            e += 14
        }
    }
    function fe(t) {
        if (g.send("p"),
        y) {
            y.x = t[1],
            y.y = t[2],
            y.z = t[3],
            y.xVel = t[4],
            y.yVel = t[5],
            y.zVel = t[6],
            y.onGround = t[7],
            y.didJump = t[8],
            y.onLadder = t[9],
            y.aimVal = t[10],
            y.crouchVal = t[11],
            v.players.swapWeapon(y, 0, !1, t[12]);
            var e = "#9eeb56";
            (F = t[13]) >= 150 ? e = "#ff4b42" : F >= 50 && (e = "#ffd542"),
            pingDisplay.innerHTML = (F || 0) + "<i class='material-icons' style='color:" + e + ";font-size:30px'>signal_cellular_alt</i>";
            for (var n = 0; n < S.tmpInputs.length; )
                S.tmpInputs[n][0] <= t[0] ? S.tmpInputs.splice(n, 1) : (y.procInputs(S.tmpInputs[n], v, !0),
                n++)
        }
    }
    function me() {
        if (!v.singlePlayer && y && y.active)
            for (var t = 0; t < v.players.list.length; ++t)
                (w = v.players.list[t]).active && w.objInstances && w != y && (w.isVisible = !0,
                z && z == w.team || !v.config.nameTags && !v.mode.hideNames && null == v.canSee(y, w.x, w.y, w.z) || (w.isVisible = !0),
                v.players.toggleLOD(w, !(null != v.canSee(y, w.x, w.y, w.z, 10))))
    }
    function ge(t) {
        gameMessage.innerHTML = t || ""
    }
    function ve() {
        for (var t = 0; t < v.players.list.length; ++t) {
            w = v.players.list[t];
            var e = document.getElementById("healthBarE" + w.sid);
            e && (e.className = "healthBar" + (z && z == w.team ? "" : "E"))
        }
    }
    function ye(t, e) {
        if (w = v.players.findBySid(t))
            if (w.team = e,
            w == y)
                z = e,
                v.mode.showTeam && (teamName.innerHTML = z),
                ve();
            else {
                var n = document.getElementById("healthBarE" + t);
                n && (n.className = "healthBar" + (z && z == w.team ? "" : "E"))
            }
    }
    function xe(t) {
        v.players.hideAll();
        for (var e = 0; e < t.length; )
            (w = v.players.findBySid(t[e])) && w != y && (w.objInstances.visible = !w.lodActive,
            w.latestData = !0,
            w.forcePos ? (w.x = t[e + 1],
            w.y = t[e + 2],
            w.z = t[e + 3],
            w.xDire = t[e + 4],
            w.yDire = t[e + 5],
            w.interpolate = !1,
            w.forcePos = !1) : (w.dt = 0,
            w.x1 = w.x,
            w.x2 = t[e + 1],
            w.y1 = w.y,
            w.y2 = t[e + 2],
            w.z1 = w.z,
            w.z2 = t[e + 3],
            w.xDir1 = w.xDire,
            w.xDir2 = t[e + 4],
            w.yDir1 = w.yDire,
            w.yDir2 = t[e + 5],
            w.interpolate = !0),
            w.onGround = t[e + 6],
            w.crouchVal = t[e + 7],
            v.players.swapWeapon(w, 0, !1, t[e + 8])),
            e += 9
    }
    function we(t) {
        v.players.remove(t)
    }
    function be(t, e, n, r) {
        if (w = v.players.findBySid(t),
        b = v.players.findBySid(e),
        w) {
            if (v.players.kill(w),
            w.isYou) {
                var s = "";
                if (b) {
                    w != b && (S.camLookAt(b.x, b.y + b.height - i.cameraHeight, b.z),
                    b.interpolate = !1,
                    b.isVisible = !0),
                    s = "<img id='kCProfile' src='./textures/classes/icon_" + b.classIndex + ".png' />",
                    s += "<div id='kCName'>" + (b ? b.name : "You") + (b.clan ? "<span style='color:rgba(255,255,255,0.3)'> [" + b.clan + "]</span>" : "") + "</div>";
                    var o = b.loadout.indexOf(n[0])
                      , a = void 0 != b.skins[o] ? b.skins[o] : null;
                    void 0 != a && (a = v.store.skins[a]),
                    s += "<br/><div id='kCInfo' style='color:" + (a ? v.store.rarities[a.rarity].color : "rgba(255,255,255,0.7)") + "'>[" + (a ? a.name : v.weapons[n[0]].name) + "] <span id='kCInfoS'>+" + n[1] + "</span></div>"
                }
                killCard.innerHTML = s,
                f.toggleGameUI(!1),
                setTimeout(function() {
                    nt()
                }, i.deathDelay)
            }
            if (!r) {
                var c = w == y ? "<span style='color:#fff'>You</span>" : "<span style='color:" + (z && z == w.team ? "#9eeb56" : "#eb5656") + "'>" + w.name + "</span>"
                  , l = b == y ? "<span style='color:#fff'>You</span>" : b ? "<span style='color:" + (z && z == b.team ? "#9eeb56" : "#eb5656") + "'>" + b.name + "</span>" : "";
                Fe(null, b ? l + " killed " + c : c + " committed " + i.suicides[p.randInt(0, i.suicides.length - 1)], !0)
            }
        }
    }
    function Me(t, e) {
        if (y) {
            y.streaks[t] = e ? null : v.streaks[t];
            for (var n = "", i = 0; i < v.streaks.length; ++i)
                y.streaks[i] && (n += "<div class='killStreakItem' style='background-image: url(&quot;./img/streaks/" + i + ".png&quot;)'><span>[" + (i + 1) + "]</span></div>");
            killStreakHolder.innerHTML = n
        }
    }
    function _e(t, e) {
        (w = v.players.findBySid(t)) && Fe(null, (w == y ? "<span style='color:#fff'>You're</span>" : "<span style='color:" + (z && z == w.team ? "#9eeb56" : "#eb5656") + "'>" + w.name + "</span> is") + " on a " + e + " Kill Streak", !0)
    }
    function Se(t, e, n) {
        w = v.players.findBySid(t),
        b = v.players.findBySid(e),
        w && Fe(null, (w == y ? "<span style='color:#fff'>You</span>" : "<span style='color:" + (z && z == w.team ? "#9eeb56" : "#eb5656") + "'>" + w.name + "</span>") + " " + n + " " + (b == y ? "<span style='color:#fff'>You</span>" : b ? "<span style='color:" + (z && z == b.team ? "#9eeb56" : "#eb5656") + "'>" + b.name + "</span>" : ""), !0)
    }
    function Ee(t) {
        if (y) {
            for (var e = "", n = 1, i = 0; i < t.length; i += 6)
                e += "<div class='leaderItem'>",
                e += "<div class='leaderCounter'>" + n + ".</div>",
                e += "<div class='leaderName" + (t[i] == y.sid ? "M" : z && z == t[i + 2] ? "F" : "") + "'>" + t[i + 1] + (t[i + 4] ? "<span style='color:#fff'> [" + t[i + 4] + "]</span>" : "") + (t[i + 5] ? " <i class='material-icons' style='color:#40C4FF'>check_circle</i>" : "") + "</div>",
                e += "<div class='leaderScore'>" + p.formatNum(t[i + 3]) + "</div>",
                e += "</div>",
                n++;
            leaderContainer.innerHTML = e
        }
    }
    function Te(t, e, n, r, s, o) {
        if (y && y.active) {
            if (w = v.players.findBySid(t)) {
                var a = w.y + w.height - i.cameraHeight - w.crouchVal * i.crouchDst
                  , c = p.getDistance3D(w.x, a, w.z, e, n, r)
                  , l = p.getDirection(w.z, w.x, r, e)
                  , h = p.getDirection(p.getDistance(w.x, w.z, e, r), n, 0, a);
                d.physObj(w.x, a, w.z, l, h, c, 0)
            }
            void 0 != s && null == v.canSee(y, e, n, r) && d.effect(e, n, r, s, o, 0)
        }
    }
    function Ae(t, e, n, i, r, s, o) {
        var a = v.projectiles.types[s];
        d.physObj(t, e, n, i, r, v.projectiles.types[s].range, null, null, a, o)
    }
    function Le(t) {
        d.disablePhys(t)
    }
    function Re(t, e, n, r) {
        if (y) {
            var s = 1 - p.getDistance3D(t, e, n, y.x, y.y, y.z) / i.explosionRange;
            s > 0 && u.shake(.14 * s),
            SOUND.play3D("explosion", t, e, n, 1, p.randFloat(.9, 1.1)),
            d.ExplosionManager.explodeAt(t, e, n, .08 * r)
        }
    }
    function Pe(t, e) {
        var n = document.getElementById("tScoreV" + t);
        n && (n.innerHTML = e)
    }
    function Ce(t) {
        U += t,
        m.animateText(scoreText, "+" + U, 100, .38, 1100, 100, 0, function() {
            U = 0
        }),
        y.score += t
    }
    window.selectSpray = function(t) {
        saveVal("sprayindex", t),
        le = t,
        showWindow(3)
    }
    ;
    var Ie = [];
    function Oe(t, e, n) {
        ke(t),
        e && SOUND.play("headshot"),
        killsVal.innerHTML = n
    }
    function De() {
        ke(["Assist", i.assistScore])
    }
    function ke(t) {
        if (t) {
            for (var e = 0 == Ie.length, n = 0; n < t.length; ++n)
                "" == t[n] ? n++ : Ie.push(t[n]);
            e && function t(e) {
                Ie.length > 0 && m.animateText(chalName, "<span class='cTxt'>" + Ie[0] + "</span><div id='chalScore'>+" + Ie[1] + "</div>", 130, .4, i.medalAnim, 100, e, function() {
                    Ie.splice(0, 2),
                    t(0)
                })
            }(i.medalDelay)
        }
    }
    var Be = 0;
    function Ne(t, e, n, r) {
        if (y && (w = void 0 == e || null == e ? y : v.players.findBySid(e))) {
            w.health = t,
            w.health > w.maxHealth && (w.maxHealth = w.health);
            var s = t / w.maxHealth * 100;
            w == y ? (healthValue.innerHTML = t + " <span id='maxHP'>|" + w.maxHealth + "</span>",
            healthBarH.style.width = s + "%",
            healthBarH.style.backgroundColor = s <= 35 ? "#eb5656" : "#9eeb56",
            bloodDisplay.style.display = s <= 90 ? "block" : "none",
            bloodDisplay.style.opacity = 1 - s / 90,
            t < Be && (void 0 != n && null != n && function(t, e) {
                for (var n = null, r = 0; r < Ue.length; ++r)
                    if (!Ue[r].life) {
                        n = Ue[r];
                        break
                    }
                n || (n = {},
                Ue.push(n)),
                n.life = i.hitLife,
                n.x = t,
                n.z = e
            }(n, r),
            SOUND.play("impact_0", .8)),
            Be = t) : document.getElementById("healthBarE" + e).style.width = s + "%"
        }
    }
    var Ue = [];
    function ze(t, e, n) {
        SOUND.play("hit_0", 3),
        m.animateDiv(hitmarker, 400, 100, 14)
    }
    function Fe(t, e, n) {
        for (chatList.innerHTML += n ? "<div class='chatItem'><span class='chatMsg'>" + e + "</span></div><br/>" : "<div class='chatItem'>" + (t || "unknown") + ": <span class='chatMsg'>" + e + "</span></div><br/>"; chatList.scrollHeight >= 250; )
            chatList.removeChild(chatList.childNodes[0])
    }
    function He() {
        C = Date.now(),
        I = C - O,
        I = Math.min(I, i.dltMx),
        O = C,
        D > 0 && (D -= I) <= 0 && (D = 0),
        null != D && (I *= D / i.endAnim),
        y || (N += 1e-4 * I,
        N %= 2 * Math.PI,
        S.rotateCam(N, 0, 0)),
        function(t) {
            if ("block" == spinUI.style.display && (_t.width = _t.clientWidth,
            _t.height = _t.clientHeight,
            spinItemCanvas.style.width = 1.5 * _t.clientWidth + "px",
            spinItemCanvas.style.height = 1.5 * _t.clientWidth + "px",
            Ft.setSize(1.5 * _t.clientWidth, 1.5 * _t.clientWidth),
            _t.width > 0)) {
                Rt < 1 && (Rt += .008 * t) >= 1 && (Rt = 1),
                It < Ot && ((It += .4 * t) >= Ot && (It = Ot),
                spinItem.style.display = "block",
                spinItemName.style.display = "inline-block"),
                spinRotation != Pt && (spinRotation += .024 * (Pt - spinRotation),
                (Ut -= .024 * (Pt - spinRotation)) <= 0 && (Ut += Math.PI / 1.5,
                SOUND.play("tick_0", .2)),
                Pt - spinRotation <= .002 && (spinRotation = Pt,
                Ot = 100 - wt.rarities[At.rarity],
                SOUND.play("reward", .3),
                g && g.send("unbx"),
                At.rarity >= 1 && SOUND.play("cheer_0", .1)));
                var e = 1 - (Ot ? It / Ot : 0);
                St.translate(2, 2);
                var n = _t.width / 2 * Et * Rt;
                spinButton.style.opacity = e;
                var i = .3 * n * (1 - e);
                spinButton.style.width = 2 * n * Tt * .8 + i + "px",
                spinButton.style.height = 2 * n * Tt * .8 + i + "px",
                spinText.style.fontSize = 2 * n * Tt * .15 + i + "px",
                spinCost.style.fontSize = 2 * n * Tt * .08 + i + "px",
                St.fillStyle = "#fff",
                St.beginPath(),
                St.arc(_t.width / 2, _t.height / 2, n, 0, 2 * Math.PI),
                St.closePath(),
                St.fill();
                var r = 0;
                if (St.save(),
                St.translate(_t.width / 2, _t.height / 2),
                Ot) {
                    for (var s = 0, o = 0; o < v.store.rarities.length; o++) {
                        if (At.rarity == o) {
                            s += wt.rarities[o] / 2;
                            break
                        }
                        s += wt.rarities[o]
                    }
                    s /= 100,
                    s = 2 * Math.PI * s * (It / Ot) % (2 * Math.PI),
                    St.rotate(s - Math.PI * (It / Ot))
                }
                for (o = 0; o < v.store.rarities.length; o++) {
                    w = v.store.rarities[o],
                    St.fillStyle = w.color,
                    St.beginPath();
                    var a = wt.rarities[o];
                    Ot && (At.rarity == o ? a += It : a -= It * (wt.rarities[o] / Ot)),
                    a > 0 && (St.moveTo(0, 0),
                    St.arc(0, 0, .95 * n, r, r + 2 * Math.PI * (a / 100), !1),
                    St.lineTo(0, 0),
                    St.fill()),
                    r += 2 * Math.PI * (a / 100)
                }
                St.restore(),
                St.fillStyle = "#F44336",
                St.save(),
                St.translate(_t.width / 2, _t.height / 2),
                St.rotate(spinRotation),
                St.beginPath();
                var c = (spinButton.getBoundingClientRect().width / spinButton.offsetWidth - 1) * (n * Tt) * .3;
                if (St.moveTo(0, (n * Tt * -1.2 - c) * e),
                St.lineTo(n * Tt * e, 0),
                St.lineTo(-n * Tt * e, 0),
                St.closePath(),
                St.fill(),
                St.restore(),
                St.fillStyle = "#fff",
                St.beginPath(),
                St.arc(_t.width / 2, _t.height / 2, n * Tt, 0, 2 * Math.PI),
                St.closePath(),
                St.fill(),
                "block" == spinItem.style.display && yt) {
                    var l = 1 - Math.abs(zt.position.x - Dt) / (kt - Dt);
                    spinItemName.style.opacity = l,
                    spinItemName.style.marginTop = .6 * n + "px",
                    spinItemName.style.fontSize = n / 6.5 * l + "px",
                    spinItemName.children[0].style.fontSize = n / 12 * l + "px",
                    spinItemName.style.padding = n / 20 * l + "px",
                    spinItemName.style.paddingLeft = n / 2 * l + "px",
                    spinItemName.style.paddingRight = n / 2 * l + "px",
                    zt.position.x != Dt && (zt.position.x -= .2 * (zt.position.x - Dt),
                    Math.abs(Dt - zt.position.x) <= .05 && (zt.position.x = Dt),
                    zt.lookAt(yt.position)),
                    Nt += .0018 * t,
                    xt.position.y += .012 * Math.sin(Nt),
                    xt.rotation.x -= 7e-4 * Math.sin(.85 * Nt),
                    Ft.render(yt, zt)
                }
            }
        }(I),
        S.update(I * v.config.deltaMlt),
        y && y.active && !window.locked && (S.skipScroll = !1,
        M = [S.getISN(), I * v.config.deltaMlt, S.xDr, S.yDr, i.movDirs.indexOf(S.moveDir), S.mouseDownL, S.mouseDownR || S.keys[S.aimKey] ? 1 : 0, S.keys[S.jumpKey] ? 1 : 0, S.keys[S.crouchKey] ? 1 : 0, S.keys[S.reloadKey] ? 1 : 0, S.scrollDelta],
        S.scrollDelta && (S.skipScroll = !0),
        S.scrollDelta = 0,
        S.tmpInputs.push(M),
        function(t) {
            if (Zt && y && y.active) {
                var e = {
                    time: C,
                    players: []
                };
                e.input = {
                    data: t,
                    classIndex: y.classIndex,
                    swapTime: y.swapTime,
                    reloadTimer: y.reloadTimer,
                    weaponIndex: y.weaponIndex,
                    reloads: y.reloads,
                    ammos: y.ammos,
                    recoilAnim: y.recoilAnim,
                    recoilAnimY: y.recoilAnimY,
                    recoilForce: y.recoilForce,
                    crouchVal: y.crouchVal,
                    didJump: y.didJump,
                    onGround: y.onGround,
                    onLadder: y.onLadder,
                    rampFix: y.rampFix,
                    aimVal: y.aimVal,
                    x: y.x,
                    y: y.y,
                    z: y.z,
                    xVel: y.xVel,
                    yVel: y.yVel,
                    zVel: y.zVel
                };
                for (var n = 0; n < v.players.list.length; ++n)
                    (w = v.players.list[n]) != y && w.active && e.players.push([w.sid, w.classIndex, w.weaponIndex, w.xDr, w.yDr, w.crouchVal, w.x, w.y, w.z]);
                for (qt.states.push(e),
                n = qt.states.length - 1; n >= 0; --n)
                    C - qt.states[n].time > Xt && qt.states.splice(n, 1)
            }
        }(M),
        y.procInputs(M, v),
        S.moveCam(y.x, y.y + y.height - i.cameraHeight, y.z),
        S.rotateCam(u.shakeX, u.shakeY + y.recoilAnimY * i.recoilMlt + .1 * y.landAnim, 0),
        f.updateCrosshair(Math.max(.05 * window.innerHeight, y.spread * G), y.aimVal * (y.reloadTimer > 0 ? 0 : 1)),
        v.singlePlayer || function(t) {
            for (var e = k.length ? 1 : 0; e < t.length; )
                if (2 == e && _ && _[2] == t[2] && _[3] == t[3])
                    k.push("f"),
                    e += 2;
                else {
                    if (5 == e && _ && _[5] == t[5] && _[6] == t[6] && _[7] == t[7] && _[8] == t[8] && _[9] == t[9] && _[10] == t[10]) {
                        k.push("f");
                        break
                    }
                    k.push(t[e]),
                    e++
                }
            _ = t
        }(M),
        Howler.pos(y.x, y.y + y.height - i.cameraHeight, y.z),
        Howler.orientation(Math.sin(S.xDr + Math.PI), S.yDr, Math.cos(S.xDr + Math.PI)),
        v.singlePlayer && y.y <= i.deathY && be(y.sid)),
        v.update(I, C, y),
        function(t) {
            var e = "";
            if (y && y.active)
                for (var n = 0; n < Ue.length; ++n)
                    Ue[n].life && (Ue[n].life -= t,
                    Ue[n].life <= 0 && (Ue[n].life = 0),
                    e += "<div class='hitInd' style='transform: translate(0, -50%) rotate(" + (S.xDr + p.getDirection(Ue[n].x, Ue[n].z, y.x, y.z)) + "rad);opacity:" + Ue[n].life / i.hitLife + "'></div>");
            hitHolder.innerHTML = e
        }(I),
        m.update(I),
        window.cs(g),
        "block" == nukeFlash.style.display && (nukeFlash.style.opacity -= .002 * I,
        nukeFlash.style.opacity <= 0 && (nukeFlash.style.opacity = 0,
        nukeFlash.style.display = "none")),
        "block" == menuHolder.style.display && i.isProd && !L && (window.idleTimer += I,
        window.idleTimer >= i.kickTimer && Ye("Kicked for inactivity")),
        window.notObst && g && g.connected && (R || g.send("oof"),
        R = !0),
        requestAnimFrame(He)
    }
    function Ge() {
        !v.singlePlayer && y && y.active && (g.send("i", k),
        k.length = 0)
    }
    function je(t) {
        instructionHolder.style.display = "block",
        instructions.innerHTML = "<span style='color: rgba(255, 255, 255, 0.6)'>" + t + "</span><br/><span style='color: rgba(255, 255, 255, 0.6)'>Try seeking a new server by clicking <a href='https://krunker.io'>here</a>.</span>",
        instructionHolder.style.pointerEvents = "all"
    }
    window.pressButton = function(t) {
        t == S.chatKey && (document.activeElement != chatInput ? chatInput.focus() : ("" != chatInput.value && (g.send("c", chatInput.value),
        chatInput.value = ""),
        chatInput.blur())),
        y && y.active && (t == S.recordKey && function() {
            if (Zt && y && y.active && qt.states.length) {
                for (var t = Object.assign({}, v.map.maps[v.mapIndex]), e = 0; e < t.objects.length; ++e)
                    t.objects[e].id = i.prefabIDS.indexOf(t.objects[e].id),
                    t.objects[e].t = i.textureIDS.indexOf(t.objects[e].t);
                var n = {
                    id: "clip_" + Date.now(),
                    mode: v.modeIndex,
                    map: t,
                    states: []
                };
                for (e = 0; e < qt.states.length; ++e)
                    if (e) {
                        var r = [];
                        r.push(qt.states[e].input.data),
                        qt.states[e].players.length && r.push(qt.states[e].players),
                        n.states.push(r)
                    } else
                        n.states.push(qt.states[e]);
                var s = document.createElement("a");
                s.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(JSON.stringify(n))),
                s.setAttribute("download", n.id),
                s.style.display = "none",
                document.body.appendChild(s),
                s.click(),
                document.body.removeChild(s)
            }
        }(),
        t == S.sprayKey && g.send("s"),
        t >= 49 && t <= 57 && g.send("k", t - 49))
    }
    ;
    var Ve = void 0;
    function We(t) {
        Ve = t,
        g.connected = !1,
        showWindow(0),
        S.disable(),
        f.hideUI(),
        f.hideDiscon(),
        je(t),
        g.socket.onclose = function() {}
        ,
        Ye = function() {}
    }
    function Ye(t, e) {
        Ve || v.singlePlayer || (g.socket.onclose = function() {}
        ,
        g && g.socket && g.socket.close(),
        e || (showWindow(0),
        S.disable(),
        f.hideUI(),
        f.hideDiscon(),
        je(t || "DISCONNECTED")))
    }
    function qe(t) {
        v.singlePlayer = !0,
        g && g.socket && g.socket.close(),
        g.send = function() {}
        ;
        try {
            re(0, null, null, null, null, {
                maps: [0]
            }, 0, {
                data: t
            }, !0)
        } catch (t) {}
        s("custMap"),
        nt(),
        window.history.replaceState({}, "Krunker Offline", "offline")
    }
    function Xe(t) {
        t ? (grecaptcha.render("captchaBtn", {
            sitekey: "6LchqW0UAAAAANOoHruD0Ql5aNJIZld4EwLiaf-W",
            callback: function(t) {
                g.send("load", t)
            }
        }),
        grecaptcha.execute()) : g.send("load")
    }
    function Ze() {
        !function() {
            loginToken = getSavedVal("krunker_token");
            var t = getSavedVal("krunker_username");
            loginToken && t && ct(1, [t, null, loginToken])
        }()
    }
    getSavedVal("consent") || (consentBlock.style.display = "block"),
    window.captchaCallback = function() {
        !function() {
            var t = getSavedVal("custMap");
            s("custMap"),
            t ? qe(t) : a.start(function(t, e, n) {
                var i = "//" + t + ":8008/?gameIndex=" + n;
                g.connect(i, function(t) {
                    if (t) {
                        if (void 0 != Ve)
                            return;
                        Ye()
                    } else {
                        nt();
                        var e = getSavedVal("mapToLoad");
                        s("mapToLoad"),
                        e && selectHostMap(e)
                    }
                }, {
                    init: re,
                    load: Xe,
                    ready: Ze,
                    start: ie,
                    cust: c,
                    pur: X,
                    uf: q,
                    gmsg: ge,
                    newG: l,
                    pc: qe,
                    cln: jt,
                    upMp: Kt,
                    mpsL: Wt,
                    modsL: Vt,
                    lock: se,
                    srchM: Yt,
                    spin: Gt,
                    unb: Ht,
                    end: oe,
                    pErr: purchaseError,
                    error: We,
                    dc: Ye,
                    ts: Pe,
                    t: ue,
                    n: pe,
                    0: de,
                    1: xe,
                    8: fe,
                    2: we,
                    3: be,
                    kst: _e,
                    ac: Se,
                    4: ze,
                    5: Ce,
                    6: Oe,
                    7: Ee,
                    9: Te,
                    10: De,
                    h: Ne,
                    s: ce,
                    sp: he,
                    ch: Fe,
                    vc: voiceChat,
                    a: lt,
                    ua: ot,
                    ex: Re,
                    st: Me,
                    pr: Ae,
                    tm: ye,
                    pre: Le,
                    obj: v.setObjective
                })
            }, function(t) {
                We(t)
            }),
            window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(t) {
                window.setTimeout(t, 1e3 / 60)
            }
            ,
            setInterval(Ge, i.clientSendRate),
            setInterval(me, i.nameVisRate),
            O = Date.now(),
            He()
        }()
    }
}
]);

